   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 2
  15              		.file	"matrix_common.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "quantum/matrix_common.c"
  20              		.section	.text.matrix_init_user,"ax",%progbits
  21              		.align	1
  22              		.weak	matrix_init_user
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	matrix_init_user:
  28              	.LFB343:
   1:quantum/matrix_common.c **** #include "quantum.h"
   2:quantum/matrix_common.c **** #include "matrix.h"
   3:quantum/matrix_common.c **** #include "debounce.h"
   4:quantum/matrix_common.c **** #include "wait.h"
   5:quantum/matrix_common.c **** #include "print.h"
   6:quantum/matrix_common.c **** #include "debug.h"
   7:quantum/matrix_common.c **** 
   8:quantum/matrix_common.c **** #ifndef MATRIX_IO_DELAY
   9:quantum/matrix_common.c **** #    define MATRIX_IO_DELAY 30
  10:quantum/matrix_common.c **** #endif
  11:quantum/matrix_common.c **** 
  12:quantum/matrix_common.c **** /* matrix state(1:on, 0:off) */
  13:quantum/matrix_common.c **** matrix_row_t raw_matrix[MATRIX_ROWS];
  14:quantum/matrix_common.c **** matrix_row_t matrix[MATRIX_ROWS];
  15:quantum/matrix_common.c **** 
  16:quantum/matrix_common.c **** #ifdef MATRIX_MASKED
  17:quantum/matrix_common.c **** extern const matrix_row_t matrix_mask[];
  18:quantum/matrix_common.c **** #endif
  19:quantum/matrix_common.c **** 
  20:quantum/matrix_common.c **** // user-defined overridable functions
  21:quantum/matrix_common.c **** 
  22:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_kb(void) { matrix_init_user(); }
  23:quantum/matrix_common.c **** 
  24:quantum/matrix_common.c **** __attribute__((weak)) void matrix_scan_kb(void) { matrix_scan_user(); }
  25:quantum/matrix_common.c **** 
  26:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_user(void) {}
  29              		.loc 1 26 51 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              		.loc 1 26 52 view .LVU1
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE343:
  39              		.section	.text.matrix_init_kb,"ax",%progbits
  40              		.align	1
  41              		.weak	matrix_init_kb
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  46              	matrix_init_kb:
  47              	.LFB341:
  22:quantum/matrix_common.c **** 
  48              		.loc 1 22 49 view -0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  22:quantum/matrix_common.c **** 
  52              		.loc 1 22 51 view .LVU3
  22:quantum/matrix_common.c **** 
  53              		.loc 1 22 49 is_stmt 0 view .LVU4
  54 0000 08B5     		push	{r3, lr}
  55              		.cfi_def_cfa_offset 8
  56              		.cfi_offset 3, -8
  57              		.cfi_offset 14, -4
  22:quantum/matrix_common.c **** 
  58              		.loc 1 22 51 view .LVU5
  59 0002 FFF7FEFF 		bl	matrix_init_user
  60              	.LVL0:
  22:quantum/matrix_common.c **** 
  61              		.loc 1 22 71 view .LVU6
  62 0006 08BD     		pop	{r3, pc}
  63              		.cfi_endproc
  64              	.LFE341:
  66              		.section	.text.matrix_scan_user,"ax",%progbits
  67              		.align	1
  68              		.weak	matrix_scan_user
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  73              	matrix_scan_user:
  74              	.LFB361:
  75              		.cfi_startproc
  27:quantum/matrix_common.c **** 
  28:quantum/matrix_common.c **** __attribute__((weak)) void matrix_scan_user(void) {}
  76              		.loc 1 28 28 is_stmt 1 view -0
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              		@ link register save eliminated.
  80 0000 7047     		bx	lr
  81              		.cfi_endproc
  82              	.LFE361:
  84              		.section	.text.matrix_scan_kb,"ax",%progbits
  85              		.align	1
  86              		.weak	matrix_scan_kb
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  91              	matrix_scan_kb:
  92              	.LFB342:
  24:quantum/matrix_common.c **** 
  93              		.loc 1 24 49 view -0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  24:quantum/matrix_common.c **** 
  97              		.loc 1 24 51 view .LVU9
  24:quantum/matrix_common.c **** 
  98              		.loc 1 24 49 is_stmt 0 view .LVU10
  99 0000 08B5     		push	{r3, lr}
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 3, -8
 102              		.cfi_offset 14, -4
  24:quantum/matrix_common.c **** 
 103              		.loc 1 24 51 view .LVU11
 104 0002 FFF7FEFF 		bl	matrix_scan_user
 105              	.LVL1:
  24:quantum/matrix_common.c **** 
 106              		.loc 1 24 71 view .LVU12
 107 0006 08BD     		pop	{r3, pc}
 108              		.cfi_endproc
 109              	.LFE342:
 111              		.section	.text.matrix_rows,"ax",%progbits
 112              		.align	1
 113              		.global	matrix_rows
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 118              	matrix_rows:
 119              	.LFB345:
  29:quantum/matrix_common.c **** 
  30:quantum/matrix_common.c **** // helper functions
  31:quantum/matrix_common.c **** 
  32:quantum/matrix_common.c **** inline uint8_t matrix_rows(void) { return MATRIX_ROWS; }
 120              		.loc 1 32 34 is_stmt 1 view -0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125              		.loc 1 32 36 view .LVU14
 126              		.loc 1 32 56 is_stmt 0 view .LVU15
 127 0000 0820     		movs	r0, #8
 128 0002 7047     		bx	lr
 129              		.cfi_endproc
 130              	.LFE345:
 132              		.section	.text.matrix_cols,"ax",%progbits
 133              		.align	1
 134              		.global	matrix_cols
 135              		.syntax unified
 136              		.thumb
 137              		.thumb_func
 139              	matrix_cols:
 140              	.LFB346:
  33:quantum/matrix_common.c **** 
  34:quantum/matrix_common.c **** inline uint8_t matrix_cols(void) { return MATRIX_COLS; }
 141              		.loc 1 34 34 is_stmt 1 view -0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 146              		.loc 1 34 36 view .LVU17
 147              		.loc 1 34 56 is_stmt 0 view .LVU18
 148 0000 0620     		movs	r0, #6
 149 0002 7047     		bx	lr
 150              		.cfi_endproc
 151              	.LFE346:
 153              		.section	.text.matrix_is_on,"ax",%progbits
 154              		.align	1
 155              		.global	matrix_is_on
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 160              	matrix_is_on:
 161              	.LVL2:
 162              	.LFB347:
  35:quantum/matrix_common.c **** 
  36:quantum/matrix_common.c **** inline bool matrix_is_on(uint8_t row, uint8_t col) { return (matrix[row] & ((matrix_row_t)1 << col)
 163              		.loc 1 36 52 is_stmt 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 168              		.loc 1 36 54 view .LVU20
 169              		.loc 1 36 68 is_stmt 0 view .LVU21
 170 0000 044B     		ldr	r3, .L8
 171 0002 1A5C     		ldrb	r2, [r3, r0]	@ zero_extendqisi2
 172              		.loc 1 36 93 view .LVU22
 173 0004 0123     		movs	r3, #1
 174 0006 8B40     		lsls	r3, r3, r1
 175              		.loc 1 36 74 view .LVU23
 176 0008 1A42     		tst	r2, r3
 177              		.loc 1 36 103 view .LVU24
 178 000a 14BF     		ite	ne
 179 000c 0120     		movne	r0, #1
 180              	.LVL3:
 181              		.loc 1 36 103 view .LVU25
 182 000e 0020     		moveq	r0, #0
 183 0010 7047     		bx	lr
 184              	.L9:
 185 0012 00BF     		.align	2
 186              	.L8:
 187 0014 00000000 		.word	matrix
 188              		.cfi_endproc
 189              	.LFE347:
 191              		.section	.text.matrix_get_row,"ax",%progbits
 192              		.align	1
 193              		.global	matrix_get_row
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 198              	matrix_get_row:
 199              	.LVL4:
 200              	.LFB348:
  37:quantum/matrix_common.c **** 
  38:quantum/matrix_common.c **** inline matrix_row_t matrix_get_row(uint8_t row) {
 201              		.loc 1 38 49 is_stmt 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              		@ link register save eliminated.
  39:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
  40:quantum/matrix_common.c ****     // switch blocker installed and the switch is always pressed.
  41:quantum/matrix_common.c **** #ifdef MATRIX_MASKED
  42:quantum/matrix_common.c ****     return matrix[row] & matrix_mask[row];
  43:quantum/matrix_common.c **** #else
  44:quantum/matrix_common.c ****     return matrix[row];
 206              		.loc 1 44 5 view .LVU27
  45:quantum/matrix_common.c **** #endif
  46:quantum/matrix_common.c **** }
 207              		.loc 1 46 1 is_stmt 0 view .LVU28
 208 0000 014B     		ldr	r3, .L11
 209 0002 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 210              	.LVL5:
 211              		.loc 1 46 1 view .LVU29
 212 0004 7047     		bx	lr
 213              	.L12:
 214 0006 00BF     		.align	2
 215              	.L11:
 216 0008 00000000 		.word	matrix
 217              		.cfi_endproc
 218              	.LFE348:
 220              		.section	.text.matrix_is_modified,"ax",%progbits
 221              		.align	1
 222              		.global	matrix_is_modified
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 227              	matrix_is_modified:
 228              	.LFB349:
  47:quantum/matrix_common.c **** 
  48:quantum/matrix_common.c **** // Deprecated.
  49:quantum/matrix_common.c **** bool matrix_is_modified(void) {
 229              		.loc 1 49 31 is_stmt 1 view -0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 0, uses_anonymous_args = 0
  50:quantum/matrix_common.c ****     if (debounce_active()) return false;
 233              		.loc 1 50 5 view .LVU31
  49:quantum/matrix_common.c ****     if (debounce_active()) return false;
 234              		.loc 1 49 31 is_stmt 0 view .LVU32
 235 0000 08B5     		push	{r3, lr}
 236              		.cfi_def_cfa_offset 8
 237              		.cfi_offset 3, -8
 238              		.cfi_offset 14, -4
 239              		.loc 1 50 9 view .LVU33
 240 0002 FFF7FEFF 		bl	debounce_active
 241              	.LVL6:
 242              		.loc 1 50 8 view .LVU34
 243 0006 80F00100 		eor	r0, r0, #1
  51:quantum/matrix_common.c ****     return true;
  52:quantum/matrix_common.c **** }
 244              		.loc 1 52 1 view .LVU35
 245 000a C0B2     		uxtb	r0, r0
 246 000c 08BD     		pop	{r3, pc}
 247              		.cfi_endproc
 248              	.LFE349:
 250              		.section	.rodata.matrix_print.str1.1,"aMS",%progbits,1
 251              	.LC0:
 252 0000 0A722F63 		.ascii	"\012r/c 01234567\012\000"
 252      20303132 
 252      33343536 
 252      370A00
 253              	.LC1:
 254 000f 25303258 		.ascii	"%02X\000"
 254      00
 255              	.LC2:
 256 0014 3A2000   		.ascii	": \000"
 257              	.LC3:
 258 0017 25303862 		.ascii	"%08b\000"
 258      00
 259              	.LC4:
 260 001c 0A00     		.ascii	"\012\000"
 261              		.section	.text.matrix_print,"ax",%progbits
 262              		.align	1
 263              		.global	matrix_print
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 268              	matrix_print:
 269              	.LFB350:
  53:quantum/matrix_common.c **** 
  54:quantum/matrix_common.c **** #if (MATRIX_COLS <= 8)
  55:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 01234567\n")
  56:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse8(matrix_get_row(row))
  57:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop(matrix_get_row(row))
  58:quantum/matrix_common.c **** #elif (MATRIX_COLS <= 16)
  59:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 0123456789ABCDEF\n")
  60:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse16(matrix_get_row(row))
  61:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop16(matrix_get_row(row))
  62:quantum/matrix_common.c **** #elif (MATRIX_COLS <= 32)
  63:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 0123456789ABCDEF0123456789ABCDEF\n")
  64:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse32(matrix_get_row(row))
  65:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop32(matrix_get_row(row))
  66:quantum/matrix_common.c **** #endif
  67:quantum/matrix_common.c **** 
  68:quantum/matrix_common.c **** void matrix_print(void) {
 270              		.loc 1 68 25 is_stmt 1 view -0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
  69:quantum/matrix_common.c ****     print_matrix_header();
 274              		.loc 1 69 5 view .LVU37
  68:quantum/matrix_common.c ****     print_matrix_header();
 275              		.loc 1 68 25 is_stmt 0 view .LVU38
 276 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 277              		.cfi_def_cfa_offset 24
 278              		.cfi_offset 4, -24
 279              		.cfi_offset 5, -20
 280              		.cfi_offset 6, -16
 281              		.cfi_offset 7, -12
 282              		.cfi_offset 8, -8
 283              		.cfi_offset 14, -4
 284              		.loc 1 69 5 view .LVU39
 285 0004 0F48     		ldr	r0, .L17
 286 0006 104D     		ldr	r5, .L17+4
 287              	.LBB11:
  70:quantum/matrix_common.c **** 
  71:quantum/matrix_common.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
  72:quantum/matrix_common.c ****         print_hex8(row);
 288              		.loc 1 72 9 view .LVU40
 289 0008 DFF84C80 		ldr	r8, .L17+20
  73:quantum/matrix_common.c ****         print(": ");
 290              		.loc 1 73 9 view .LVU41
 291 000c 0F4F     		ldr	r7, .L17+8
  74:quantum/matrix_common.c ****         print_matrix_row(row);
 292              		.loc 1 74 9 view .LVU42
 293 000e 104E     		ldr	r6, .L17+12
 294              	.LBE11:
  69:quantum/matrix_common.c **** 
 295              		.loc 1 69 5 view .LVU43
 296 0010 FFF7FEFF 		bl	printf_
 297              	.LVL7:
  71:quantum/matrix_common.c ****         print_hex8(row);
 298              		.loc 1 71 5 is_stmt 1 view .LVU44
 299              	.LBB14:
  71:quantum/matrix_common.c ****         print_hex8(row);
 300              		.loc 1 71 10 view .LVU45
  71:quantum/matrix_common.c ****         print_hex8(row);
 301              		.loc 1 71 31 view .LVU46
 302              	.LBE14:
  69:quantum/matrix_common.c **** 
 303              		.loc 1 69 5 is_stmt 0 view .LVU47
 304 0014 0024     		movs	r4, #0
 305              	.LVL8:
 306              	.L15:
 307              	.LBB15:
  72:quantum/matrix_common.c ****         print(": ");
 308              		.loc 1 72 9 is_stmt 1 discriminator 3 view .LVU48
 309 0016 2146     		mov	r1, r4
 310 0018 4046     		mov	r0, r8
 311 001a FFF7FEFF 		bl	printf_
 312              	.LVL9:
  73:quantum/matrix_common.c ****         print_matrix_row(row);
 313              		.loc 1 73 9 discriminator 3 view .LVU49
 314 001e 3846     		mov	r0, r7
 315 0020 FFF7FEFF 		bl	printf_
 316              	.LVL10:
 317              		.loc 1 74 9 discriminator 3 view .LVU50
 318              	.LBB12:
 319              	.LBI12:
  38:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 320              		.loc 1 38 21 discriminator 3 view .LVU51
 321              	.LBB13:
  44:quantum/matrix_common.c **** #endif
 322              		.loc 1 44 5 discriminator 3 view .LVU52
  44:quantum/matrix_common.c **** #endif
 323              		.loc 1 44 5 is_stmt 0 discriminator 3 view .LVU53
 324              	.LBE13:
 325              	.LBE12:
 326              		.loc 1 74 9 discriminator 3 view .LVU54
 327 0024 15F8010B 		ldrb	r0, [r5], #1	@ zero_extendqisi2
 328 0028 FFF7FEFF 		bl	bitrev
 329              	.LVL11:
 330 002c 0146     		mov	r1, r0
 331 002e 3046     		mov	r0, r6
 332 0030 FFF7FEFF 		bl	printf_
 333              	.LVL12:
  75:quantum/matrix_common.c ****         print("\n");
 334              		.loc 1 75 9 is_stmt 1 discriminator 3 view .LVU55
  71:quantum/matrix_common.c ****         print_hex8(row);
 335              		.loc 1 71 31 is_stmt 0 discriminator 3 view .LVU56
 336 0034 0134     		adds	r4, r4, #1
 337              	.LVL13:
 338              		.loc 1 75 9 discriminator 3 view .LVU57
 339 0036 0748     		ldr	r0, .L17+16
 340 0038 FFF7FEFF 		bl	printf_
 341              	.LVL14:
  71:quantum/matrix_common.c ****         print_hex8(row);
 342              		.loc 1 71 49 is_stmt 1 discriminator 3 view .LVU58
  71:quantum/matrix_common.c ****         print_hex8(row);
 343              		.loc 1 71 31 discriminator 3 view .LVU59
 344 003c 082C     		cmp	r4, #8
 345 003e EAD1     		bne	.L15
 346              	.LBE15:
  76:quantum/matrix_common.c ****     }
  77:quantum/matrix_common.c **** }
 347              		.loc 1 77 1 is_stmt 0 view .LVU60
 348 0040 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 349              	.L18:
 350              		.align	2
 351              	.L17:
 352 0044 00000000 		.word	.LC0
 353 0048 00000000 		.word	matrix
 354 004c 14000000 		.word	.LC2
 355 0050 17000000 		.word	.LC3
 356 0054 1C000000 		.word	.LC4
 357 0058 0F000000 		.word	.LC1
 358              		.cfi_endproc
 359              	.LFE350:
 361              		.section	.text.matrix_key_count,"ax",%progbits
 362              		.align	1
 363              		.global	matrix_key_count
 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 368              	matrix_key_count:
 369              	.LFB351:
  78:quantum/matrix_common.c **** 
  79:quantum/matrix_common.c **** uint8_t matrix_key_count(void) {
 370              		.loc 1 79 32 is_stmt 1 view -0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 0
 373              		@ frame_needed = 0, uses_anonymous_args = 0
  80:quantum/matrix_common.c ****     uint8_t count = 0;
 374              		.loc 1 80 5 view .LVU62
 375              	.LVL15:
  81:quantum/matrix_common.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 376              		.loc 1 81 5 view .LVU63
 377              	.LBB16:
 378              		.loc 1 81 10 view .LVU64
 379              		.loc 1 81 27 view .LVU65
 380              	.LBE16:
  79:quantum/matrix_common.c ****     uint8_t count = 0;
 381              		.loc 1 79 32 is_stmt 0 view .LVU66
 382 0000 70B5     		push	{r4, r5, r6, lr}
 383              		.cfi_def_cfa_offset 16
 384              		.cfi_offset 4, -16
 385              		.cfi_offset 5, -12
 386              		.cfi_offset 6, -8
 387              		.cfi_offset 14, -4
 388              	.LBB19:
 389              		.loc 1 81 18 view .LVU67
 390 0002 0024     		movs	r4, #0
 391 0004 064E     		ldr	r6, .L22
 392              	.LBE19:
  80:quantum/matrix_common.c ****     uint8_t count = 0;
 393              		.loc 1 80 13 view .LVU68
 394 0006 2546     		mov	r5, r4
 395              	.LVL16:
 396              	.L20:
 397              	.LBB20:
  82:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 398              		.loc 1 82 9 is_stmt 1 view .LVU69
 399              	.LBB17:
 400              	.LBI17:
  38:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 401              		.loc 1 38 21 view .LVU70
 402              	.LBB18:
  44:quantum/matrix_common.c **** #endif
 403              		.loc 1 44 5 view .LVU71
  44:quantum/matrix_common.c **** #endif
 404              		.loc 1 44 5 is_stmt 0 view .LVU72
 405              	.LBE18:
 406              	.LBE17:
 407              		.loc 1 82 18 view .LVU73
 408 0008 16F8010B 		ldrb	r0, [r6], #1	@ zero_extendqisi2
 409 000c FFF7FEFF 		bl	bitpop
 410              	.LVL17:
  81:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 411              		.loc 1 81 43 view .LVU74
 412 0010 0134     		adds	r4, r4, #1
 413              	.LVL18:
  81:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 414              		.loc 1 81 43 view .LVU75
 415 0012 E4B2     		uxtb	r4, r4
 416              		.loc 1 82 15 view .LVU76
 417 0014 0544     		add	r5, r5, r0
 418              	.LVL19:
  81:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 419              		.loc 1 81 27 view .LVU77
 420 0016 082C     		cmp	r4, #8
 421              		.loc 1 82 15 view .LVU78
 422 0018 EDB2     		uxtb	r5, r5
 423              	.LVL20:
  81:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 424              		.loc 1 81 43 is_stmt 1 view .LVU79
  81:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 425              		.loc 1 81 27 view .LVU80
 426 001a F5D1     		bne	.L20
 427              	.LBE20:
  83:quantum/matrix_common.c ****     }
  84:quantum/matrix_common.c ****     return count;
 428              		.loc 1 84 5 view .LVU81
  85:quantum/matrix_common.c **** }
 429              		.loc 1 85 1 is_stmt 0 view .LVU82
 430 001c 2846     		mov	r0, r5
 431 001e 70BD     		pop	{r4, r5, r6, pc}
 432              	.LVL21:
 433              	.L23:
 434              		.loc 1 85 1 view .LVU83
 435              		.align	2
 436              	.L22:
 437 0020 00000000 		.word	matrix
 438              		.cfi_endproc
 439              	.LFE351:
 441              		.section	.text.matrix_io_delay,"ax",%progbits
 442              		.align	1
 443              		.weak	matrix_io_delay
 444              		.syntax unified
 445              		.thumb
 446              		.thumb_func
 448              	matrix_io_delay:
 449              	.LFB352:
  86:quantum/matrix_common.c **** 
  87:quantum/matrix_common.c **** /*　`matrix_io_delay ()` exists for backwards compatibility. From now on, use matrix_output_unsele
  88:quantum/matrix_common.c **** __attribute__((weak)) void matrix_io_delay(void) { wait_us(MATRIX_IO_DELAY); }
 450              		.loc 1 88 50 is_stmt 1 view -0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 0, uses_anonymous_args = 0
 454              		@ link register save eliminated.
 455              		.loc 1 88 52 view .LVU85
 456              		.loc 1 88 52 view .LVU86
 457              		.loc 1 88 52 view .LVU87
 458 0000 0120     		movs	r0, #1
 459 0002 FFF7FEBF 		b	chThdSleep
 460              	.LVL22:
 461              		.cfi_endproc
 462              	.LFE352:
 464              		.section	.text.matrix_output_select_delay,"ax",%progbits
 465              		.align	1
 466              		.weak	matrix_output_select_delay
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 471              	matrix_output_select_delay:
 472              	.LFB353:
  89:quantum/matrix_common.c **** 
  90:quantum/matrix_common.c **** __attribute__((weak)) void matrix_output_select_delay(void) { waitInputPinDelay(); }
 473              		.loc 1 90 61 view -0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              		@ link register save eliminated.
 478              		.loc 1 90 63 view .LVU89
 479              	.LVL23:
 480              	.LBB21:
 481              	.LBI21:
 482              		.file 2 "tmk_core/common/chibios/_wait.c"
   1:tmk_core/common/chibios/_wait.c **** /* Copyright 2021 QMK
   2:tmk_core/common/chibios/_wait.c ****  *
   3:tmk_core/common/chibios/_wait.c ****  * This program is free software: you can redistribute it and/or modify
   4:tmk_core/common/chibios/_wait.c ****  * it under the terms of the GNU General Public License as published by
   5:tmk_core/common/chibios/_wait.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:tmk_core/common/chibios/_wait.c ****  * (at your option) any later version.
   7:tmk_core/common/chibios/_wait.c ****  *
   8:tmk_core/common/chibios/_wait.c ****  * This program is distributed in the hope that it will be useful,
   9:tmk_core/common/chibios/_wait.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:tmk_core/common/chibios/_wait.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:tmk_core/common/chibios/_wait.c ****  * GNU General Public License for more details.
  12:tmk_core/common/chibios/_wait.c ****  *
  13:tmk_core/common/chibios/_wait.c ****  * You should have received a copy of the GNU General Public License
  14:tmk_core/common/chibios/_wait.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:tmk_core/common/chibios/_wait.c ****  */
  16:tmk_core/common/chibios/_wait.c **** 
  17:tmk_core/common/chibios/_wait.c **** #ifndef __OPTIMIZE__
  18:tmk_core/common/chibios/_wait.c **** #    pragma message "Compiler optimizations disabled; wait_cpuclock() won't work as designed"
  19:tmk_core/common/chibios/_wait.c **** #endif
  20:tmk_core/common/chibios/_wait.c **** 
  21:tmk_core/common/chibios/_wait.c **** #define CLOCK_DELAY_NOP8 "nop\n\t nop\n\t nop\n\t nop\n\t   nop\n\t nop\n\t nop\n\t nop\n\t"
  22:tmk_core/common/chibios/_wait.c **** 
  23:tmk_core/common/chibios/_wait.c **** __attribute__((always_inline)) static inline void wait_cpuclock(unsigned int n) { /* n: 1..135 */
 483              		.loc 2 23 51 view .LVU90
 484              	.LBB22:
  24:tmk_core/common/chibios/_wait.c ****     /* The argument n must be a constant expression.
  25:tmk_core/common/chibios/_wait.c ****      * That way, compiler optimization will remove unnecessary code. */
  26:tmk_core/common/chibios/_wait.c ****     if (n < 1) {
 485              		.loc 2 26 5 view .LVU91
  27:tmk_core/common/chibios/_wait.c ****         return;
  28:tmk_core/common/chibios/_wait.c ****     }
  29:tmk_core/common/chibios/_wait.c ****     if (n > 8) {
 486              		.loc 2 29 5 view .LVU92
 487              	.LBB23:
  30:tmk_core/common/chibios/_wait.c ****         unsigned int n8 = n / 8;
 488              		.loc 2 30 9 view .LVU93
  31:tmk_core/common/chibios/_wait.c ****         n               = n - n8 * 8;
 489              		.loc 2 31 9 view .LVU94
  32:tmk_core/common/chibios/_wait.c ****         switch (n8) {
 490              		.loc 2 32 9 view .LVU95
  33:tmk_core/common/chibios/_wait.c ****             case 16:
  34:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
  35:tmk_core/common/chibios/_wait.c ****             case 15:
  36:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
  37:tmk_core/common/chibios/_wait.c ****             case 14:
  38:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
  39:tmk_core/common/chibios/_wait.c ****             case 13:
  40:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
  41:tmk_core/common/chibios/_wait.c ****             case 12:
  42:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
  43:tmk_core/common/chibios/_wait.c ****             case 11:
  44:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
  45:tmk_core/common/chibios/_wait.c ****             case 10:
  46:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
  47:tmk_core/common/chibios/_wait.c ****             case 9:
  48:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
  49:tmk_core/common/chibios/_wait.c ****             case 8:
  50:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
  51:tmk_core/common/chibios/_wait.c ****             case 7:
  52:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
  53:tmk_core/common/chibios/_wait.c ****             case 6:
  54:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
  55:tmk_core/common/chibios/_wait.c ****             case 5:
  56:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
  57:tmk_core/common/chibios/_wait.c ****             case 4:
  58:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
  59:tmk_core/common/chibios/_wait.c ****             case 3:
  60:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
  61:tmk_core/common/chibios/_wait.c ****             case 2:
  62:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
 491              		.loc 2 62 17 view .LVU96
 492              		.syntax unified
 493              	@ 62 "tmk_core/common/chibios/_wait.c" 1
 494 0000 00BF     		nop
 495 0002 00BF     		 nop
 496 0004 00BF     		 nop
 497 0006 00BF     		 nop
 498 0008 00BF     		   nop
 499 000a 00BF     		 nop
 500 000c 00BF     		 nop
 501 000e 00BF     		 nop
 502              		
 503              	@ 0 "" 2
  63:tmk_core/common/chibios/_wait.c ****             case 1:
  64:tmk_core/common/chibios/_wait.c ****                 asm volatile(CLOCK_DELAY_NOP8::: "memory");
 504              		.loc 2 64 17 view .LVU97
 505              	@ 64 "tmk_core/common/chibios/_wait.c" 1
 506 0010 00BF     		nop
 507 0012 00BF     		 nop
 508 0014 00BF     		 nop
 509 0016 00BF     		 nop
 510 0018 00BF     		   nop
 511 001a 00BF     		 nop
 512 001c 00BF     		 nop
 513 001e 00BF     		 nop
 514              		
 515              	@ 0 "" 2
 516              		.loc 2 64 17 is_stmt 0 view .LVU98
 517              		.thumb
 518              		.syntax unified
 519              	.LBE23:
  65:tmk_core/common/chibios/_wait.c ****             case 0:
  66:tmk_core/common/chibios/_wait.c ****                 break;
  67:tmk_core/common/chibios/_wait.c ****         }
  68:tmk_core/common/chibios/_wait.c ****     }
  69:tmk_core/common/chibios/_wait.c ****     switch (n) {
 520              		.loc 2 69 5 is_stmt 1 view .LVU99
  70:tmk_core/common/chibios/_wait.c ****         case 8:
  71:tmk_core/common/chibios/_wait.c ****             asm volatile("nop" ::: "memory");
  72:tmk_core/common/chibios/_wait.c ****         case 7:
  73:tmk_core/common/chibios/_wait.c ****             asm volatile("nop" ::: "memory");
  74:tmk_core/common/chibios/_wait.c ****         case 6:
  75:tmk_core/common/chibios/_wait.c ****             asm volatile("nop" ::: "memory");
  76:tmk_core/common/chibios/_wait.c ****         case 5:
  77:tmk_core/common/chibios/_wait.c ****             asm volatile("nop" ::: "memory");
  78:tmk_core/common/chibios/_wait.c ****         case 4:
  79:tmk_core/common/chibios/_wait.c ****             asm volatile("nop" ::: "memory");
  80:tmk_core/common/chibios/_wait.c ****         case 3:
  81:tmk_core/common/chibios/_wait.c ****             asm volatile("nop" ::: "memory");
  82:tmk_core/common/chibios/_wait.c ****         case 2:
  83:tmk_core/common/chibios/_wait.c ****             asm volatile("nop" ::: "memory");
 521              		.loc 2 83 13 view .LVU100
 522              		.syntax unified
 523              	@ 83 "tmk_core/common/chibios/_wait.c" 1
 524 0020 00BF     		nop
 525              	@ 0 "" 2
  84:tmk_core/common/chibios/_wait.c ****         case 1:
  85:tmk_core/common/chibios/_wait.c ****             asm volatile("nop" ::: "memory");
 526              		.loc 2 85 13 view .LVU101
 527              	@ 85 "tmk_core/common/chibios/_wait.c" 1
 528 0022 00BF     		nop
 529              	@ 0 "" 2
 530              	.LVL24:
 531              		.loc 2 85 13 is_stmt 0 view .LVU102
 532              		.thumb
 533              		.syntax unified
 534              	.LBE22:
 535              	.LBE21:
 536              		.loc 1 90 84 view .LVU103
 537 0024 7047     		bx	lr
 538              		.cfi_endproc
 539              	.LFE353:
 541              		.section	.text.matrix_output_unselect_delay,"ax",%progbits
 542              		.align	1
 543              		.weak	matrix_output_unselect_delay
 544              		.syntax unified
 545              		.thumb
 546              		.thumb_func
 548              	matrix_output_unselect_delay:
 549              	.LVL25:
 550              	.LFB354:
  91:quantum/matrix_common.c **** __attribute__((weak)) void matrix_output_unselect_delay(uint8_t line, bool key_pressed) { matrix_io
 551              		.loc 1 91 89 is_stmt 1 view -0
 552              		.cfi_startproc
 553              		@ args = 0, pretend = 0, frame = 0
 554              		@ frame_needed = 0, uses_anonymous_args = 0
 555              		.loc 1 91 91 view .LVU105
 556              		.loc 1 91 89 is_stmt 0 view .LVU106
 557 0000 08B5     		push	{r3, lr}
 558              		.cfi_def_cfa_offset 8
 559              		.cfi_offset 3, -8
 560              		.cfi_offset 14, -4
 561              		.loc 1 91 91 view .LVU107
 562 0002 FFF7FEFF 		bl	matrix_io_delay
 563              	.LVL26:
 564              		.loc 1 91 110 view .LVU108
 565 0006 08BD     		pop	{r3, pc}
 566              		.cfi_endproc
 567              	.LFE354:
 569              		.section	.text.matrix_init_custom,"ax",%progbits
 570              		.align	1
 571              		.weak	matrix_init_custom
 572              		.syntax unified
 573              		.thumb
 574              		.thumb_func
 576              	matrix_init_custom:
 577              	.LFB363:
 578              		.cfi_startproc
  92:quantum/matrix_common.c **** 
  93:quantum/matrix_common.c **** // CUSTOM MATRIX 'LITE'
  94:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_custom(void) {}
 579              		.loc 1 94 28 is_stmt 1 view -0
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 582              		@ link register save eliminated.
 583 0000 7047     		bx	lr
 584              		.cfi_endproc
 585              	.LFE363:
 587              		.section	.text.matrix_scan_custom,"ax",%progbits
 588              		.align	1
 589              		.weak	matrix_scan_custom
 590              		.syntax unified
 591              		.thumb
 592              		.thumb_func
 594              	matrix_scan_custom:
 595              	.LVL27:
 596              	.LFB356:
  95:quantum/matrix_common.c **** 
  96:quantum/matrix_common.c **** __attribute__((weak)) bool matrix_scan_custom(matrix_row_t current_matrix[]) { return true; }
 597              		.loc 1 96 78 view -0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 0
 600              		@ frame_needed = 0, uses_anonymous_args = 0
 601              		@ link register save eliminated.
 602              		.loc 1 96 80 view .LVU111
 603              		.loc 1 96 93 is_stmt 0 view .LVU112
 604 0000 0120     		movs	r0, #1
 605              	.LVL28:
 606              		.loc 1 96 93 view .LVU113
 607 0002 7047     		bx	lr
 608              		.cfi_endproc
 609              	.LFE356:
 611              		.section	.text.matrix_init,"ax",%progbits
 612              		.align	1
 613              		.weak	matrix_init
 614              		.syntax unified
 615              		.thumb
 616              		.thumb_func
 618              	matrix_init:
 619              	.LFB357:
  97:quantum/matrix_common.c **** 
  98:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init(void) {
 620              		.loc 1 98 46 is_stmt 1 view -0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
  99:quantum/matrix_common.c ****     matrix_init_custom();
 624              		.loc 1 99 5 view .LVU115
  98:quantum/matrix_common.c ****     matrix_init_custom();
 625              		.loc 1 98 46 is_stmt 0 view .LVU116
 626 0000 08B5     		push	{r3, lr}
 627              		.cfi_def_cfa_offset 8
 628              		.cfi_offset 3, -8
 629              		.cfi_offset 14, -4
 630              		.loc 1 99 5 view .LVU117
 631 0002 FFF7FEFF 		bl	matrix_init_custom
 632              	.LVL29:
 100:quantum/matrix_common.c **** 
 101:quantum/matrix_common.c ****     // initialize matrix state: all keys off
 102:quantum/matrix_common.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 633              		.loc 1 102 5 is_stmt 1 view .LVU118
 634              	.LBB24:
 635              		.loc 1 102 10 view .LVU119
 636              		.loc 1 102 27 view .LVU120
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 637              		.loc 1 103 23 is_stmt 0 view .LVU121
 638 0006 074A     		ldr	r2, .L30
 639 0008 0023     		movs	r3, #0
 640 000a 1360     		str	r3, [r2]	@ unaligned
 641 000c 5360     		str	r3, [r2, #4]	@ unaligned
 104:quantum/matrix_common.c ****         matrix[i]     = 0;
 642              		.loc 1 104 23 view .LVU122
 643 000e 064A     		ldr	r2, .L30+4
 644              	.LBE24:
 105:quantum/matrix_common.c ****     }
 106:quantum/matrix_common.c **** 
 107:quantum/matrix_common.c ****     debounce_init(MATRIX_ROWS);
 645              		.loc 1 107 5 view .LVU123
 646 0010 0820     		movs	r0, #8
 647              	.LBB25:
 104:quantum/matrix_common.c ****         matrix[i]     = 0;
 648              		.loc 1 104 23 view .LVU124
 649 0012 1360     		str	r3, [r2]	@ unaligned
 650 0014 5360     		str	r3, [r2, #4]	@ unaligned
 651              	.LVL30:
 104:quantum/matrix_common.c ****         matrix[i]     = 0;
 652              		.loc 1 104 23 view .LVU125
 653              	.LBE25:
 654              		.loc 1 107 5 is_stmt 1 view .LVU126
 655 0016 FFF7FEFF 		bl	debounce_init
 656              	.LVL31:
 108:quantum/matrix_common.c **** 
 109:quantum/matrix_common.c ****     matrix_init_quantum();
 657              		.loc 1 109 5 view .LVU127
 110:quantum/matrix_common.c **** }
 658              		.loc 1 110 1 is_stmt 0 view .LVU128
 659 001a BDE80840 		pop	{r3, lr}
 660              		.cfi_restore 14
 661              		.cfi_restore 3
 662              		.cfi_def_cfa_offset 0
 109:quantum/matrix_common.c **** }
 663              		.loc 1 109 5 view .LVU129
 664 001e FFF7FEBF 		b	matrix_init_quantum
 665              	.LVL32:
 666              	.L31:
 667 0022 00BF     		.align	2
 668              	.L30:
 669 0024 00000000 		.word	raw_matrix
 670 0028 00000000 		.word	matrix
 671              		.cfi_endproc
 672              	.LFE357:
 674              		.section	.text.matrix_scan,"ax",%progbits
 675              		.align	1
 676              		.weak	matrix_scan
 677              		.syntax unified
 678              		.thumb
 679              		.thumb_func
 681              	matrix_scan:
 682              	.LFB358:
 111:quantum/matrix_common.c **** 
 112:quantum/matrix_common.c **** __attribute__((weak)) uint8_t matrix_scan(void) {
 683              		.loc 1 112 49 is_stmt 1 view -0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 113:quantum/matrix_common.c ****     bool changed = matrix_scan_custom(raw_matrix);
 687              		.loc 1 113 5 view .LVU131
 112:quantum/matrix_common.c ****     bool changed = matrix_scan_custom(raw_matrix);
 688              		.loc 1 112 49 is_stmt 0 view .LVU132
 689 0000 38B5     		push	{r3, r4, r5, lr}
 690              		.cfi_def_cfa_offset 16
 691              		.cfi_offset 3, -16
 692              		.cfi_offset 4, -12
 693              		.cfi_offset 5, -8
 694              		.cfi_offset 14, -4
 695              		.loc 1 113 20 view .LVU133
 696 0002 074D     		ldr	r5, .L33
 697 0004 2846     		mov	r0, r5
 698 0006 FFF7FEFF 		bl	matrix_scan_custom
 699              	.LVL33:
 114:quantum/matrix_common.c **** 
 115:quantum/matrix_common.c ****     debounce(raw_matrix, matrix, MATRIX_ROWS, changed);
 700              		.loc 1 115 5 view .LVU134
 701 000a 0649     		ldr	r1, .L33+4
 702 000c 0346     		mov	r3, r0
 113:quantum/matrix_common.c **** 
 703              		.loc 1 113 20 view .LVU135
 704 000e 0446     		mov	r4, r0
 705              	.LVL34:
 706              		.loc 1 115 5 is_stmt 1 view .LVU136
 707 0010 0822     		movs	r2, #8
 708 0012 2846     		mov	r0, r5
 709              	.LVL35:
 710              		.loc 1 115 5 is_stmt 0 view .LVU137
 711 0014 FFF7FEFF 		bl	debounce
 712              	.LVL36:
 116:quantum/matrix_common.c **** 
 117:quantum/matrix_common.c ****     matrix_scan_quantum();
 713              		.loc 1 117 5 is_stmt 1 view .LVU138
 714 0018 FFF7FEFF 		bl	matrix_scan_quantum
 715              	.LVL37:
 118:quantum/matrix_common.c ****     return changed;
 716              		.loc 1 118 5 view .LVU139
 119:quantum/matrix_common.c **** }
 717              		.loc 1 119 1 is_stmt 0 view .LVU140
 718 001c 2046     		mov	r0, r4
 719 001e 38BD     		pop	{r3, r4, r5, pc}
 720              	.L34:
 721              		.align	2
 722              	.L33:
 723 0020 00000000 		.word	raw_matrix
 724 0024 00000000 		.word	matrix
 725              		.cfi_endproc
 726              	.LFE358:
 728              		.section	.text.peek_matrix,"ax",%progbits
 729              		.align	1
 730              		.weak	peek_matrix
 731              		.syntax unified
 732              		.thumb
 733              		.thumb_func
 735              	peek_matrix:
 736              	.LVL38:
 737              	.LFB359:
 120:quantum/matrix_common.c **** 
 121:quantum/matrix_common.c **** __attribute__((weak)) bool peek_matrix(uint8_t row_index, uint8_t col_index, bool raw) { return 0 !
 738              		.loc 1 121 88 is_stmt 1 view -0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 0
 741              		@ frame_needed = 0, uses_anonymous_args = 0
 742              		@ link register save eliminated.
 743              		.loc 1 121 90 view .LVU142
 744              		.loc 1 121 132 is_stmt 0 view .LVU143
 745 0000 2AB1     		cbz	r2, .L36
 746              		.loc 1 121 120 discriminator 1 view .LVU144
 747 0002 044B     		ldr	r3, .L39
 748              	.L38:
 749              		.loc 1 121 132 discriminator 2 view .LVU145
 750 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 751              	.LVL39:
 752              		.loc 1 121 99 discriminator 2 view .LVU146
 753 0006 0841     		asrs	r0, r0, r1
 754              		.loc 1 121 191 discriminator 2 view .LVU147
 755 0008 00F00100 		and	r0, r0, #1
 756 000c 7047     		bx	lr
 757              	.LVL40:
 758              	.L36:
 759              		.loc 1 121 140 discriminator 2 view .LVU148
 760 000e 024B     		ldr	r3, .L39+4
 761 0010 F8E7     		b	.L38
 762              	.L40:
 763 0012 00BF     		.align	2
 764              	.L39:
 765 0014 00000000 		.word	raw_matrix
 766 0018 00000000 		.word	matrix
 767              		.cfi_endproc
 768              	.LFE359:
 770              		.comm	matrix,8,1
 771              		.comm	raw_matrix,8,1
 772              		.text
 773              	.Letext0:
 774              		.file 3 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 775              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 776              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 777              		.file 6 "./lib/chibios/os/rt/include/chtime.h"
 778              		.file 7 "quantum/matrix.h"
 779              		.file 8 "quantum/debounce.h"
 780              		.file 9 "./lib/chibios/os/rt/include/chthreads.h"
 781              		.file 10 "quantum/bitwise.h"
 782              		.file 11 "lib/printf/printf.h"
 783              		.file 12 "quantum/sequencer/sequencer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix_common.c
     /tmp/cc66sz9W.s:21     .text.matrix_init_user:0000000000000000 $t
     /tmp/cc66sz9W.s:27     .text.matrix_init_user:0000000000000000 matrix_init_user
     /tmp/cc66sz9W.s:40     .text.matrix_init_kb:0000000000000000 $t
     /tmp/cc66sz9W.s:46     .text.matrix_init_kb:0000000000000000 matrix_init_kb
     /tmp/cc66sz9W.s:67     .text.matrix_scan_user:0000000000000000 $t
     /tmp/cc66sz9W.s:73     .text.matrix_scan_user:0000000000000000 matrix_scan_user
     /tmp/cc66sz9W.s:85     .text.matrix_scan_kb:0000000000000000 $t
     /tmp/cc66sz9W.s:91     .text.matrix_scan_kb:0000000000000000 matrix_scan_kb
     /tmp/cc66sz9W.s:112    .text.matrix_rows:0000000000000000 $t
     /tmp/cc66sz9W.s:118    .text.matrix_rows:0000000000000000 matrix_rows
     /tmp/cc66sz9W.s:133    .text.matrix_cols:0000000000000000 $t
     /tmp/cc66sz9W.s:139    .text.matrix_cols:0000000000000000 matrix_cols
     /tmp/cc66sz9W.s:154    .text.matrix_is_on:0000000000000000 $t
     /tmp/cc66sz9W.s:160    .text.matrix_is_on:0000000000000000 matrix_is_on
     /tmp/cc66sz9W.s:187    .text.matrix_is_on:0000000000000014 $d
                            *COM*:0000000000000008 matrix
     /tmp/cc66sz9W.s:192    .text.matrix_get_row:0000000000000000 $t
     /tmp/cc66sz9W.s:198    .text.matrix_get_row:0000000000000000 matrix_get_row
     /tmp/cc66sz9W.s:216    .text.matrix_get_row:0000000000000008 $d
     /tmp/cc66sz9W.s:221    .text.matrix_is_modified:0000000000000000 $t
     /tmp/cc66sz9W.s:227    .text.matrix_is_modified:0000000000000000 matrix_is_modified
     /tmp/cc66sz9W.s:262    .text.matrix_print:0000000000000000 $t
     /tmp/cc66sz9W.s:268    .text.matrix_print:0000000000000000 matrix_print
     /tmp/cc66sz9W.s:352    .text.matrix_print:0000000000000044 $d
     /tmp/cc66sz9W.s:362    .text.matrix_key_count:0000000000000000 $t
     /tmp/cc66sz9W.s:368    .text.matrix_key_count:0000000000000000 matrix_key_count
     /tmp/cc66sz9W.s:437    .text.matrix_key_count:0000000000000020 $d
     /tmp/cc66sz9W.s:442    .text.matrix_io_delay:0000000000000000 $t
     /tmp/cc66sz9W.s:448    .text.matrix_io_delay:0000000000000000 matrix_io_delay
     /tmp/cc66sz9W.s:465    .text.matrix_output_select_delay:0000000000000000 $t
     /tmp/cc66sz9W.s:471    .text.matrix_output_select_delay:0000000000000000 matrix_output_select_delay
     /tmp/cc66sz9W.s:542    .text.matrix_output_unselect_delay:0000000000000000 $t
     /tmp/cc66sz9W.s:548    .text.matrix_output_unselect_delay:0000000000000000 matrix_output_unselect_delay
     /tmp/cc66sz9W.s:570    .text.matrix_init_custom:0000000000000000 $t
     /tmp/cc66sz9W.s:576    .text.matrix_init_custom:0000000000000000 matrix_init_custom
     /tmp/cc66sz9W.s:588    .text.matrix_scan_custom:0000000000000000 $t
     /tmp/cc66sz9W.s:594    .text.matrix_scan_custom:0000000000000000 matrix_scan_custom
     /tmp/cc66sz9W.s:612    .text.matrix_init:0000000000000000 $t
     /tmp/cc66sz9W.s:618    .text.matrix_init:0000000000000000 matrix_init
     /tmp/cc66sz9W.s:669    .text.matrix_init:0000000000000024 $d
                            *COM*:0000000000000008 raw_matrix
     /tmp/cc66sz9W.s:675    .text.matrix_scan:0000000000000000 $t
     /tmp/cc66sz9W.s:681    .text.matrix_scan:0000000000000000 matrix_scan
     /tmp/cc66sz9W.s:723    .text.matrix_scan:0000000000000020 $d
     /tmp/cc66sz9W.s:729    .text.peek_matrix:0000000000000000 $t
     /tmp/cc66sz9W.s:735    .text.peek_matrix:0000000000000000 peek_matrix
     /tmp/cc66sz9W.s:765    .text.peek_matrix:0000000000000014 $d

UNDEFINED SYMBOLS
debounce_active
printf_
bitrev
bitpop
chThdSleep
debounce_init
matrix_init_quantum
debounce
matrix_scan_quantum
