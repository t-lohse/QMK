   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 2
  15              		.file	"mousekey.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "quantum/mousekey.c"
  20              		.section	.text.move_unit,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	move_unit:
  27              	.LFB333:
   1:quantum/mousekey.c **** /*
   2:quantum/mousekey.c ****  * Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:quantum/mousekey.c ****  *
   4:quantum/mousekey.c ****  * This program is free software: you can redistribute it and/or modify
   5:quantum/mousekey.c ****  * it under the terms of the GNU General Public License as published by
   6:quantum/mousekey.c ****  * the Free Software Foundation, either version 2 of the License, or
   7:quantum/mousekey.c ****  * (at your option) any later version.
   8:quantum/mousekey.c ****  *
   9:quantum/mousekey.c ****  * This program is distributed in the hope that it will be useful,
  10:quantum/mousekey.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:quantum/mousekey.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:quantum/mousekey.c ****  * GNU General Public License for more details.
  13:quantum/mousekey.c ****  *
  14:quantum/mousekey.c ****  * You should have received a copy of the GNU General Public License
  15:quantum/mousekey.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:quantum/mousekey.c ****  */
  17:quantum/mousekey.c **** 
  18:quantum/mousekey.c **** #include <stdint.h>
  19:quantum/mousekey.c **** #include "keycode.h"
  20:quantum/mousekey.c **** #include "host.h"
  21:quantum/mousekey.c **** #include "timer.h"
  22:quantum/mousekey.c **** #include "print.h"
  23:quantum/mousekey.c **** #include "debug.h"
  24:quantum/mousekey.c **** #include "mousekey.h"
  25:quantum/mousekey.c **** 
  26:quantum/mousekey.c **** inline int8_t times_inv_sqrt2(int8_t x) {
  27:quantum/mousekey.c ****     // 181/256 is pretty close to 1/sqrt(2)
  28:quantum/mousekey.c ****     // 0.70703125                 0.707106781
  29:quantum/mousekey.c ****     // 1 too small for x=99 and x=198
  30:quantum/mousekey.c ****     // This ends up being a mult and discard lower 8 bits
  31:quantum/mousekey.c ****     return (x * 181) >> 8;
  32:quantum/mousekey.c **** }
  33:quantum/mousekey.c **** 
  34:quantum/mousekey.c **** static report_mouse_t mouse_report = {0};
  35:quantum/mousekey.c **** static void           mousekey_debug(void);
  36:quantum/mousekey.c **** static uint8_t        mousekey_accel        = 0;
  37:quantum/mousekey.c **** static uint8_t        mousekey_repeat       = 0;
  38:quantum/mousekey.c **** static uint8_t        mousekey_wheel_repeat = 0;
  39:quantum/mousekey.c **** #ifdef MK_KINETIC_SPEED
  40:quantum/mousekey.c **** static uint16_t mouse_timer = 0;
  41:quantum/mousekey.c **** #endif
  42:quantum/mousekey.c **** 
  43:quantum/mousekey.c **** #ifndef MK_3_SPEED
  44:quantum/mousekey.c **** 
  45:quantum/mousekey.c **** static uint16_t last_timer_c = 0;
  46:quantum/mousekey.c **** static uint16_t last_timer_w = 0;
  47:quantum/mousekey.c **** 
  48:quantum/mousekey.c **** /*
  49:quantum/mousekey.c ****  * Mouse keys acceleration algorithm
  50:quantum/mousekey.c ****  *  http://en.wikipedia.org/wiki/Mouse_keys
  51:quantum/mousekey.c ****  *
  52:quantum/mousekey.c ****  *  speed = delta * max_speed * (repeat / time_to_max)**((1000+curve)/1000)
  53:quantum/mousekey.c ****  */
  54:quantum/mousekey.c **** /* milliseconds between the initial key press and first repeated motion event (0-2550) */
  55:quantum/mousekey.c **** uint8_t mk_delay = MOUSEKEY_DELAY / 10;
  56:quantum/mousekey.c **** /* milliseconds between repeated motion events (0-255) */
  57:quantum/mousekey.c **** uint8_t mk_interval = MOUSEKEY_INTERVAL;
  58:quantum/mousekey.c **** /* steady speed (in action_delta units) applied each event (0-255) */
  59:quantum/mousekey.c **** uint8_t mk_max_speed = MOUSEKEY_MAX_SPEED;
  60:quantum/mousekey.c **** /* number of events (count) accelerating to steady speed (0-255) */
  61:quantum/mousekey.c **** uint8_t mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
  62:quantum/mousekey.c **** /* ramp used to reach maximum pointer speed (NOT SUPPORTED) */
  63:quantum/mousekey.c **** // int8_t mk_curve = 0;
  64:quantum/mousekey.c **** /* wheel params */
  65:quantum/mousekey.c **** /* milliseconds between the initial key press and first repeated motion event (0-2550) */
  66:quantum/mousekey.c **** uint8_t mk_wheel_delay = MOUSEKEY_WHEEL_DELAY / 10;
  67:quantum/mousekey.c **** /* milliseconds between repeated motion events (0-255) */
  68:quantum/mousekey.c **** uint8_t mk_wheel_interval    = MOUSEKEY_WHEEL_INTERVAL;
  69:quantum/mousekey.c **** uint8_t mk_wheel_max_speed   = MOUSEKEY_WHEEL_MAX_SPEED;
  70:quantum/mousekey.c **** uint8_t mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
  71:quantum/mousekey.c **** 
  72:quantum/mousekey.c **** #    ifndef MK_COMBINED
  73:quantum/mousekey.c **** 
  74:quantum/mousekey.c **** static uint8_t move_unit(void) {
  28              		.loc 1 74 32 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  75:quantum/mousekey.c ****     uint16_t unit;
  33              		.loc 1 75 5 view .LVU1
  76:quantum/mousekey.c ****     if (mousekey_accel & (1 << 0)) {
  34              		.loc 1 76 5 view .LVU2
  35              		.loc 1 76 24 is_stmt 0 view .LVU3
  36 0000 194B     		ldr	r3, .L13
  37 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  38              		.loc 1 76 8 view .LVU4
  39 0004 D907     		lsls	r1, r3, #31
  40 0006 09D5     		bpl	.L2
  77:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed) / 4;
  41              		.loc 1 77 9 is_stmt 1 view .LVU5
  42              		.loc 1 77 37 is_stmt 0 view .LVU6
  43 0008 184B     		ldr	r3, .L13+4
  44 000a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  45 000c 00EB8000 		add	r0, r0, r0, lsl #2
  46              		.loc 1 77 14 view .LVU7
  47 0010 8008     		lsrs	r0, r0, #2
  48              	.LVL0:
  49              	.L3:
  78:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
  79:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed) / 2;
  80:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
  81:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
  82:quantum/mousekey.c ****     } else if (mousekey_repeat == 0) {
  83:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA;
  84:quantum/mousekey.c ****     } else if (mousekey_repeat >= mk_time_to_max) {
  85:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
  86:quantum/mousekey.c ****     } else {
  87:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
  88:quantum/mousekey.c ****     }
  89:quantum/mousekey.c ****     return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
  50              		.loc 1 89 5 is_stmt 1 view .LVU8
  51              		.loc 1 89 58 is_stmt 0 view .LVU9
  52 0012 7F28     		cmp	r0, #127
  53 0014 24D8     		bhi	.L10
  54              	.LVL1:
  55              		.loc 1 89 58 discriminator 1 view .LVU10
  56 0016 28B3     		cbz	r0, .L11
  57              	.L6:
  58              		.loc 1 89 58 discriminator 3 view .LVU11
  59 0018 C0B2     		uxtb	r0, r0
  60 001a 7047     		bx	lr
  61              	.L2:
  78:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
  62              		.loc 1 78 12 is_stmt 1 view .LVU12
  78:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
  63              		.loc 1 78 15 is_stmt 0 view .LVU13
  64 001c 9A07     		lsls	r2, r3, #30
  65 001e 05D5     		bpl	.L4
  79:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
  66              		.loc 1 79 9 is_stmt 1 view .LVU14
  79:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
  67              		.loc 1 79 37 is_stmt 0 view .LVU15
  68 0020 124B     		ldr	r3, .L13+4
  69 0022 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  70 0024 00EB8000 		add	r0, r0, r0, lsl #2
  79:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
  71              		.loc 1 79 14 view .LVU16
  72 0028 4008     		lsrs	r0, r0, #1
  73              	.LVL2:
  79:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
  74              		.loc 1 79 14 view .LVU17
  75 002a F2E7     		b	.L3
  76              	.LVL3:
  77              	.L4:
  80:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
  78              		.loc 1 80 12 is_stmt 1 view .LVU18
  80:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
  79              		.loc 1 80 15 is_stmt 0 view .LVU19
  80 002c 5B07     		lsls	r3, r3, #29
  81 002e 04D5     		bpl	.L5
  81:quantum/mousekey.c ****     } else if (mousekey_repeat == 0) {
  82              		.loc 1 81 9 is_stmt 1 view .LVU20
  81:quantum/mousekey.c ****     } else if (mousekey_repeat == 0) {
  83              		.loc 1 81 14 is_stmt 0 view .LVU21
  84 0030 0E4B     		ldr	r3, .L13+4
  85 0032 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  86              	.L12:
  85:quantum/mousekey.c ****     } else {
  87              		.loc 1 85 9 is_stmt 1 view .LVU22
  85:quantum/mousekey.c ****     } else {
  88              		.loc 1 85 14 is_stmt 0 view .LVU23
  89 0034 00EB8000 		add	r0, r0, r0, lsl #2
  90              	.LVL4:
  85:quantum/mousekey.c ****     } else {
  91              		.loc 1 85 14 view .LVU24
  92 0038 EBE7     		b	.L3
  93              	.LVL5:
  94              	.L5:
  82:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA;
  95              		.loc 1 82 12 is_stmt 1 view .LVU25
  82:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA;
  96              		.loc 1 82 32 is_stmt 0 view .LVU26
  97 003a 0D4B     		ldr	r3, .L13+8
  98 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  82:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA;
  99              		.loc 1 82 15 view .LVU27
 100 003e 6BB1     		cbz	r3, .L9
  84:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
 101              		.loc 1 84 12 is_stmt 1 view .LVU28
  84:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
 102              		.loc 1 84 32 is_stmt 0 view .LVU29
 103 0040 0C4A     		ldr	r2, .L13+12
  77:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 104              		.loc 1 77 37 view .LVU30
 105 0042 0A49     		ldr	r1, .L13+4
  84:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
 106              		.loc 1 84 32 view .LVU31
 107 0044 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
  77:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 108              		.loc 1 77 37 view .LVU32
 109 0046 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
  84:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
 110              		.loc 1 84 15 view .LVU33
 111 0048 9342     		cmp	r3, r2
 112 004a F3D2     		bcs	.L12
  87:quantum/mousekey.c ****     }
 113              		.loc 1 87 9 is_stmt 1 view .LVU34
  87:quantum/mousekey.c ****     }
 114              		.loc 1 87 52 is_stmt 0 view .LVU35
 115 004c 10FB03F0 		smulbb	r0, r0, r3
 116 0050 00EB8000 		add	r0, r0, r0, lsl #2
  87:quantum/mousekey.c ****     }
 117              		.loc 1 87 71 view .LVU36
 118 0054 B0FBF2F0 		udiv	r0, r0, r2
  87:quantum/mousekey.c ****     }
 119              		.loc 1 87 14 view .LVU37
 120 0058 80B2     		uxth	r0, r0
 121              	.LVL6:
  87:quantum/mousekey.c ****     }
 122              		.loc 1 87 14 view .LVU38
 123 005a DAE7     		b	.L3
 124              	.LVL7:
 125              	.L9:
  83:quantum/mousekey.c ****     } else if (mousekey_repeat >= mk_time_to_max) {
 126              		.loc 1 83 14 view .LVU39
 127 005c 0520     		movs	r0, #5
 128 005e DBE7     		b	.L6
 129              	.LVL8:
 130              	.L10:
 131              		.loc 1 89 58 view .LVU40
 132 0060 7F20     		movs	r0, #127
 133              	.LVL9:
 134              		.loc 1 89 58 view .LVU41
 135 0062 7047     		bx	lr
 136              	.LVL10:
 137              	.L11:
 138              		.loc 1 89 58 view .LVU42
 139 0064 0120     		movs	r0, #1
  90:quantum/mousekey.c **** }
 140              		.loc 1 90 1 view .LVU43
 141 0066 7047     		bx	lr
 142              	.L14:
 143              		.align	2
 144              	.L13:
 145 0068 00000000 		.word	mousekey_accel
 146 006c 00000000 		.word	mk_max_speed
 147 0070 00000000 		.word	mousekey_repeat
 148 0074 00000000 		.word	mk_time_to_max
 149              		.cfi_endproc
 150              	.LFE333:
 152              		.section	.text.wheel_unit,"ax",%progbits
 153              		.align	1
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 158              	wheel_unit:
 159              	.LFB334:
  91:quantum/mousekey.c **** 
  92:quantum/mousekey.c **** static uint8_t wheel_unit(void) {
 160              		.loc 1 92 33 is_stmt 1 view -0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
  93:quantum/mousekey.c ****     uint16_t unit;
 165              		.loc 1 93 5 view .LVU45
  94:quantum/mousekey.c ****     if (mousekey_accel & (1 << 0)) {
 166              		.loc 1 94 5 view .LVU46
 167              		.loc 1 94 24 is_stmt 0 view .LVU47
 168 0000 144B     		ldr	r3, .L27
 169 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170              		.loc 1 94 8 view .LVU48
 171 0004 D907     		lsls	r1, r3, #31
 172 0006 05D5     		bpl	.L16
  95:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed) / 4;
 173              		.loc 1 95 9 is_stmt 1 view .LVU49
 174              		.loc 1 95 38 is_stmt 0 view .LVU50
 175 0008 134B     		ldr	r3, .L27+4
 176 000a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 177              		.loc 1 95 14 view .LVU51
 178 000c 8008     		lsrs	r0, r0, #2
 179              	.LVL11:
  96:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
  97:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed) / 2;
  98:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
  99:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
 100:quantum/mousekey.c ****     } else if (mousekey_wheel_repeat == 0) {
 101:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA;
 102:quantum/mousekey.c ****     } else if (mousekey_wheel_repeat >= mk_wheel_time_to_max) {
 103:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
 104:quantum/mousekey.c ****     } else {
 105:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_wheel_repeat) / mk_wheel_time_
 106:quantum/mousekey.c ****     }
 107:quantum/mousekey.c ****     return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
 180              		.loc 1 107 5 is_stmt 1 view .LVU52
 181              	.L17:
 182              		.loc 1 107 60 is_stmt 0 discriminator 1 view .LVU53
 183 000e F8B1     		cbz	r0, .L26
 184              	.L21:
 185              		.loc 1 107 60 discriminator 3 view .LVU54
 186 0010 C0B2     		uxtb	r0, r0
 187 0012 7047     		bx	lr
 188              	.L16:
  96:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 189              		.loc 1 96 12 is_stmt 1 view .LVU55
  96:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 190              		.loc 1 96 15 is_stmt 0 view .LVU56
 191 0014 9A07     		lsls	r2, r3, #30
 192 0016 03D5     		bpl	.L18
  97:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
 193              		.loc 1 97 9 is_stmt 1 view .LVU57
  97:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
 194              		.loc 1 97 38 is_stmt 0 view .LVU58
 195 0018 0F4B     		ldr	r3, .L27+4
 196 001a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  97:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
 197              		.loc 1 97 14 view .LVU59
 198 001c 4008     		lsrs	r0, r0, #1
 199              	.LVL12:
 200              		.loc 1 107 5 is_stmt 1 view .LVU60
 201 001e F6E7     		b	.L17
 202              	.LVL13:
 203              	.L18:
  98:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
 204              		.loc 1 98 12 view .LVU61
  98:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
 205              		.loc 1 98 15 is_stmt 0 view .LVU62
 206 0020 5B07     		lsls	r3, r3, #29
 207 0022 05D5     		bpl	.L19
  99:quantum/mousekey.c ****     } else if (mousekey_wheel_repeat == 0) {
 208              		.loc 1 99 9 is_stmt 1 view .LVU63
  99:quantum/mousekey.c ****     } else if (mousekey_wheel_repeat == 0) {
 209              		.loc 1 99 14 is_stmt 0 view .LVU64
 210 0024 0C4B     		ldr	r3, .L27+4
 211 0026 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 212              	.LVL14:
 213              	.L20:
 214              		.loc 1 107 5 is_stmt 1 view .LVU65
 215              		.loc 1 107 60 is_stmt 0 view .LVU66
 216 0028 7F28     		cmp	r0, #127
 217 002a F0D9     		bls	.L17
 218              		.loc 1 107 60 view .LVU67
 219 002c 7F20     		movs	r0, #127
 220              	.LVL15:
 221              		.loc 1 107 60 view .LVU68
 222 002e 7047     		bx	lr
 223              	.LVL16:
 224              	.L19:
 100:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA;
 225              		.loc 1 100 12 is_stmt 1 view .LVU69
 100:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA;
 226              		.loc 1 100 38 is_stmt 0 view .LVU70
 227 0030 0A4B     		ldr	r3, .L27+8
 228 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 100:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA;
 229              		.loc 1 100 15 view .LVU71
 230 0034 53B1     		cbz	r3, .L24
 102:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
 231              		.loc 1 102 12 is_stmt 1 view .LVU72
 102:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
 232              		.loc 1 102 38 is_stmt 0 view .LVU73
 233 0036 0A4A     		ldr	r2, .L27+12
  95:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 234              		.loc 1 95 38 view .LVU74
 235 0038 0749     		ldr	r1, .L27+4
 102:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
 236              		.loc 1 102 38 view .LVU75
 237 003a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
  95:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 238              		.loc 1 95 38 view .LVU76
 239 003c 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 102:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
 240              		.loc 1 102 15 view .LVU77
 241 003e 9342     		cmp	r3, r2
 105:quantum/mousekey.c ****     }
 242              		.loc 1 105 9 is_stmt 1 view .LVU78
 105:quantum/mousekey.c ****     }
 243              		.loc 1 105 59 is_stmt 0 view .LVU79
 244 0040 3CBF     		itt	cc
 245 0042 10FB03F0 		smulbbcc	r0, r0, r3
 105:quantum/mousekey.c ****     }
 246              		.loc 1 105 14 view .LVU80
 247 0046 B0FBF2F0 		udivcc	r0, r0, r2
 248              	.LVL17:
 105:quantum/mousekey.c ****     }
 249              		.loc 1 105 14 view .LVU81
 250 004a EDE7     		b	.L20
 251              	.LVL18:
 252              	.L24:
 101:quantum/mousekey.c ****     } else if (mousekey_wheel_repeat >= mk_wheel_time_to_max) {
 253              		.loc 1 101 14 view .LVU82
 254 004c 0120     		movs	r0, #1
 255 004e DFE7     		b	.L21
 256              	.L26:
 257              		.loc 1 107 60 view .LVU83
 258 0050 0120     		movs	r0, #1
 108:quantum/mousekey.c **** }
 259              		.loc 1 108 1 view .LVU84
 260 0052 7047     		bx	lr
 261              	.L28:
 262              		.align	2
 263              	.L27:
 264 0054 00000000 		.word	mousekey_accel
 265 0058 00000000 		.word	mk_wheel_max_speed
 266 005c 00000000 		.word	mousekey_wheel_repeat
 267 0060 00000000 		.word	mk_wheel_time_to_max
 268              		.cfi_endproc
 269              	.LFE334:
 271              		.section	.text.mousekey_on,"ax",%progbits
 272              		.align	1
 273              		.global	mousekey_on
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 278              	mousekey_on:
 279              	.LVL19:
 280              	.LFB336:
 109:quantum/mousekey.c **** 
 110:quantum/mousekey.c **** #    else /* #ifndef MK_COMBINED */
 111:quantum/mousekey.c **** #        ifdef MK_KINETIC_SPEED
 112:quantum/mousekey.c **** 
 113:quantum/mousekey.c **** /*
 114:quantum/mousekey.c ****  * Kinetic movement  acceleration algorithm
 115:quantum/mousekey.c ****  *
 116:quantum/mousekey.c ****  *  current speed = I + A * T/50 + A * 0.5 * T^2 | maximum B
 117:quantum/mousekey.c ****  *
 118:quantum/mousekey.c ****  * T: time since the mouse movement started
 119:quantum/mousekey.c ****  * E: mouse events per second (set through MOUSEKEY_INTERVAL, UHK sends 250, the
 120:quantum/mousekey.c ****  *    pro micro on my Signum 3.0 sends only 125!)
 121:quantum/mousekey.c ****  * I: initial speed at time 0
 122:quantum/mousekey.c ****  * A: acceleration
 123:quantum/mousekey.c ****  * B: base mouse travel speed
 124:quantum/mousekey.c ****  */
 125:quantum/mousekey.c **** const uint16_t mk_accelerated_speed = MOUSEKEY_ACCELERATED_SPEED;
 126:quantum/mousekey.c **** const uint16_t mk_base_speed        = MOUSEKEY_BASE_SPEED;
 127:quantum/mousekey.c **** const uint16_t mk_decelerated_speed = MOUSEKEY_DECELERATED_SPEED;
 128:quantum/mousekey.c **** const uint16_t mk_initial_speed     = MOUSEKEY_INITIAL_SPEED;
 129:quantum/mousekey.c **** 
 130:quantum/mousekey.c **** static uint8_t move_unit(void) {
 131:quantum/mousekey.c ****     float speed = mk_initial_speed;
 132:quantum/mousekey.c **** 
 133:quantum/mousekey.c ****     if (mousekey_accel & ((1 << 0) | (1 << 2))) {
 134:quantum/mousekey.c ****         speed = mousekey_accel & (1 << 2) ? mk_accelerated_speed : mk_decelerated_speed;
 135:quantum/mousekey.c ****     } else if (mousekey_repeat && mouse_timer) {
 136:quantum/mousekey.c ****         const float time_elapsed = timer_elapsed(mouse_timer) / 50;
 137:quantum/mousekey.c ****         speed                    = mk_initial_speed + MOUSEKEY_MOVE_DELTA * time_elapsed + MOUSEKEY
 138:quantum/mousekey.c **** 
 139:quantum/mousekey.c ****         speed = speed > mk_base_speed ? mk_base_speed : speed;
 140:quantum/mousekey.c ****     }
 141:quantum/mousekey.c **** 
 142:quantum/mousekey.c ****     /* convert speed to USB mouse speed 1 to 127 */
 143:quantum/mousekey.c ****     speed = (uint8_t)(speed / (1000.0f / mk_interval));
 144:quantum/mousekey.c ****     speed = speed < 1 ? 1 : speed;
 145:quantum/mousekey.c **** 
 146:quantum/mousekey.c ****     return speed > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : speed;
 147:quantum/mousekey.c **** }
 148:quantum/mousekey.c **** 
 149:quantum/mousekey.c **** float mk_wheel_interval = 1000.0f / MOUSEKEY_WHEEL_INITIAL_MOVEMENTS;
 150:quantum/mousekey.c **** 
 151:quantum/mousekey.c **** static uint8_t wheel_unit(void) {
 152:quantum/mousekey.c ****     float speed = MOUSEKEY_WHEEL_INITIAL_MOVEMENTS;
 153:quantum/mousekey.c **** 
 154:quantum/mousekey.c ****     if (mousekey_accel & ((1 << 0) | (1 << 2))) {
 155:quantum/mousekey.c ****         speed = mousekey_accel & (1 << 2) ? MOUSEKEY_WHEEL_ACCELERATED_MOVEMENTS : MOUSEKEY_WHEEL_D
 156:quantum/mousekey.c ****     } else if (mousekey_repeat && mouse_timer) {
 157:quantum/mousekey.c ****         if (mk_wheel_interval != MOUSEKEY_WHEEL_BASE_MOVEMENTS) {
 158:quantum/mousekey.c ****             const float time_elapsed = timer_elapsed(mouse_timer) / 50;
 159:quantum/mousekey.c ****             speed                    = MOUSEKEY_WHEEL_INITIAL_MOVEMENTS + 1 * time_elapsed + 1 * 0.
 160:quantum/mousekey.c ****         }
 161:quantum/mousekey.c ****         speed = speed > MOUSEKEY_WHEEL_BASE_MOVEMENTS ? MOUSEKEY_WHEEL_BASE_MOVEMENTS : speed;
 162:quantum/mousekey.c ****     }
 163:quantum/mousekey.c **** 
 164:quantum/mousekey.c ****     mk_wheel_interval = 1000.0f / speed;
 165:quantum/mousekey.c **** 
 166:quantum/mousekey.c ****     return 1;
 167:quantum/mousekey.c **** }
 168:quantum/mousekey.c **** 
 169:quantum/mousekey.c **** #        else /* #ifndef MK_KINETIC_SPEED */
 170:quantum/mousekey.c **** 
 171:quantum/mousekey.c **** static uint8_t move_unit(void) {
 172:quantum/mousekey.c ****     uint16_t unit;
 173:quantum/mousekey.c ****     if (mousekey_accel & (1 << 0)) {
 174:quantum/mousekey.c ****         unit = 1;
 175:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 176:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed) / 2;
 177:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
 178:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_MAX;
 179:quantum/mousekey.c ****     } else if (mousekey_repeat == 0) {
 180:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA;
 181:quantum/mousekey.c ****     } else if (mousekey_repeat >= mk_time_to_max) {
 182:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
 183:quantum/mousekey.c ****     } else {
 184:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
 185:quantum/mousekey.c ****     }
 186:quantum/mousekey.c ****     return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
 187:quantum/mousekey.c **** }
 188:quantum/mousekey.c **** 
 189:quantum/mousekey.c **** static uint8_t wheel_unit(void) {
 190:quantum/mousekey.c ****     uint16_t unit;
 191:quantum/mousekey.c ****     if (mousekey_accel & (1 << 0)) {
 192:quantum/mousekey.c ****         unit = 1;
 193:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 194:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed) / 2;
 195:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
 196:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_MAX;
 197:quantum/mousekey.c ****     } else if (mousekey_repeat == 0) {
 198:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA;
 199:quantum/mousekey.c ****     } else if (mousekey_repeat >= mk_wheel_time_to_max) {
 200:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
 201:quantum/mousekey.c ****     } else {
 202:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max
 203:quantum/mousekey.c ****     }
 204:quantum/mousekey.c ****     return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
 205:quantum/mousekey.c **** }
 206:quantum/mousekey.c **** 
 207:quantum/mousekey.c **** #        endif /* #ifndef MK_KINETIC_SPEED */
 208:quantum/mousekey.c **** #    endif     /* #ifndef MK_COMBINED */
 209:quantum/mousekey.c **** 
 210:quantum/mousekey.c **** void mousekey_task(void) {
 211:quantum/mousekey.c ****     // report cursor and scroll movement independently
 212:quantum/mousekey.c ****     report_mouse_t const tmpmr = mouse_report;
 213:quantum/mousekey.c **** 
 214:quantum/mousekey.c ****     mouse_report.x = 0;
 215:quantum/mousekey.c ****     mouse_report.y = 0;
 216:quantum/mousekey.c ****     mouse_report.v = 0;
 217:quantum/mousekey.c ****     mouse_report.h = 0;
 218:quantum/mousekey.c **** 
 219:quantum/mousekey.c ****     if ((tmpmr.x || tmpmr.y) && timer_elapsed(last_timer_c) > (mousekey_repeat ? mk_interval : mk_d
 220:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 221:quantum/mousekey.c ****         if (tmpmr.x != 0) mouse_report.x = move_unit() * ((tmpmr.x > 0) ? 1 : -1);
 222:quantum/mousekey.c ****         if (tmpmr.y != 0) mouse_report.y = move_unit() * ((tmpmr.y > 0) ? 1 : -1);
 223:quantum/mousekey.c **** 
 224:quantum/mousekey.c ****         /* diagonal move [1/sqrt(2)] */
 225:quantum/mousekey.c ****         if (mouse_report.x && mouse_report.y) {
 226:quantum/mousekey.c ****             mouse_report.x = times_inv_sqrt2(mouse_report.x);
 227:quantum/mousekey.c ****             if (mouse_report.x == 0) {
 228:quantum/mousekey.c ****                 mouse_report.x = 1;
 229:quantum/mousekey.c ****             }
 230:quantum/mousekey.c ****             mouse_report.y = times_inv_sqrt2(mouse_report.y);
 231:quantum/mousekey.c ****             if (mouse_report.y == 0) {
 232:quantum/mousekey.c ****                 mouse_report.y = 1;
 233:quantum/mousekey.c ****             }
 234:quantum/mousekey.c ****         }
 235:quantum/mousekey.c ****     }
 236:quantum/mousekey.c ****     if ((tmpmr.v || tmpmr.h) && timer_elapsed(last_timer_w) > (mousekey_wheel_repeat ? mk_wheel_int
 237:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 238:quantum/mousekey.c ****         if (tmpmr.v != 0) mouse_report.v = wheel_unit() * ((tmpmr.v > 0) ? 1 : -1);
 239:quantum/mousekey.c ****         if (tmpmr.h != 0) mouse_report.h = wheel_unit() * ((tmpmr.h > 0) ? 1 : -1);
 240:quantum/mousekey.c **** 
 241:quantum/mousekey.c ****         /* diagonal move [1/sqrt(2)] */
 242:quantum/mousekey.c ****         if (mouse_report.v && mouse_report.h) {
 243:quantum/mousekey.c ****             mouse_report.v = times_inv_sqrt2(mouse_report.v);
 244:quantum/mousekey.c ****             if (mouse_report.v == 0) {
 245:quantum/mousekey.c ****                 mouse_report.v = 1;
 246:quantum/mousekey.c ****             }
 247:quantum/mousekey.c ****             mouse_report.h = times_inv_sqrt2(mouse_report.h);
 248:quantum/mousekey.c ****             if (mouse_report.h == 0) {
 249:quantum/mousekey.c ****                 mouse_report.h = 1;
 250:quantum/mousekey.c ****             }
 251:quantum/mousekey.c ****         }
 252:quantum/mousekey.c ****     }
 253:quantum/mousekey.c **** 
 254:quantum/mousekey.c ****     if (mouse_report.x || mouse_report.y || mouse_report.v || mouse_report.h) mousekey_send();
 255:quantum/mousekey.c ****     mouse_report = tmpmr;
 256:quantum/mousekey.c **** }
 257:quantum/mousekey.c **** 
 258:quantum/mousekey.c **** void mousekey_on(uint8_t code) {
 281              		.loc 1 258 32 is_stmt 1 view -0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 259:quantum/mousekey.c **** #    ifdef MK_KINETIC_SPEED
 260:quantum/mousekey.c ****     if (mouse_timer == 0) {
 261:quantum/mousekey.c ****         mouse_timer = timer_read();
 262:quantum/mousekey.c ****     }
 263:quantum/mousekey.c **** #    endif /* #ifdef MK_KINETIC_SPEED */
 264:quantum/mousekey.c **** 
 265:quantum/mousekey.c ****     if (code == KC_MS_UP)
 285              		.loc 1 265 5 view .LVU86
 258:quantum/mousekey.c **** #    ifdef MK_KINETIC_SPEED
 286              		.loc 1 258 32 is_stmt 0 view .LVU87
 287 0000 08B5     		push	{r3, lr}
 288              		.cfi_def_cfa_offset 8
 289              		.cfi_offset 3, -8
 290              		.cfi_offset 14, -4
 291 0002 A0F1ED03 		sub	r3, r0, #237
 292 0006 122B     		cmp	r3, #18
 293 0008 10D8     		bhi	.L29
 294 000a DFE803F0 		tbb	[pc, r3]
 295              	.L32:
 296 000e 0A       		.byte	(.L43-.L32)/2
 297 000f 10       		.byte	(.L42-.L32)/2
 298 0010 13       		.byte	(.L41-.L32)/2
 299 0011 19       		.byte	(.L40-.L32)/2
 300 0012 2E       		.byte	(.L39-.L32)/2
 301 0013 2E       		.byte	(.L39-.L32)/2
 302 0014 2E       		.byte	(.L39-.L32)/2
 303 0015 2E       		.byte	(.L39-.L32)/2
 304 0016 2E       		.byte	(.L39-.L32)/2
 305 0017 2E       		.byte	(.L39-.L32)/2
 306 0018 2E       		.byte	(.L39-.L32)/2
 307 0019 2E       		.byte	(.L39-.L32)/2
 308 001a 1C       		.byte	(.L38-.L32)/2
 309 001b 21       		.byte	(.L37-.L32)/2
 310 001c 25       		.byte	(.L36-.L32)/2
 311 001d 2B       		.byte	(.L35-.L32)/2
 312 001e 36       		.byte	(.L34-.L32)/2
 313 001f 3C       		.byte	(.L33-.L32)/2
 314 0020 41       		.byte	(.L31-.L32)/2
 315 0021 00       		.p2align 1
 316              	.L43:
 266:quantum/mousekey.c ****         mouse_report.y = move_unit() * -1;
 317              		.loc 1 266 9 is_stmt 1 view .LVU88
 318              		.loc 1 266 26 is_stmt 0 view .LVU89
 319 0022 FFF7FEFF 		bl	move_unit
 320              	.LVL20:
 321              		.loc 1 266 24 view .LVU90
 322 0026 4042     		rsbs	r0, r0, #0
 323              	.L46:
 267:quantum/mousekey.c ****     else if (code == KC_MS_DOWN)
 268:quantum/mousekey.c ****         mouse_report.y = move_unit();
 324              		.loc 1 268 24 view .LVU91
 325 0028 1C4B     		ldr	r3, .L50
 326 002a D870     		strb	r0, [r3, #3]
 327              	.L29:
 269:quantum/mousekey.c ****     else if (code == KC_MS_LEFT)
 270:quantum/mousekey.c ****         mouse_report.x = move_unit() * -1;
 271:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT)
 272:quantum/mousekey.c ****         mouse_report.x = move_unit();
 273:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP)
 274:quantum/mousekey.c ****         mouse_report.v = wheel_unit();
 275:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN)
 276:quantum/mousekey.c ****         mouse_report.v = wheel_unit() * -1;
 277:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT)
 278:quantum/mousekey.c ****         mouse_report.h = wheel_unit() * -1;
 279:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT)
 280:quantum/mousekey.c ****         mouse_report.h = wheel_unit();
 281:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 282:quantum/mousekey.c ****         mouse_report.buttons |= 1 << (code - KC_MS_BTN1);
 283:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 284:quantum/mousekey.c ****         mousekey_accel |= (1 << 0);
 285:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 286:quantum/mousekey.c ****         mousekey_accel |= (1 << 1);
 287:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 288:quantum/mousekey.c ****         mousekey_accel |= (1 << 2);
 289:quantum/mousekey.c **** }
 328              		.loc 1 289 1 view .LVU92
 329 002c 08BD     		pop	{r3, pc}
 330              	.LVL21:
 331              	.L42:
 268:quantum/mousekey.c ****     else if (code == KC_MS_LEFT)
 332              		.loc 1 268 9 is_stmt 1 view .LVU93
 268:quantum/mousekey.c ****     else if (code == KC_MS_LEFT)
 333              		.loc 1 268 26 is_stmt 0 view .LVU94
 334 002e FFF7FEFF 		bl	move_unit
 335              	.LVL22:
 268:quantum/mousekey.c ****     else if (code == KC_MS_LEFT)
 336              		.loc 1 268 26 view .LVU95
 337 0032 F9E7     		b	.L46
 338              	.LVL23:
 339              	.L41:
 270:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT)
 340              		.loc 1 270 9 is_stmt 1 view .LVU96
 270:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT)
 341              		.loc 1 270 26 is_stmt 0 view .LVU97
 342 0034 FFF7FEFF 		bl	move_unit
 343              	.LVL24:
 270:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT)
 344              		.loc 1 270 24 view .LVU98
 345 0038 4042     		rsbs	r0, r0, #0
 346              	.L47:
 272:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP)
 347              		.loc 1 272 24 view .LVU99
 348 003a 184B     		ldr	r3, .L50
 349 003c 9870     		strb	r0, [r3, #2]
 350 003e F5E7     		b	.L29
 351              	.LVL25:
 352              	.L40:
 272:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP)
 353              		.loc 1 272 9 is_stmt 1 view .LVU100
 272:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP)
 354              		.loc 1 272 26 is_stmt 0 view .LVU101
 355 0040 FFF7FEFF 		bl	move_unit
 356              	.LVL26:
 272:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP)
 357              		.loc 1 272 26 view .LVU102
 358 0044 F9E7     		b	.L47
 359              	.LVL27:
 360              	.L38:
 274:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN)
 361              		.loc 1 274 9 is_stmt 1 view .LVU103
 274:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN)
 362              		.loc 1 274 26 is_stmt 0 view .LVU104
 363 0046 FFF7FEFF 		bl	wheel_unit
 364              	.LVL28:
 365              	.L49:
 276:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT)
 366              		.loc 1 276 24 view .LVU105
 367 004a 144B     		ldr	r3, .L50
 368 004c 1871     		strb	r0, [r3, #4]
 369 004e EDE7     		b	.L29
 370              	.LVL29:
 371              	.L37:
 276:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT)
 372              		.loc 1 276 9 is_stmt 1 view .LVU106
 276:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT)
 373              		.loc 1 276 26 is_stmt 0 view .LVU107
 374 0050 FFF7FEFF 		bl	wheel_unit
 375              	.LVL30:
 276:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT)
 376              		.loc 1 276 24 view .LVU108
 377 0054 4042     		rsbs	r0, r0, #0
 378 0056 F8E7     		b	.L49
 379              	.LVL31:
 380              	.L36:
 278:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT)
 381              		.loc 1 278 9 is_stmt 1 view .LVU109
 278:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT)
 382              		.loc 1 278 26 is_stmt 0 view .LVU110
 383 0058 FFF7FEFF 		bl	wheel_unit
 384              	.LVL32:
 278:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT)
 385              		.loc 1 278 24 view .LVU111
 386 005c 4042     		rsbs	r0, r0, #0
 387              	.L48:
 280:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 388              		.loc 1 280 24 view .LVU112
 389 005e 0F4B     		ldr	r3, .L50
 390 0060 5871     		strb	r0, [r3, #5]
 391 0062 E3E7     		b	.L29
 392              	.LVL33:
 393              	.L35:
 280:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 394              		.loc 1 280 9 is_stmt 1 view .LVU113
 280:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 395              		.loc 1 280 26 is_stmt 0 view .LVU114
 396 0064 FFF7FEFF 		bl	wheel_unit
 397              	.LVL34:
 280:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 398              		.loc 1 280 26 view .LVU115
 399 0068 F9E7     		b	.L48
 400              	.LVL35:
 401              	.L39:
 282:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 402              		.loc 1 282 9 is_stmt 1 view .LVU116
 282:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 403              		.loc 1 282 30 is_stmt 0 view .LVU117
 404 006a 0C4A     		ldr	r2, .L50
 282:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 405              		.loc 1 282 44 view .LVU118
 406 006c F138     		subs	r0, r0, #241
 407              	.LVL36:
 282:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 408              		.loc 1 282 30 view .LVU119
 409 006e 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 282:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 410              		.loc 1 282 35 view .LVU120
 411 0070 0123     		movs	r3, #1
 412 0072 8340     		lsls	r3, r3, r0
 282:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 413              		.loc 1 282 30 view .LVU121
 414 0074 0B43     		orrs	r3, r3, r1
 415 0076 5370     		strb	r3, [r2, #1]
 416 0078 D8E7     		b	.L29
 417              	.LVL37:
 418              	.L34:
 284:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 419              		.loc 1 284 9 is_stmt 1 view .LVU122
 284:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 420              		.loc 1 284 24 is_stmt 0 view .LVU123
 421 007a 094A     		ldr	r2, .L50+4
 422 007c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 423 007e 43F00103 		orr	r3, r3, #1
 424              	.L45:
 288:quantum/mousekey.c **** }
 425              		.loc 1 288 24 view .LVU124
 426 0082 1370     		strb	r3, [r2]
 427              		.loc 1 289 1 view .LVU125
 428 0084 D2E7     		b	.L29
 429              	.L33:
 286:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 430              		.loc 1 286 9 is_stmt 1 view .LVU126
 286:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 431              		.loc 1 286 24 is_stmt 0 view .LVU127
 432 0086 064A     		ldr	r2, .L50+4
 433 0088 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 434 008a 43F00203 		orr	r3, r3, #2
 435 008e F8E7     		b	.L45
 436              	.L31:
 288:quantum/mousekey.c **** }
 437              		.loc 1 288 9 is_stmt 1 view .LVU128
 288:quantum/mousekey.c **** }
 438              		.loc 1 288 24 is_stmt 0 view .LVU129
 439 0090 034A     		ldr	r2, .L50+4
 440 0092 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 441 0094 43F00403 		orr	r3, r3, #4
 442 0098 F3E7     		b	.L45
 443              	.L51:
 444 009a 00BF     		.align	2
 445              	.L50:
 446 009c 00000000 		.word	mouse_report
 447 00a0 00000000 		.word	mousekey_accel
 448              		.cfi_endproc
 449              	.LFE336:
 451              		.section	.text.mousekey_off,"ax",%progbits
 452              		.align	1
 453              		.global	mousekey_off
 454              		.syntax unified
 455              		.thumb
 456              		.thumb_func
 458              	mousekey_off:
 459              	.LVL38:
 460              	.LFB337:
 290:quantum/mousekey.c **** 
 291:quantum/mousekey.c **** void mousekey_off(uint8_t code) {
 461              		.loc 1 291 33 is_stmt 1 view -0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 0
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 292:quantum/mousekey.c ****     if (code == KC_MS_UP && mouse_report.y < 0)
 465              		.loc 1 292 5 view .LVU131
 291:quantum/mousekey.c ****     if (code == KC_MS_UP && mouse_report.y < 0)
 466              		.loc 1 291 33 is_stmt 0 view .LVU132
 467 0000 30B5     		push	{r4, r5, lr}
 468              		.cfi_def_cfa_offset 12
 469              		.cfi_offset 4, -12
 470              		.cfi_offset 5, -8
 471              		.cfi_offset 14, -4
 293:quantum/mousekey.c ****         mouse_report.y = 0;
 294:quantum/mousekey.c ****     else if (code == KC_MS_DOWN && mouse_report.y > 0)
 295:quantum/mousekey.c ****         mouse_report.y = 0;
 296:quantum/mousekey.c ****     else if (code == KC_MS_LEFT && mouse_report.x < 0)
 297:quantum/mousekey.c ****         mouse_report.x = 0;
 298:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT && mouse_report.x > 0)
 299:quantum/mousekey.c ****         mouse_report.x = 0;
 300:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP && mouse_report.v > 0)
 472              		.loc 1 300 49 view .LVU133
 473 0002 414B     		ldr	r3, .L75
 292:quantum/mousekey.c ****         mouse_report.y = 0;
 474              		.loc 1 292 8 view .LVU134
 475 0004 ED28     		cmp	r0, #237
 476              		.loc 1 300 49 view .LVU135
 477 0006 93F90410 		ldrsb	r1, [r3, #4]
 301:quantum/mousekey.c ****         mouse_report.v = 0;
 302:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN && mouse_report.v < 0)
 303:quantum/mousekey.c ****         mouse_report.v = 0;
 304:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT && mouse_report.h < 0)
 478              		.loc 1 304 51 view .LVU136
 479 000a 93F90520 		ldrsb	r2, [r3, #5]
 296:quantum/mousekey.c ****         mouse_report.x = 0;
 480              		.loc 1 296 48 view .LVU137
 481 000e 93F90240 		ldrsb	r4, [r3, #2]
 292:quantum/mousekey.c ****         mouse_report.y = 0;
 482              		.loc 1 292 41 view .LVU138
 483 0012 93F90350 		ldrsb	r5, [r3, #3]
 292:quantum/mousekey.c ****         mouse_report.y = 0;
 484              		.loc 1 292 8 view .LVU139
 485 0016 12D1     		bne	.L53
 292:quantum/mousekey.c ****         mouse_report.y = 0;
 486              		.loc 1 292 26 view .LVU140
 487 0018 002D     		cmp	r5, #0
 488 001a 01DA     		bge	.L54
 489              	.L56:
 293:quantum/mousekey.c ****     else if (code == KC_MS_DOWN && mouse_report.y > 0)
 490              		.loc 1 293 9 is_stmt 1 view .LVU141
 293:quantum/mousekey.c ****     else if (code == KC_MS_DOWN && mouse_report.y > 0)
 491              		.loc 1 293 24 is_stmt 0 view .LVU142
 492 001c 0022     		movs	r2, #0
 493 001e DA70     		strb	r2, [r3, #3]
 494              	.LVL39:
 495              	.L54:
 305:quantum/mousekey.c ****         mouse_report.h = 0;
 306:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0)
 307:quantum/mousekey.c ****         mouse_report.h = 0;
 308:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 309:quantum/mousekey.c ****         mouse_report.buttons &= ~(1 << (code - KC_MS_BTN1));
 310:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 311:quantum/mousekey.c ****         mousekey_accel &= ~(1 << 0);
 312:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 313:quantum/mousekey.c ****         mousekey_accel &= ~(1 << 1);
 314:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 315:quantum/mousekey.c ****         mousekey_accel &= ~(1 << 2);
 316:quantum/mousekey.c ****     if (mouse_report.x == 0 && mouse_report.y == 0) {
 496              		.loc 1 316 5 is_stmt 1 view .LVU143
 497              		.loc 1 316 29 is_stmt 0 view .LVU144
 498 0020 D978     		ldrb	r1, [r3, #3]	@ zero_extendqisi2
 499 0022 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 500 0024 0A43     		orrs	r2, r2, r1
 501 0026 51B2     		sxtb	r1, r2
 502 0028 0AB9     		cbnz	r2, .L71
 317:quantum/mousekey.c ****         mousekey_repeat = 0;
 503              		.loc 1 317 9 is_stmt 1 view .LVU145
 504              		.loc 1 317 25 is_stmt 0 view .LVU146
 505 002a 384A     		ldr	r2, .L75+4
 506 002c 1170     		strb	r1, [r2]
 507              	.L71:
 318:quantum/mousekey.c **** #    ifdef MK_KINETIC_SPEED
 319:quantum/mousekey.c ****         mouse_timer = 0;
 320:quantum/mousekey.c **** #    endif /* #ifdef MK_KINETIC_SPEED */
 321:quantum/mousekey.c ****     }
 322:quantum/mousekey.c ****     if (mouse_report.v == 0 && mouse_report.h == 0) mousekey_wheel_repeat = 0;
 508              		.loc 1 322 5 is_stmt 1 view .LVU147
 509              		.loc 1 322 29 is_stmt 0 view .LVU148
 510 002e 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 511 0030 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 512 0032 1343     		orrs	r3, r3, r2
 513 0034 5AB2     		sxtb	r2, r3
 514 0036 0BB9     		cbnz	r3, .L52
 515              		.loc 1 322 53 is_stmt 1 discriminator 2 view .LVU149
 516              		.loc 1 322 75 is_stmt 0 discriminator 2 view .LVU150
 517 0038 354B     		ldr	r3, .L75+8
 518 003a 1A70     		strb	r2, [r3]
 519              	.L52:
 323:quantum/mousekey.c **** }
 520              		.loc 1 323 1 view .LVU151
 521 003c 30BD     		pop	{r4, r5, pc}
 522              	.LVL40:
 523              	.L53:
 294:quantum/mousekey.c ****         mouse_report.y = 0;
 524              		.loc 1 294 10 is_stmt 1 view .LVU152
 294:quantum/mousekey.c ****         mouse_report.y = 0;
 525              		.loc 1 294 13 is_stmt 0 view .LVU153
 526 003e EE28     		cmp	r0, #238
 527 0040 02D1     		bne	.L55
 294:quantum/mousekey.c ****         mouse_report.y = 0;
 528              		.loc 1 294 33 view .LVU154
 529 0042 002D     		cmp	r5, #0
 530 0044 EADC     		bgt	.L56
 531 0046 EBE7     		b	.L54
 532              	.L55:
 296:quantum/mousekey.c ****         mouse_report.x = 0;
 533              		.loc 1 296 10 is_stmt 1 view .LVU155
 296:quantum/mousekey.c ****         mouse_report.x = 0;
 534              		.loc 1 296 13 is_stmt 0 view .LVU156
 535 0048 EF28     		cmp	r0, #239
 536 004a 04D1     		bne	.L57
 296:quantum/mousekey.c ****         mouse_report.x = 0;
 537              		.loc 1 296 33 view .LVU157
 538 004c 002C     		cmp	r4, #0
 539 004e E7DA     		bge	.L54
 540              	.L59:
 297:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT && mouse_report.x > 0)
 541              		.loc 1 297 9 is_stmt 1 view .LVU158
 297:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT && mouse_report.x > 0)
 542              		.loc 1 297 24 is_stmt 0 view .LVU159
 543 0050 0022     		movs	r2, #0
 544 0052 9A70     		strb	r2, [r3, #2]
 545 0054 E4E7     		b	.L54
 546              	.L57:
 298:quantum/mousekey.c ****         mouse_report.x = 0;
 547              		.loc 1 298 10 is_stmt 1 view .LVU160
 298:quantum/mousekey.c ****         mouse_report.x = 0;
 548              		.loc 1 298 13 is_stmt 0 view .LVU161
 549 0056 F028     		cmp	r0, #240
 550 0058 02D1     		bne	.L58
 298:quantum/mousekey.c ****         mouse_report.x = 0;
 551              		.loc 1 298 34 view .LVU162
 552 005a 002C     		cmp	r4, #0
 553 005c F8DC     		bgt	.L59
 554 005e DFE7     		b	.L54
 555              	.L58:
 300:quantum/mousekey.c ****         mouse_report.v = 0;
 556              		.loc 1 300 10 is_stmt 1 view .LVU163
 300:quantum/mousekey.c ****         mouse_report.v = 0;
 557              		.loc 1 300 13 is_stmt 0 view .LVU164
 558 0060 F928     		cmp	r0, #249
 559 0062 04D1     		bne	.L60
 300:quantum/mousekey.c ****         mouse_report.v = 0;
 560              		.loc 1 300 34 discriminator 1 view .LVU165
 561 0064 0029     		cmp	r1, #0
 562 0066 DBDD     		ble	.L54
 563              	.L62:
 301:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN && mouse_report.v < 0)
 564              		.loc 1 301 9 is_stmt 1 view .LVU166
 301:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN && mouse_report.v < 0)
 565              		.loc 1 301 24 is_stmt 0 view .LVU167
 566 0068 0022     		movs	r2, #0
 567 006a 1A71     		strb	r2, [r3, #4]
 568 006c D8E7     		b	.L54
 569              	.L60:
 302:quantum/mousekey.c ****         mouse_report.v = 0;
 570              		.loc 1 302 10 is_stmt 1 view .LVU168
 302:quantum/mousekey.c ****         mouse_report.v = 0;
 571              		.loc 1 302 13 is_stmt 0 view .LVU169
 572 006e FA28     		cmp	r0, #250
 573 0070 02D1     		bne	.L61
 302:quantum/mousekey.c ****         mouse_report.v = 0;
 574              		.loc 1 302 36 discriminator 1 view .LVU170
 575 0072 0029     		cmp	r1, #0
 576 0074 D4DA     		bge	.L54
 577 0076 F7E7     		b	.L62
 578              	.L61:
 304:quantum/mousekey.c ****         mouse_report.h = 0;
 579              		.loc 1 304 10 is_stmt 1 view .LVU171
 304:quantum/mousekey.c ****         mouse_report.h = 0;
 580              		.loc 1 304 13 is_stmt 0 view .LVU172
 581 0078 FB28     		cmp	r0, #251
 582 007a 04D1     		bne	.L63
 304:quantum/mousekey.c ****         mouse_report.h = 0;
 583              		.loc 1 304 36 discriminator 1 view .LVU173
 584 007c 002A     		cmp	r2, #0
 585 007e CFDA     		bge	.L54
 586              	.L65:
 305:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0)
 587              		.loc 1 305 9 is_stmt 1 view .LVU174
 305:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0)
 588              		.loc 1 305 24 is_stmt 0 view .LVU175
 589 0080 0022     		movs	r2, #0
 590 0082 5A71     		strb	r2, [r3, #5]
 591 0084 CCE7     		b	.L54
 592              	.L63:
 306:quantum/mousekey.c ****         mouse_report.h = 0;
 593              		.loc 1 306 10 is_stmt 1 view .LVU176
 306:quantum/mousekey.c ****         mouse_report.h = 0;
 594              		.loc 1 306 13 is_stmt 0 view .LVU177
 595 0086 FC28     		cmp	r0, #252
 596 0088 02D1     		bne	.L64
 306:quantum/mousekey.c ****         mouse_report.h = 0;
 597              		.loc 1 306 37 discriminator 1 view .LVU178
 598 008a 002A     		cmp	r2, #0
 599 008c F8DC     		bgt	.L65
 600 008e C7E7     		b	.L54
 601              	.L64:
 308:quantum/mousekey.c ****         mouse_report.buttons &= ~(1 << (code - KC_MS_BTN1));
 602              		.loc 1 308 10 is_stmt 1 view .LVU179
 603 0090 F138     		subs	r0, r0, #241
 604              	.LVL41:
 308:quantum/mousekey.c ****         mouse_report.buttons &= ~(1 << (code - KC_MS_BTN1));
 605              		.loc 1 308 10 is_stmt 0 view .LVU180
 606 0092 0E28     		cmp	r0, #14
 607 0094 C4D8     		bhi	.L54
 608 0096 01A2     		adr	r2, .L67
 609 0098 52F820F0 		ldr	pc, [r2, r0, lsl #2]
 610              		.p2align 2
 611              	.L67:
 612 009c D9000000 		.word	.L70+1
 613 00a0 D9000000 		.word	.L70+1
 614 00a4 D9000000 		.word	.L70+1
 615 00a8 D9000000 		.word	.L70+1
 616 00ac D9000000 		.word	.L70+1
 617 00b0 D9000000 		.word	.L70+1
 618 00b4 D9000000 		.word	.L70+1
 619 00b8 D9000000 		.word	.L70+1
 620 00bc 21000000 		.word	.L54+1
 621 00c0 21000000 		.word	.L54+1
 622 00c4 21000000 		.word	.L54+1
 623 00c8 21000000 		.word	.L54+1
 624 00cc E7000000 		.word	.L69+1
 625 00d0 F3000000 		.word	.L68+1
 626 00d4 FD000000 		.word	.L66+1
 627              		.p2align 1
 628              	.L70:
 309:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 629              		.loc 1 309 9 is_stmt 1 view .LVU181
 309:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 630              		.loc 1 309 30 is_stmt 0 view .LVU182
 631 00d8 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 309:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 632              		.loc 1 309 37 view .LVU183
 633 00da 0121     		movs	r1, #1
 634 00dc 8140     		lsls	r1, r1, r0
 309:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 635              		.loc 1 309 30 view .LVU184
 636 00de 22EA0102 		bic	r2, r2, r1
 637 00e2 5A70     		strb	r2, [r3, #1]
 638 00e4 9CE7     		b	.L54
 639              	.L69:
 311:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 640              		.loc 1 311 9 is_stmt 1 view .LVU185
 311:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 641              		.loc 1 311 24 is_stmt 0 view .LVU186
 642 00e6 0B49     		ldr	r1, .L75+12
 643 00e8 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 644 00ea 22F00102 		bic	r2, r2, #1
 645              	.L74:
 315:quantum/mousekey.c ****     if (mouse_report.x == 0 && mouse_report.y == 0) {
 646              		.loc 1 315 24 view .LVU187
 647 00ee 0A70     		strb	r2, [r1]
 648 00f0 96E7     		b	.L54
 649              	.L68:
 313:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 650              		.loc 1 313 9 is_stmt 1 view .LVU188
 313:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 651              		.loc 1 313 24 is_stmt 0 view .LVU189
 652 00f2 0849     		ldr	r1, .L75+12
 653 00f4 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 654 00f6 22F00202 		bic	r2, r2, #2
 655 00fa F8E7     		b	.L74
 656              	.L66:
 315:quantum/mousekey.c ****     if (mouse_report.x == 0 && mouse_report.y == 0) {
 657              		.loc 1 315 9 is_stmt 1 view .LVU190
 315:quantum/mousekey.c ****     if (mouse_report.x == 0 && mouse_report.y == 0) {
 658              		.loc 1 315 24 is_stmt 0 view .LVU191
 659 00fc 0549     		ldr	r1, .L75+12
 660 00fe 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 661 0100 22F00402 		bic	r2, r2, #4
 662 0104 F3E7     		b	.L74
 663              	.L76:
 664 0106 00BF     		.align	2
 665              	.L75:
 666 0108 00000000 		.word	mouse_report
 667 010c 00000000 		.word	mousekey_repeat
 668 0110 00000000 		.word	mousekey_wheel_repeat
 669 0114 00000000 		.word	mousekey_accel
 670              		.cfi_endproc
 671              	.LFE337:
 673              		.section	.rodata.mousekey_send.str1.1,"aMS",%progbits,1
 674              	.LC0:
 675 0000 6D6F7573 		.ascii	"mousekey [btn|x y v h](rep/acl): [\000"
 675      656B6579 
 675      205B6274 
 675      6E7C7820 
 675      79207620 
 676              	.LC1:
 677 0023 25303258 		.ascii	"%02X\000"
 677      00
 678              	.LC2:
 679 0028 7C00     		.ascii	"|\000"
 680              	.LC3:
 681 002a 256400   		.ascii	"%d\000"
 682              	.LC4:
 683 002d 2000     		.ascii	" \000"
 684              	.LC5:
 685 002f 5D2800   		.ascii	"](\000"
 686              	.LC6:
 687 0032 257500   		.ascii	"%u\000"
 688              	.LC7:
 689 0035 2F00     		.ascii	"/\000"
 690              	.LC8:
 691 0037 290A00   		.ascii	")\012\000"
 692              		.section	.text.mousekey_send,"ax",%progbits
 693              		.align	1
 694              		.global	mousekey_send
 695              		.syntax unified
 696              		.thumb
 697              		.thumb_func
 699              	mousekey_send:
 700              	.LFB338:
 324:quantum/mousekey.c **** 
 325:quantum/mousekey.c **** #else /* #ifndef MK_3_SPEED */
 326:quantum/mousekey.c **** 
 327:quantum/mousekey.c **** enum { mkspd_unmod, mkspd_0, mkspd_1, mkspd_2, mkspd_COUNT };
 328:quantum/mousekey.c **** #    ifndef MK_MOMENTARY_ACCEL
 329:quantum/mousekey.c **** static uint8_t  mk_speed                 = mkspd_1;
 330:quantum/mousekey.c **** #    else
 331:quantum/mousekey.c **** static uint8_t mk_speed      = mkspd_unmod;
 332:quantum/mousekey.c **** static uint8_t mkspd_DEFAULT = mkspd_unmod;
 333:quantum/mousekey.c **** #    endif
 334:quantum/mousekey.c **** static uint16_t last_timer_c             = 0;
 335:quantum/mousekey.c **** static uint16_t last_timer_w             = 0;
 336:quantum/mousekey.c **** uint16_t        c_offsets[mkspd_COUNT]   = {MK_C_OFFSET_UNMOD, MK_C_OFFSET_0, MK_C_OFFSET_1, MK_C_O
 337:quantum/mousekey.c **** uint16_t        c_intervals[mkspd_COUNT] = {MK_C_INTERVAL_UNMOD, MK_C_INTERVAL_0, MK_C_INTERVAL_1, 
 338:quantum/mousekey.c **** uint16_t        w_offsets[mkspd_COUNT]   = {MK_W_OFFSET_UNMOD, MK_W_OFFSET_0, MK_W_OFFSET_1, MK_W_O
 339:quantum/mousekey.c **** uint16_t        w_intervals[mkspd_COUNT] = {MK_W_INTERVAL_UNMOD, MK_W_INTERVAL_0, MK_W_INTERVAL_1, 
 340:quantum/mousekey.c **** 
 341:quantum/mousekey.c **** void mousekey_task(void) {
 342:quantum/mousekey.c ****     // report cursor and scroll movement independently
 343:quantum/mousekey.c ****     report_mouse_t const tmpmr = mouse_report;
 344:quantum/mousekey.c ****     mouse_report.x             = 0;
 345:quantum/mousekey.c ****     mouse_report.y             = 0;
 346:quantum/mousekey.c ****     mouse_report.v             = 0;
 347:quantum/mousekey.c ****     mouse_report.h             = 0;
 348:quantum/mousekey.c **** 
 349:quantum/mousekey.c ****     if ((tmpmr.x || tmpmr.y) && timer_elapsed(last_timer_c) > c_intervals[mk_speed]) {
 350:quantum/mousekey.c ****         mouse_report.x = tmpmr.x;
 351:quantum/mousekey.c ****         mouse_report.y = tmpmr.y;
 352:quantum/mousekey.c ****     }
 353:quantum/mousekey.c ****     if ((tmpmr.h || tmpmr.v) && timer_elapsed(last_timer_w) > w_intervals[mk_speed]) {
 354:quantum/mousekey.c ****         mouse_report.v = tmpmr.v;
 355:quantum/mousekey.c ****         mouse_report.h = tmpmr.h;
 356:quantum/mousekey.c ****     }
 357:quantum/mousekey.c **** 
 358:quantum/mousekey.c ****     if (mouse_report.x || mouse_report.y || mouse_report.v || mouse_report.h) mousekey_send();
 359:quantum/mousekey.c ****     mouse_report = tmpmr;
 360:quantum/mousekey.c **** }
 361:quantum/mousekey.c **** 
 362:quantum/mousekey.c **** void adjust_speed(void) {
 363:quantum/mousekey.c ****     uint16_t const c_offset = c_offsets[mk_speed];
 364:quantum/mousekey.c ****     uint16_t const w_offset = w_offsets[mk_speed];
 365:quantum/mousekey.c ****     if (mouse_report.x > 0) mouse_report.x = c_offset;
 366:quantum/mousekey.c ****     if (mouse_report.x < 0) mouse_report.x = c_offset * -1;
 367:quantum/mousekey.c ****     if (mouse_report.y > 0) mouse_report.y = c_offset;
 368:quantum/mousekey.c ****     if (mouse_report.y < 0) mouse_report.y = c_offset * -1;
 369:quantum/mousekey.c ****     if (mouse_report.h > 0) mouse_report.h = w_offset;
 370:quantum/mousekey.c ****     if (mouse_report.h < 0) mouse_report.h = w_offset * -1;
 371:quantum/mousekey.c ****     if (mouse_report.v > 0) mouse_report.v = w_offset;
 372:quantum/mousekey.c ****     if (mouse_report.v < 0) mouse_report.v = w_offset * -1;
 373:quantum/mousekey.c ****     // adjust for diagonals
 374:quantum/mousekey.c ****     if (mouse_report.x && mouse_report.y) {
 375:quantum/mousekey.c ****         mouse_report.x = times_inv_sqrt2(mouse_report.x);
 376:quantum/mousekey.c ****         if (mouse_report.x == 0) {
 377:quantum/mousekey.c ****             mouse_report.x = 1;
 378:quantum/mousekey.c ****         }
 379:quantum/mousekey.c ****         mouse_report.y = times_inv_sqrt2(mouse_report.y);
 380:quantum/mousekey.c ****         if (mouse_report.y == 0) {
 381:quantum/mousekey.c ****             mouse_report.y = 1;
 382:quantum/mousekey.c ****         }
 383:quantum/mousekey.c ****     }
 384:quantum/mousekey.c ****     if (mouse_report.h && mouse_report.v) {
 385:quantum/mousekey.c ****         mouse_report.h = times_inv_sqrt2(mouse_report.h);
 386:quantum/mousekey.c ****         mouse_report.v = times_inv_sqrt2(mouse_report.v);
 387:quantum/mousekey.c ****     }
 388:quantum/mousekey.c **** }
 389:quantum/mousekey.c **** 
 390:quantum/mousekey.c **** void mousekey_on(uint8_t code) {
 391:quantum/mousekey.c ****     uint16_t const c_offset  = c_offsets[mk_speed];
 392:quantum/mousekey.c ****     uint16_t const w_offset  = w_offsets[mk_speed];
 393:quantum/mousekey.c ****     uint8_t const  old_speed = mk_speed;
 394:quantum/mousekey.c ****     if (code == KC_MS_UP)
 395:quantum/mousekey.c ****         mouse_report.y = c_offset * -1;
 396:quantum/mousekey.c ****     else if (code == KC_MS_DOWN)
 397:quantum/mousekey.c ****         mouse_report.y = c_offset;
 398:quantum/mousekey.c ****     else if (code == KC_MS_LEFT)
 399:quantum/mousekey.c ****         mouse_report.x = c_offset * -1;
 400:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT)
 401:quantum/mousekey.c ****         mouse_report.x = c_offset;
 402:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP)
 403:quantum/mousekey.c ****         mouse_report.v = w_offset;
 404:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN)
 405:quantum/mousekey.c ****         mouse_report.v = w_offset * -1;
 406:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT)
 407:quantum/mousekey.c ****         mouse_report.h = w_offset * -1;
 408:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT)
 409:quantum/mousekey.c ****         mouse_report.h = w_offset;
 410:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 411:quantum/mousekey.c ****         mouse_report.buttons |= 1 << (code - KC_MS_BTN1);
 412:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 413:quantum/mousekey.c ****         mk_speed = mkspd_0;
 414:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 415:quantum/mousekey.c ****         mk_speed = mkspd_1;
 416:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 417:quantum/mousekey.c ****         mk_speed = mkspd_2;
 418:quantum/mousekey.c ****     if (mk_speed != old_speed) adjust_speed();
 419:quantum/mousekey.c **** }
 420:quantum/mousekey.c **** 
 421:quantum/mousekey.c **** void mousekey_off(uint8_t code) {
 422:quantum/mousekey.c **** #    ifdef MK_MOMENTARY_ACCEL
 423:quantum/mousekey.c ****     uint8_t const old_speed = mk_speed;
 424:quantum/mousekey.c **** #    endif
 425:quantum/mousekey.c ****     if (code == KC_MS_UP && mouse_report.y < 0)
 426:quantum/mousekey.c ****         mouse_report.y = 0;
 427:quantum/mousekey.c ****     else if (code == KC_MS_DOWN && mouse_report.y > 0)
 428:quantum/mousekey.c ****         mouse_report.y = 0;
 429:quantum/mousekey.c ****     else if (code == KC_MS_LEFT && mouse_report.x < 0)
 430:quantum/mousekey.c ****         mouse_report.x = 0;
 431:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT && mouse_report.x > 0)
 432:quantum/mousekey.c ****         mouse_report.x = 0;
 433:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP && mouse_report.v > 0)
 434:quantum/mousekey.c ****         mouse_report.v = 0;
 435:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN && mouse_report.v < 0)
 436:quantum/mousekey.c ****         mouse_report.v = 0;
 437:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT && mouse_report.h < 0)
 438:quantum/mousekey.c ****         mouse_report.h = 0;
 439:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0)
 440:quantum/mousekey.c ****         mouse_report.h = 0;
 441:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 442:quantum/mousekey.c ****         mouse_report.buttons &= ~(1 << (code - KC_MS_BTN1));
 443:quantum/mousekey.c **** #    ifdef MK_MOMENTARY_ACCEL
 444:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 445:quantum/mousekey.c ****         mk_speed = mkspd_DEFAULT;
 446:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 447:quantum/mousekey.c ****         mk_speed = mkspd_DEFAULT;
 448:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 449:quantum/mousekey.c ****         mk_speed = mkspd_DEFAULT;
 450:quantum/mousekey.c ****     if (mk_speed != old_speed) adjust_speed();
 451:quantum/mousekey.c **** #    endif
 452:quantum/mousekey.c **** }
 453:quantum/mousekey.c **** 
 454:quantum/mousekey.c **** #endif /* #ifndef MK_3_SPEED */
 455:quantum/mousekey.c **** 
 456:quantum/mousekey.c **** void mousekey_send(void) {
 701              		.loc 1 456 26 is_stmt 1 view -0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 0
 704              		@ frame_needed = 0, uses_anonymous_args = 0
 457:quantum/mousekey.c ****     mousekey_debug();
 705              		.loc 1 457 5 view .LVU193
 706              	.LBB12:
 707              	.LBI12:
 458:quantum/mousekey.c ****     uint16_t time = timer_read();
 459:quantum/mousekey.c ****     if (mouse_report.x || mouse_report.y) last_timer_c = time;
 460:quantum/mousekey.c ****     if (mouse_report.v || mouse_report.h) last_timer_w = time;
 461:quantum/mousekey.c ****     host_mouse_send(&mouse_report);
 462:quantum/mousekey.c **** }
 463:quantum/mousekey.c **** 
 464:quantum/mousekey.c **** void mousekey_clear(void) {
 465:quantum/mousekey.c ****     mouse_report          = (report_mouse_t){};
 466:quantum/mousekey.c ****     mousekey_repeat       = 0;
 467:quantum/mousekey.c ****     mousekey_wheel_repeat = 0;
 468:quantum/mousekey.c ****     mousekey_accel        = 0;
 469:quantum/mousekey.c **** }
 470:quantum/mousekey.c **** 
 471:quantum/mousekey.c **** static void mousekey_debug(void) {
 708              		.loc 1 471 13 view .LVU194
 709              	.LBB13:
 472:quantum/mousekey.c ****     if (!debug_mouse) return;
 710              		.loc 1 472 5 view .LVU195
 711              		.loc 1 472 10 is_stmt 0 view .LVU196
 712 0000 2A4B     		ldr	r3, .L90
 713 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 714              		.loc 1 472 8 view .LVU197
 715 0004 13F0080F 		tst	r3, #8
 716              	.LBE13:
 717              	.LBE12:
 456:quantum/mousekey.c ****     mousekey_debug();
 718              		.loc 1 456 26 view .LVU198
 719 0008 10B5     		push	{r4, lr}
 720              		.cfi_def_cfa_offset 8
 721              		.cfi_offset 4, -8
 722              		.cfi_offset 14, -4
 723 000a 294C     		ldr	r4, .L90+4
 724              	.LBB15:
 725              	.LBB14:
 726              		.loc 1 472 8 view .LVU199
 727 000c 39D0     		beq	.L78
 473:quantum/mousekey.c ****     print("mousekey [btn|x y v h](rep/acl): [");
 728              		.loc 1 473 5 is_stmt 1 view .LVU200
 729 000e 2948     		ldr	r0, .L90+8
 730 0010 FFF7FEFF 		bl	printf_
 731              	.LVL42:
 474:quantum/mousekey.c ****     print_hex8(mouse_report.buttons);
 732              		.loc 1 474 5 view .LVU201
 733 0014 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 734 0016 2848     		ldr	r0, .L90+12
 735 0018 FFF7FEFF 		bl	printf_
 736              	.LVL43:
 475:quantum/mousekey.c ****     print("|");
 737              		.loc 1 475 5 view .LVU202
 738 001c 2748     		ldr	r0, .L90+16
 739 001e FFF7FEFF 		bl	printf_
 740              	.LVL44:
 476:quantum/mousekey.c ****     print_decs(mouse_report.x);
 741              		.loc 1 476 5 view .LVU203
 742 0022 94F90210 		ldrsb	r1, [r4, #2]
 743 0026 2648     		ldr	r0, .L90+20
 744 0028 FFF7FEFF 		bl	printf_
 745              	.LVL45:
 477:quantum/mousekey.c ****     print(" ");
 746              		.loc 1 477 5 view .LVU204
 747 002c 2548     		ldr	r0, .L90+24
 748 002e FFF7FEFF 		bl	printf_
 749              	.LVL46:
 478:quantum/mousekey.c ****     print_decs(mouse_report.y);
 750              		.loc 1 478 5 view .LVU205
 751 0032 94F90310 		ldrsb	r1, [r4, #3]
 752 0036 2248     		ldr	r0, .L90+20
 753 0038 FFF7FEFF 		bl	printf_
 754              	.LVL47:
 479:quantum/mousekey.c ****     print(" ");
 755              		.loc 1 479 5 view .LVU206
 756 003c 2148     		ldr	r0, .L90+24
 757 003e FFF7FEFF 		bl	printf_
 758              	.LVL48:
 480:quantum/mousekey.c ****     print_decs(mouse_report.v);
 759              		.loc 1 480 5 view .LVU207
 760 0042 94F90410 		ldrsb	r1, [r4, #4]
 761 0046 1E48     		ldr	r0, .L90+20
 762 0048 FFF7FEFF 		bl	printf_
 763              	.LVL49:
 481:quantum/mousekey.c ****     print(" ");
 764              		.loc 1 481 5 view .LVU208
 765 004c 1D48     		ldr	r0, .L90+24
 766 004e FFF7FEFF 		bl	printf_
 767              	.LVL50:
 482:quantum/mousekey.c ****     print_decs(mouse_report.h);
 768              		.loc 1 482 5 view .LVU209
 769 0052 94F90510 		ldrsb	r1, [r4, #5]
 770 0056 1A48     		ldr	r0, .L90+20
 771 0058 FFF7FEFF 		bl	printf_
 772              	.LVL51:
 483:quantum/mousekey.c ****     print("](");
 773              		.loc 1 483 5 view .LVU210
 774 005c 1A48     		ldr	r0, .L90+28
 775 005e FFF7FEFF 		bl	printf_
 776              	.LVL52:
 484:quantum/mousekey.c ****     print_dec(mousekey_repeat);
 777              		.loc 1 484 5 view .LVU211
 778 0062 1A4B     		ldr	r3, .L90+32
 779 0064 1A48     		ldr	r0, .L90+36
 780 0066 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 781 0068 FFF7FEFF 		bl	printf_
 782              	.LVL53:
 485:quantum/mousekey.c ****     print("/");
 783              		.loc 1 485 5 view .LVU212
 784 006c 1948     		ldr	r0, .L90+40
 785 006e FFF7FEFF 		bl	printf_
 786              	.LVL54:
 486:quantum/mousekey.c ****     print_dec(mousekey_accel);
 787              		.loc 1 486 5 view .LVU213
 788 0072 194B     		ldr	r3, .L90+44
 789 0074 1648     		ldr	r0, .L90+36
 790 0076 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 791 0078 FFF7FEFF 		bl	printf_
 792              	.LVL55:
 487:quantum/mousekey.c ****     print(")\n");
 793              		.loc 1 487 5 view .LVU214
 794 007c 1748     		ldr	r0, .L90+48
 795 007e FFF7FEFF 		bl	printf_
 796              	.LVL56:
 797              	.L78:
 798              	.LBE14:
 799              	.LBE15:
 458:quantum/mousekey.c ****     if (mouse_report.x || mouse_report.y) last_timer_c = time;
 800              		.loc 1 458 5 view .LVU215
 458:quantum/mousekey.c ****     if (mouse_report.x || mouse_report.y) last_timer_c = time;
 801              		.loc 1 458 21 is_stmt 0 view .LVU216
 802 0082 FFF7FEFF 		bl	timer_read
 803              	.LVL57:
 459:quantum/mousekey.c ****     if (mouse_report.v || mouse_report.h) last_timer_w = time;
 804              		.loc 1 459 5 is_stmt 1 view .LVU217
 459:quantum/mousekey.c ****     if (mouse_report.v || mouse_report.h) last_timer_w = time;
 805              		.loc 1 459 24 is_stmt 0 view .LVU218
 806 0086 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 807 0088 E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 808 008a 1343     		orrs	r3, r3, r2
 459:quantum/mousekey.c ****     if (mouse_report.v || mouse_report.h) last_timer_w = time;
 809              		.loc 1 459 43 is_stmt 1 view .LVU219
 459:quantum/mousekey.c ****     if (mouse_report.v || mouse_report.h) last_timer_w = time;
 810              		.loc 1 459 56 is_stmt 0 view .LVU220
 811 008c 18BF     		it	ne
 812 008e 144B     		ldrne	r3, .L90+52
 460:quantum/mousekey.c ****     host_mouse_send(&mouse_report);
 813              		.loc 1 460 24 view .LVU221
 814 0090 6279     		ldrb	r2, [r4, #5]	@ zero_extendqisi2
 459:quantum/mousekey.c ****     if (mouse_report.v || mouse_report.h) last_timer_w = time;
 815              		.loc 1 459 56 view .LVU222
 816 0092 18BF     		it	ne
 817 0094 1880     		strhne	r0, [r3]	@ movhi
 460:quantum/mousekey.c ****     host_mouse_send(&mouse_report);
 818              		.loc 1 460 5 is_stmt 1 view .LVU223
 460:quantum/mousekey.c ****     host_mouse_send(&mouse_report);
 819              		.loc 1 460 24 is_stmt 0 view .LVU224
 820 0096 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 821 0098 1343     		orrs	r3, r3, r2
 460:quantum/mousekey.c ****     host_mouse_send(&mouse_report);
 822              		.loc 1 460 43 is_stmt 1 view .LVU225
 460:quantum/mousekey.c ****     host_mouse_send(&mouse_report);
 823              		.loc 1 460 56 is_stmt 0 view .LVU226
 824 009a 18BF     		it	ne
 825 009c 114B     		ldrne	r3, .L90+56
 462:quantum/mousekey.c **** 
 826              		.loc 1 462 1 view .LVU227
 827 009e BDE81040 		pop	{r4, lr}
 828              		.cfi_restore 14
 829              		.cfi_restore 4
 830              		.cfi_def_cfa_offset 0
 460:quantum/mousekey.c ****     host_mouse_send(&mouse_report);
 831              		.loc 1 460 56 view .LVU228
 832 00a2 18BF     		it	ne
 833 00a4 1880     		strhne	r0, [r3]	@ movhi
 461:quantum/mousekey.c **** }
 834              		.loc 1 461 5 is_stmt 1 view .LVU229
 835 00a6 0248     		ldr	r0, .L90+4
 836              	.LVL58:
 461:quantum/mousekey.c **** }
 837              		.loc 1 461 5 is_stmt 0 view .LVU230
 838 00a8 FFF7FEBF 		b	host_mouse_send
 839              	.LVL59:
 840              	.L91:
 841              		.align	2
 842              	.L90:
 843 00ac 00000000 		.word	debug_config
 844 00b0 00000000 		.word	mouse_report
 845 00b4 00000000 		.word	.LC0
 846 00b8 23000000 		.word	.LC1
 847 00bc 28000000 		.word	.LC2
 848 00c0 2A000000 		.word	.LC3
 849 00c4 2D000000 		.word	.LC4
 850 00c8 2F000000 		.word	.LC5
 851 00cc 00000000 		.word	mousekey_repeat
 852 00d0 32000000 		.word	.LC6
 853 00d4 35000000 		.word	.LC7
 854 00d8 00000000 		.word	mousekey_accel
 855 00dc 37000000 		.word	.LC8
 856 00e0 00000000 		.word	last_timer_c
 857 00e4 00000000 		.word	last_timer_w
 858              		.cfi_endproc
 859              	.LFE338:
 861              		.section	.text.mousekey_task,"ax",%progbits
 862              		.align	1
 863              		.global	mousekey_task
 864              		.syntax unified
 865              		.thumb
 866              		.thumb_func
 868              	mousekey_task:
 869              	.LFB335:
 210:quantum/mousekey.c ****     // report cursor and scroll movement independently
 870              		.loc 1 210 26 is_stmt 1 view -0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 212:quantum/mousekey.c **** 
 874              		.loc 1 212 5 view .LVU232
 210:quantum/mousekey.c ****     // report cursor and scroll movement independently
 875              		.loc 1 210 26 is_stmt 0 view .LVU233
 876 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 877              		.cfi_def_cfa_offset 32
 878              		.cfi_offset 4, -32
 879              		.cfi_offset 5, -28
 880              		.cfi_offset 6, -24
 881              		.cfi_offset 7, -20
 882              		.cfi_offset 8, -16
 883              		.cfi_offset 9, -12
 884              		.cfi_offset 10, -8
 885              		.cfi_offset 14, -4
 212:quantum/mousekey.c **** 
 886              		.loc 1 212 26 view .LVU234
 887 0004 564C     		ldr	r4, .L159
 888 0006 94F90280 		ldrsb	r8, [r4, #2]
 889 000a 94F90370 		ldrsb	r7, [r4, #3]
 890 000e 94F90460 		ldrsb	r6, [r4, #4]
 891 0012 94F90550 		ldrsb	r5, [r4, #5]
 892 0016 94F800A0 		ldrb	r10, [r4]	@ zero_extendqisi2
 893              	.LVL60:
 212:quantum/mousekey.c **** 
 894              		.loc 1 212 26 view .LVU235
 895 001a 94F80190 		ldrb	r9, [r4, #1]	@ zero_extendqisi2
 896              	.LVL61:
 214:quantum/mousekey.c ****     mouse_report.y = 0;
 897              		.loc 1 214 5 is_stmt 1 view .LVU236
 214:quantum/mousekey.c ****     mouse_report.y = 0;
 898              		.loc 1 214 20 is_stmt 0 view .LVU237
 899 001e 0023     		movs	r3, #0
 900 0020 A370     		strb	r3, [r4, #2]
 215:quantum/mousekey.c ****     mouse_report.v = 0;
 901              		.loc 1 215 5 is_stmt 1 view .LVU238
 215:quantum/mousekey.c ****     mouse_report.v = 0;
 902              		.loc 1 215 20 is_stmt 0 view .LVU239
 903 0022 E370     		strb	r3, [r4, #3]
 216:quantum/mousekey.c ****     mouse_report.h = 0;
 904              		.loc 1 216 5 is_stmt 1 view .LVU240
 216:quantum/mousekey.c ****     mouse_report.h = 0;
 905              		.loc 1 216 20 is_stmt 0 view .LVU241
 906 0024 2371     		strb	r3, [r4, #4]
 217:quantum/mousekey.c **** 
 907              		.loc 1 217 5 is_stmt 1 view .LVU242
 217:quantum/mousekey.c **** 
 908              		.loc 1 217 20 is_stmt 0 view .LVU243
 909 0026 6371     		strb	r3, [r4, #5]
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 910              		.loc 1 219 5 is_stmt 1 view .LVU244
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 911              		.loc 1 219 18 is_stmt 0 view .LVU245
 912 0028 58EA0703 		orrs	r3, r8, r7
 913 002c 0AD0     		beq	.L94
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 914              		.loc 1 219 33 discriminator 3 view .LVU246
 915 002e 4D4B     		ldr	r3, .L159+4
 916 0030 1888     		ldrh	r0, [r3]
 917 0032 FFF7FEFF 		bl	timer_elapsed
 918              	.LVL62:
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 919              		.loc 1 219 80 discriminator 3 view .LVU247
 920 0036 4C49     		ldr	r1, .L159+8
 921 0038 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 922              		.loc 1 219 94 discriminator 3 view .LVU248
 923 003a 3BB3     		cbz	r3, .L95
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 924              		.loc 1 219 94 discriminator 4 view .LVU249
 925 003c 4B4A     		ldr	r2, .L159+12
 926 003e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 927              		.loc 1 219 30 discriminator 4 view .LVU250
 928 0040 9042     		cmp	r0, r2
 929 0042 2DDC     		bgt	.L96
 930              	.L94:
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 931              		.loc 1 236 5 is_stmt 1 view .LVU251
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 932              		.loc 1 236 18 is_stmt 0 view .LVU252
 933 0044 56EA0503 		orrs	r3, r6, r5
 934 0048 0BD0     		beq	.L107
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 935              		.loc 1 236 33 discriminator 3 view .LVU253
 936 004a 494B     		ldr	r3, .L159+16
 937 004c 1888     		ldrh	r0, [r3]
 938 004e FFF7FEFF 		bl	timer_elapsed
 939              	.LVL63:
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 940              		.loc 1 236 86 discriminator 3 view .LVU254
 941 0052 4849     		ldr	r1, .L159+20
 942 0054 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 943              		.loc 1 236 106 discriminator 3 view .LVU255
 944 0056 002B     		cmp	r3, #0
 945 0058 4ED0     		beq	.L108
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 946              		.loc 1 236 106 discriminator 4 view .LVU256
 947 005a 474A     		ldr	r2, .L159+24
 948 005c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 949              		.loc 1 236 30 discriminator 4 view .LVU257
 950 005e 9042     		cmp	r0, r2
 951 0060 54DC     		bgt	.L109
 952              	.L107:
 254:quantum/mousekey.c ****     mouse_report = tmpmr;
 953              		.loc 1 254 5 is_stmt 1 view .LVU258
 254:quantum/mousekey.c ****     mouse_report = tmpmr;
 954              		.loc 1 254 60 is_stmt 0 view .LVU259
 955 0062 E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 956 0064 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 957 0066 1343     		orrs	r3, r3, r2
 958 0068 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 959 006a 1343     		orrs	r3, r3, r2
 960 006c 6279     		ldrb	r2, [r4, #5]	@ zero_extendqisi2
 961 006e 1343     		orrs	r3, r3, r2
 962 0070 01D0     		beq	.L119
 254:quantum/mousekey.c ****     mouse_report = tmpmr;
 963              		.loc 1 254 79 is_stmt 1 discriminator 7 view .LVU260
 964 0072 FFF7FEFF 		bl	mousekey_send
 965              	.LVL64:
 966              	.L119:
 255:quantum/mousekey.c **** }
 967              		.loc 1 255 5 view .LVU261
 255:quantum/mousekey.c **** }
 968              		.loc 1 255 18 is_stmt 0 view .LVU262
 969 0076 84F800A0 		strb	r10, [r4]
 970 007a 84F80190 		strb	r9, [r4, #1]
 971 007e 84F80280 		strb	r8, [r4, #2]
 972 0082 E770     		strb	r7, [r4, #3]
 973 0084 2671     		strb	r6, [r4, #4]
 974 0086 6571     		strb	r5, [r4, #5]
 975              	.LVL65:
 256:quantum/mousekey.c **** 
 976              		.loc 1 256 1 view .LVU263
 977 0088 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 978              	.LVL66:
 979              	.L95:
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 980              		.loc 1 219 94 discriminator 5 view .LVU264
 981 008c 3B4A     		ldr	r2, .L159+28
 982 008e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 983 0090 02EB8202 		add	r2, r2, r2, lsl #2
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 984              		.loc 1 219 30 discriminator 5 view .LVU265
 985 0094 B0EB420F 		cmp	r0, r2, lsl #1
 986 0098 D4DD     		ble	.L94
 987              	.L98:
 220:quantum/mousekey.c ****         if (tmpmr.x != 0) mouse_report.x = move_unit() * ((tmpmr.x > 0) ? 1 : -1);
 988              		.loc 1 220 43 is_stmt 1 discriminator 1 view .LVU266
 220:quantum/mousekey.c ****         if (tmpmr.x != 0) mouse_report.x = move_unit() * ((tmpmr.x > 0) ? 1 : -1);
 989              		.loc 1 220 58 is_stmt 0 discriminator 1 view .LVU267
 990 009a 0133     		adds	r3, r3, #1
 991 009c 0B70     		strb	r3, [r1]
 992 009e 01E0     		b	.L99
 993              	.L96:
 220:quantum/mousekey.c ****         if (tmpmr.x != 0) mouse_report.x = move_unit() * ((tmpmr.x > 0) ? 1 : -1);
 994              		.loc 1 220 9 is_stmt 1 view .LVU268
 220:quantum/mousekey.c ****         if (tmpmr.x != 0) mouse_report.x = move_unit() * ((tmpmr.x > 0) ? 1 : -1);
 995              		.loc 1 220 12 is_stmt 0 view .LVU269
 996 00a0 FF2B     		cmp	r3, #255
 997 00a2 FAD1     		bne	.L98
 998              	.L99:
 221:quantum/mousekey.c ****         if (tmpmr.y != 0) mouse_report.y = move_unit() * ((tmpmr.y > 0) ? 1 : -1);
 999              		.loc 1 221 9 is_stmt 1 view .LVU270
 221:quantum/mousekey.c ****         if (tmpmr.y != 0) mouse_report.y = move_unit() * ((tmpmr.y > 0) ? 1 : -1);
 1000              		.loc 1 221 12 is_stmt 0 view .LVU271
 1001 00a4 B8F1000F 		cmp	r8, #0
 1002 00a8 08D0     		beq	.L100
 221:quantum/mousekey.c ****         if (tmpmr.y != 0) mouse_report.y = move_unit() * ((tmpmr.y > 0) ? 1 : -1);
 1003              		.loc 1 221 27 is_stmt 1 discriminator 1 view .LVU272
 221:quantum/mousekey.c ****         if (tmpmr.y != 0) mouse_report.y = move_unit() * ((tmpmr.y > 0) ? 1 : -1);
 1004              		.loc 1 221 44 is_stmt 0 discriminator 1 view .LVU273
 1005 00aa FFF7FEFF 		bl	move_unit
 1006              	.LVL67:
 221:quantum/mousekey.c ****         if (tmpmr.y != 0) mouse_report.y = move_unit() * ((tmpmr.y > 0) ? 1 : -1);
 1007              		.loc 1 221 42 discriminator 1 view .LVU274
 1008 00ae B8F1000F 		cmp	r8, #0
 1009 00b2 CCBF     		ite	gt
 1010 00b4 0123     		movgt	r3, #1
 1011 00b6 FF23     		movle	r3, #255
 1012 00b8 4343     		muls	r3, r0, r3
 1013 00ba A370     		strb	r3, [r4, #2]
 1014              	.L100:
 222:quantum/mousekey.c **** 
 1015              		.loc 1 222 9 is_stmt 1 view .LVU275
 222:quantum/mousekey.c **** 
 1016              		.loc 1 222 12 is_stmt 0 view .LVU276
 1017 00bc 3FB1     		cbz	r7, .L102
 222:quantum/mousekey.c **** 
 1018              		.loc 1 222 27 is_stmt 1 discriminator 1 view .LVU277
 222:quantum/mousekey.c **** 
 1019              		.loc 1 222 44 is_stmt 0 discriminator 1 view .LVU278
 1020 00be FFF7FEFF 		bl	move_unit
 1021              	.LVL68:
 222:quantum/mousekey.c **** 
 1022              		.loc 1 222 42 discriminator 1 view .LVU279
 1023 00c2 002F     		cmp	r7, #0
 1024 00c4 CCBF     		ite	gt
 1025 00c6 0123     		movgt	r3, #1
 1026 00c8 FF23     		movle	r3, #255
 1027 00ca 4343     		muls	r3, r0, r3
 1028 00cc E370     		strb	r3, [r4, #3]
 1029              	.L102:
 225:quantum/mousekey.c ****             mouse_report.x = times_inv_sqrt2(mouse_report.x);
 1030              		.loc 1 225 9 is_stmt 1 view .LVU280
 225:quantum/mousekey.c ****             mouse_report.x = times_inv_sqrt2(mouse_report.x);
 1031              		.loc 1 225 25 is_stmt 0 view .LVU281
 1032 00ce 94F90230 		ldrsb	r3, [r4, #2]
 225:quantum/mousekey.c ****             mouse_report.x = times_inv_sqrt2(mouse_report.x);
 1033              		.loc 1 225 12 view .LVU282
 1034 00d2 002B     		cmp	r3, #0
 1035 00d4 B6D0     		beq	.L94
 225:quantum/mousekey.c ****             mouse_report.x = times_inv_sqrt2(mouse_report.x);
 1036              		.loc 1 225 43 discriminator 1 view .LVU283
 1037 00d6 94F90320 		ldrsb	r2, [r4, #3]
 225:quantum/mousekey.c ****             mouse_report.x = times_inv_sqrt2(mouse_report.x);
 1038              		.loc 1 225 28 discriminator 1 view .LVU284
 1039 00da 002A     		cmp	r2, #0
 1040 00dc B2D0     		beq	.L94
 226:quantum/mousekey.c ****             if (mouse_report.x == 0) {
 1041              		.loc 1 226 13 is_stmt 1 view .LVU285
 1042              	.LVL69:
 1043              	.LBB16:
 1044              	.LBI16:
  26:quantum/mousekey.c ****     // 181/256 is pretty close to 1/sqrt(2)
 1045              		.loc 1 26 15 view .LVU286
 1046              	.LBB17:
  31:quantum/mousekey.c **** }
 1047              		.loc 1 31 5 view .LVU287
  31:quantum/mousekey.c **** }
 1048              		.loc 1 31 5 is_stmt 0 view .LVU288
 1049              	.LBE17:
 1050              	.LBE16:
 227:quantum/mousekey.c ****                 mouse_report.x = 1;
 1051              		.loc 1 227 13 is_stmt 1 view .LVU289
 1052              	.LBB19:
 1053              	.LBB18:
  31:quantum/mousekey.c **** }
 1054              		.loc 1 31 15 is_stmt 0 view .LVU290
 1055 00de B521     		movs	r1, #181
 1056 00e0 4B43     		muls	r3, r1, r3
 1057              	.LBE18:
 1058              	.LBE19:
 227:quantum/mousekey.c ****                 mouse_report.x = 1;
 1059              		.loc 1 227 16 view .LVU291
 1060 00e2 1B12     		asrs	r3, r3, #8
 1061 00e4 08BF     		it	eq
 1062 00e6 0123     		moveq	r3, #1
 1063 00e8 A370     		strb	r3, [r4, #2]
 230:quantum/mousekey.c ****             if (mouse_report.y == 0) {
 1064              		.loc 1 230 13 is_stmt 1 view .LVU292
 1065              	.LVL70:
 1066              	.LBB20:
 1067              	.LBI20:
  26:quantum/mousekey.c ****     // 181/256 is pretty close to 1/sqrt(2)
 1068              		.loc 1 26 15 view .LVU293
 1069              	.LBB21:
  31:quantum/mousekey.c **** }
 1070              		.loc 1 31 5 view .LVU294
  31:quantum/mousekey.c **** }
 1071              		.loc 1 31 5 is_stmt 0 view .LVU295
 1072              	.LBE21:
 1073              	.LBE20:
 231:quantum/mousekey.c ****                 mouse_report.y = 1;
 1074              		.loc 1 231 13 is_stmt 1 view .LVU296
 1075              	.LBB23:
 1076              	.LBB22:
  31:quantum/mousekey.c **** }
 1077              		.loc 1 31 15 is_stmt 0 view .LVU297
 1078 00ea 01FB02F3 		mul	r3, r1, r2
 1079              	.LBE22:
 1080              	.LBE23:
 231:quantum/mousekey.c ****                 mouse_report.y = 1;
 1081              		.loc 1 231 16 view .LVU298
 1082 00ee 1B12     		asrs	r3, r3, #8
 232:quantum/mousekey.c ****             }
 1083              		.loc 1 232 17 is_stmt 1 view .LVU299
 232:quantum/mousekey.c ****             }
 1084              		.loc 1 232 32 is_stmt 0 view .LVU300
 1085 00f0 08BF     		it	eq
 1086 00f2 0123     		moveq	r3, #1
 1087 00f4 E370     		strb	r3, [r4, #3]
 1088 00f6 A5E7     		b	.L94
 1089              	.L108:
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 1090              		.loc 1 236 106 discriminator 5 view .LVU301
 1091 00f8 214A     		ldr	r2, .L159+32
 1092 00fa 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1093 00fc 02EB8202 		add	r2, r2, r2, lsl #2
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 1094              		.loc 1 236 30 discriminator 5 view .LVU302
 1095 0100 B0EB420F 		cmp	r0, r2, lsl #1
 1096 0104 ADDD     		ble	.L107
 1097              	.L111:
 237:quantum/mousekey.c ****         if (tmpmr.v != 0) mouse_report.v = wheel_unit() * ((tmpmr.v > 0) ? 1 : -1);
 1098              		.loc 1 237 49 is_stmt 1 discriminator 1 view .LVU303
 237:quantum/mousekey.c ****         if (tmpmr.v != 0) mouse_report.v = wheel_unit() * ((tmpmr.v > 0) ? 1 : -1);
 1099              		.loc 1 237 70 is_stmt 0 discriminator 1 view .LVU304
 1100 0106 0133     		adds	r3, r3, #1
 1101 0108 0B70     		strb	r3, [r1]
 1102 010a 01E0     		b	.L112
 1103              	.L109:
 237:quantum/mousekey.c ****         if (tmpmr.v != 0) mouse_report.v = wheel_unit() * ((tmpmr.v > 0) ? 1 : -1);
 1104              		.loc 1 237 9 is_stmt 1 view .LVU305
 237:quantum/mousekey.c ****         if (tmpmr.v != 0) mouse_report.v = wheel_unit() * ((tmpmr.v > 0) ? 1 : -1);
 1105              		.loc 1 237 12 is_stmt 0 view .LVU306
 1106 010c FF2B     		cmp	r3, #255
 1107 010e FAD1     		bne	.L111
 1108              	.L112:
 238:quantum/mousekey.c ****         if (tmpmr.h != 0) mouse_report.h = wheel_unit() * ((tmpmr.h > 0) ? 1 : -1);
 1109              		.loc 1 238 9 is_stmt 1 view .LVU307
 238:quantum/mousekey.c ****         if (tmpmr.h != 0) mouse_report.h = wheel_unit() * ((tmpmr.h > 0) ? 1 : -1);
 1110              		.loc 1 238 12 is_stmt 0 view .LVU308
 1111 0110 3EB1     		cbz	r6, .L113
 238:quantum/mousekey.c ****         if (tmpmr.h != 0) mouse_report.h = wheel_unit() * ((tmpmr.h > 0) ? 1 : -1);
 1112              		.loc 1 238 27 is_stmt 1 discriminator 1 view .LVU309
 238:quantum/mousekey.c ****         if (tmpmr.h != 0) mouse_report.h = wheel_unit() * ((tmpmr.h > 0) ? 1 : -1);
 1113              		.loc 1 238 44 is_stmt 0 discriminator 1 view .LVU310
 1114 0112 FFF7FEFF 		bl	wheel_unit
 1115              	.LVL71:
 238:quantum/mousekey.c ****         if (tmpmr.h != 0) mouse_report.h = wheel_unit() * ((tmpmr.h > 0) ? 1 : -1);
 1116              		.loc 1 238 42 discriminator 1 view .LVU311
 1117 0116 002E     		cmp	r6, #0
 1118 0118 CCBF     		ite	gt
 1119 011a 0123     		movgt	r3, #1
 1120 011c FF23     		movle	r3, #255
 1121 011e 4343     		muls	r3, r0, r3
 1122 0120 2371     		strb	r3, [r4, #4]
 1123              	.L113:
 239:quantum/mousekey.c **** 
 1124              		.loc 1 239 9 is_stmt 1 view .LVU312
 239:quantum/mousekey.c **** 
 1125              		.loc 1 239 12 is_stmt 0 view .LVU313
 1126 0122 3DB1     		cbz	r5, .L115
 239:quantum/mousekey.c **** 
 1127              		.loc 1 239 27 is_stmt 1 discriminator 1 view .LVU314
 239:quantum/mousekey.c **** 
 1128              		.loc 1 239 44 is_stmt 0 discriminator 1 view .LVU315
 1129 0124 FFF7FEFF 		bl	wheel_unit
 1130              	.LVL72:
 239:quantum/mousekey.c **** 
 1131              		.loc 1 239 42 discriminator 1 view .LVU316
 1132 0128 002D     		cmp	r5, #0
 1133 012a CCBF     		ite	gt
 1134 012c 0123     		movgt	r3, #1
 1135 012e FF23     		movle	r3, #255
 1136 0130 4343     		muls	r3, r0, r3
 1137 0132 6371     		strb	r3, [r4, #5]
 1138              	.L115:
 242:quantum/mousekey.c ****             mouse_report.v = times_inv_sqrt2(mouse_report.v);
 1139              		.loc 1 242 9 is_stmt 1 view .LVU317
 242:quantum/mousekey.c ****             mouse_report.v = times_inv_sqrt2(mouse_report.v);
 1140              		.loc 1 242 25 is_stmt 0 view .LVU318
 1141 0134 94F90430 		ldrsb	r3, [r4, #4]
 242:quantum/mousekey.c ****             mouse_report.v = times_inv_sqrt2(mouse_report.v);
 1142              		.loc 1 242 43 view .LVU319
 1143 0138 94F90520 		ldrsb	r2, [r4, #5]
 242:quantum/mousekey.c ****             mouse_report.v = times_inv_sqrt2(mouse_report.v);
 1144              		.loc 1 242 12 view .LVU320
 1145 013c 002B     		cmp	r3, #0
 1146 013e 90D0     		beq	.L107
 242:quantum/mousekey.c ****             mouse_report.v = times_inv_sqrt2(mouse_report.v);
 1147              		.loc 1 242 28 discriminator 1 view .LVU321
 1148 0140 002A     		cmp	r2, #0
 1149 0142 8ED0     		beq	.L107
 243:quantum/mousekey.c ****             if (mouse_report.v == 0) {
 1150              		.loc 1 243 13 is_stmt 1 view .LVU322
 1151              	.LVL73:
 1152              	.LBB24:
 1153              	.LBI24:
  26:quantum/mousekey.c ****     // 181/256 is pretty close to 1/sqrt(2)
 1154              		.loc 1 26 15 view .LVU323
 1155              	.LBB25:
  31:quantum/mousekey.c **** }
 1156              		.loc 1 31 5 view .LVU324
  31:quantum/mousekey.c **** }
 1157              		.loc 1 31 5 is_stmt 0 view .LVU325
 1158              	.LBE25:
 1159              	.LBE24:
 244:quantum/mousekey.c ****                 mouse_report.v = 1;
 1160              		.loc 1 244 13 is_stmt 1 view .LVU326
 1161              	.LBB27:
 1162              	.LBB26:
  31:quantum/mousekey.c **** }
 1163              		.loc 1 31 15 is_stmt 0 view .LVU327
 1164 0144 B521     		movs	r1, #181
 1165 0146 4B43     		muls	r3, r1, r3
 1166              	.LBE26:
 1167              	.LBE27:
 244:quantum/mousekey.c ****                 mouse_report.v = 1;
 1168              		.loc 1 244 16 view .LVU328
 1169 0148 1B12     		asrs	r3, r3, #8
 1170 014a 08BF     		it	eq
 1171 014c 0123     		moveq	r3, #1
 1172 014e 2371     		strb	r3, [r4, #4]
 247:quantum/mousekey.c ****             if (mouse_report.h == 0) {
 1173              		.loc 1 247 13 is_stmt 1 view .LVU329
 1174              	.LVL74:
 1175              	.LBB28:
 1176              	.LBI28:
  26:quantum/mousekey.c ****     // 181/256 is pretty close to 1/sqrt(2)
 1177              		.loc 1 26 15 view .LVU330
 1178              	.LBB29:
  31:quantum/mousekey.c **** }
 1179              		.loc 1 31 5 view .LVU331
  31:quantum/mousekey.c **** }
 1180              		.loc 1 31 5 is_stmt 0 view .LVU332
 1181              	.LBE29:
 1182              	.LBE28:
 248:quantum/mousekey.c ****                 mouse_report.h = 1;
 1183              		.loc 1 248 13 is_stmt 1 view .LVU333
 1184              	.LBB31:
 1185              	.LBB30:
  31:quantum/mousekey.c **** }
 1186              		.loc 1 31 15 is_stmt 0 view .LVU334
 1187 0150 01FB02F3 		mul	r3, r1, r2
 1188              	.LBE30:
 1189              	.LBE31:
 248:quantum/mousekey.c ****                 mouse_report.h = 1;
 1190              		.loc 1 248 16 view .LVU335
 1191 0154 1B12     		asrs	r3, r3, #8
 249:quantum/mousekey.c ****             }
 1192              		.loc 1 249 17 is_stmt 1 view .LVU336
 249:quantum/mousekey.c ****             }
 1193              		.loc 1 249 32 is_stmt 0 view .LVU337
 1194 0156 08BF     		it	eq
 1195 0158 0123     		moveq	r3, #1
 1196 015a 6371     		strb	r3, [r4, #5]
 1197 015c 81E7     		b	.L107
 1198              	.L160:
 1199 015e 00BF     		.align	2
 1200              	.L159:
 1201 0160 00000000 		.word	mouse_report
 1202 0164 00000000 		.word	last_timer_c
 1203 0168 00000000 		.word	mousekey_repeat
 1204 016c 00000000 		.word	mk_interval
 1205 0170 00000000 		.word	last_timer_w
 1206 0174 00000000 		.word	mousekey_wheel_repeat
 1207 0178 00000000 		.word	mk_wheel_interval
 1208 017c 00000000 		.word	mk_delay
 1209 0180 00000000 		.word	mk_wheel_delay
 1210              		.cfi_endproc
 1211              	.LFE335:
 1213              		.section	.text.mousekey_clear,"ax",%progbits
 1214              		.align	1
 1215              		.global	mousekey_clear
 1216              		.syntax unified
 1217              		.thumb
 1218              		.thumb_func
 1220              	mousekey_clear:
 1221              	.LFB339:
 464:quantum/mousekey.c ****     mouse_report          = (report_mouse_t){};
 1222              		.loc 1 464 27 is_stmt 1 view -0
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 0
 1225              		@ frame_needed = 0, uses_anonymous_args = 0
 1226              		@ link register save eliminated.
 465:quantum/mousekey.c ****     mousekey_repeat       = 0;
 1227              		.loc 1 465 5 view .LVU339
 465:quantum/mousekey.c ****     mousekey_repeat       = 0;
 1228              		.loc 1 465 27 is_stmt 0 view .LVU340
 1229 0000 054A     		ldr	r2, .L162
 1230 0002 0023     		movs	r3, #0
 1231 0004 1360     		str	r3, [r2]	@ unaligned
 1232 0006 9380     		strh	r3, [r2, #4]	@ unaligned
 466:quantum/mousekey.c ****     mousekey_wheel_repeat = 0;
 1233              		.loc 1 466 5 is_stmt 1 view .LVU341
 466:quantum/mousekey.c ****     mousekey_wheel_repeat = 0;
 1234              		.loc 1 466 27 is_stmt 0 view .LVU342
 1235 0008 044A     		ldr	r2, .L162+4
 1236 000a 1370     		strb	r3, [r2]
 467:quantum/mousekey.c ****     mousekey_accel        = 0;
 1237              		.loc 1 467 5 is_stmt 1 view .LVU343
 467:quantum/mousekey.c ****     mousekey_accel        = 0;
 1238              		.loc 1 467 27 is_stmt 0 view .LVU344
 1239 000c 044A     		ldr	r2, .L162+8
 1240 000e 1370     		strb	r3, [r2]
 468:quantum/mousekey.c **** }
 1241              		.loc 1 468 5 is_stmt 1 view .LVU345
 468:quantum/mousekey.c **** }
 1242              		.loc 1 468 27 is_stmt 0 view .LVU346
 1243 0010 044A     		ldr	r2, .L162+12
 1244 0012 1370     		strb	r3, [r2]
 469:quantum/mousekey.c **** 
 1245              		.loc 1 469 1 view .LVU347
 1246 0014 7047     		bx	lr
 1247              	.L163:
 1248 0016 00BF     		.align	2
 1249              	.L162:
 1250 0018 00000000 		.word	mouse_report
 1251 001c 00000000 		.word	mousekey_repeat
 1252 0020 00000000 		.word	mousekey_wheel_repeat
 1253 0024 00000000 		.word	mousekey_accel
 1254              		.cfi_endproc
 1255              	.LFE339:
 1257              		.section	.text.mousekey_get_report,"ax",%progbits
 1258              		.align	1
 1259              		.global	mousekey_get_report
 1260              		.syntax unified
 1261              		.thumb
 1262              		.thumb_func
 1264              	mousekey_get_report:
 1265              	.LVL75:
 1266              	.LFB341:
 488:quantum/mousekey.c **** }
 489:quantum/mousekey.c **** 
 490:quantum/mousekey.c **** report_mouse_t mousekey_get_report(void) { return mouse_report; }
 1267              		.loc 1 490 42 is_stmt 1 view -0
 1268              		.cfi_startproc
 1269              		@ args = 0, pretend = 0, frame = 0
 1270              		@ frame_needed = 0, uses_anonymous_args = 0
 1271              		@ link register save eliminated.
 1272              		.loc 1 490 44 view .LVU349
 1273              		.loc 1 490 51 is_stmt 0 view .LVU350
 1274 0000 024A     		ldr	r2, .L165
 1275 0002 1168     		ldr	r1, [r2]	@ unaligned
 1276 0004 9288     		ldrh	r2, [r2, #4]	@ unaligned
 1277 0006 0160     		str	r1, [r0]	@ unaligned
 1278 0008 8280     		strh	r2, [r0, #4]	@ unaligned
 1279              		.loc 1 490 65 view .LVU351
 1280 000a 7047     		bx	lr
 1281              	.L166:
 1282              		.align	2
 1283              	.L165:
 1284 000c 00000000 		.word	mouse_report
 1285              		.cfi_endproc
 1286              	.LFE341:
 1288              		.global	mk_wheel_time_to_max
 1289              		.section	.data.mk_wheel_time_to_max,"aw"
 1292              	mk_wheel_time_to_max:
 1293 0000 28       		.byte	40
 1294              		.global	mk_wheel_max_speed
 1295              		.section	.data.mk_wheel_max_speed,"aw"
 1298              	mk_wheel_max_speed:
 1299 0000 08       		.byte	8
 1300              		.global	mk_wheel_interval
 1301              		.section	.data.mk_wheel_interval,"aw"
 1304              	mk_wheel_interval:
 1305 0000 64       		.byte	100
 1306              		.global	mk_wheel_delay
 1307              		.section	.data.mk_wheel_delay,"aw"
 1310              	mk_wheel_delay:
 1311 0000 1E       		.byte	30
 1312              		.global	mk_time_to_max
 1313              		.section	.data.mk_time_to_max,"aw"
 1316              	mk_time_to_max:
 1317 0000 14       		.byte	20
 1318              		.global	mk_max_speed
 1319              		.section	.data.mk_max_speed,"aw"
 1322              	mk_max_speed:
 1323 0000 0A       		.byte	10
 1324              		.global	mk_interval
 1325              		.section	.data.mk_interval,"aw"
 1328              	mk_interval:
 1329 0000 32       		.byte	50
 1330              		.global	mk_delay
 1331              		.section	.data.mk_delay,"aw"
 1334              	mk_delay:
 1335 0000 1E       		.byte	30
 1336              		.section	.bss.last_timer_w,"aw",%nobits
 1337              		.align	1
 1340              	last_timer_w:
 1341 0000 0000     		.space	2
 1342              		.section	.bss.last_timer_c,"aw",%nobits
 1343              		.align	1
 1346              	last_timer_c:
 1347 0000 0000     		.space	2
 1348              		.section	.bss.mousekey_wheel_repeat,"aw",%nobits
 1351              	mousekey_wheel_repeat:
 1352 0000 00       		.space	1
 1353              		.section	.bss.mousekey_repeat,"aw",%nobits
 1356              	mousekey_repeat:
 1357 0000 00       		.space	1
 1358              		.section	.bss.mousekey_accel,"aw",%nobits
 1361              	mousekey_accel:
 1362 0000 00       		.space	1
 1363              		.section	.bss.mouse_report,"aw",%nobits
 1366              	mouse_report:
 1367 0000 00000000 		.space	6
 1367      0000
 1368              		.text
 1369              	.Letext0:
 1370              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1371              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1372              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 1373              		.file 5 "tmk_core/common/report.h"
 1374              		.file 6 "quantum/logging/debug.h"
 1375              		.file 7 "quantum/mousekey.h"
 1376              		.file 8 "lib/printf/printf.h"
 1377              		.file 9 "tmk_core/common/timer.h"
 1378              		.file 10 "tmk_core/common/host.h"
 1379              		.file 11 "quantum/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 mousekey.c
     /tmp/cc9tVpNK.s:21     .text.move_unit:0000000000000000 $t
     /tmp/cc9tVpNK.s:26     .text.move_unit:0000000000000000 move_unit
     /tmp/cc9tVpNK.s:145    .text.move_unit:0000000000000068 $d
     /tmp/cc9tVpNK.s:1361   .bss.mousekey_accel:0000000000000000 mousekey_accel
     /tmp/cc9tVpNK.s:1322   .data.mk_max_speed:0000000000000000 mk_max_speed
     /tmp/cc9tVpNK.s:1356   .bss.mousekey_repeat:0000000000000000 mousekey_repeat
     /tmp/cc9tVpNK.s:1316   .data.mk_time_to_max:0000000000000000 mk_time_to_max
     /tmp/cc9tVpNK.s:153    .text.wheel_unit:0000000000000000 $t
     /tmp/cc9tVpNK.s:158    .text.wheel_unit:0000000000000000 wheel_unit
     /tmp/cc9tVpNK.s:264    .text.wheel_unit:0000000000000054 $d
     /tmp/cc9tVpNK.s:1298   .data.mk_wheel_max_speed:0000000000000000 mk_wheel_max_speed
     /tmp/cc9tVpNK.s:1351   .bss.mousekey_wheel_repeat:0000000000000000 mousekey_wheel_repeat
     /tmp/cc9tVpNK.s:1292   .data.mk_wheel_time_to_max:0000000000000000 mk_wheel_time_to_max
     /tmp/cc9tVpNK.s:272    .text.mousekey_on:0000000000000000 $t
     /tmp/cc9tVpNK.s:278    .text.mousekey_on:0000000000000000 mousekey_on
     /tmp/cc9tVpNK.s:296    .text.mousekey_on:000000000000000e $d
     /tmp/cc9tVpNK.s:446    .text.mousekey_on:000000000000009c $d
     /tmp/cc9tVpNK.s:1366   .bss.mouse_report:0000000000000000 mouse_report
     /tmp/cc9tVpNK.s:452    .text.mousekey_off:0000000000000000 $t
     /tmp/cc9tVpNK.s:458    .text.mousekey_off:0000000000000000 mousekey_off
     /tmp/cc9tVpNK.s:612    .text.mousekey_off:000000000000009c $d
     /tmp/cc9tVpNK.s:627    .text.mousekey_off:00000000000000d8 $t
     /tmp/cc9tVpNK.s:666    .text.mousekey_off:0000000000000108 $d
     /tmp/cc9tVpNK.s:693    .text.mousekey_send:0000000000000000 $t
     /tmp/cc9tVpNK.s:699    .text.mousekey_send:0000000000000000 mousekey_send
     /tmp/cc9tVpNK.s:843    .text.mousekey_send:00000000000000ac $d
     /tmp/cc9tVpNK.s:1346   .bss.last_timer_c:0000000000000000 last_timer_c
     /tmp/cc9tVpNK.s:1340   .bss.last_timer_w:0000000000000000 last_timer_w
     /tmp/cc9tVpNK.s:862    .text.mousekey_task:0000000000000000 $t
     /tmp/cc9tVpNK.s:868    .text.mousekey_task:0000000000000000 mousekey_task
     /tmp/cc9tVpNK.s:1201   .text.mousekey_task:0000000000000160 $d
     /tmp/cc9tVpNK.s:1328   .data.mk_interval:0000000000000000 mk_interval
     /tmp/cc9tVpNK.s:1304   .data.mk_wheel_interval:0000000000000000 mk_wheel_interval
     /tmp/cc9tVpNK.s:1334   .data.mk_delay:0000000000000000 mk_delay
     /tmp/cc9tVpNK.s:1310   .data.mk_wheel_delay:0000000000000000 mk_wheel_delay
     /tmp/cc9tVpNK.s:1214   .text.mousekey_clear:0000000000000000 $t
     /tmp/cc9tVpNK.s:1220   .text.mousekey_clear:0000000000000000 mousekey_clear
     /tmp/cc9tVpNK.s:1250   .text.mousekey_clear:0000000000000018 $d
     /tmp/cc9tVpNK.s:1258   .text.mousekey_get_report:0000000000000000 $t
     /tmp/cc9tVpNK.s:1264   .text.mousekey_get_report:0000000000000000 mousekey_get_report
     /tmp/cc9tVpNK.s:1284   .text.mousekey_get_report:000000000000000c $d
     /tmp/cc9tVpNK.s:1337   .bss.last_timer_w:0000000000000000 $d
     /tmp/cc9tVpNK.s:1343   .bss.last_timer_c:0000000000000000 $d
     /tmp/cc9tVpNK.s:1352   .bss.mousekey_wheel_repeat:0000000000000000 $d
     /tmp/cc9tVpNK.s:1357   .bss.mousekey_repeat:0000000000000000 $d
     /tmp/cc9tVpNK.s:1362   .bss.mousekey_accel:0000000000000000 $d
     /tmp/cc9tVpNK.s:1367   .bss.mouse_report:0000000000000000 $d
     /tmp/cc9tVpNK.s:315    .text.mousekey_on:0000000000000021 $d
     /tmp/cc9tVpNK.s:315    .text.mousekey_on:0000000000000022 $t

UNDEFINED SYMBOLS
printf_
timer_read
host_mouse_send
debug_config
timer_elapsed
