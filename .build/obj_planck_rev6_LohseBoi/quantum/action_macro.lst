   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 2
  15              		.file	"action_macro.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "quantum/action_macro.c"
  20              		.section	.text.action_macro_play,"ax",%progbits
  21              		.align	1
  22              		.global	action_macro_play
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	action_macro_play:
  28              	.LVL0:
  29              	.LFB337:
   1:quantum/action_macro.c **** /*
   2:quantum/action_macro.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:quantum/action_macro.c **** 
   4:quantum/action_macro.c **** This program is free software: you can redistribute it and/or modify
   5:quantum/action_macro.c **** it under the terms of the GNU General Public License as published by
   6:quantum/action_macro.c **** the Free Software Foundation, either version 2 of the License, or
   7:quantum/action_macro.c **** (at your option) any later version.
   8:quantum/action_macro.c **** 
   9:quantum/action_macro.c **** This program is distributed in the hope that it will be useful,
  10:quantum/action_macro.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:quantum/action_macro.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:quantum/action_macro.c **** GNU General Public License for more details.
  13:quantum/action_macro.c **** 
  14:quantum/action_macro.c **** You should have received a copy of the GNU General Public License
  15:quantum/action_macro.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:quantum/action_macro.c **** */
  17:quantum/action_macro.c **** #include "action.h"
  18:quantum/action_macro.c **** #include "action_util.h"
  19:quantum/action_macro.c **** #include "action_macro.h"
  20:quantum/action_macro.c **** #include "wait.h"
  21:quantum/action_macro.c **** 
  22:quantum/action_macro.c **** #ifdef DEBUG_ACTION
  23:quantum/action_macro.c **** #    include "debug.h"
  24:quantum/action_macro.c **** #else
  25:quantum/action_macro.c **** #    include "nodebug.h"
  26:quantum/action_macro.c **** #endif
  27:quantum/action_macro.c **** 
  28:quantum/action_macro.c **** #ifndef NO_ACTION_MACRO
  29:quantum/action_macro.c **** 
  30:quantum/action_macro.c **** #    define MACRO_READ() (macro = MACRO_GET(macro_p++))
  31:quantum/action_macro.c **** /** \brief Action Macro Play
  32:quantum/action_macro.c ****  *
  33:quantum/action_macro.c ****  * FIXME: Needs doc
  34:quantum/action_macro.c ****  */
  35:quantum/action_macro.c **** void action_macro_play(const macro_t *macro_p) {
  30              		.loc 1 35 48 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  36:quantum/action_macro.c ****     macro_t macro    = END;
  34              		.loc 1 36 5 view .LVU1
  37:quantum/action_macro.c ****     uint8_t interval = 0;
  35              		.loc 1 37 5 view .LVU2
  38:quantum/action_macro.c **** 
  39:quantum/action_macro.c ****     if (!macro_p) return;
  36              		.loc 1 39 5 view .LVU3
  35:quantum/action_macro.c ****     macro_t macro    = END;
  37              		.loc 1 35 48 is_stmt 0 view .LVU4
  38 0000 70B5     		push	{r4, r5, r6, lr}
  39              		.cfi_def_cfa_offset 16
  40              		.cfi_offset 4, -16
  41              		.cfi_offset 5, -12
  42              		.cfi_offset 6, -8
  43              		.cfi_offset 14, -4
  44              		.loc 1 39 8 view .LVU5
  45 0002 0446     		mov	r4, r0
  46 0004 48B1     		cbz	r0, .L1
  37:quantum/action_macro.c ****     uint8_t interval = 0;
  47              		.loc 1 37 13 view .LVU6
  48 0006 0026     		movs	r6, #0
  49              	.LVL1:
  50              	.L20:
  40:quantum/action_macro.c ****     while (true) {
  51              		.loc 1 40 5 is_stmt 1 view .LVU7
  41:quantum/action_macro.c ****         switch (MACRO_READ()) {
  52              		.loc 1 41 9 view .LVU8
  53              		.loc 1 41 17 is_stmt 0 view .LVU9
  54 0008 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
  55              	.LVL2:
  56              		.loc 1 41 9 view .LVU10
  57 000a 7428     		cmp	r0, #116
  58 000c 42D0     		beq	.L3
  59              		.loc 1 41 9 view .LVU11
  60 000e 0BD8     		bhi	.L4
  61 0010 0228     		cmp	r0, #2
  62 0012 2DD0     		beq	.L5
  63 0014 02D8     		bhi	.L6
  64 0016 0128     		cmp	r0, #1
  65 0018 13D0     		beq	.L7
  66              	.LVL3:
  67              	.L1:
  42:quantum/action_macro.c ****             case KEY_DOWN:
  43:quantum/action_macro.c ****                 MACRO_READ();
  44:quantum/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  45:quantum/action_macro.c ****                 if (IS_MOD(macro)) {
  46:quantum/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
  47:quantum/action_macro.c ****                     send_keyboard_report();
  48:quantum/action_macro.c ****                 } else {
  49:quantum/action_macro.c ****                     register_code(macro);
  50:quantum/action_macro.c ****                 }
  51:quantum/action_macro.c ****                 break;
  52:quantum/action_macro.c ****             case KEY_UP:
  53:quantum/action_macro.c ****                 MACRO_READ();
  54:quantum/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
  55:quantum/action_macro.c ****                 if (IS_MOD(macro)) {
  56:quantum/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
  57:quantum/action_macro.c ****                     send_keyboard_report();
  58:quantum/action_macro.c ****                 } else {
  59:quantum/action_macro.c ****                     unregister_code(macro);
  60:quantum/action_macro.c ****                 }
  61:quantum/action_macro.c ****                 break;
  62:quantum/action_macro.c ****             case WAIT:
  63:quantum/action_macro.c ****                 MACRO_READ();
  64:quantum/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
  65:quantum/action_macro.c ****                 {
  66:quantum/action_macro.c ****                     uint8_t ms = macro;
  67:quantum/action_macro.c ****                     while (ms--) wait_ms(1);
  68:quantum/action_macro.c ****                 }
  69:quantum/action_macro.c ****                 break;
  70:quantum/action_macro.c ****             case INTERVAL:
  71:quantum/action_macro.c ****                 interval = MACRO_READ();
  72:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
  73:quantum/action_macro.c ****                 break;
  74:quantum/action_macro.c ****             case 0x04 ... 0x73:
  75:quantum/action_macro.c ****                 dprintf("DOWN(%02X)\n", macro);
  76:quantum/action_macro.c ****                 register_code(macro);
  77:quantum/action_macro.c ****                 break;
  78:quantum/action_macro.c ****             case 0x84 ... 0xF3:
  79:quantum/action_macro.c ****                 dprintf("UP(%02X)\n", macro);
  80:quantum/action_macro.c ****                 unregister_code(macro & 0x7F);
  81:quantum/action_macro.c ****                 break;
  82:quantum/action_macro.c ****             case END:
  83:quantum/action_macro.c ****             default:
  84:quantum/action_macro.c ****                 return;
  85:quantum/action_macro.c ****         }
  86:quantum/action_macro.c ****         // interval
  87:quantum/action_macro.c ****         {
  88:quantum/action_macro.c ****             uint8_t ms = interval;
  89:quantum/action_macro.c ****             while (ms--) wait_ms(1);
  90:quantum/action_macro.c ****         }
  91:quantum/action_macro.c ****     }
  92:quantum/action_macro.c **** }
  68              		.loc 1 92 1 view .LVU12
  69 001a 70BD     		pop	{r4, r5, r6, pc}
  70              	.LVL4:
  71              	.L6:
  41:quantum/action_macro.c ****         switch (MACRO_READ()) {
  72              		.loc 1 41 9 view .LVU13
  73 001c 031F     		subs	r3, r0, #4
  74 001e 6F2B     		cmp	r3, #111
  75 0020 FBD8     		bhi	.L1
  75:quantum/action_macro.c ****                 register_code(macro);
  76              		.loc 1 75 47 is_stmt 1 view .LVU14
  76:quantum/action_macro.c ****                 break;
  77              		.loc 1 76 17 view .LVU15
  78 0022 FFF7FEFF 		bl	register_code
  79              	.LVL5:
  77:quantum/action_macro.c ****             case 0x84 ... 0xF3:
  80              		.loc 1 77 17 view .LVU16
  81 0026 0AE0     		b	.L10
  82              	.LVL6:
  83              	.L4:
  41:quantum/action_macro.c ****             case KEY_DOWN:
  84              		.loc 1 41 9 is_stmt 0 view .LVU17
  85 0028 7528     		cmp	r0, #117
  86 002a 3DD0     		beq	.L9
  87 002c 00F17C03 		add	r3, r0, #124
  88 0030 DBB2     		uxtb	r3, r3
  89 0032 6F2B     		cmp	r3, #111
  90 0034 F1D8     		bhi	.L1
  79:quantum/action_macro.c ****                 unregister_code(macro & 0x7F);
  91              		.loc 1 79 45 is_stmt 1 view .LVU18
  80:quantum/action_macro.c ****                 break;
  92              		.loc 1 80 17 view .LVU19
  93 0036 00F07F00 		and	r0, r0, #127
  94              	.LVL7:
  80:quantum/action_macro.c ****                 break;
  95              		.loc 1 80 17 is_stmt 0 view .LVU20
  96 003a FFF7FEFF 		bl	unregister_code
  97              	.LVL8:
  81:quantum/action_macro.c ****             case END:
  98              		.loc 1 81 17 is_stmt 1 view .LVU21
  99              	.L10:
  41:quantum/action_macro.c ****             case KEY_DOWN:
 100              		.loc 1 41 17 is_stmt 0 view .LVU22
 101 003e 651C     		adds	r5, r4, #1
 102 0040 12E0     		b	.L12
 103              	.LVL9:
 104              	.L7:
  43:quantum/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 105              		.loc 1 43 17 is_stmt 1 view .LVU23
  43:quantum/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 106              		.loc 1 43 17 is_stmt 0 view .LVU24
 107 0042 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 108              	.LVL10:
  44:quantum/action_macro.c ****                 if (IS_MOD(macro)) {
 109              		.loc 1 44 51 is_stmt 1 view .LVU25
  45:quantum/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
 110              		.loc 1 45 17 view .LVU26
  45:quantum/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
 111              		.loc 1 45 21 is_stmt 0 view .LVU27
 112 0044 03F12002 		add	r2, r3, #32
  45:quantum/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
 113              		.loc 1 45 20 view .LVU28
 114 0048 D2B2     		uxtb	r2, r2
 115 004a 072A     		cmp	r2, #7
 116 004c 08D8     		bhi	.L11
  46:quantum/action_macro.c ****                     send_keyboard_report();
 117              		.loc 1 46 21 is_stmt 1 view .LVU29
  46:quantum/action_macro.c ****                     send_keyboard_report();
 118              		.loc 1 46 36 is_stmt 0 view .LVU30
 119 004e 03F00703 		and	r3, r3, #7
 120              	.LVL11:
  46:quantum/action_macro.c ****                     send_keyboard_report();
 121              		.loc 1 46 36 view .LVU31
 122 0052 9840     		lsls	r0, r0, r3
  46:quantum/action_macro.c ****                     send_keyboard_report();
 123              		.loc 1 46 21 view .LVU32
 124 0054 C0B2     		uxtb	r0, r0
 125 0056 FFF7FEFF 		bl	add_macro_mods
 126              	.LVL12:
  47:quantum/action_macro.c ****                 } else {
 127              		.loc 1 47 21 is_stmt 1 view .LVU33
 128              	.L25:
  57:quantum/action_macro.c ****                 } else {
 129              		.loc 1 57 21 view .LVU34
 130 005a FFF7FEFF 		bl	send_keyboard_report
 131              	.LVL13:
 132 005e 02E0     		b	.L15
 133              	.LVL14:
 134              	.L11:
  49:quantum/action_macro.c ****                 }
 135              		.loc 1 49 21 view .LVU35
 136 0060 1846     		mov	r0, r3
 137 0062 FFF7FEFF 		bl	register_code
 138              	.LVL15:
 139              	.L15:
  53:quantum/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 140              		.loc 1 53 17 is_stmt 0 view .LVU36
 141 0066 A51C     		adds	r5, r4, #2
 142              	.L12:
 143              	.LVL16:
 144              	.LBB2:
  88:quantum/action_macro.c ****             while (ms--) wait_ms(1);
 145              		.loc 1 88 13 is_stmt 1 view .LVU37
  89:quantum/action_macro.c ****         }
 146              		.loc 1 89 13 view .LVU38
  89:quantum/action_macro.c ****         }
 147              		.loc 1 89 19 is_stmt 0 view .LVU39
 148 0068 3446     		mov	r4, r6
 149              	.LVL17:
 150              	.L18:
  89:quantum/action_macro.c ****         }
 151              		.loc 1 89 26 is_stmt 1 discriminator 4 view .LVU40
  89:quantum/action_macro.c ****         }
 152              		.loc 1 89 20 discriminator 4 view .LVU41
  89:quantum/action_macro.c ****         }
 153              		.loc 1 89 20 is_stmt 0 discriminator 4 view .LVU42
 154 006a 04BB     		cbnz	r4, .L19
 155 006c 2C46     		mov	r4, r5
 156              	.LVL18:
  89:quantum/action_macro.c ****         }
 157              		.loc 1 89 20 discriminator 4 view .LVU43
 158 006e CBE7     		b	.L20
 159              	.LVL19:
 160              	.L5:
  89:quantum/action_macro.c ****         }
 161              		.loc 1 89 20 discriminator 4 view .LVU44
 162              	.LBE2:
  53:quantum/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 163              		.loc 1 53 17 is_stmt 1 view .LVU45
  53:quantum/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 164              		.loc 1 53 17 is_stmt 0 view .LVU46
 165 0070 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 166              	.LVL20:
  54:quantum/action_macro.c ****                 if (IS_MOD(macro)) {
 167              		.loc 1 54 49 is_stmt 1 view .LVU47
  55:quantum/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 168              		.loc 1 55 17 view .LVU48
  55:quantum/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 169              		.loc 1 55 21 is_stmt 0 view .LVU49
 170 0072 00F12003 		add	r3, r0, #32
  55:quantum/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 171              		.loc 1 55 20 view .LVU50
 172 0076 DBB2     		uxtb	r3, r3
 173 0078 072B     		cmp	r3, #7
 174 007a 08D8     		bhi	.L14
  56:quantum/action_macro.c ****                     send_keyboard_report();
 175              		.loc 1 56 21 is_stmt 1 view .LVU51
  56:quantum/action_macro.c ****                     send_keyboard_report();
 176              		.loc 1 56 36 is_stmt 0 view .LVU52
 177 007c 0123     		movs	r3, #1
 178 007e 00F00700 		and	r0, r0, #7
 179              	.LVL21:
  56:quantum/action_macro.c ****                     send_keyboard_report();
 180              		.loc 1 56 36 view .LVU53
 181 0082 03FA00F0 		lsl	r0, r3, r0
  56:quantum/action_macro.c ****                     send_keyboard_report();
 182              		.loc 1 56 21 view .LVU54
 183 0086 C0B2     		uxtb	r0, r0
 184 0088 FFF7FEFF 		bl	del_macro_mods
 185              	.LVL22:
  56:quantum/action_macro.c ****                     send_keyboard_report();
 186              		.loc 1 56 21 view .LVU55
 187 008c E5E7     		b	.L25
 188              	.LVL23:
 189              	.L14:
  59:quantum/action_macro.c ****                 }
 190              		.loc 1 59 21 is_stmt 1 view .LVU56
 191 008e FFF7FEFF 		bl	unregister_code
 192              	.LVL24:
  59:quantum/action_macro.c ****                 }
 193              		.loc 1 59 21 is_stmt 0 view .LVU57
 194 0092 E8E7     		b	.L15
 195              	.LVL25:
 196              	.L3:
  63:quantum/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 197              		.loc 1 63 17 is_stmt 1 view .LVU58
 198 0094 A51C     		adds	r5, r4, #2
 199              	.LVL26:
  63:quantum/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 200              		.loc 1 63 17 is_stmt 0 view .LVU59
 201 0096 6478     		ldrb	r4, [r4, #1]	@ zero_extendqisi2
 202              	.LVL27:
  64:quantum/action_macro.c ****                 {
 203              		.loc 1 64 45 is_stmt 1 view .LVU60
 204              	.LBB3:
  66:quantum/action_macro.c ****                     while (ms--) wait_ms(1);
 205              		.loc 1 66 21 view .LVU61
  67:quantum/action_macro.c ****                 }
 206              		.loc 1 67 21 view .LVU62
 207              	.L16:
  67:quantum/action_macro.c ****                 }
 208              		.loc 1 67 34 discriminator 4 view .LVU63
  67:quantum/action_macro.c ****                 }
 209              		.loc 1 67 28 discriminator 4 view .LVU64
  67:quantum/action_macro.c ****                 }
 210              		.loc 1 67 28 is_stmt 0 discriminator 4 view .LVU65
 211 0098 002C     		cmp	r4, #0
 212 009a E5D0     		beq	.L12
  67:quantum/action_macro.c ****                 }
 213              		.loc 1 67 34 is_stmt 1 discriminator 1 view .LVU66
  67:quantum/action_macro.c ****                 }
 214              		.loc 1 67 34 discriminator 1 view .LVU67
  67:quantum/action_macro.c ****                 }
 215              		.loc 1 67 34 discriminator 1 view .LVU68
 216 009c 0A20     		movs	r0, #10
 217 009e 013C     		subs	r4, r4, #1
 218              	.LVL28:
  67:quantum/action_macro.c ****                 }
 219              		.loc 1 67 34 is_stmt 0 discriminator 1 view .LVU69
 220 00a0 FFF7FEFF 		bl	chThdSleep
 221              	.LVL29:
 222 00a4 E4B2     		uxtb	r4, r4
 223 00a6 F7E7     		b	.L16
 224              	.LVL30:
 225              	.L9:
  67:quantum/action_macro.c ****                 }
 226              		.loc 1 67 34 discriminator 1 view .LVU70
 227              	.LBE3:
  71:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 228              		.loc 1 71 17 is_stmt 1 view .LVU71
  71:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 229              		.loc 1 71 28 is_stmt 0 view .LVU72
 230 00a8 6678     		ldrb	r6, [r4, #1]	@ zero_extendqisi2
 231              	.LVL31:
  71:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 232              		.loc 1 71 28 view .LVU73
 233 00aa A51C     		adds	r5, r4, #2
 234              	.LVL32:
  72:quantum/action_macro.c ****                 break;
 235              		.loc 1 72 52 is_stmt 1 view .LVU74
  73:quantum/action_macro.c ****             case 0x04 ... 0x73:
 236              		.loc 1 73 17 view .LVU75
 237 00ac DCE7     		b	.L12
 238              	.LVL33:
 239              	.L19:
 240              	.LBB4:
  89:quantum/action_macro.c ****         }
 241              		.loc 1 89 26 discriminator 1 view .LVU76
  89:quantum/action_macro.c ****         }
 242              		.loc 1 89 26 discriminator 1 view .LVU77
  89:quantum/action_macro.c ****         }
 243              		.loc 1 89 26 discriminator 1 view .LVU78
 244 00ae 0A20     		movs	r0, #10
 245 00b0 013C     		subs	r4, r4, #1
 246              	.LVL34:
  89:quantum/action_macro.c ****         }
 247              		.loc 1 89 26 is_stmt 0 discriminator 1 view .LVU79
 248 00b2 FFF7FEFF 		bl	chThdSleep
 249              	.LVL35:
 250 00b6 E4B2     		uxtb	r4, r4
 251 00b8 D7E7     		b	.L18
 252              	.LBE4:
 253              		.cfi_endproc
 254              	.LFE337:
 256              		.text
 257              	.Letext0:
 258              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 259              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 260              		.file 4 "quantum/action_macro.h"
 261              		.file 5 "quantum/keycode.h"
 262              		.file 6 "./lib/chibios/os/rt/include/chtime.h"
 263              		.file 7 "./lib/chibios/os/rt/include/chthreads.h"
 264              		.file 8 "quantum/action.h"
 265              		.file 9 "quantum/action_util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_macro.c
     /tmp/ccSf9MOq.s:21     .text.action_macro_play:0000000000000000 $t
     /tmp/ccSf9MOq.s:27     .text.action_macro_play:0000000000000000 action_macro_play

UNDEFINED SYMBOLS
register_code
unregister_code
add_macro_mods
send_keyboard_report
del_macro_mods
chThdSleep
