   1               		.file	"sym_defer_g.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.debounce_init,"ax",@progbits
  11               	.global	debounce_init
  13               	debounce_init:
  14               	.LVL0:
  15               	.LFB119:
  16               		.file 1 "quantum/debounce/sym_defer_g.c"
   1:quantum/debounce/sym_defer_g.c **** /*
   2:quantum/debounce/sym_defer_g.c **** Copyright 2017 Alex Ong<the.onga@gmail.com>
   3:quantum/debounce/sym_defer_g.c **** Copyright 2021 Simon Arlott
   4:quantum/debounce/sym_defer_g.c **** This program is free software: you can redistribute it and/or modify
   5:quantum/debounce/sym_defer_g.c **** it under the terms of the GNU General Public License as published by
   6:quantum/debounce/sym_defer_g.c **** the Free Software Foundation, either version 2 of the License, or
   7:quantum/debounce/sym_defer_g.c **** (at your option) any later version.
   8:quantum/debounce/sym_defer_g.c **** This program is distributed in the hope that it will be useful,
   9:quantum/debounce/sym_defer_g.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/debounce/sym_defer_g.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/debounce/sym_defer_g.c **** GNU General Public License for more details.
  12:quantum/debounce/sym_defer_g.c **** You should have received a copy of the GNU General Public License
  13:quantum/debounce/sym_defer_g.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  14:quantum/debounce/sym_defer_g.c **** */
  15:quantum/debounce/sym_defer_g.c **** 
  16:quantum/debounce/sym_defer_g.c **** /*
  17:quantum/debounce/sym_defer_g.c **** Basic global debounce algorithm. Used in 99% of keyboards at time of implementation
  18:quantum/debounce/sym_defer_g.c **** When no state changes have occured for DEBOUNCE milliseconds, we push the state.
  19:quantum/debounce/sym_defer_g.c **** */
  20:quantum/debounce/sym_defer_g.c **** #include "matrix.h"
  21:quantum/debounce/sym_defer_g.c **** #include "timer.h"
  22:quantum/debounce/sym_defer_g.c **** #include "quantum.h"
  23:quantum/debounce/sym_defer_g.c **** #ifndef DEBOUNCE
  24:quantum/debounce/sym_defer_g.c **** #    define DEBOUNCE 5
  25:quantum/debounce/sym_defer_g.c **** #endif
  26:quantum/debounce/sym_defer_g.c **** 
  27:quantum/debounce/sym_defer_g.c **** #if DEBOUNCE > 0
  28:quantum/debounce/sym_defer_g.c **** static bool debouncing = false;
  29:quantum/debounce/sym_defer_g.c **** static fast_timer_t debouncing_time;
  30:quantum/debounce/sym_defer_g.c **** 
  31:quantum/debounce/sym_defer_g.c **** void debounce_init(uint8_t num_rows) {}
  17               		.loc 1 31 38 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               		.loc 1 31 39 view .LVU1
  24               	/* epilogue start */
  25 0000 0895      		ret
  26               		.cfi_endproc
  27               	.LFE119:
  29               		.section	.text.debounce,"ax",@progbits
  30               	.global	debounce
  32               	debounce:
  33               	.LVL1:
  34               	.LFB120:
  32:quantum/debounce/sym_defer_g.c **** 
  33:quantum/debounce/sym_defer_g.c **** void debounce(matrix_row_t raw[], matrix_row_t cooked[], uint8_t num_rows, bool changed) {
  35               		.loc 1 33 90 view -0
  36               		.cfi_startproc
  37               		.loc 1 33 90 is_stmt 0 view .LVU3
  38 0000 FF92      		push r15
  39               	.LCFI0:
  40               		.cfi_def_cfa_offset 3
  41               		.cfi_offset 15, -2
  42 0002 0F93      		push r16
  43               	.LCFI1:
  44               		.cfi_def_cfa_offset 4
  45               		.cfi_offset 16, -3
  46 0004 1F93      		push r17
  47               	.LCFI2:
  48               		.cfi_def_cfa_offset 5
  49               		.cfi_offset 17, -4
  50 0006 CF93      		push r28
  51               	.LCFI3:
  52               		.cfi_def_cfa_offset 6
  53               		.cfi_offset 28, -5
  54 0008 DF93      		push r29
  55               	.LCFI4:
  56               		.cfi_def_cfa_offset 7
  57               		.cfi_offset 29, -6
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 5 */
  61               	.L__stack_usage = 5
  62 000a F82E      		mov r15,r24
  63 000c 092F      		mov r16,r25
  64 000e 162F      		mov r17,r22
  65 0010 D72F      		mov r29,r23
  66 0012 C42F      		mov r28,r20
  34:quantum/debounce/sym_defer_g.c ****     if (changed) {
  67               		.loc 1 34 5 is_stmt 1 view .LVU4
  68               		.loc 1 34 8 is_stmt 0 view .LVU5
  69 0014 2223      		tst r18
  70 0016 01F0      		breq .L3
  35:quantum/debounce/sym_defer_g.c ****         debouncing      = true;
  71               		.loc 1 35 9 is_stmt 1 view .LVU6
  72               		.loc 1 35 25 is_stmt 0 view .LVU7
  73 0018 81E0      		ldi r24,lo8(1)
  74               	.LVL2:
  75               		.loc 1 35 25 view .LVU8
  76 001a 8093 0000 		sts debouncing,r24
  36:quantum/debounce/sym_defer_g.c ****         debouncing_time = timer_read_fast();
  77               		.loc 1 36 9 is_stmt 1 view .LVU9
  78               	.LBB7:
  79               	.LBI7:
  80               		.file 2 "tmk_core/common/timer.h"
   1:tmk_core/common/timer.h **** /*
   2:tmk_core/common/timer.h **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/timer.h **** Copyright 2021 Simon Arlott
   4:tmk_core/common/timer.h **** 
   5:tmk_core/common/timer.h **** This program is free software: you can redistribute it and/or modify
   6:tmk_core/common/timer.h **** it under the terms of the GNU General Public License as published by
   7:tmk_core/common/timer.h **** the Free Software Foundation, either version 2 of the License, or
   8:tmk_core/common/timer.h **** (at your option) any later version.
   9:tmk_core/common/timer.h **** 
  10:tmk_core/common/timer.h **** This program is distributed in the hope that it will be useful,
  11:tmk_core/common/timer.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:tmk_core/common/timer.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:tmk_core/common/timer.h **** GNU General Public License for more details.
  14:tmk_core/common/timer.h **** 
  15:tmk_core/common/timer.h **** You should have received a copy of the GNU General Public License
  16:tmk_core/common/timer.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:tmk_core/common/timer.h **** */
  18:tmk_core/common/timer.h **** 
  19:tmk_core/common/timer.h **** #pragma once
  20:tmk_core/common/timer.h **** 
  21:tmk_core/common/timer.h **** #if __has_include_next("_timer.h")
  22:tmk_core/common/timer.h **** #    include_next "_timer.h" /* Include the platform's _timer.h */
  23:tmk_core/common/timer.h **** #endif
  24:tmk_core/common/timer.h **** 
  25:tmk_core/common/timer.h **** #include <stdint.h>
  26:tmk_core/common/timer.h **** 
  27:tmk_core/common/timer.h **** #define TIMER_DIFF(a, b, max) ((max == UINT8_MAX) ? ((uint8_t)((a) - (b))) : ((max == UINT16_MAX) ?
  28:tmk_core/common/timer.h **** #define TIMER_DIFF_8(a, b) TIMER_DIFF(a, b, UINT8_MAX)
  29:tmk_core/common/timer.h **** #define TIMER_DIFF_16(a, b) TIMER_DIFF(a, b, UINT16_MAX)
  30:tmk_core/common/timer.h **** #define TIMER_DIFF_32(a, b) TIMER_DIFF(a, b, UINT32_MAX)
  31:tmk_core/common/timer.h **** #define TIMER_DIFF_RAW(a, b) TIMER_DIFF_8(a, b)
  32:tmk_core/common/timer.h **** 
  33:tmk_core/common/timer.h **** #ifdef __cplusplus
  34:tmk_core/common/timer.h **** extern "C" {
  35:tmk_core/common/timer.h **** #endif
  36:tmk_core/common/timer.h **** 
  37:tmk_core/common/timer.h **** extern volatile uint32_t timer_count;
  38:tmk_core/common/timer.h **** 
  39:tmk_core/common/timer.h **** void     timer_init(void);
  40:tmk_core/common/timer.h **** void     timer_clear(void);
  41:tmk_core/common/timer.h **** uint16_t timer_read(void);
  42:tmk_core/common/timer.h **** uint32_t timer_read32(void);
  43:tmk_core/common/timer.h **** uint16_t timer_elapsed(uint16_t last);
  44:tmk_core/common/timer.h **** uint32_t timer_elapsed32(uint32_t last);
  45:tmk_core/common/timer.h **** 
  46:tmk_core/common/timer.h **** // Utility functions to check if a future time has expired & autmatically handle time wrapping if c
  47:tmk_core/common/timer.h **** #define timer_expired(current, future) ((uint16_t)(current - future) < UINT16_MAX / 2)
  48:tmk_core/common/timer.h **** #define timer_expired32(current, future) ((uint32_t)(current - future) < UINT32_MAX / 2)
  49:tmk_core/common/timer.h **** 
  50:tmk_core/common/timer.h **** // Use an appropriate timer integer size based on architecture (16-bit will overflow sooner)
  51:tmk_core/common/timer.h **** #if FAST_TIMER_T_SIZE < 32
  52:tmk_core/common/timer.h **** #    define TIMER_DIFF_FAST(a, b) TIMER_DIFF_16(a, b)
  53:tmk_core/common/timer.h **** #    define timer_expired_fast(current, future) timer_expired(current, future)
  54:tmk_core/common/timer.h **** typedef uint16_t fast_timer_t;
  55:tmk_core/common/timer.h **** fast_timer_t inline timer_read_fast(void) { return timer_read(); }
  81               		.loc 2 55 21 view .LVU10
  82               	.LBB8:
  83               		.loc 2 55 45 view .LVU11
  84               		.loc 2 55 52 is_stmt 0 view .LVU12
  85 001e 0E94 0000 		call timer_read
  86               	.LVL3:
  87               		.loc 2 55 52 view .LVU13
  88               	.LBE8:
  89               	.LBE7:
  90               		.loc 1 36 25 view .LVU14
  91 0022 9093 0000 		sts debouncing_time+1,r25
  92 0026 8093 0000 		sts debouncing_time,r24
  93               	.L3:
  37:quantum/debounce/sym_defer_g.c ****     }
  38:quantum/debounce/sym_defer_g.c **** 
  39:quantum/debounce/sym_defer_g.c ****     if (debouncing && timer_elapsed_fast(debouncing_time) >= DEBOUNCE) {
  94               		.loc 1 39 5 is_stmt 1 view .LVU15
  95               		.loc 1 39 8 is_stmt 0 view .LVU16
  96 002a 8091 0000 		lds r24,debouncing
  97 002e 8823      		tst r24
  98 0030 01F0      		breq .L2
  99               	.LVL4:
 100               	.LBB9:
 101               	.LBI9:
  56:tmk_core/common/timer.h **** fast_timer_t inline timer_elapsed_fast(fast_timer_t last) { return timer_elapsed(last); }
 102               		.loc 2 56 21 is_stmt 1 discriminator 1 view .LVU17
 103               	.LBB10:
 104               		.loc 2 56 61 discriminator 1 view .LVU18
 105               		.loc 2 56 68 is_stmt 0 discriminator 1 view .LVU19
 106 0032 8091 0000 		lds r24,debouncing_time
 107 0036 9091 0000 		lds r25,debouncing_time+1
 108 003a 0E94 0000 		call timer_elapsed
 109               	.LVL5:
 110               		.loc 2 56 68 discriminator 1 view .LVU20
 111               	.LBE10:
 112               	.LBE9:
 113               		.loc 1 39 20 discriminator 1 view .LVU21
 114 003e 0597      		sbiw r24,5
 115 0040 00F0      		brlo .L2
 116 0042 EF2D      		mov r30,r15
 117 0044 F02F      		mov r31,r16
 118 0046 A12F      		mov r26,r17
 119 0048 BD2F      		mov r27,r29
 120 004a CF01      		movw r24,r30
 121 004c 8C0F      		add r24,r28
 122 004e 911D      		adc r25,__zero_reg__
 123               	.L7:
 124               	.LVL6:
 125               	.LBB11:
  40:quantum/debounce/sym_defer_g.c ****         for (int i = 0; i < num_rows; i++) {
 126               		.loc 1 40 27 is_stmt 1 discriminator 1 view .LVU22
 127 0050 E817      		cp r30,r24
 128 0052 F907      		cpc r31,r25
 129 0054 01F4      		brne .L8
 130               	.LBE11:
  41:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
  42:quantum/debounce/sym_defer_g.c ****         }
  43:quantum/debounce/sym_defer_g.c ****         debouncing = false;
 131               		.loc 1 43 9 view .LVU23
 132               		.loc 1 43 20 is_stmt 0 view .LVU24
 133 0056 1092 0000 		sts debouncing,__zero_reg__
 134               	.LVL7:
 135               	.L2:
 136               	/* epilogue start */
  44:quantum/debounce/sym_defer_g.c ****     }
  45:quantum/debounce/sym_defer_g.c **** }
 137               		.loc 1 45 1 view .LVU25
 138 005a DF91      		pop r29
 139 005c CF91      		pop r28
 140               	.LVL8:
 141               		.loc 1 45 1 view .LVU26
 142 005e 1F91      		pop r17
 143 0060 0F91      		pop r16
 144 0062 FF90      		pop r15
 145 0064 0895      		ret
 146               	.LVL9:
 147               	.L8:
 148               	.LBB12:
  41:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
 149               		.loc 1 41 13 is_stmt 1 discriminator 3 view .LVU27
  41:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
 150               		.loc 1 41 28 is_stmt 0 discriminator 3 view .LVU28
 151 0066 2191      		ld r18,Z+
 152               	.LVL10:
  41:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
 153               		.loc 1 41 23 discriminator 3 view .LVU29
 154 0068 2D93      		st X+,r18
  40:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
 155               		.loc 1 40 40 is_stmt 1 discriminator 3 view .LVU30
 156               	.LVL11:
  40:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
 157               		.loc 1 40 40 is_stmt 0 discriminator 3 view .LVU31
 158 006a 00C0      		rjmp .L7
 159               	.LBE12:
 160               		.cfi_endproc
 161               	.LFE120:
 163               		.section	.text.debounce_active,"ax",@progbits
 164               	.global	debounce_active
 166               	debounce_active:
 167               	.LFB121:
  46:quantum/debounce/sym_defer_g.c **** 
  47:quantum/debounce/sym_defer_g.c **** bool debounce_active(void) { return debouncing; }
 168               		.loc 1 47 28 is_stmt 1 view -0
 169               		.cfi_startproc
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 0 */
 173               	.L__stack_usage = 0
 174               		.loc 1 47 30 view .LVU33
 175               		.loc 1 47 49 is_stmt 0 view .LVU34
 176 0000 8091 0000 		lds r24,debouncing
 177               	/* epilogue start */
 178 0004 0895      		ret
 179               		.cfi_endproc
 180               	.LFE121:
 182               		.section	.text.debounce_free,"ax",@progbits
 183               	.global	debounce_free
 185               	debounce_free:
 186               	.LFB122:
  48:quantum/debounce/sym_defer_g.c **** 
  49:quantum/debounce/sym_defer_g.c **** void debounce_free(void) {}
 187               		.loc 1 49 26 is_stmt 1 view -0
 188               		.cfi_startproc
 189               	/* prologue: function */
 190               	/* frame size = 0 */
 191               	/* stack size = 0 */
 192               	.L__stack_usage = 0
 193               		.loc 1 49 27 view .LVU36
 194               	/* epilogue start */
 195 0000 0895      		ret
 196               		.cfi_endproc
 197               	.LFE122:
 199               		.section	.bss.debouncing_time,"aw",@nobits
 202               	debouncing_time:
 203 0000 0000      		.zero	2
 204               		.section	.bss.debouncing,"aw",@nobits
 207               	debouncing:
 208 0000 00        		.zero	1
 209               		.text
 210               	.Letext0:
 211               		.file 3 "/usr/avr/include/stdint.h"
 212               		.file 4 "quantum/matrix.h"
 213               		.file 5 "quantum/sequencer/sequencer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 sym_defer_g.c
     /tmp/ccuufmo3.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccuufmo3.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccuufmo3.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccuufmo3.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccuufmo3.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccuufmo3.s:13     .text.debounce_init:0000000000000000 debounce_init
     /tmp/ccuufmo3.s:32     .text.debounce:0000000000000000 debounce
     /tmp/ccuufmo3.s:207    .bss.debouncing:0000000000000000 debouncing
     /tmp/ccuufmo3.s:202    .bss.debouncing_time:0000000000000000 debouncing_time
     /tmp/ccuufmo3.s:166    .text.debounce_active:0000000000000000 debounce_active
     /tmp/ccuufmo3.s:185    .text.debounce_free:0000000000000000 debounce_free

UNDEFINED SYMBOLS
timer_read
timer_elapsed
__do_clear_bss
