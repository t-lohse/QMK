   1               		.file	"send_string.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.send_char,"ax",@progbits
  11               	.global	send_char
  13               	send_char:
  14               	.LVL0:
  15               	.LFB123:
  16               		.file 1 "quantum/send_string.c"
   1:quantum/send_string.c **** /* Copyright 2021
   2:quantum/send_string.c ****  *
   3:quantum/send_string.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/send_string.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/send_string.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/send_string.c ****  * (at your option) any later version.
   7:quantum/send_string.c ****  *
   8:quantum/send_string.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/send_string.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/send_string.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/send_string.c ****  * GNU General Public License for more details.
  12:quantum/send_string.c ****  *
  13:quantum/send_string.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/send_string.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/send_string.c ****  */
  16:quantum/send_string.c **** 
  17:quantum/send_string.c **** #include <ctype.h>
  18:quantum/send_string.c **** 
  19:quantum/send_string.c **** #include "quantum.h"
  20:quantum/send_string.c **** 
  21:quantum/send_string.c **** #include "send_string.h"
  22:quantum/send_string.c **** 
  23:quantum/send_string.c **** #if defined(AUDIO_ENABLE) && defined(SENDSTRING_BELL)
  24:quantum/send_string.c **** #    include "audio.h"
  25:quantum/send_string.c **** #    ifndef BELL_SOUND
  26:quantum/send_string.c **** #        define BELL_SOUND TERMINAL_SOUND
  27:quantum/send_string.c **** #    endif
  28:quantum/send_string.c **** float bell_song[][2] = SONG(BELL_SOUND);
  29:quantum/send_string.c **** #endif
  30:quantum/send_string.c **** 
  31:quantum/send_string.c **** // clang-format off
  32:quantum/send_string.c **** 
  33:quantum/send_string.c **** /* Bit-Packed look-up table to convert an ASCII character to whether
  34:quantum/send_string.c ****  * [Shift] needs to be sent with the keycode.
  35:quantum/send_string.c ****  */
  36:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_shift_lut[16] PROGMEM = {
  37:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  38:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  39:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  40:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  41:quantum/send_string.c **** 
  42:quantum/send_string.c ****     KCLUT_ENTRY(0, 1, 1, 1, 1, 1, 1, 0),
  43:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 0, 0, 0, 0),
  44:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  45:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 1, 0, 1, 0, 1, 1),
  46:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 1, 1, 1, 1),
  47:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 1, 1, 1, 1),
  48:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 1, 1, 1, 1),
  49:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 0, 0, 0, 1, 1),
  50:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  51:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  52:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  53:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 1, 1, 1, 1, 0)
  54:quantum/send_string.c **** };
  55:quantum/send_string.c **** 
  56:quantum/send_string.c **** /* Bit-Packed look-up table to convert an ASCII character to whether
  57:quantum/send_string.c ****  * [AltGr] needs to be sent with the keycode.
  58:quantum/send_string.c ****  */
  59:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_altgr_lut[16] PROGMEM = {
  60:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  61:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  62:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  63:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  64:quantum/send_string.c **** 
  65:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  66:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  67:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  68:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  69:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  70:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  71:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  72:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  73:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  74:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  75:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  76:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0)
  77:quantum/send_string.c **** };
  78:quantum/send_string.c **** 
  79:quantum/send_string.c **** /* Bit-Packed look-up table to convert an ASCII character to whether
  80:quantum/send_string.c ****  * [Space] needs to be sent after the keycode
  81:quantum/send_string.c ****  */
  82:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_dead_lut[16] PROGMEM = {
  83:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  84:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  85:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  86:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  87:quantum/send_string.c **** 
  88:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  89:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  90:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  91:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  92:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  93:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  94:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  95:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  96:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  97:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  98:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  99:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0)
 100:quantum/send_string.c **** };
 101:quantum/send_string.c **** 
 102:quantum/send_string.c **** /* Look-up table to convert an ASCII character to a keycode.
 103:quantum/send_string.c ****  */
 104:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_keycode_lut[128] PROGMEM = {
 105:quantum/send_string.c ****     // NUL   SOH      STX      ETX      EOT      ENQ      ACK      BEL
 106:quantum/send_string.c ****     XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 107:quantum/send_string.c ****     // BS    TAB      LF       VT       FF       CR       SO       SI
 108:quantum/send_string.c ****     KC_BSPC, KC_TAB,  KC_ENT,  XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 109:quantum/send_string.c ****     // DLE   DC1      DC2      DC3      DC4      NAK      SYN      ETB
 110:quantum/send_string.c ****     XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 111:quantum/send_string.c ****     // CAN   EM       SUB      ESC      FS       GS       RS       US
 112:quantum/send_string.c ****     XXXXXXX, XXXXXXX, XXXXXXX, KC_ESC,  XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 113:quantum/send_string.c **** 
 114:quantum/send_string.c ****     //       !        "        #        $        %        &        '
 115:quantum/send_string.c ****     KC_SPC,  KC_1,    KC_QUOT, KC_3,    KC_4,    KC_5,    KC_7,    KC_QUOT,
 116:quantum/send_string.c ****     // (     )        *        +        ,        -        .        /
 117:quantum/send_string.c ****     KC_9,    KC_0,    KC_8,    KC_EQL,  KC_COMM, KC_MINS, KC_DOT,  KC_SLSH,
 118:quantum/send_string.c ****     // 0     1        2        3        4        5        6        7
 119:quantum/send_string.c ****     KC_0,    KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,
 120:quantum/send_string.c ****     // 8     9        :        ;        <        =        >        ?
 121:quantum/send_string.c ****     KC_8,    KC_9,    KC_SCLN, KC_SCLN, KC_COMM, KC_EQL,  KC_DOT,  KC_SLSH,
 122:quantum/send_string.c ****     // @     A        B        C        D        E        F        G
 123:quantum/send_string.c ****     KC_2,    KC_A,    KC_B,    KC_C,    KC_D,    KC_E,    KC_F,    KC_G,
 124:quantum/send_string.c ****     // H     I        J        K        L        M        N        O
 125:quantum/send_string.c ****     KC_H,    KC_I,    KC_J,    KC_K,    KC_L,    KC_M,    KC_N,    KC_O,
 126:quantum/send_string.c ****     // P     Q        R        S        T        U        V        W
 127:quantum/send_string.c ****     KC_P,    KC_Q,    KC_R,    KC_S,    KC_T,    KC_U,    KC_V,    KC_W,
 128:quantum/send_string.c ****     // X     Y        Z        [        \        ]        ^        _
 129:quantum/send_string.c ****     KC_X,    KC_Y,    KC_Z,    KC_LBRC, KC_BSLS, KC_RBRC, KC_6,    KC_MINS,
 130:quantum/send_string.c ****     // `     a        b        c        d        e        f        g
 131:quantum/send_string.c ****     KC_GRV,  KC_A,    KC_B,    KC_C,    KC_D,    KC_E,    KC_F,    KC_G,
 132:quantum/send_string.c ****     // h     i        j        k        l        m        n        o
 133:quantum/send_string.c ****     KC_H,    KC_I,    KC_J,    KC_K,    KC_L,    KC_M,    KC_N,    KC_O,
 134:quantum/send_string.c ****     // p     q        r        s        t        u        v        w
 135:quantum/send_string.c ****     KC_P,    KC_Q,    KC_R,    KC_S,    KC_T,    KC_U,    KC_V,    KC_W,
 136:quantum/send_string.c ****     // x     y        z        {        |        }        ~        DEL
 137:quantum/send_string.c ****     KC_X,    KC_Y,    KC_Z,    KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV,  KC_DEL
 138:quantum/send_string.c **** };
 139:quantum/send_string.c **** 
 140:quantum/send_string.c **** // clang-format on
 141:quantum/send_string.c **** 
 142:quantum/send_string.c **** // Note: we bit-pack in "reverse" order to optimize loading
 143:quantum/send_string.c **** #define PGM_LOADBIT(mem, pos) ((pgm_read_byte(&((mem)[(pos) / 8])) >> ((pos) % 8)) & 0x01)
 144:quantum/send_string.c **** 
 145:quantum/send_string.c **** void send_string(const char *str) { send_string_with_delay(str, 0); }
 146:quantum/send_string.c **** 
 147:quantum/send_string.c **** void send_string_P(const char *str) { send_string_with_delay_P(str, 0); }
 148:quantum/send_string.c **** 
 149:quantum/send_string.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 150:quantum/send_string.c ****     while (1) {
 151:quantum/send_string.c ****         char ascii_code = *str;
 152:quantum/send_string.c ****         if (!ascii_code) break;
 153:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 154:quantum/send_string.c ****             ascii_code = *(++str);
 155:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 156:quantum/send_string.c ****                 // tap
 157:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 158:quantum/send_string.c ****                 tap_code(keycode);
 159:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 160:quantum/send_string.c ****                 // down
 161:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 162:quantum/send_string.c ****                 register_code(keycode);
 163:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 164:quantum/send_string.c ****                 // up
 165:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 166:quantum/send_string.c ****                 unregister_code(keycode);
 167:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 168:quantum/send_string.c ****                 // delay
 169:quantum/send_string.c ****                 int     ms      = 0;
 170:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 171:quantum/send_string.c ****                 while (isdigit(keycode)) {
 172:quantum/send_string.c ****                     ms *= 10;
 173:quantum/send_string.c ****                     ms += keycode - '0';
 174:quantum/send_string.c ****                     keycode = *(++str);
 175:quantum/send_string.c ****                 }
 176:quantum/send_string.c ****                 while (ms--) wait_ms(1);
 177:quantum/send_string.c ****             }
 178:quantum/send_string.c ****         } else {
 179:quantum/send_string.c ****             send_char(ascii_code);
 180:quantum/send_string.c ****         }
 181:quantum/send_string.c ****         ++str;
 182:quantum/send_string.c ****         // interval
 183:quantum/send_string.c ****         {
 184:quantum/send_string.c ****             uint8_t ms = interval;
 185:quantum/send_string.c ****             while (ms--) wait_ms(1);
 186:quantum/send_string.c ****         }
 187:quantum/send_string.c ****     }
 188:quantum/send_string.c **** }
 189:quantum/send_string.c **** 
 190:quantum/send_string.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 191:quantum/send_string.c ****     while (1) {
 192:quantum/send_string.c ****         char ascii_code = pgm_read_byte(str);
 193:quantum/send_string.c ****         if (!ascii_code) break;
 194:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 195:quantum/send_string.c ****             ascii_code = pgm_read_byte(++str);
 196:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 197:quantum/send_string.c ****                 // tap
 198:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 199:quantum/send_string.c ****                 tap_code(keycode);
 200:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 201:quantum/send_string.c ****                 // down
 202:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 203:quantum/send_string.c ****                 register_code(keycode);
 204:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 205:quantum/send_string.c ****                 // up
 206:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 207:quantum/send_string.c ****                 unregister_code(keycode);
 208:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 209:quantum/send_string.c ****                 // delay
 210:quantum/send_string.c ****                 int     ms      = 0;
 211:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 212:quantum/send_string.c ****                 while (isdigit(keycode)) {
 213:quantum/send_string.c ****                     ms *= 10;
 214:quantum/send_string.c ****                     ms += keycode - '0';
 215:quantum/send_string.c ****                     keycode = pgm_read_byte(++str);
 216:quantum/send_string.c ****                 }
 217:quantum/send_string.c ****                 while (ms--) wait_ms(1);
 218:quantum/send_string.c ****             }
 219:quantum/send_string.c ****         } else {
 220:quantum/send_string.c ****             send_char(ascii_code);
 221:quantum/send_string.c ****         }
 222:quantum/send_string.c ****         ++str;
 223:quantum/send_string.c ****         // interval
 224:quantum/send_string.c ****         {
 225:quantum/send_string.c ****             uint8_t ms = interval;
 226:quantum/send_string.c ****             while (ms--) wait_ms(1);
 227:quantum/send_string.c ****         }
 228:quantum/send_string.c ****     }
 229:quantum/send_string.c **** }
 230:quantum/send_string.c **** 
 231:quantum/send_string.c **** void send_char(char ascii_code) {
  17               		.loc 1 231 33 view -0
  18               		.cfi_startproc
  19               		.loc 1 231 33 is_stmt 0 view .LVU1
  20 0000 DF92      		push r13
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 13, -2
  24 0002 EF92      		push r14
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 14, -3
  28 0004 FF92      		push r15
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 15, -4
  32 0006 0F93      		push r16
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 16, -5
  36 0008 1F93      		push r17
  37               	.LCFI4:
  38               		.cfi_def_cfa_offset 7
  39               		.cfi_offset 17, -6
  40 000a CF93      		push r28
  41               	.LCFI5:
  42               		.cfi_def_cfa_offset 8
  43               		.cfi_offset 28, -7
  44 000c DF93      		push r29
  45               	.LCFI6:
  46               		.cfi_def_cfa_offset 9
  47               		.cfi_offset 29, -8
  48               	/* prologue: function */
  49               	/* frame size = 0 */
  50               	/* stack size = 7 */
  51               	.L__stack_usage = 7
 232:quantum/send_string.c **** #if defined(AUDIO_ENABLE) && defined(SENDSTRING_BELL)
 233:quantum/send_string.c ****     if (ascii_code == '\a') {  // BEL
 234:quantum/send_string.c ****         PLAY_SONG(bell_song);
 235:quantum/send_string.c ****         return;
 236:quantum/send_string.c ****     }
 237:quantum/send_string.c **** #endif
 238:quantum/send_string.c **** 
 239:quantum/send_string.c ****     uint8_t keycode    = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
  52               		.loc 1 239 5 is_stmt 1 view .LVU2
  53               	.LBB29:
  54               		.loc 1 239 26 view .LVU3
  55               	.LVL1:
  56               		.loc 1 239 26 view .LVU4
  57               		.loc 1 239 26 view .LVU5
  58 000e E82F      		mov r30,r24
  59 0010 F0E0      		ldi r31,0
  60 0012 E050      		subi r30,lo8(-(ascii_to_keycode_lut))
  61 0014 F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
  62               	/* #APP */
  63               	 ;  239 "quantum/send_string.c" 1
  64 0016 D490      		lpm r13, Z
  65               		
  66               	 ;  0 "" 2
  67               	.LVL2:
  68               		.loc 1 239 26 view .LVU6
  69               		.loc 1 239 26 is_stmt 0 view .LVU7
  70               	/* #NOAPP */
  71               	.LBE29:
 240:quantum/send_string.c ****     bool    is_shifted = PGM_LOADBIT(ascii_to_shift_lut, (uint8_t)ascii_code);
  72               		.loc 1 240 5 is_stmt 1 view .LVU8
  73               	.LBB30:
  74               		.loc 1 240 26 view .LVU9
  75 0018 282F      		mov r18,r24
  76 001a 2695      		lsr r18
  77 001c 2695      		lsr r18
  78 001e 2695      		lsr r18
  79 0020 30E0      		ldi r19,0
  80               	.LVL3:
  81               		.loc 1 240 26 view .LVU10
  82               		.loc 1 240 26 view .LVU11
  83 0022 F901      		movw r30,r18
  84 0024 E050      		subi r30,lo8(-(ascii_to_shift_lut))
  85 0026 F040      		sbci r31,hi8(-(ascii_to_shift_lut))
  86               	.LVL4:
  87               		.loc 1 240 26 is_stmt 0 view .LVU12
  88               	/* #APP */
  89               	 ;  240 "quantum/send_string.c" 1
  90 0028 0491      		lpm r16, Z
  91               		
  92               	 ;  0 "" 2
  93               	.LVL5:
  94               		.loc 1 240 26 is_stmt 1 view .LVU13
  95               	/* #NOAPP */
  96               	.LBE30:
  97 002a 8770      		andi r24,lo8(7)
  98               	.LVL6:
  99               		.loc 1 240 26 is_stmt 0 view .LVU14
 100 002c 10E0      		ldi r17,0
 101 002e 082E      		mov r0,r24
 102 0030 00C0      		rjmp 2f
 103               		1:
 104 0032 1595      		asr r17
 105 0034 0795      		ror r16
 106               		2:
 107 0036 0A94      		dec r0
 108 0038 02F4      		brpl 1b
 109               	.LVL7:
 110               		.loc 1 240 26 view .LVU15
 111 003a 0170      		andi r16,1
 112 003c 1127      		clr r17
 113               	.LVL8:
 241:quantum/send_string.c ****     bool    is_altgred = PGM_LOADBIT(ascii_to_altgr_lut, (uint8_t)ascii_code);
 114               		.loc 1 241 5 is_stmt 1 view .LVU16
 115               	.LBB31:
 116               		.loc 1 241 26 view .LVU17
 117               		.loc 1 241 26 view .LVU18
 118               		.loc 1 241 26 view .LVU19
 119 003e F901      		movw r30,r18
 120               	.LVL9:
 121               		.loc 1 241 26 is_stmt 0 view .LVU20
 122 0040 E050      		subi r30,lo8(-(ascii_to_altgr_lut))
 123 0042 F040      		sbci r31,hi8(-(ascii_to_altgr_lut))
 124               	.LVL10:
 125               		.loc 1 241 26 view .LVU21
 126               	/* #APP */
 127               	 ;  241 "quantum/send_string.c" 1
 128 0044 E490      		lpm r14, Z
 129               		
 130               	 ;  0 "" 2
 131               	.LVL11:
 132               		.loc 1 241 26 is_stmt 1 view .LVU22
 133               	/* #NOAPP */
 134               	.LBE31:
 135 0046 F12C      		mov r15,__zero_reg__
 136 0048 082E      		mov r0,r24
 137 004a 00C0      		rjmp 2f
 138               		1:
 139 004c F594      		asr r15
 140 004e E794      		ror r14
 141               		2:
 142 0050 0A94      		dec r0
 143 0052 02F4      		brpl 1b
 144               	.LVL12:
 145               		.loc 1 241 26 is_stmt 0 view .LVU23
 146 0054 91E0      		ldi r25,1
 147 0056 E922      		and r14,r25
 148 0058 FF24      		clr r15
 149               	.LVL13:
 242:quantum/send_string.c ****     bool    is_dead    = PGM_LOADBIT(ascii_to_dead_lut, (uint8_t)ascii_code);
 150               		.loc 1 242 5 is_stmt 1 view .LVU24
 151               	.LBB32:
 152               		.loc 1 242 26 view .LVU25
 153               		.loc 1 242 26 view .LVU26
 154               		.loc 1 242 26 view .LVU27
 155 005a F901      		movw r30,r18
 156               	.LVL14:
 157               		.loc 1 242 26 is_stmt 0 view .LVU28
 158 005c E050      		subi r30,lo8(-(ascii_to_dead_lut))
 159 005e F040      		sbci r31,hi8(-(ascii_to_dead_lut))
 160               	.LVL15:
 161               		.loc 1 242 26 view .LVU29
 162               	/* #APP */
 163               	 ;  242 "quantum/send_string.c" 1
 164 0060 C491      		lpm r28, Z
 165               		
 166               	 ;  0 "" 2
 167               	.LVL16:
 168               		.loc 1 242 26 is_stmt 1 view .LVU30
 169               	/* #NOAPP */
 170               	.LBE32:
 171 0062 D0E0      		ldi r29,0
 172 0064 00C0      		rjmp 2f
 173               		1:
 174 0066 D595      		asr r29
 175 0068 C795      		ror r28
 176               		2:
 177 006a 8A95      		dec r24
 178 006c 02F4      		brpl 1b
 179               	.LVL17:
 180               		.loc 1 242 26 is_stmt 0 view .LVU31
 181 006e C170      		andi r28,1
 182 0070 DD27      		clr r29
 183               	.LVL18:
 243:quantum/send_string.c **** 
 244:quantum/send_string.c ****     if (is_shifted) {
 184               		.loc 1 244 5 is_stmt 1 view .LVU32
 185               		.loc 1 244 8 is_stmt 0 view .LVU33
 186 0072 0115      		cp r16,__zero_reg__
 187 0074 1105      		cpc r17,__zero_reg__
 188 0076 01F0      		breq .L2
 245:quantum/send_string.c ****         register_code(KC_LSFT);
 189               		.loc 1 245 9 is_stmt 1 view .LVU34
 190 0078 81EE      		ldi r24,lo8(-31)
 191 007a 0E94 0000 		call register_code
 192               	.LVL19:
 193               	.L2:
 246:quantum/send_string.c ****     }
 247:quantum/send_string.c ****     if (is_altgred) {
 194               		.loc 1 247 5 view .LVU35
 195               		.loc 1 247 8 is_stmt 0 view .LVU36
 196 007e E114      		cp r14,__zero_reg__
 197 0080 F104      		cpc r15,__zero_reg__
 198 0082 01F0      		breq .L3
 248:quantum/send_string.c ****         register_code(KC_RALT);
 199               		.loc 1 248 9 is_stmt 1 view .LVU37
 200 0084 86EE      		ldi r24,lo8(-26)
 201 0086 0E94 0000 		call register_code
 202               	.LVL20:
 203               	.L3:
 249:quantum/send_string.c ****     }
 250:quantum/send_string.c ****     tap_code(keycode);
 204               		.loc 1 250 5 view .LVU38
 205 008a 8D2D      		mov r24,r13
 206 008c 0E94 0000 		call tap_code
 207               	.LVL21:
 251:quantum/send_string.c ****     if (is_altgred) {
 208               		.loc 1 251 5 view .LVU39
 209               		.loc 1 251 8 is_stmt 0 view .LVU40
 210 0090 EF28      		or r14,r15
 211 0092 01F0      		breq .L4
 252:quantum/send_string.c ****         unregister_code(KC_RALT);
 212               		.loc 1 252 9 is_stmt 1 view .LVU41
 213 0094 86EE      		ldi r24,lo8(-26)
 214 0096 0E94 0000 		call unregister_code
 215               	.LVL22:
 216               	.L4:
 253:quantum/send_string.c ****     }
 254:quantum/send_string.c ****     if (is_shifted) {
 217               		.loc 1 254 5 view .LVU42
 218               		.loc 1 254 8 is_stmt 0 view .LVU43
 219 009a 012B      		or r16,r17
 220 009c 01F0      		breq .L5
 255:quantum/send_string.c ****         unregister_code(KC_LSFT);
 221               		.loc 1 255 9 is_stmt 1 view .LVU44
 222 009e 81EE      		ldi r24,lo8(-31)
 223 00a0 0E94 0000 		call unregister_code
 224               	.LVL23:
 225               	.L5:
 256:quantum/send_string.c ****     }
 257:quantum/send_string.c ****     if (is_dead) {
 226               		.loc 1 257 5 view .LVU45
 227               		.loc 1 257 8 is_stmt 0 view .LVU46
 228 00a4 CD2B      		or r28,r29
 229 00a6 01F0      		breq .L1
 258:quantum/send_string.c ****         tap_code(KC_SPACE);
 230               		.loc 1 258 9 is_stmt 1 view .LVU47
 231 00a8 8CE2      		ldi r24,lo8(44)
 232               	/* epilogue start */
 259:quantum/send_string.c ****     }
 260:quantum/send_string.c **** }
 233               		.loc 1 260 1 is_stmt 0 view .LVU48
 234 00aa DF91      		pop r29
 235 00ac CF91      		pop r28
 236               	.LVL24:
 237               		.loc 1 260 1 view .LVU49
 238 00ae 1F91      		pop r17
 239 00b0 0F91      		pop r16
 240               	.LVL25:
 241               		.loc 1 260 1 view .LVU50
 242 00b2 FF90      		pop r15
 243 00b4 EF90      		pop r14
 244               	.LVL26:
 245               		.loc 1 260 1 view .LVU51
 246 00b6 DF90      		pop r13
 247               	.LVL27:
 258:quantum/send_string.c ****         tap_code(KC_SPACE);
 248               		.loc 1 258 9 view .LVU52
 249 00b8 0C94 0000 		jmp tap_code
 250               	.LVL28:
 251               	.L1:
 252               	/* epilogue start */
 253               		.loc 1 260 1 view .LVU53
 254 00bc DF91      		pop r29
 255 00be CF91      		pop r28
 256               	.LVL29:
 257               		.loc 1 260 1 view .LVU54
 258 00c0 1F91      		pop r17
 259 00c2 0F91      		pop r16
 260               	.LVL30:
 261               		.loc 1 260 1 view .LVU55
 262 00c4 FF90      		pop r15
 263 00c6 EF90      		pop r14
 264               	.LVL31:
 265               		.loc 1 260 1 view .LVU56
 266 00c8 DF90      		pop r13
 267               	.LVL32:
 268               		.loc 1 260 1 view .LVU57
 269 00ca 0895      		ret
 270               		.cfi_endproc
 271               	.LFE123:
 273               		.section	.text.send_string_with_delay,"ax",@progbits
 274               	.global	send_string_with_delay
 276               	send_string_with_delay:
 277               	.LVL33:
 278               	.LFB121:
 149:quantum/send_string.c ****     while (1) {
 279               		.loc 1 149 64 is_stmt 1 view -0
 280               		.cfi_startproc
 149:quantum/send_string.c ****     while (1) {
 281               		.loc 1 149 64 is_stmt 0 view .LVU59
 282 0000 EF92      		push r14
 283               	.LCFI7:
 284               		.cfi_def_cfa_offset 3
 285               		.cfi_offset 14, -2
 286 0002 FF92      		push r15
 287               	.LCFI8:
 288               		.cfi_def_cfa_offset 4
 289               		.cfi_offset 15, -3
 290 0004 0F93      		push r16
 291               	.LCFI9:
 292               		.cfi_def_cfa_offset 5
 293               		.cfi_offset 16, -4
 294 0006 1F93      		push r17
 295               	.LCFI10:
 296               		.cfi_def_cfa_offset 6
 297               		.cfi_offset 17, -5
 298 0008 CF93      		push r28
 299               	.LCFI11:
 300               		.cfi_def_cfa_offset 7
 301               		.cfi_offset 28, -6
 302 000a DF93      		push r29
 303               	.LCFI12:
 304               		.cfi_def_cfa_offset 8
 305               		.cfi_offset 29, -7
 306               	/* prologue: function */
 307               	/* frame size = 0 */
 308               	/* stack size = 6 */
 309               	.L__stack_usage = 6
 310 000c EC01      		movw r28,r24
 311 000e 162F      		mov r17,r22
 312               	.LBB33:
 313               	.LBB34:
 172:quantum/send_string.c ****                     ms += keycode - '0';
 314               		.loc 1 172 24 view .LVU60
 315 0010 0AE0      		ldi r16,lo8(10)
 316               	.LVL34:
 317               	.L33:
 172:quantum/send_string.c ****                     ms += keycode - '0';
 318               		.loc 1 172 24 view .LVU61
 319               	.LBE34:
 320               	.LBE33:
 150:quantum/send_string.c ****         char ascii_code = *str;
 321               		.loc 1 150 5 is_stmt 1 view .LVU62
 322               	.LBB45:
 151:quantum/send_string.c ****         if (!ascii_code) break;
 323               		.loc 1 151 9 view .LVU63
 151:quantum/send_string.c ****         if (!ascii_code) break;
 324               		.loc 1 151 14 is_stmt 0 view .LVU64
 325 0012 8881      		ld r24,Y
 326               	.LVL35:
 152:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 327               		.loc 1 152 9 is_stmt 1 view .LVU65
 152:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 328               		.loc 1 152 12 is_stmt 0 view .LVU66
 329 0014 8823      		tst r24
 330 0016 01F4      		brne .+2
 331 0018 00C0      		rjmp .L19
 153:quantum/send_string.c ****             ascii_code = *(++str);
 332               		.loc 1 153 9 is_stmt 1 view .LVU67
 153:quantum/send_string.c ****             ascii_code = *(++str);
 333               		.loc 1 153 12 is_stmt 0 view .LVU68
 334 001a 8130      		cpi r24,lo8(1)
 335 001c 01F0      		breq .+2
 336 001e 00C0      		rjmp .L21
 154:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 337               		.loc 1 154 13 is_stmt 1 view .LVU69
 338               	.LVL36:
 154:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 339               		.loc 1 154 24 is_stmt 0 view .LVU70
 340 0020 8981      		ldd r24,Y+1
 341               	.LVL37:
 155:quantum/send_string.c ****                 // tap
 342               		.loc 1 155 13 is_stmt 1 view .LVU71
 155:quantum/send_string.c ****                 // tap
 343               		.loc 1 155 16 is_stmt 0 view .LVU72
 344 0022 8130      		cpi r24,lo8(1)
 345 0024 01F4      		brne .L22
 346               	.LBB37:
 157:quantum/send_string.c ****                 tap_code(keycode);
 347               		.loc 1 157 17 is_stmt 1 view .LVU73
 157:quantum/send_string.c ****                 tap_code(keycode);
 348               		.loc 1 157 25 is_stmt 0 view .LVU74
 349 0026 7E01      		movw r14,r28
 350 0028 82E0      		ldi r24,2
 351 002a E80E      		add r14,r24
 352 002c F11C      		adc r15,__zero_reg__
 353               	.LVL38:
 158:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 354               		.loc 1 158 17 is_stmt 1 view .LVU75
 355 002e 8A81      		ldd r24,Y+2
 356 0030 0E94 0000 		call tap_code
 357               	.LVL39:
 358               	.L34:
 158:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 359               		.loc 1 158 17 is_stmt 0 view .LVU76
 360               	.LBE37:
 361               	.LBB38:
 161:quantum/send_string.c ****                 register_code(keycode);
 362               		.loc 1 161 25 view .LVU77
 363 0034 E701      		movw r28,r14
 364               	.LVL40:
 365               	.L23:
 161:quantum/send_string.c ****                 register_code(keycode);
 366               		.loc 1 161 25 view .LVU78
 367               	.LBE38:
 181:quantum/send_string.c ****         // interval
 368               		.loc 1 181 9 is_stmt 1 view .LVU79
 181:quantum/send_string.c ****         // interval
 369               		.loc 1 181 9 is_stmt 0 view .LVU80
 370 0036 2196      		adiw r28,1
 371               	.LVL41:
 372               	.LBB39:
 184:quantum/send_string.c ****             while (ms--) wait_ms(1);
 373               		.loc 1 184 13 is_stmt 1 view .LVU81
 185:quantum/send_string.c ****         }
 374               		.loc 1 185 13 view .LVU82
 185:quantum/send_string.c ****         }
 375               		.loc 1 185 19 is_stmt 0 view .LVU83
 376 0038 812F      		mov r24,r17
 377               	.LVL42:
 378               	.L31:
 185:quantum/send_string.c ****         }
 379               		.loc 1 185 26 is_stmt 1 discriminator 7 view .LVU84
 185:quantum/send_string.c ****         }
 380               		.loc 1 185 20 discriminator 7 view .LVU85
 185:quantum/send_string.c ****         }
 381               		.loc 1 185 20 is_stmt 0 discriminator 7 view .LVU86
 382 003a 8823      		tst r24
 383 003c 01F0      		breq .L33
 185:quantum/send_string.c ****         }
 384               		.loc 1 185 26 is_stmt 1 view .LVU87
 185:quantum/send_string.c ****         }
 385               		.loc 1 185 26 view .LVU88
 185:quantum/send_string.c ****         }
 386               		.loc 1 185 26 view .LVU89
 387               	.LVL43:
 388               	.LBB40:
 389               	.LBI40:
 390               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 391               		.loc 2 166 1 view .LVU90
 392               	.LBB41:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 393               		.loc 2 168 2 view .LVU91
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 394               		.loc 2 172 2 view .LVU92
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 395               		.loc 2 173 2 view .LVU93
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 396               		.loc 2 174 2 view .LVU94
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 397               		.loc 2 184 3 view .LVU95
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 398               		.loc 2 187 2 view .LVU96
 399 003e EFE9      		ldi r30,lo8(3999)
 400 0040 FFE0      		ldi r31,hi8(3999)
 401 0042 3197      	1:	sbiw r30,1
 402 0044 01F4      		brne 1b
 403 0046 00C0      		rjmp .
 404 0048 0000      		nop
 405 004a 8150      		subi r24,lo8(-(-1))
 406               	.LVL44:
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 407               		.loc 2 210 1 is_stmt 0 view .LVU97
 408 004c 00C0      		rjmp .L31
 409               	.LVL45:
 410               	.L22:
 411               		.loc 2 210 1 view .LVU98
 412               	.LBE41:
 413               	.LBE40:
 414               	.LBE39:
 159:quantum/send_string.c ****                 // down
 415               		.loc 1 159 20 is_stmt 1 view .LVU99
 159:quantum/send_string.c ****                 // down
 416               		.loc 1 159 23 is_stmt 0 view .LVU100
 417 004e 8230      		cpi r24,lo8(2)
 418 0050 01F4      		brne .L24
 419               	.LBB42:
 161:quantum/send_string.c ****                 register_code(keycode);
 420               		.loc 1 161 17 is_stmt 1 view .LVU101
 161:quantum/send_string.c ****                 register_code(keycode);
 421               		.loc 1 161 25 is_stmt 0 view .LVU102
 422 0052 7E01      		movw r14,r28
 423 0054 E2E0      		ldi r30,2
 424 0056 EE0E      		add r14,r30
 425 0058 F11C      		adc r15,__zero_reg__
 426               	.LVL46:
 162:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 427               		.loc 1 162 17 is_stmt 1 view .LVU103
 428 005a 8A81      		ldd r24,Y+2
 429               	.LVL47:
 162:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 430               		.loc 1 162 17 is_stmt 0 view .LVU104
 431 005c 0E94 0000 		call register_code
 432               	.LVL48:
 162:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 433               		.loc 1 162 17 view .LVU105
 434 0060 00C0      		rjmp .L34
 435               	.LVL49:
 436               	.L24:
 162:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 437               		.loc 1 162 17 view .LVU106
 438               	.LBE42:
 163:quantum/send_string.c ****                 // up
 439               		.loc 1 163 20 is_stmt 1 view .LVU107
 163:quantum/send_string.c ****                 // up
 440               		.loc 1 163 23 is_stmt 0 view .LVU108
 441 0062 8330      		cpi r24,lo8(3)
 442 0064 01F4      		brne .L25
 443               	.LBB43:
 165:quantum/send_string.c ****                 unregister_code(keycode);
 444               		.loc 1 165 17 is_stmt 1 view .LVU109
 165:quantum/send_string.c ****                 unregister_code(keycode);
 445               		.loc 1 165 25 is_stmt 0 view .LVU110
 446 0066 7E01      		movw r14,r28
 447 0068 F2E0      		ldi r31,2
 448 006a EF0E      		add r14,r31
 449 006c F11C      		adc r15,__zero_reg__
 450               	.LVL50:
 166:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 451               		.loc 1 166 17 is_stmt 1 view .LVU111
 452 006e 8A81      		ldd r24,Y+2
 453               	.LVL51:
 166:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 454               		.loc 1 166 17 is_stmt 0 view .LVU112
 455 0070 0E94 0000 		call unregister_code
 456               	.LVL52:
 166:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 457               		.loc 1 166 17 view .LVU113
 458 0074 00C0      		rjmp .L34
 459               	.LVL53:
 460               	.L25:
 166:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 461               		.loc 1 166 17 view .LVU114
 462               	.LBE43:
 167:quantum/send_string.c ****                 // delay
 463               		.loc 1 167 20 is_stmt 1 view .LVU115
 167:quantum/send_string.c ****                 // delay
 464               		.loc 1 167 23 is_stmt 0 view .LVU116
 465 0076 8430      		cpi r24,lo8(4)
 466 0078 01F0      		breq .L26
 467               	.LVL54:
 154:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 468               		.loc 1 154 24 view .LVU117
 469 007a 2196      		adiw r28,1
 470               	.LVL55:
 154:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 471               		.loc 1 154 24 view .LVU118
 472 007c 00C0      		rjmp .L23
 473               	.L26:
 474               	.LBB44:
 169:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 475               		.loc 1 169 17 is_stmt 1 view .LVU119
 476               	.LVL56:
 170:quantum/send_string.c ****                 while (isdigit(keycode)) {
 477               		.loc 1 170 17 view .LVU120
 170:quantum/send_string.c ****                 while (isdigit(keycode)) {
 478               		.loc 1 170 25 is_stmt 0 view .LVU121
 479 007e 2A81      		ldd r18,Y+2
 480               	.LVL57:
 171:quantum/send_string.c ****                     ms *= 10;
 481               		.loc 1 171 17 is_stmt 1 view .LVU122
 170:quantum/send_string.c ****                 while (isdigit(keycode)) {
 482               		.loc 1 170 25 is_stmt 0 view .LVU123
 483 0080 2296      		adiw r28,2
 484               	.LVL58:
 169:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 485               		.loc 1 169 25 view .LVU124
 486 0082 80E0      		ldi r24,0
 487               	.LVL59:
 169:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 488               		.loc 1 169 25 view .LVU125
 489 0084 90E0      		ldi r25,0
 490               	.LVL60:
 491               	.L27:
 171:quantum/send_string.c ****                     ms *= 10;
 492               		.loc 1 171 24 is_stmt 1 view .LVU126
 174:quantum/send_string.c ****                 }
 493               		.loc 1 174 29 is_stmt 0 view .LVU127
 494 0086 AE01      		movw r20,r28
 495 0088 4F5F      		subi r20,-1
 496 008a 5F4F      		sbci r21,-1
 171:quantum/send_string.c ****                     ms *= 10;
 497               		.loc 1 171 24 view .LVU128
 498 008c 2053      		subi r18,48
 499 008e 330B      		sbc r19,r19
 500               	.LVL61:
 171:quantum/send_string.c ****                     ms *= 10;
 501               		.loc 1 171 24 view .LVU129
 502 0090 2A30      		cpi r18,10
 503 0092 3105      		cpc r19,__zero_reg__
 504 0094 00F0      		brlo .L28
 505               	.L29:
 176:quantum/send_string.c ****             }
 506               		.loc 1 176 30 is_stmt 1 discriminator 7 view .LVU130
 176:quantum/send_string.c ****             }
 507               		.loc 1 176 24 discriminator 7 view .LVU131
 508               	.LVL62:
 176:quantum/send_string.c ****             }
 509               		.loc 1 176 24 is_stmt 0 discriminator 7 view .LVU132
 510 0096 0097      		sbiw r24,0
 511 0098 01F0      		breq .L23
 176:quantum/send_string.c ****             }
 512               		.loc 1 176 30 is_stmt 1 view .LVU133
 176:quantum/send_string.c ****             }
 513               		.loc 1 176 30 view .LVU134
 176:quantum/send_string.c ****             }
 514               		.loc 1 176 30 view .LVU135
 515               	.LVL63:
 516               	.LBB35:
 517               	.LBI35:
 166:/usr/avr/include/util/delay.h **** {
 518               		.loc 2 166 1 view .LVU136
 519               	.LBB36:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 520               		.loc 2 168 2 view .LVU137
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 521               		.loc 2 172 2 view .LVU138
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 522               		.loc 2 173 2 view .LVU139
 174:/usr/avr/include/util/delay.h **** 
 523               		.loc 2 174 2 view .LVU140
 184:/usr/avr/include/util/delay.h **** 	#endif
 524               		.loc 2 184 3 view .LVU141
 187:/usr/avr/include/util/delay.h **** 
 525               		.loc 2 187 2 view .LVU142
 526 009a EFE9      		ldi r30,lo8(3999)
 527 009c FFE0      		ldi r31,hi8(3999)
 528 009e 3197      	1:	sbiw r30,1
 529 00a0 01F4      		brne 1b
 530 00a2 00C0      		rjmp .
 531 00a4 0000      		nop
 532 00a6 0197      		sbiw r24,1
 533               	.LVL64:
 534               		.loc 2 210 1 is_stmt 0 view .LVU143
 535 00a8 00C0      		rjmp .L29
 536               	.LVL65:
 537               	.L28:
 538               		.loc 2 210 1 view .LVU144
 539               	.LBE36:
 540               	.LBE35:
 172:quantum/send_string.c ****                     ms += keycode - '0';
 541               		.loc 1 172 21 is_stmt 1 view .LVU145
 172:quantum/send_string.c ****                     ms += keycode - '0';
 542               		.loc 1 172 24 is_stmt 0 view .LVU146
 543 00aa 089F      		mul r16,r24
 544 00ac B001      		movw r22,r0
 545 00ae 099F      		mul r16,r25
 546 00b0 700D      		add r23,r0
 547 00b2 1124      		clr __zero_reg__
 548               	.LVL66:
 173:quantum/send_string.c ****                     keycode = *(++str);
 549               		.loc 1 173 21 is_stmt 1 view .LVU147
 173:quantum/send_string.c ****                     keycode = *(++str);
 550               		.loc 1 173 24 is_stmt 0 view .LVU148
 551 00b4 C901      		movw r24,r18
 552 00b6 860F      		add r24,r22
 553 00b8 971F      		adc r25,r23
 554               	.LVL67:
 174:quantum/send_string.c ****                 }
 555               		.loc 1 174 21 is_stmt 1 view .LVU149
 174:quantum/send_string.c ****                 }
 556               		.loc 1 174 29 is_stmt 0 view .LVU150
 557 00ba 2981      		ldd r18,Y+1
 558               	.LVL68:
 174:quantum/send_string.c ****                 }
 559               		.loc 1 174 29 view .LVU151
 560 00bc EA01      		movw r28,r20
 561 00be 00C0      		rjmp .L27
 562               	.LVL69:
 563               	.L21:
 174:quantum/send_string.c ****                 }
 564               		.loc 1 174 29 view .LVU152
 565               	.LBE44:
 179:quantum/send_string.c ****         }
 566               		.loc 1 179 13 is_stmt 1 view .LVU153
 567 00c0 0E94 0000 		call send_char
 568               	.LVL70:
 179:quantum/send_string.c ****         }
 569               		.loc 1 179 13 is_stmt 0 view .LVU154
 570 00c4 00C0      		rjmp .L23
 571               	.LVL71:
 572               	.L19:
 573               	/* epilogue start */
 179:quantum/send_string.c ****         }
 574               		.loc 1 179 13 view .LVU155
 575               	.LBE45:
 188:quantum/send_string.c **** 
 576               		.loc 1 188 1 view .LVU156
 577 00c6 DF91      		pop r29
 578 00c8 CF91      		pop r28
 579               	.LVL72:
 188:quantum/send_string.c **** 
 580               		.loc 1 188 1 view .LVU157
 581 00ca 1F91      		pop r17
 582               	.LVL73:
 188:quantum/send_string.c **** 
 583               		.loc 1 188 1 view .LVU158
 584 00cc 0F91      		pop r16
 585 00ce FF90      		pop r15
 586 00d0 EF90      		pop r14
 587 00d2 0895      		ret
 588               		.cfi_endproc
 589               	.LFE121:
 591               		.section	.text.send_string,"ax",@progbits
 592               	.global	send_string
 594               	send_string:
 595               	.LVL74:
 596               	.LFB119:
 145:quantum/send_string.c **** 
 597               		.loc 1 145 35 is_stmt 1 view -0
 598               		.cfi_startproc
 599               	/* prologue: function */
 600               	/* frame size = 0 */
 601               	/* stack size = 0 */
 602               	.L__stack_usage = 0
 145:quantum/send_string.c **** 
 603               		.loc 1 145 37 view .LVU160
 604 0000 60E0      		ldi r22,0
 605 0002 0C94 0000 		jmp send_string_with_delay
 606               	.LVL75:
 145:quantum/send_string.c **** 
 607               		.loc 1 145 37 is_stmt 0 view .LVU161
 608               		.cfi_endproc
 609               	.LFE119:
 611               		.section	.text.send_string_with_delay_P,"ax",@progbits
 612               	.global	send_string_with_delay_P
 614               	send_string_with_delay_P:
 615               	.LVL76:
 616               	.LFB122:
 190:quantum/send_string.c ****     while (1) {
 617               		.loc 1 190 66 is_stmt 1 view -0
 618               		.cfi_startproc
 190:quantum/send_string.c ****     while (1) {
 619               		.loc 1 190 66 is_stmt 0 view .LVU163
 620 0000 EF92      		push r14
 621               	.LCFI13:
 622               		.cfi_def_cfa_offset 3
 623               		.cfi_offset 14, -2
 624 0002 FF92      		push r15
 625               	.LCFI14:
 626               		.cfi_def_cfa_offset 4
 627               		.cfi_offset 15, -3
 628 0004 0F93      		push r16
 629               	.LCFI15:
 630               		.cfi_def_cfa_offset 5
 631               		.cfi_offset 16, -4
 632 0006 1F93      		push r17
 633               	.LCFI16:
 634               		.cfi_def_cfa_offset 6
 635               		.cfi_offset 17, -5
 636 0008 CF93      		push r28
 637               	.LCFI17:
 638               		.cfi_def_cfa_offset 7
 639               		.cfi_offset 28, -6
 640 000a DF93      		push r29
 641               	.LCFI18:
 642               		.cfi_def_cfa_offset 8
 643               		.cfi_offset 29, -7
 644               	/* prologue: function */
 645               	/* frame size = 0 */
 646               	/* stack size = 6 */
 647               	.L__stack_usage = 6
 648 000c 8C01      		movw r16,r24
 649 000e F62E      		mov r15,r22
 650               	.LBB46:
 651               	.LBB47:
 213:quantum/send_string.c ****                     ms += keycode - '0';
 652               		.loc 1 213 24 view .LVU164
 653 0010 8AE0      		ldi r24,lo8(10)
 654 0012 E82E      		mov r14,r24
 655               	.LVL77:
 656               	.L49:
 213:quantum/send_string.c ****                     ms += keycode - '0';
 657               		.loc 1 213 24 view .LVU165
 658               	.LBE47:
 659               	.LBE46:
 191:quantum/send_string.c ****         char ascii_code = pgm_read_byte(str);
 660               		.loc 1 191 5 is_stmt 1 view .LVU166
 661               	.LBB66:
 192:quantum/send_string.c ****         if (!ascii_code) break;
 662               		.loc 1 192 9 view .LVU167
 663               	.LBB53:
 192:quantum/send_string.c ****         if (!ascii_code) break;
 664               		.loc 1 192 27 view .LVU168
 192:quantum/send_string.c ****         if (!ascii_code) break;
 665               		.loc 1 192 27 view .LVU169
 192:quantum/send_string.c ****         if (!ascii_code) break;
 666               		.loc 1 192 27 view .LVU170
 667 0014 F801      		movw r30,r16
 668               	/* #APP */
 669               	 ;  192 "quantum/send_string.c" 1
 670 0016 8491      		lpm r24, Z
 671               		
 672               	 ;  0 "" 2
 673               	.LVL78:
 192:quantum/send_string.c ****         if (!ascii_code) break;
 674               		.loc 1 192 27 view .LVU171
 192:quantum/send_string.c ****         if (!ascii_code) break;
 675               		.loc 1 192 27 is_stmt 0 view .LVU172
 676               	/* #NOAPP */
 677               	.LBE53:
 193:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 678               		.loc 1 193 9 is_stmt 1 view .LVU173
 193:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 679               		.loc 1 193 12 is_stmt 0 view .LVU174
 680 0018 8823      		tst r24
 681 001a 01F4      		brne .+2
 682 001c 00C0      		rjmp .L36
 194:quantum/send_string.c ****             ascii_code = pgm_read_byte(++str);
 683               		.loc 1 194 9 is_stmt 1 view .LVU175
 194:quantum/send_string.c ****             ascii_code = pgm_read_byte(++str);
 684               		.loc 1 194 12 is_stmt 0 view .LVU176
 685 001e 8130      		cpi r24,lo8(1)
 686 0020 01F0      		breq .+2
 687 0022 00C0      		rjmp .L38
 688               	.LBB54:
 195:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 689               		.loc 1 195 26 view .LVU177
 690 0024 E801      		movw r28,r16
 691 0026 2196      		adiw r28,1
 692               	.LBE54:
 195:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 693               		.loc 1 195 13 is_stmt 1 view .LVU178
 694               	.LBB55:
 195:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 695               		.loc 1 195 26 view .LVU179
 696               	.LVL79:
 195:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 697               		.loc 1 195 26 view .LVU180
 195:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 698               		.loc 1 195 26 view .LVU181
 699 0028 FE01      		movw r30,r28
 700               	/* #APP */
 701               	 ;  195 "quantum/send_string.c" 1
 702 002a 8491      		lpm r24, Z
 703               		
 704               	 ;  0 "" 2
 705               	.LVL80:
 195:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 706               		.loc 1 195 26 view .LVU182
 195:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 707               		.loc 1 195 26 is_stmt 0 view .LVU183
 708               	/* #NOAPP */
 709               	.LBE55:
 196:quantum/send_string.c ****                 // tap
 710               		.loc 1 196 13 is_stmt 1 view .LVU184
 196:quantum/send_string.c ****                 // tap
 711               		.loc 1 196 16 is_stmt 0 view .LVU185
 712 002c 8130      		cpi r24,lo8(1)
 713 002e 01F4      		brne .L39
 714               	.LBB56:
 198:quantum/send_string.c ****                 tap_code(keycode);
 715               		.loc 1 198 17 is_stmt 1 view .LVU186
 716               	.LBB57:
 198:quantum/send_string.c ****                 tap_code(keycode);
 717               		.loc 1 198 35 view .LVU187
 718 0030 2196      		adiw r28,1
 719               	.LVL81:
 198:quantum/send_string.c ****                 tap_code(keycode);
 720               		.loc 1 198 35 view .LVU188
 198:quantum/send_string.c ****                 tap_code(keycode);
 721               		.loc 1 198 35 view .LVU189
 722 0032 FE01      		movw r30,r28
 723               	.LVL82:
 198:quantum/send_string.c ****                 tap_code(keycode);
 724               		.loc 1 198 35 is_stmt 0 view .LVU190
 725               	/* #APP */
 726               	 ;  198 "quantum/send_string.c" 1
 727 0034 8491      		lpm r24, Z
 728               		
 729               	 ;  0 "" 2
 730               	.LVL83:
 198:quantum/send_string.c ****                 tap_code(keycode);
 731               		.loc 1 198 35 is_stmt 1 view .LVU191
 198:quantum/send_string.c ****                 tap_code(keycode);
 732               		.loc 1 198 35 is_stmt 0 view .LVU192
 733               	/* #NOAPP */
 734               	.LBE57:
 199:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 735               		.loc 1 199 17 is_stmt 1 view .LVU193
 736 0036 0E94 0000 		call tap_code
 737               	.LVL84:
 738               	.L40:
 199:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 739               		.loc 1 199 17 is_stmt 0 view .LVU194
 740               	.LBE56:
 222:quantum/send_string.c ****         // interval
 741               		.loc 1 222 9 is_stmt 1 view .LVU195
 742 003a 8E01      		movw r16,r28
 743               	.LVL85:
 222:quantum/send_string.c ****         // interval
 744               		.loc 1 222 9 is_stmt 0 view .LVU196
 745 003c 0F5F      		subi r16,-1
 746 003e 1F4F      		sbci r17,-1
 747               	.LVL86:
 748               	.LBB58:
 225:quantum/send_string.c ****             while (ms--) wait_ms(1);
 749               		.loc 1 225 13 is_stmt 1 view .LVU197
 226:quantum/send_string.c ****         }
 750               		.loc 1 226 13 view .LVU198
 226:quantum/send_string.c ****         }
 751               		.loc 1 226 19 is_stmt 0 view .LVU199
 752 0040 8F2D      		mov r24,r15
 753               	.LVL87:
 754               	.L47:
 226:quantum/send_string.c ****         }
 755               		.loc 1 226 26 is_stmt 1 discriminator 7 view .LVU200
 226:quantum/send_string.c ****         }
 756               		.loc 1 226 20 discriminator 7 view .LVU201
 226:quantum/send_string.c ****         }
 757               		.loc 1 226 20 is_stmt 0 discriminator 7 view .LVU202
 758 0042 8823      		tst r24
 759 0044 01F0      		breq .L49
 226:quantum/send_string.c ****         }
 760               		.loc 1 226 26 is_stmt 1 view .LVU203
 226:quantum/send_string.c ****         }
 761               		.loc 1 226 26 view .LVU204
 226:quantum/send_string.c ****         }
 762               		.loc 1 226 26 view .LVU205
 763               	.LVL88:
 764               	.LBB59:
 765               	.LBI59:
 166:/usr/avr/include/util/delay.h **** {
 766               		.loc 2 166 1 view .LVU206
 767               	.LBB60:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 768               		.loc 2 168 2 view .LVU207
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 769               		.loc 2 172 2 view .LVU208
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 770               		.loc 2 173 2 view .LVU209
 174:/usr/avr/include/util/delay.h **** 
 771               		.loc 2 174 2 view .LVU210
 184:/usr/avr/include/util/delay.h **** 	#endif
 772               		.loc 2 184 3 view .LVU211
 187:/usr/avr/include/util/delay.h **** 
 773               		.loc 2 187 2 view .LVU212
 774 0046 EFE9      		ldi r30,lo8(3999)
 775 0048 FFE0      		ldi r31,hi8(3999)
 776 004a 3197      	1:	sbiw r30,1
 777 004c 01F4      		brne 1b
 778 004e 00C0      		rjmp .
 779 0050 0000      		nop
 780 0052 8150      		subi r24,lo8(-(-1))
 781               	.LVL89:
 782               		.loc 2 210 1 is_stmt 0 view .LVU213
 783 0054 00C0      		rjmp .L47
 784               	.LVL90:
 785               	.L39:
 786               		.loc 2 210 1 view .LVU214
 787               	.LBE60:
 788               	.LBE59:
 789               	.LBE58:
 200:quantum/send_string.c ****                 // down
 790               		.loc 1 200 20 is_stmt 1 view .LVU215
 200:quantum/send_string.c ****                 // down
 791               		.loc 1 200 23 is_stmt 0 view .LVU216
 792 0056 8230      		cpi r24,lo8(2)
 793 0058 01F4      		brne .L41
 794               	.LBB61:
 202:quantum/send_string.c ****                 register_code(keycode);
 795               		.loc 1 202 17 is_stmt 1 view .LVU217
 796               	.LBB62:
 202:quantum/send_string.c ****                 register_code(keycode);
 797               		.loc 1 202 35 view .LVU218
 798 005a E801      		movw r28,r16
 799               	.LVL91:
 202:quantum/send_string.c ****                 register_code(keycode);
 800               		.loc 1 202 35 is_stmt 0 view .LVU219
 801 005c 2296      		adiw r28,2
 802               	.LVL92:
 202:quantum/send_string.c ****                 register_code(keycode);
 803               		.loc 1 202 35 is_stmt 1 view .LVU220
 202:quantum/send_string.c ****                 register_code(keycode);
 804               		.loc 1 202 35 view .LVU221
 805 005e FE01      		movw r30,r28
 806               	.LVL93:
 202:quantum/send_string.c ****                 register_code(keycode);
 807               		.loc 1 202 35 is_stmt 0 view .LVU222
 808               	/* #APP */
 809               	 ;  202 "quantum/send_string.c" 1
 810 0060 8491      		lpm r24, Z
 811               		
 812               	 ;  0 "" 2
 813               	.LVL94:
 202:quantum/send_string.c ****                 register_code(keycode);
 814               		.loc 1 202 35 is_stmt 1 view .LVU223
 202:quantum/send_string.c ****                 register_code(keycode);
 815               		.loc 1 202 35 is_stmt 0 view .LVU224
 816               	/* #NOAPP */
 817               	.LBE62:
 203:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 818               		.loc 1 203 17 is_stmt 1 view .LVU225
 819 0062 0E94 0000 		call register_code
 820               	.LVL95:
 203:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 821               		.loc 1 203 17 is_stmt 0 view .LVU226
 822               	.LBE61:
 823 0066 00C0      		rjmp .L40
 824               	.LVL96:
 825               	.L41:
 204:quantum/send_string.c ****                 // up
 826               		.loc 1 204 20 is_stmt 1 view .LVU227
 204:quantum/send_string.c ****                 // up
 827               		.loc 1 204 23 is_stmt 0 view .LVU228
 828 0068 8330      		cpi r24,lo8(3)
 829 006a 01F4      		brne .L42
 830               	.LBB63:
 206:quantum/send_string.c ****                 unregister_code(keycode);
 831               		.loc 1 206 17 is_stmt 1 view .LVU229
 832               	.LBB64:
 206:quantum/send_string.c ****                 unregister_code(keycode);
 833               		.loc 1 206 35 view .LVU230
 834 006c E801      		movw r28,r16
 835               	.LVL97:
 206:quantum/send_string.c ****                 unregister_code(keycode);
 836               		.loc 1 206 35 is_stmt 0 view .LVU231
 837 006e 2296      		adiw r28,2
 838               	.LVL98:
 206:quantum/send_string.c ****                 unregister_code(keycode);
 839               		.loc 1 206 35 is_stmt 1 view .LVU232
 206:quantum/send_string.c ****                 unregister_code(keycode);
 840               		.loc 1 206 35 view .LVU233
 841 0070 FE01      		movw r30,r28
 842               	.LVL99:
 206:quantum/send_string.c ****                 unregister_code(keycode);
 843               		.loc 1 206 35 is_stmt 0 view .LVU234
 844               	/* #APP */
 845               	 ;  206 "quantum/send_string.c" 1
 846 0072 8491      		lpm r24, Z
 847               		
 848               	 ;  0 "" 2
 849               	.LVL100:
 206:quantum/send_string.c ****                 unregister_code(keycode);
 850               		.loc 1 206 35 is_stmt 1 view .LVU235
 206:quantum/send_string.c ****                 unregister_code(keycode);
 851               		.loc 1 206 35 is_stmt 0 view .LVU236
 852               	/* #NOAPP */
 853               	.LBE64:
 207:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 854               		.loc 1 207 17 is_stmt 1 view .LVU237
 855 0074 0E94 0000 		call unregister_code
 856               	.LVL101:
 207:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 857               		.loc 1 207 17 is_stmt 0 view .LVU238
 858               	.LBE63:
 859 0078 00C0      		rjmp .L40
 860               	.LVL102:
 861               	.L42:
 208:quantum/send_string.c ****                 // delay
 862               		.loc 1 208 20 is_stmt 1 view .LVU239
 208:quantum/send_string.c ****                 // delay
 863               		.loc 1 208 23 is_stmt 0 view .LVU240
 864 007a 8430      		cpi r24,lo8(4)
 865 007c 01F4      		brne .L40
 866               	.LBB65:
 210:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 867               		.loc 1 210 17 is_stmt 1 view .LVU241
 868               	.LVL103:
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 869               		.loc 1 211 17 view .LVU242
 870               	.LBB48:
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 871               		.loc 1 211 35 view .LVU243
 872 007e E801      		movw r28,r16
 873               	.LVL104:
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 874               		.loc 1 211 35 is_stmt 0 view .LVU244
 875 0080 2296      		adiw r28,2
 876               	.LVL105:
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 877               		.loc 1 211 35 is_stmt 1 view .LVU245
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 878               		.loc 1 211 35 view .LVU246
 879 0082 FE01      		movw r30,r28
 880               	.LVL106:
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 881               		.loc 1 211 35 is_stmt 0 view .LVU247
 882               	/* #APP */
 883               	 ;  211 "quantum/send_string.c" 1
 884 0084 2491      		lpm r18, Z
 885               		
 886               	 ;  0 "" 2
 887               	.LVL107:
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 888               		.loc 1 211 35 is_stmt 1 view .LVU248
 211:quantum/send_string.c ****                 while (isdigit(keycode)) {
 889               		.loc 1 211 35 is_stmt 0 view .LVU249
 890               	/* #NOAPP */
 891               	.LBE48:
 212:quantum/send_string.c ****                     ms *= 10;
 892               		.loc 1 212 17 is_stmt 1 view .LVU250
 210:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 893               		.loc 1 210 25 is_stmt 0 view .LVU251
 894 0086 80E0      		ldi r24,0
 895               	.LVL108:
 210:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 896               		.loc 1 210 25 view .LVU252
 897 0088 90E0      		ldi r25,0
 898               	.LVL109:
 899               	.L43:
 212:quantum/send_string.c ****                     ms *= 10;
 900               		.loc 1 212 24 is_stmt 1 view .LVU253
 901               	.LBB49:
 215:quantum/send_string.c ****                 }
 902               		.loc 1 215 31 is_stmt 0 view .LVU254
 903 008a FE01      		movw r30,r28
 904 008c 3196      		adiw r30,1
 905               	.LBE49:
 212:quantum/send_string.c ****                     ms *= 10;
 906               		.loc 1 212 24 view .LVU255
 907 008e 2053      		subi r18,48
 908 0090 330B      		sbc r19,r19
 909               	.LVL110:
 212:quantum/send_string.c ****                     ms *= 10;
 910               		.loc 1 212 24 view .LVU256
 911 0092 2A30      		cpi r18,10
 912 0094 3105      		cpc r19,__zero_reg__
 913 0096 00F0      		brlo .L44
 914               	.L45:
 217:quantum/send_string.c ****             }
 915               		.loc 1 217 30 is_stmt 1 discriminator 7 view .LVU257
 217:quantum/send_string.c ****             }
 916               		.loc 1 217 24 discriminator 7 view .LVU258
 917               	.LVL111:
 217:quantum/send_string.c ****             }
 918               		.loc 1 217 24 is_stmt 0 discriminator 7 view .LVU259
 919 0098 0097      		sbiw r24,0
 920 009a 01F0      		breq .L40
 217:quantum/send_string.c ****             }
 921               		.loc 1 217 30 is_stmt 1 view .LVU260
 217:quantum/send_string.c ****             }
 922               		.loc 1 217 30 view .LVU261
 217:quantum/send_string.c ****             }
 923               		.loc 1 217 30 view .LVU262
 924               	.LVL112:
 925               	.LBB50:
 926               	.LBI50:
 166:/usr/avr/include/util/delay.h **** {
 927               		.loc 2 166 1 view .LVU263
 928               	.LBB51:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 929               		.loc 2 168 2 view .LVU264
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 930               		.loc 2 172 2 view .LVU265
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 931               		.loc 2 173 2 view .LVU266
 174:/usr/avr/include/util/delay.h **** 
 932               		.loc 2 174 2 view .LVU267
 184:/usr/avr/include/util/delay.h **** 	#endif
 933               		.loc 2 184 3 view .LVU268
 187:/usr/avr/include/util/delay.h **** 
 934               		.loc 2 187 2 view .LVU269
 935 009c EFE9      		ldi r30,lo8(3999)
 936 009e FFE0      		ldi r31,hi8(3999)
 937 00a0 3197      	1:	sbiw r30,1
 938 00a2 01F4      		brne 1b
 939 00a4 00C0      		rjmp .
 940 00a6 0000      		nop
 941 00a8 0197      		sbiw r24,1
 942               	.LVL113:
 943               		.loc 2 210 1 is_stmt 0 view .LVU270
 944 00aa 00C0      		rjmp .L45
 945               	.LVL114:
 946               	.L44:
 947               		.loc 2 210 1 view .LVU271
 948               	.LBE51:
 949               	.LBE50:
 213:quantum/send_string.c ****                     ms += keycode - '0';
 950               		.loc 1 213 21 is_stmt 1 view .LVU272
 213:quantum/send_string.c ****                     ms += keycode - '0';
 951               		.loc 1 213 24 is_stmt 0 view .LVU273
 952 00ac E89E      		mul r14,r24
 953 00ae A001      		movw r20,r0
 954 00b0 E99E      		mul r14,r25
 955 00b2 500D      		add r21,r0
 956 00b4 1124      		clr __zero_reg__
 957               	.LVL115:
 214:quantum/send_string.c ****                     keycode = pgm_read_byte(++str);
 958               		.loc 1 214 21 is_stmt 1 view .LVU274
 214:quantum/send_string.c ****                     keycode = pgm_read_byte(++str);
 959               		.loc 1 214 24 is_stmt 0 view .LVU275
 960 00b6 C901      		movw r24,r18
 961 00b8 840F      		add r24,r20
 962 00ba 951F      		adc r25,r21
 963               	.LVL116:
 215:quantum/send_string.c ****                 }
 964               		.loc 1 215 21 is_stmt 1 view .LVU276
 965               	.LBB52:
 215:quantum/send_string.c ****                 }
 966               		.loc 1 215 31 view .LVU277
 215:quantum/send_string.c ****                 }
 967               		.loc 1 215 31 view .LVU278
 215:quantum/send_string.c ****                 }
 968               		.loc 1 215 31 view .LVU279
 969               	/* #APP */
 970               	 ;  215 "quantum/send_string.c" 1
 971 00bc 2491      		lpm r18, Z
 972               		
 973               	 ;  0 "" 2
 974               	.LVL117:
 215:quantum/send_string.c ****                 }
 975               		.loc 1 215 31 view .LVU280
 215:quantum/send_string.c ****                 }
 976               		.loc 1 215 31 is_stmt 0 view .LVU281
 977               	/* #NOAPP */
 978 00be EF01      		movw r28,r30
 979 00c0 00C0      		rjmp .L43
 980               	.LVL118:
 981               	.L38:
 215:quantum/send_string.c ****                 }
 982               		.loc 1 215 31 view .LVU282
 983               	.LBE52:
 984               	.LBE65:
 220:quantum/send_string.c ****         }
 985               		.loc 1 220 13 is_stmt 1 view .LVU283
 986 00c2 0E94 0000 		call send_char
 987               	.LVL119:
 220:quantum/send_string.c ****         }
 988               		.loc 1 220 13 is_stmt 0 view .LVU284
 989 00c6 E801      		movw r28,r16
 990 00c8 00C0      		rjmp .L40
 991               	.LVL120:
 992               	.L36:
 993               	/* epilogue start */
 220:quantum/send_string.c ****         }
 994               		.loc 1 220 13 view .LVU285
 995               	.LBE66:
 229:quantum/send_string.c **** 
 996               		.loc 1 229 1 view .LVU286
 997 00ca DF91      		pop r29
 998 00cc CF91      		pop r28
 999 00ce 1F91      		pop r17
 1000 00d0 0F91      		pop r16
 1001               	.LVL121:
 229:quantum/send_string.c **** 
 1002               		.loc 1 229 1 view .LVU287
 1003 00d2 FF90      		pop r15
 1004               	.LVL122:
 229:quantum/send_string.c **** 
 1005               		.loc 1 229 1 view .LVU288
 1006 00d4 EF90      		pop r14
 1007 00d6 0895      		ret
 1008               		.cfi_endproc
 1009               	.LFE122:
 1011               		.section	.text.send_string_P,"ax",@progbits
 1012               	.global	send_string_P
 1014               	send_string_P:
 1015               	.LVL123:
 1016               	.LFB120:
 147:quantum/send_string.c **** 
 1017               		.loc 1 147 37 is_stmt 1 view -0
 1018               		.cfi_startproc
 1019               	/* prologue: function */
 1020               	/* frame size = 0 */
 1021               	/* stack size = 0 */
 1022               	.L__stack_usage = 0
 147:quantum/send_string.c **** 
 1023               		.loc 1 147 39 view .LVU290
 1024 0000 60E0      		ldi r22,0
 1025 0002 0C94 0000 		jmp send_string_with_delay_P
 1026               	.LVL124:
 147:quantum/send_string.c **** 
 1027               		.loc 1 147 39 is_stmt 0 view .LVU291
 1028               		.cfi_endproc
 1029               	.LFE120:
 1031               		.section	.text.send_nibble,"ax",@progbits
 1032               	.global	send_nibble
 1034               	send_nibble:
 1035               	.LVL125:
 1036               	.LFB127:
 261:quantum/send_string.c **** 
 262:quantum/send_string.c **** void send_dword(uint32_t number) {
 263:quantum/send_string.c ****     send_word(number >> 16);
 264:quantum/send_string.c ****     send_word(number & 0xFFFFUL);
 265:quantum/send_string.c **** }
 266:quantum/send_string.c **** 
 267:quantum/send_string.c **** void send_word(uint16_t number) {
 268:quantum/send_string.c ****     send_byte(number >> 8);
 269:quantum/send_string.c ****     send_byte(number & 0xFF);
 270:quantum/send_string.c **** }
 271:quantum/send_string.c **** 
 272:quantum/send_string.c **** void send_byte(uint8_t number) {
 273:quantum/send_string.c ****     send_nibble(number >> 4);
 274:quantum/send_string.c ****     send_nibble(number & 0xF);
 275:quantum/send_string.c **** }
 276:quantum/send_string.c **** 
 277:quantum/send_string.c **** void send_nibble(uint8_t number) {
 1037               		.loc 1 277 34 is_stmt 1 view -0
 1038               		.cfi_startproc
 1039               	/* prologue: function */
 1040               	/* frame size = 0 */
 1041               	/* stack size = 0 */
 1042               	.L__stack_usage = 0
 278:quantum/send_string.c ****     switch (number & 0xF) {
 1043               		.loc 1 278 5 view .LVU293
 1044 0000 982F      		mov r25,r24
 1045 0002 9F70      		andi r25,lo8(15)
 1046 0004 9A50      		subi r25,lo8(-(-10))
 1047 0006 9630      		cpi r25,lo8(6)
 1048 0008 00F0      		brlo .L52
 279:quantum/send_string.c ****         case 0 ... 9:
 280:quantum/send_string.c ****             send_char(number + '0');
 1049               		.loc 1 280 13 view .LVU294
 1050 000a 805D      		subi r24,lo8(-(48))
 1051               	.LVL126:
 1052               	.L53:
 281:quantum/send_string.c ****             break;
 282:quantum/send_string.c ****         case 10 ... 15:
 283:quantum/send_string.c ****             send_char(number - 10 + 'a');
 1053               		.loc 1 283 13 is_stmt 0 view .LVU295
 1054 000c 0C94 0000 		jmp send_char
 1055               	.LVL127:
 1056               	.L52:
 1057               		.loc 1 283 13 is_stmt 1 view .LVU296
 1058 0010 895A      		subi r24,lo8(-(87))
 1059               	.LVL128:
 1060               		.loc 1 283 13 is_stmt 0 view .LVU297
 1061 0012 00C0      		rjmp .L53
 1062               		.cfi_endproc
 1063               	.LFE127:
 1065               		.section	.text.send_byte,"ax",@progbits
 1066               	.global	send_byte
 1068               	send_byte:
 1069               	.LVL129:
 1070               	.LFB126:
 272:quantum/send_string.c ****     send_nibble(number >> 4);
 1071               		.loc 1 272 32 is_stmt 1 view -0
 1072               		.cfi_startproc
 272:quantum/send_string.c ****     send_nibble(number >> 4);
 1073               		.loc 1 272 32 is_stmt 0 view .LVU299
 1074 0000 CF93      		push r28
 1075               	.LCFI19:
 1076               		.cfi_def_cfa_offset 3
 1077               		.cfi_offset 28, -2
 1078               	/* prologue: function */
 1079               	/* frame size = 0 */
 1080               	/* stack size = 1 */
 1081               	.L__stack_usage = 1
 1082 0002 C82F      		mov r28,r24
 273:quantum/send_string.c ****     send_nibble(number & 0xF);
 1083               		.loc 1 273 5 is_stmt 1 view .LVU300
 1084 0004 8295      		swap r24
 1085               	.LVL130:
 273:quantum/send_string.c ****     send_nibble(number & 0xF);
 1086               		.loc 1 273 5 is_stmt 0 view .LVU301
 1087 0006 8F70      		andi r24,lo8(15)
 1088 0008 0E94 0000 		call send_nibble
 1089               	.LVL131:
 274:quantum/send_string.c **** }
 1090               		.loc 1 274 5 is_stmt 1 view .LVU302
 1091 000c 8C2F      		mov r24,r28
 1092 000e 8F70      		andi r24,lo8(15)
 1093               	/* epilogue start */
 275:quantum/send_string.c **** 
 1094               		.loc 1 275 1 is_stmt 0 view .LVU303
 1095 0010 CF91      		pop r28
 1096               	.LVL132:
 274:quantum/send_string.c **** }
 1097               		.loc 1 274 5 view .LVU304
 1098 0012 0C94 0000 		jmp send_nibble
 1099               	.LVL133:
 1100               		.cfi_endproc
 1101               	.LFE126:
 1103               		.section	.text.send_word,"ax",@progbits
 1104               	.global	send_word
 1106               	send_word:
 1107               	.LVL134:
 1108               	.LFB125:
 267:quantum/send_string.c ****     send_byte(number >> 8);
 1109               		.loc 1 267 33 is_stmt 1 view -0
 1110               		.cfi_startproc
 267:quantum/send_string.c ****     send_byte(number >> 8);
 1111               		.loc 1 267 33 is_stmt 0 view .LVU306
 1112 0000 CF93      		push r28
 1113               	.LCFI20:
 1114               		.cfi_def_cfa_offset 3
 1115               		.cfi_offset 28, -2
 1116               	/* prologue: function */
 1117               	/* frame size = 0 */
 1118               	/* stack size = 1 */
 1119               	.L__stack_usage = 1
 1120 0002 C82F      		mov r28,r24
 1121 0004 892F      		mov r24,r25
 1122               	.LVL135:
 268:quantum/send_string.c ****     send_byte(number & 0xFF);
 1123               		.loc 1 268 5 is_stmt 1 view .LVU307
 1124 0006 0E94 0000 		call send_byte
 1125               	.LVL136:
 269:quantum/send_string.c **** }
 1126               		.loc 1 269 5 view .LVU308
 1127 000a 8C2F      		mov r24,r28
 1128               	/* epilogue start */
 270:quantum/send_string.c **** 
 1129               		.loc 1 270 1 is_stmt 0 view .LVU309
 1130 000c CF91      		pop r28
 269:quantum/send_string.c **** }
 1131               		.loc 1 269 5 view .LVU310
 1132 000e 0C94 0000 		jmp send_byte
 1133               	.LVL137:
 1134               		.cfi_endproc
 1135               	.LFE125:
 1137               		.section	.text.send_dword,"ax",@progbits
 1138               	.global	send_dword
 1140               	send_dword:
 1141               	.LVL138:
 1142               	.LFB124:
 262:quantum/send_string.c ****     send_word(number >> 16);
 1143               		.loc 1 262 34 is_stmt 1 view -0
 1144               		.cfi_startproc
 262:quantum/send_string.c ****     send_word(number >> 16);
 1145               		.loc 1 262 34 is_stmt 0 view .LVU312
 1146 0000 CF93      		push r28
 1147               	.LCFI21:
 1148               		.cfi_def_cfa_offset 3
 1149               		.cfi_offset 28, -2
 1150 0002 DF93      		push r29
 1151               	.LCFI22:
 1152               		.cfi_def_cfa_offset 4
 1153               		.cfi_offset 29, -3
 1154               	/* prologue: function */
 1155               	/* frame size = 0 */
 1156               	/* stack size = 2 */
 1157               	.L__stack_usage = 2
 1158 0004 D62F      		mov r29,r22
 1159 0006 C72F      		mov r28,r23
 263:quantum/send_string.c ****     send_word(number & 0xFFFFUL);
 1160               		.loc 1 263 5 is_stmt 1 view .LVU313
 1161 0008 0E94 0000 		call send_word
 1162               	.LVL139:
 264:quantum/send_string.c **** }
 1163               		.loc 1 264 5 view .LVU314
 1164 000c 8D2F      		mov r24,r29
 1165 000e 9C2F      		mov r25,r28
 1166               	/* epilogue start */
 265:quantum/send_string.c **** 
 1167               		.loc 1 265 1 is_stmt 0 view .LVU315
 1168 0010 DF91      		pop r29
 1169 0012 CF91      		pop r28
 264:quantum/send_string.c **** }
 1170               		.loc 1 264 5 view .LVU316
 1171 0014 0C94 0000 		jmp send_word
 1172               	.LVL140:
 1173               		.cfi_endproc
 1174               	.LFE124:
 1176               		.section	.text.tap_random_base64,"ax",@progbits
 1177               	.global	tap_random_base64
 1179               	tap_random_base64:
 1180               	.LFB128:
 284:quantum/send_string.c ****             break;
 285:quantum/send_string.c ****     }
 286:quantum/send_string.c **** }
 287:quantum/send_string.c **** 
 288:quantum/send_string.c **** void tap_random_base64(void) {
 1181               		.loc 1 288 30 is_stmt 1 view -0
 1182               		.cfi_startproc
 1183               	/* prologue: function */
 1184               	/* frame size = 0 */
 1185               	/* stack size = 0 */
 1186               	.L__stack_usage = 0
 289:quantum/send_string.c **** #if defined(__AVR_ATmega32U4__)
 290:quantum/send_string.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1187               		.loc 1 290 5 view .LVU318
 1188               		.loc 1 290 20 is_stmt 0 view .LVU319
 1189 0000 96B5      		in r25,0x26
 1190               		.loc 1 290 28 view .LVU320
 1191 0002 2091 8400 		lds r18,132
 1192 0006 3091 8500 		lds r19,132+1
 1193               		.loc 1 290 36 view .LVU321
 1194 000a 6091 9400 		lds r22,148
 1195 000e 7091 9500 		lds r23,148+1
 1196               		.loc 1 290 44 view .LVU322
 1197 0012 4091 BE00 		lds r20,190
 1198 0016 5091 BF00 		lds r21,190+1
 1199               		.loc 1 290 34 view .LVU323
 1200 001a 822F      		mov r24,r18
 1201 001c 860F      		add r24,r22
 1202 001e 890F      		add r24,r25
 1203               		.loc 1 290 42 view .LVU324
 1204 0020 840F      		add r24,r20
 1205               		.loc 1 290 13 view .LVU325
 1206 0022 8F73      		andi r24,lo8(63)
 1207               	.LVL141:
 291:quantum/send_string.c **** #else
 292:quantum/send_string.c ****     uint8_t key = rand() % 64;
 293:quantum/send_string.c **** #endif
 294:quantum/send_string.c ****     switch (key) {
 1208               		.loc 1 294 5 is_stmt 1 view .LVU326
 1209 0024 8E33      		cpi r24,lo8(62)
 1210 0026 00F4      		brsh .L58
 1211 0028 8533      		cpi r24,lo8(53)
 1212 002a 00F4      		brsh .L59
 1213 002c 8433      		cpi r24,lo8(52)
 1214 002e 01F0      		breq .L60
 1215 0030 8A31      		cpi r24,lo8(26)
 1216 0032 00F0      		brlo .L65
 295:quantum/send_string.c ****         case 0 ... 25:
 296:quantum/send_string.c ****             send_char(key + 'A');
 297:quantum/send_string.c ****             break;
 298:quantum/send_string.c ****         case 26 ... 51:
 299:quantum/send_string.c ****             send_char(key - 26 + 'a');
 1217               		.loc 1 299 13 view .LVU327
 1218 0034 895B      		subi r24,lo8(-(71))
 1219               	.LVL142:
 1220               		.loc 1 299 13 is_stmt 0 view .LVU328
 1221 0036 00C0      		rjmp .L67
 1222               	.LVL143:
 1223               	.L58:
 294:quantum/send_string.c ****         case 0 ... 25:
 1224               		.loc 1 294 5 view .LVU329
 1225 0038 8E33      		cpi r24,lo8(62)
 1226 003a 01F4      		brne .L66
 300:quantum/send_string.c ****             break;
 301:quantum/send_string.c ****         case 52:
 302:quantum/send_string.c ****             send_char('0');
 303:quantum/send_string.c ****             break;
 304:quantum/send_string.c ****         case 53 ... 61:
 305:quantum/send_string.c ****             send_char(key - 53 + '1');
 306:quantum/send_string.c ****             break;
 307:quantum/send_string.c ****         case 62:
 308:quantum/send_string.c ****             send_char('+');
 1227               		.loc 1 308 13 is_stmt 1 view .LVU330
 1228 003c 8BE2      		ldi r24,lo8(43)
 1229               	.LVL144:
 1230               		.loc 1 308 13 is_stmt 0 view .LVU331
 1231 003e 00C0      		rjmp .L67
 1232               	.LVL145:
 1233               	.L65:
 296:quantum/send_string.c ****             break;
 1234               		.loc 1 296 13 is_stmt 1 view .LVU332
 1235 0040 8F5B      		subi r24,lo8(-(65))
 1236               	.LVL146:
 1237               	.L67:
 309:quantum/send_string.c ****             break;
 310:quantum/send_string.c ****         case 63:
 311:quantum/send_string.c ****             send_char('/');
 1238               		.loc 1 311 13 is_stmt 0 view .LVU333
 1239 0042 0C94 0000 		jmp send_char
 1240               	.LVL147:
 1241               	.L60:
 302:quantum/send_string.c ****             break;
 1242               		.loc 1 302 13 is_stmt 1 view .LVU334
 1243 0046 80E3      		ldi r24,lo8(48)
 1244               	.LVL148:
 302:quantum/send_string.c ****             break;
 1245               		.loc 1 302 13 is_stmt 0 view .LVU335
 1246 0048 00C0      		rjmp .L67
 1247               	.LVL149:
 1248               	.L59:
 305:quantum/send_string.c ****             break;
 1249               		.loc 1 305 13 is_stmt 1 view .LVU336
 1250 004a 8450      		subi r24,lo8(-(-4))
 1251               	.LVL150:
 305:quantum/send_string.c ****             break;
 1252               		.loc 1 305 13 is_stmt 0 view .LVU337
 1253 004c 00C0      		rjmp .L67
 1254               	.LVL151:
 1255               	.L66:
 1256               		.loc 1 311 13 is_stmt 1 view .LVU338
 1257 004e 8FE2      		ldi r24,lo8(47)
 1258               	.LVL152:
 1259               		.loc 1 311 13 is_stmt 0 view .LVU339
 1260 0050 00C0      		rjmp .L67
 1261               		.cfi_endproc
 1262               	.LFE128:
 1264               		.weak	ascii_to_keycode_lut
 1265               		.section	.progmem.data.ascii_to_keycode_lut,"a"
 1268               	ascii_to_keycode_lut:
 1269 0000 00        		.string	""
 1270 0001 00        		.string	""
 1271 0002 00        		.string	""
 1272 0003 00        		.string	""
 1273 0004 00        		.string	""
 1274 0005 00        		.string	""
 1275 0006 00        		.string	""
 1276 0007 00        		.string	""
 1277 0008 2A2B 2800 		.string	"*+("
 1278 000c 00        		.string	""
 1279 000d 00        		.string	""
 1280 000e 00        		.string	""
 1281 000f 00        		.string	""
 1282 0010 00        		.string	""
 1283 0011 00        		.string	""
 1284 0012 00        		.string	""
 1285 0013 00        		.string	""
 1286 0014 00        		.string	""
 1287 0015 00        		.string	""
 1288 0016 00        		.string	""
 1289 0017 00        		.string	""
 1290 0018 00        		.string	""
 1291 0019 00        		.string	""
 1292 001a 00        		.string	""
 1293 001b 2900      		.string	")"
 1294 001d 00        		.string	""
 1295 001e 00        		.string	""
 1296 001f 00        		.string	""
 1297 0020 2C1E 3420 		.ascii	",\0364 !\"$4&'%.6-78'\036\037 !\"#$%&336.78\037\004\005\006\007"
 1297      2122 2434 
 1297      2627 252E 
 1297      362D 3738 
 1297      271E 1F20 
 1298 0045 0809 0A0B 		.ascii	"\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031"
 1298      0C0D 0E0F 
 1298      1011 1213 
 1298      1415 1617 
 1298      1819 
 1299 0057 1A1B 1C1D 		.ascii	"\032\033\034\035/10#-5\004\005\006\007\b\t\n\013\f\r\016\017"
 1299      2F31 3023 
 1299      2D35 0405 
 1299      0607 0809 
 1299      0A0B 0C0D 
 1300 006d 1011 1213 		.ascii	"\020\021\022\023\024\025\026\027\030\031\032\033\034\035/105"
 1300      1415 1617 
 1300      1819 1A1B 
 1300      1C1D 2F31 
 1300      3035 
 1301 007f 4C        		.ascii	"L"
 1302               		.weak	ascii_to_dead_lut
 1303               		.section	.progmem.data.ascii_to_dead_lut,"a"
 1306               	ascii_to_dead_lut:
 1307 0000 0000 0000 		.zero	16
 1307      0000 0000 
 1307      0000 0000 
 1307      0000 0000 
 1308               		.weak	ascii_to_altgr_lut
 1309               		.section	.progmem.data.ascii_to_altgr_lut,"a"
 1312               	ascii_to_altgr_lut:
 1313 0000 0000 0000 		.zero	16
 1313      0000 0000 
 1313      0000 0000 
 1313      0000 0000 
 1314               		.weak	ascii_to_shift_lut
 1315               		.section	.progmem.data.ascii_to_shift_lut,"a"
 1318               	ascii_to_shift_lut:
 1319 0000 00        		.string	""
 1320 0001 00        		.string	""
 1321 0002 00        		.string	""
 1322 0003 00        		.string	""
 1323 0004 7E0F 00   		.string	"~\017"
 1324 0007 D4FF FFFF 		.string	"\324\377\377\377\307"
 1324      C700 
 1325 000d 00        		.string	""
 1326 000e 00        		.string	""
 1327 000f 78        		.ascii	"x"
 1328               		.text
 1329               	.Letext0:
 1330               		.file 3 "/usr/avr/include/stdint.h"
 1331               		.file 4 "quantum/send_string.h"
 1332               		.file 5 "quantum/action.h"
 1333               		.file 6 "quantum/keycode.h"
 1334               		.file 7 "quantum/sequencer/sequencer.h"
 1335               		.file 8 "/usr/avr/include/math.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 send_string.c
     /tmp/cc6s5t7F.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc6s5t7F.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc6s5t7F.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc6s5t7F.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc6s5t7F.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc6s5t7F.s:13     .text.send_char:0000000000000000 send_char
     /tmp/cc6s5t7F.s:1268   .progmem.data.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
     /tmp/cc6s5t7F.s:1318   .progmem.data.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
     /tmp/cc6s5t7F.s:1312   .progmem.data.ascii_to_altgr_lut:0000000000000000 ascii_to_altgr_lut
     /tmp/cc6s5t7F.s:1306   .progmem.data.ascii_to_dead_lut:0000000000000000 ascii_to_dead_lut
     /tmp/cc6s5t7F.s:276    .text.send_string_with_delay:0000000000000000 send_string_with_delay
     /tmp/cc6s5t7F.s:594    .text.send_string:0000000000000000 send_string
     /tmp/cc6s5t7F.s:614    .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
     /tmp/cc6s5t7F.s:1014   .text.send_string_P:0000000000000000 send_string_P
     /tmp/cc6s5t7F.s:1034   .text.send_nibble:0000000000000000 send_nibble
     /tmp/cc6s5t7F.s:1068   .text.send_byte:0000000000000000 send_byte
     /tmp/cc6s5t7F.s:1106   .text.send_word:0000000000000000 send_word
     /tmp/cc6s5t7F.s:1140   .text.send_dword:0000000000000000 send_dword
     /tmp/cc6s5t7F.s:1179   .text.tap_random_base64:0000000000000000 tap_random_base64

UNDEFINED SYMBOLS
register_code
tap_code
unregister_code
