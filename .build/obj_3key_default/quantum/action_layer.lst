   1               		.file	"action_layer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.default_layer_state_set_user,"ax",@progbits
  11               		.weak	default_layer_state_set_user
  13               	default_layer_state_set_user:
  14               	.LVL0:
  15               	.LFB4:
  16               		.file 1 "quantum/action_layer.c"
   1:quantum/action_layer.c **** #include <stdint.h>
   2:quantum/action_layer.c **** #include "keyboard.h"
   3:quantum/action_layer.c **** #include "action.h"
   4:quantum/action_layer.c **** #include "util.h"
   5:quantum/action_layer.c **** #include "action_layer.h"
   6:quantum/action_layer.c **** 
   7:quantum/action_layer.c **** #ifdef DEBUG_ACTION
   8:quantum/action_layer.c **** #    include "debug.h"
   9:quantum/action_layer.c **** #else
  10:quantum/action_layer.c **** #    include "nodebug.h"
  11:quantum/action_layer.c **** #endif
  12:quantum/action_layer.c **** 
  13:quantum/action_layer.c **** /** \brief Default Layer State
  14:quantum/action_layer.c ****  */
  15:quantum/action_layer.c **** layer_state_t default_layer_state = 0;
  16:quantum/action_layer.c **** 
  17:quantum/action_layer.c **** /** \brief Default Layer State Set At user Level
  18:quantum/action_layer.c ****  *
  19:quantum/action_layer.c ****  * Run user code on default layer state change
  20:quantum/action_layer.c ****  */
  21:quantum/action_layer.c **** __attribute__((weak)) layer_state_t default_layer_state_set_user(layer_state_t state) { return stat
  17               		.loc 1 21 87 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               		.loc 1 21 89 view .LVU1
  24               	/* epilogue start */
  25               		.loc 1 21 103 is_stmt 0 view .LVU2
  26 0000 0895      		ret
  27               		.cfi_endproc
  28               	.LFE4:
  30               		.set	default_layer_state_set_user.localalias,default_layer_state_set_user
  31               		.section	.text.default_layer_state_set_kb,"ax",@progbits
  32               		.weak	default_layer_state_set_kb
  34               	default_layer_state_set_kb:
  35               	.LVL1:
  36               	.LFB5:
  22:quantum/action_layer.c **** 
  23:quantum/action_layer.c **** /** \brief Default Layer State Set At Keyboard Level
  24:quantum/action_layer.c ****  *
  25:quantum/action_layer.c ****  *  Run keyboard code on default layer state change
  26:quantum/action_layer.c ****  */
  27:quantum/action_layer.c **** __attribute__((weak)) layer_state_t default_layer_state_set_kb(layer_state_t state) { return defaul
  37               		.loc 1 27 85 is_stmt 1 view -0
  38               		.cfi_startproc
  39               	/* prologue: function */
  40               	/* frame size = 0 */
  41               	/* stack size = 0 */
  42               	.L__stack_usage = 0
  43               		.loc 1 27 87 view .LVU4
  44               		.loc 1 27 94 is_stmt 0 view .LVU5
  45 0000 0C94 0000 		jmp default_layer_state_set_user
  46               	.LVL2:
  47               		.loc 1 27 94 view .LVU6
  48               		.cfi_endproc
  49               	.LFE5:
  51               		.section	.text.default_layer_state_set,"ax",@progbits
  53               	default_layer_state_set:
  54               	.LVL3:
  55               	.LFB6:
  28:quantum/action_layer.c **** 
  29:quantum/action_layer.c **** /** \brief Default Layer State Set
  30:quantum/action_layer.c ****  *
  31:quantum/action_layer.c ****  * Static function to set the default layer state, prints debug info and clears keys
  32:quantum/action_layer.c ****  */
  33:quantum/action_layer.c **** static void default_layer_state_set(layer_state_t state) {
  56               		.loc 1 33 58 is_stmt 1 view -0
  57               		.cfi_startproc
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 0 */
  61               	.L__stack_usage = 0
  34:quantum/action_layer.c ****     state = default_layer_state_set_kb(state);
  62               		.loc 1 34 5 view .LVU8
  63               		.loc 1 34 13 is_stmt 0 view .LVU9
  64 0000 0E94 0000 		call default_layer_state_set_kb
  65               	.LVL4:
  66               		.loc 1 34 13 view .LVU10
  67 0004 6093 0000 		sts default_layer_state,r22
  68 0008 7093 0000 		sts default_layer_state+1,r23
  69 000c 8093 0000 		sts default_layer_state+2,r24
  70 0010 9093 0000 		sts default_layer_state+3,r25
  71               	.LVL5:
  35:quantum/action_layer.c ****     debug("default_layer_state: ");
  72               		.loc 1 35 35 is_stmt 1 view .LVU11
  36:quantum/action_layer.c ****     default_layer_debug();
  73               		.loc 1 36 5 view .LVU12
  37:quantum/action_layer.c ****     debug(" to ");
  74               		.loc 1 37 18 view .LVU13
  38:quantum/action_layer.c ****     default_layer_state = state;
  75               		.loc 1 38 5 view .LVU14
  39:quantum/action_layer.c ****     default_layer_debug();
  76               		.loc 1 39 5 view .LVU15
  40:quantum/action_layer.c ****     debug("\n");
  77               		.loc 1 40 16 view .LVU16
  41:quantum/action_layer.c **** #ifdef STRICT_LAYER_RELEASE
  42:quantum/action_layer.c ****     clear_keyboard_but_mods();  // To avoid stuck keys
  43:quantum/action_layer.c **** #else
  44:quantum/action_layer.c ****     clear_keyboard_but_mods_and_keys();  // Don't reset held keys
  78               		.loc 1 44 5 view .LVU17
  79 0014 0C94 0000 		jmp clear_keyboard_but_mods_and_keys
  80               	.LVL6:
  81               		.loc 1 44 5 is_stmt 0 view .LVU18
  82               		.cfi_endproc
  83               	.LFE6:
  85               		.section	.text.default_layer_debug,"ax",@progbits
  86               	.global	default_layer_debug
  88               	default_layer_debug:
  89               	.LFB7:
  45:quantum/action_layer.c **** #endif
  46:quantum/action_layer.c **** }
  47:quantum/action_layer.c **** 
  48:quantum/action_layer.c **** /** \brief Default Layer Print
  49:quantum/action_layer.c ****  *
  50:quantum/action_layer.c ****  * Print out the hex value of the 32-bit default layer state, as well as the value of the highest b
  51:quantum/action_layer.c ****  */
  52:quantum/action_layer.c **** void default_layer_debug(void) { dprintf("%08lX(%u)", default_layer_state, get_highest_layer(defaul
  90               		.loc 1 52 32 is_stmt 1 view -0
  91               		.cfi_startproc
  92               	/* prologue: function */
  93               	/* frame size = 0 */
  94               	/* stack size = 0 */
  95               	.L__stack_usage = 0
  96               		.loc 1 52 115 view .LVU20
  97               	/* epilogue start */
  98               		.loc 1 52 117 is_stmt 0 view .LVU21
  99 0000 0895      		ret
 100               		.cfi_endproc
 101               	.LFE7:
 103               		.section	.text.default_layer_set,"ax",@progbits
 104               	.global	default_layer_set
 106               	default_layer_set:
 107               	.LVL7:
 108               	.LFB8:
  53:quantum/action_layer.c **** 
  54:quantum/action_layer.c **** /** \brief Default Layer Set
  55:quantum/action_layer.c ****  *
  56:quantum/action_layer.c ****  * Sets the default layer state.
  57:quantum/action_layer.c ****  */
  58:quantum/action_layer.c **** void default_layer_set(layer_state_t state) { default_layer_state_set(state); }
 109               		.loc 1 58 45 is_stmt 1 view -0
 110               		.cfi_startproc
 111               	/* prologue: function */
 112               	/* frame size = 0 */
 113               	/* stack size = 0 */
 114               	.L__stack_usage = 0
 115               		.loc 1 58 47 view .LVU23
 116 0000 0C94 0000 		jmp default_layer_state_set
 117               	.LVL8:
 118               		.loc 1 58 47 is_stmt 0 view .LVU24
 119               		.cfi_endproc
 120               	.LFE8:
 122               		.section	.text.default_layer_or,"ax",@progbits
 123               	.global	default_layer_or
 125               	default_layer_or:
 126               	.LVL9:
 127               	.LFB9:
  59:quantum/action_layer.c **** 
  60:quantum/action_layer.c **** #ifndef NO_ACTION_LAYER
  61:quantum/action_layer.c **** /** \brief Default Layer Or
  62:quantum/action_layer.c ****  *
  63:quantum/action_layer.c ****  * Turns on the default layer based on matching bits between specifed layer and existing layer stat
  64:quantum/action_layer.c ****  */
  65:quantum/action_layer.c **** void default_layer_or(layer_state_t state) { default_layer_state_set(default_layer_state | state); 
 128               		.loc 1 65 44 is_stmt 1 view -0
 129               		.cfi_startproc
 130               		.loc 1 65 44 is_stmt 0 view .LVU26
 131 0000 CF93      		push r28
 132               	.LCFI0:
 133               		.cfi_def_cfa_offset 3
 134               		.cfi_offset 28, -2
 135 0002 DF93      		push r29
 136               	.LCFI1:
 137               		.cfi_def_cfa_offset 4
 138               		.cfi_offset 29, -3
 139 0004 00D0      		rcall .
 140 0006 00D0      		rcall .
 141               	.LCFI2:
 142               		.cfi_def_cfa_offset 8
 143 0008 CDB7      		in r28,__SP_L__
 144 000a DEB7      		in r29,__SP_H__
 145               	.LCFI3:
 146               		.cfi_def_cfa_register 28
 147               	/* prologue: function */
 148               	/* frame size = 4 */
 149               	/* stack size = 6 */
 150               	.L__stack_usage = 6
 151 000c 6983      		std Y+1,r22
 152 000e 7A83      		std Y+2,r23
 153 0010 8B83      		std Y+3,r24
 154 0012 9C83      		std Y+4,r25
 155               		.loc 1 65 46 is_stmt 1 view .LVU27
 156 0014 8091 0000 		lds r24,default_layer_state
 157 0018 9091 0000 		lds r25,default_layer_state+1
 158 001c A091 0000 		lds r26,default_layer_state+2
 159 0020 B091 0000 		lds r27,default_layer_state+3
 160 0024 2981      		ldd r18,Y+1
 161 0026 3A81      		ldd r19,Y+2
 162 0028 4B81      		ldd r20,Y+3
 163 002a 5C81      		ldd r21,Y+4
 164 002c 282B      		or r18,r24
 165 002e 392B      		or r19,r25
 166 0030 4A2B      		or r20,r26
 167 0032 5B2B      		or r21,r27
 168 0034 2983      		std Y+1,r18
 169 0036 3A83      		std Y+2,r19
 170 0038 4B83      		std Y+3,r20
 171 003a 5C83      		std Y+4,r21
 172 003c CA01      		movw r24,r20
 173 003e B901      		movw r22,r18
 174               	.LVL10:
 175               	/* epilogue start */
 176               		.loc 1 65 100 is_stmt 0 view .LVU28
 177 0040 0F90      		pop __tmp_reg__
 178 0042 0F90      		pop __tmp_reg__
 179 0044 0F90      		pop __tmp_reg__
 180 0046 0F90      		pop __tmp_reg__
 181 0048 DF91      		pop r29
 182 004a CF91      		pop r28
 183               		.loc 1 65 46 view .LVU29
 184 004c 0C94 0000 		jmp default_layer_state_set
 185               	.LVL11:
 186               		.cfi_endproc
 187               	.LFE9:
 189               		.section	.text.default_layer_and,"ax",@progbits
 190               	.global	default_layer_and
 192               	default_layer_and:
 193               	.LVL12:
 194               	.LFB10:
  66:quantum/action_layer.c **** /** \brief Default Layer And
  67:quantum/action_layer.c ****  *
  68:quantum/action_layer.c ****  * Turns on default layer based on matching enabled bits between specifed layer and existing layer 
  69:quantum/action_layer.c ****  */
  70:quantum/action_layer.c **** void default_layer_and(layer_state_t state) { default_layer_state_set(default_layer_state & state);
 195               		.loc 1 70 45 is_stmt 1 view -0
 196               		.cfi_startproc
 197               		.loc 1 70 45 is_stmt 0 view .LVU31
 198 0000 CF93      		push r28
 199               	.LCFI4:
 200               		.cfi_def_cfa_offset 3
 201               		.cfi_offset 28, -2
 202 0002 DF93      		push r29
 203               	.LCFI5:
 204               		.cfi_def_cfa_offset 4
 205               		.cfi_offset 29, -3
 206 0004 00D0      		rcall .
 207 0006 00D0      		rcall .
 208               	.LCFI6:
 209               		.cfi_def_cfa_offset 8
 210 0008 CDB7      		in r28,__SP_L__
 211 000a DEB7      		in r29,__SP_H__
 212               	.LCFI7:
 213               		.cfi_def_cfa_register 28
 214               	/* prologue: function */
 215               	/* frame size = 4 */
 216               	/* stack size = 6 */
 217               	.L__stack_usage = 6
 218 000c 6983      		std Y+1,r22
 219 000e 7A83      		std Y+2,r23
 220 0010 8B83      		std Y+3,r24
 221 0012 9C83      		std Y+4,r25
 222               		.loc 1 70 47 is_stmt 1 view .LVU32
 223 0014 8091 0000 		lds r24,default_layer_state
 224 0018 9091 0000 		lds r25,default_layer_state+1
 225 001c A091 0000 		lds r26,default_layer_state+2
 226 0020 B091 0000 		lds r27,default_layer_state+3
 227 0024 2981      		ldd r18,Y+1
 228 0026 3A81      		ldd r19,Y+2
 229 0028 4B81      		ldd r20,Y+3
 230 002a 5C81      		ldd r21,Y+4
 231 002c 2823      		and r18,r24
 232 002e 3923      		and r19,r25
 233 0030 4A23      		and r20,r26
 234 0032 5B23      		and r21,r27
 235 0034 2983      		std Y+1,r18
 236 0036 3A83      		std Y+2,r19
 237 0038 4B83      		std Y+3,r20
 238 003a 5C83      		std Y+4,r21
 239 003c CA01      		movw r24,r20
 240 003e B901      		movw r22,r18
 241               	.LVL13:
 242               	/* epilogue start */
 243               		.loc 1 70 101 is_stmt 0 view .LVU33
 244 0040 0F90      		pop __tmp_reg__
 245 0042 0F90      		pop __tmp_reg__
 246 0044 0F90      		pop __tmp_reg__
 247 0046 0F90      		pop __tmp_reg__
 248 0048 DF91      		pop r29
 249 004a CF91      		pop r28
 250               		.loc 1 70 47 view .LVU34
 251 004c 0C94 0000 		jmp default_layer_state_set
 252               	.LVL14:
 253               		.cfi_endproc
 254               	.LFE10:
 256               		.section	.text.default_layer_xor,"ax",@progbits
 257               	.global	default_layer_xor
 259               	default_layer_xor:
 260               	.LVL15:
 261               	.LFB11:
  71:quantum/action_layer.c **** /** \brief Default Layer Xor
  72:quantum/action_layer.c ****  *
  73:quantum/action_layer.c ****  * Turns on default layer based on non-matching bits between specifed layer and existing layer stat
  74:quantum/action_layer.c ****  */
  75:quantum/action_layer.c **** void default_layer_xor(layer_state_t state) { default_layer_state_set(default_layer_state ^ state);
 262               		.loc 1 75 45 is_stmt 1 view -0
 263               		.cfi_startproc
 264               		.loc 1 75 45 is_stmt 0 view .LVU36
 265 0000 CF93      		push r28
 266               	.LCFI8:
 267               		.cfi_def_cfa_offset 3
 268               		.cfi_offset 28, -2
 269 0002 DF93      		push r29
 270               	.LCFI9:
 271               		.cfi_def_cfa_offset 4
 272               		.cfi_offset 29, -3
 273 0004 00D0      		rcall .
 274 0006 00D0      		rcall .
 275               	.LCFI10:
 276               		.cfi_def_cfa_offset 8
 277 0008 CDB7      		in r28,__SP_L__
 278 000a DEB7      		in r29,__SP_H__
 279               	.LCFI11:
 280               		.cfi_def_cfa_register 28
 281               	/* prologue: function */
 282               	/* frame size = 4 */
 283               	/* stack size = 6 */
 284               	.L__stack_usage = 6
 285 000c 6983      		std Y+1,r22
 286 000e 7A83      		std Y+2,r23
 287 0010 8B83      		std Y+3,r24
 288 0012 9C83      		std Y+4,r25
 289               		.loc 1 75 47 is_stmt 1 view .LVU37
 290 0014 8091 0000 		lds r24,default_layer_state
 291 0018 9091 0000 		lds r25,default_layer_state+1
 292 001c A091 0000 		lds r26,default_layer_state+2
 293 0020 B091 0000 		lds r27,default_layer_state+3
 294 0024 2981      		ldd r18,Y+1
 295 0026 3A81      		ldd r19,Y+2
 296 0028 4B81      		ldd r20,Y+3
 297 002a 5C81      		ldd r21,Y+4
 298 002c 2827      		eor r18,r24
 299 002e 3927      		eor r19,r25
 300 0030 4A27      		eor r20,r26
 301 0032 5B27      		eor r21,r27
 302 0034 2983      		std Y+1,r18
 303 0036 3A83      		std Y+2,r19
 304 0038 4B83      		std Y+3,r20
 305 003a 5C83      		std Y+4,r21
 306 003c CA01      		movw r24,r20
 307 003e B901      		movw r22,r18
 308               	.LVL16:
 309               	/* epilogue start */
 310               		.loc 1 75 101 is_stmt 0 view .LVU38
 311 0040 0F90      		pop __tmp_reg__
 312 0042 0F90      		pop __tmp_reg__
 313 0044 0F90      		pop __tmp_reg__
 314 0046 0F90      		pop __tmp_reg__
 315 0048 DF91      		pop r29
 316 004a CF91      		pop r28
 317               		.loc 1 75 47 view .LVU39
 318 004c 0C94 0000 		jmp default_layer_state_set
 319               	.LVL17:
 320               		.cfi_endproc
 321               	.LFE11:
 323               		.section	.text.layer_state_set_user,"ax",@progbits
 324               		.weak	layer_state_set_user
 326               	layer_state_set_user:
 327               	.LFB34:
 328               		.cfi_startproc
 329               	/* prologue: function */
 330               	/* frame size = 0 */
 331               	/* stack size = 0 */
 332               	.L__stack_usage = 0
 333 0000 0C94 0000 		jmp default_layer_state_set_user.localalias
 334               		.cfi_endproc
 335               	.LFE34:
 337               		.section	.text.layer_state_set_kb,"ax",@progbits
 338               		.weak	layer_state_set_kb
 340               	layer_state_set_kb:
 341               	.LVL18:
 342               	.LFB13:
  76:quantum/action_layer.c **** #endif
  77:quantum/action_layer.c **** 
  78:quantum/action_layer.c **** #ifndef NO_ACTION_LAYER
  79:quantum/action_layer.c **** /** \brief Keymap Layer State
  80:quantum/action_layer.c ****  */
  81:quantum/action_layer.c **** layer_state_t layer_state = 0;
  82:quantum/action_layer.c **** 
  83:quantum/action_layer.c **** /** \brief Layer state set user
  84:quantum/action_layer.c ****  *
  85:quantum/action_layer.c ****  * Runs user code on layer state change
  86:quantum/action_layer.c ****  */
  87:quantum/action_layer.c **** __attribute__((weak)) layer_state_t layer_state_set_user(layer_state_t state) { return state; }
  88:quantum/action_layer.c **** 
  89:quantum/action_layer.c **** /** \brief Layer state set keyboard
  90:quantum/action_layer.c ****  *
  91:quantum/action_layer.c ****  * Runs keyboard code on layer state change
  92:quantum/action_layer.c ****  */
  93:quantum/action_layer.c **** __attribute__((weak)) layer_state_t layer_state_set_kb(layer_state_t state) { return layer_state_se
 343               		.loc 1 93 77 is_stmt 1 view -0
 344               		.cfi_startproc
 345               	/* prologue: function */
 346               	/* frame size = 0 */
 347               	/* stack size = 0 */
 348               	.L__stack_usage = 0
 349               		.loc 1 93 79 view .LVU41
 350               		.loc 1 93 86 is_stmt 0 view .LVU42
 351 0000 0C94 0000 		jmp layer_state_set_user
 352               	.LVL19:
 353               		.loc 1 93 86 view .LVU43
 354               		.cfi_endproc
 355               	.LFE13:
 357               		.section	.text.layer_state_set,"ax",@progbits
 358               	.global	layer_state_set
 360               	layer_state_set:
 361               	.LVL20:
 362               	.LFB14:
  94:quantum/action_layer.c **** 
  95:quantum/action_layer.c **** /** \brief Layer state set
  96:quantum/action_layer.c ****  *
  97:quantum/action_layer.c ****  * Sets the layer to match the specifed state (a bitmask)
  98:quantum/action_layer.c ****  */
  99:quantum/action_layer.c **** void layer_state_set(layer_state_t state) {
 363               		.loc 1 99 43 is_stmt 1 view -0
 364               		.cfi_startproc
 365               	/* prologue: function */
 366               	/* frame size = 0 */
 367               	/* stack size = 0 */
 368               	.L__stack_usage = 0
 100:quantum/action_layer.c ****     state = layer_state_set_kb(state);
 369               		.loc 1 100 5 view .LVU45
 370               		.loc 1 100 13 is_stmt 0 view .LVU46
 371 0000 0E94 0000 		call layer_state_set_kb
 372               	.LVL21:
 373               		.loc 1 100 13 view .LVU47
 374 0004 6093 0000 		sts layer_state,r22
 375 0008 7093 0000 		sts layer_state+1,r23
 376 000c 8093 0000 		sts layer_state+2,r24
 377 0010 9093 0000 		sts layer_state+3,r25
 378               	.LVL22:
 101:quantum/action_layer.c ****     dprint("layer_state: ");
 379               		.loc 1 101 28 is_stmt 1 view .LVU48
 102:quantum/action_layer.c ****     layer_debug();
 380               		.loc 1 102 5 view .LVU49
 103:quantum/action_layer.c ****     dprint(" to ");
 381               		.loc 1 103 19 view .LVU50
 104:quantum/action_layer.c ****     layer_state = state;
 382               		.loc 1 104 5 view .LVU51
 105:quantum/action_layer.c ****     layer_debug();
 383               		.loc 1 105 5 view .LVU52
 106:quantum/action_layer.c ****     dprintln();
 384               		.loc 1 106 15 view .LVU53
 107:quantum/action_layer.c **** #    ifdef STRICT_LAYER_RELEASE
 108:quantum/action_layer.c ****     clear_keyboard_but_mods();  // To avoid stuck keys
 109:quantum/action_layer.c **** #    else
 110:quantum/action_layer.c ****     clear_keyboard_but_mods_and_keys();  // Don't reset held keys
 385               		.loc 1 110 5 view .LVU54
 386 0014 0C94 0000 		jmp clear_keyboard_but_mods_and_keys
 387               	.LVL23:
 388               		.loc 1 110 5 is_stmt 0 view .LVU55
 389               		.cfi_endproc
 390               	.LFE14:
 392               		.section	.text.layer_clear,"ax",@progbits
 393               	.global	layer_clear
 395               	layer_clear:
 396               	.LFB15:
 111:quantum/action_layer.c **** #    endif
 112:quantum/action_layer.c **** }
 113:quantum/action_layer.c **** 
 114:quantum/action_layer.c **** /** \brief Layer clear
 115:quantum/action_layer.c ****  *
 116:quantum/action_layer.c ****  * Turn off all layers
 117:quantum/action_layer.c ****  */
 118:quantum/action_layer.c **** void layer_clear(void) { layer_state_set(0); }
 397               		.loc 1 118 24 is_stmt 1 view -0
 398               		.cfi_startproc
 399               	/* prologue: function */
 400               	/* frame size = 0 */
 401               	/* stack size = 0 */
 402               	.L__stack_usage = 0
 403               		.loc 1 118 26 view .LVU57
 404 0000 60E0      		ldi r22,0
 405 0002 70E0      		ldi r23,0
 406 0004 CB01      		movw r24,r22
 407 0006 0C94 0000 		jmp layer_state_set
 408               	.LVL24:
 409               		.cfi_endproc
 410               	.LFE15:
 412               		.section	.text.layer_state_is,"ax",@progbits
 413               	.global	layer_state_is
 415               	layer_state_is:
 416               	.LVL25:
 417               	.LFB16:
 119:quantum/action_layer.c **** 
 120:quantum/action_layer.c **** /** \brief Layer state is
 121:quantum/action_layer.c ****  *
 122:quantum/action_layer.c ****  * Return whether the given state is on (it might still be shadowed by a higher state, though)
 123:quantum/action_layer.c ****  */
 124:quantum/action_layer.c **** bool layer_state_is(uint8_t layer) { return layer_state_cmp(layer_state, layer); }
 418               		.loc 1 124 36 view -0
 419               		.cfi_startproc
 420               	/* prologue: function */
 421               	/* frame size = 0 */
 422               	/* stack size = 0 */
 423               	.L__stack_usage = 0
 424               		.loc 1 124 36 is_stmt 0 view .LVU59
 425 0000 282F      		mov r18,r24
 426               		.loc 1 124 38 is_stmt 1 view .LVU60
 427               		.loc 1 124 45 is_stmt 0 view .LVU61
 428 0002 8091 0000 		lds r24,layer_state
 429 0006 9091 0000 		lds r25,layer_state+1
 430 000a A091 0000 		lds r26,layer_state+2
 431 000e B091 0000 		lds r27,layer_state+3
 432               	.LVL26:
 433               	.LBB4:
 434               	.LBI4:
 125:quantum/action_layer.c **** 
 126:quantum/action_layer.c **** /** \brief Layer state compare
 127:quantum/action_layer.c ****  *
 128:quantum/action_layer.c ****  * Used for comparing layers {mostly used for unit testing}
 129:quantum/action_layer.c ****  */
 130:quantum/action_layer.c **** bool layer_state_cmp(layer_state_t cmp_layer_state, uint8_t layer) {
 435               		.loc 1 130 6 is_stmt 1 view .LVU62
 436               	.LBB5:
 131:quantum/action_layer.c ****     if (!cmp_layer_state) {
 437               		.loc 1 131 5 view .LVU63
 438               		.loc 1 131 8 is_stmt 0 view .LVU64
 439 0012 0097      		sbiw r24,0
 440 0014 A105      		cpc r26,__zero_reg__
 441 0016 B105      		cpc r27,__zero_reg__
 442 0018 01F4      		brne .L14
 132:quantum/action_layer.c ****         return layer == 0;
 443               		.loc 1 132 9 is_stmt 1 view .LVU65
 444               		.loc 1 132 22 is_stmt 0 view .LVU66
 445 001a 81E0      		ldi r24,lo8(1)
 446               	.LVL27:
 447               		.loc 1 132 22 view .LVU67
 448 001c 2223      		tst r18
 449 001e 01F0      		breq .L13
 450 0020 80E0      		ldi r24,0
 451 0022 0895      		ret
 452               	.LVL28:
 453               	.L14:
 133:quantum/action_layer.c ****     }
 134:quantum/action_layer.c ****     return (cmp_layer_state & ((layer_state_t)1 << layer)) != 0;
 454               		.loc 1 134 5 is_stmt 1 view .LVU68
 455               		.loc 1 134 60 is_stmt 0 view .LVU69
 456 0024 00C0      		rjmp 2f
 457               		1:
 458 0026 B695      		lsr r27
 459 0028 A795      		ror r26
 460 002a 9795      		ror r25
 461 002c 8795      		ror r24
 462               		2:
 463 002e 2A95      		dec r18
 464 0030 02F4      		brpl 1b
 465               	.LVL29:
 466               		.loc 1 134 60 view .LVU70
 467 0032 8170      		andi r24,lo8(1)
 468               	.LVL30:
 469               	.L13:
 470               	/* epilogue start */
 471               		.loc 1 134 60 view .LVU71
 472               	.LBE5:
 473               	.LBE4:
 124:quantum/action_layer.c **** 
 474               		.loc 1 124 82 view .LVU72
 475 0034 0895      		ret
 476               		.cfi_endproc
 477               	.LFE16:
 479               		.section	.text.layer_state_cmp,"ax",@progbits
 480               	.global	layer_state_cmp
 482               	layer_state_cmp:
 483               	.LVL31:
 484               	.LFB17:
 130:quantum/action_layer.c ****     if (!cmp_layer_state) {
 485               		.loc 1 130 68 is_stmt 1 view -0
 486               		.cfi_startproc
 487               	/* prologue: function */
 488               	/* frame size = 0 */
 489               	/* stack size = 0 */
 490               	.L__stack_usage = 0
 130:quantum/action_layer.c ****     if (!cmp_layer_state) {
 491               		.loc 1 130 68 is_stmt 0 view .LVU74
 492 0000 382F      		mov r19,r24
 493 0002 292F      		mov r18,r25
 494 0004 CB01      		movw r24,r22
 495 0006 A32F      		mov r26,r19
 496 0008 B22F      		mov r27,r18
 131:quantum/action_layer.c ****         return layer == 0;
 497               		.loc 1 131 5 is_stmt 1 view .LVU75
 131:quantum/action_layer.c ****         return layer == 0;
 498               		.loc 1 131 8 is_stmt 0 view .LVU76
 499 000a 0097      		sbiw r24,0
 500 000c A105      		cpc r26,__zero_reg__
 501 000e B105      		cpc r27,__zero_reg__
 502 0010 01F4      		brne .L21
 132:quantum/action_layer.c ****     }
 503               		.loc 1 132 9 is_stmt 1 view .LVU77
 132:quantum/action_layer.c ****     }
 504               		.loc 1 132 22 is_stmt 0 view .LVU78
 505 0012 81E0      		ldi r24,lo8(1)
 506 0014 4423      		tst r20
 507 0016 01F0      		breq .L20
 508 0018 80E0      		ldi r24,0
 509 001a 0895      		ret
 510               	.L21:
 511               		.loc 1 134 5 is_stmt 1 view .LVU79
 512               		.loc 1 134 60 is_stmt 0 view .LVU80
 513 001c 00C0      		rjmp 2f
 514               		1:
 515 001e B695      		lsr r27
 516 0020 A795      		ror r26
 517 0022 9795      		ror r25
 518 0024 8795      		ror r24
 519               		2:
 520 0026 4A95      		dec r20
 521 0028 02F4      		brpl 1b
 522 002a 8170      		andi r24,lo8(1)
 523               	.L20:
 524               	/* epilogue start */
 135:quantum/action_layer.c **** }
 525               		.loc 1 135 1 view .LVU81
 526 002c 0895      		ret
 527               		.cfi_endproc
 528               	.LFE17:
 530               		.section	.text.layer_move,"ax",@progbits
 531               	.global	layer_move
 533               	layer_move:
 534               	.LVL32:
 535               	.LFB18:
 136:quantum/action_layer.c **** 
 137:quantum/action_layer.c **** /** \brief Layer move
 138:quantum/action_layer.c ****  *
 139:quantum/action_layer.c ****  * Turns on the given layer and turn off all other layers
 140:quantum/action_layer.c ****  */
 141:quantum/action_layer.c **** void layer_move(uint8_t layer) { layer_state_set((layer_state_t)1 << layer); }
 536               		.loc 1 141 32 is_stmt 1 view -0
 537               		.cfi_startproc
 538               		.loc 1 141 32 is_stmt 0 view .LVU83
 539 0000 0F93      		push r16
 540               	.LCFI12:
 541               		.cfi_def_cfa_offset 3
 542               		.cfi_offset 16, -2
 543 0002 1F93      		push r17
 544               	.LCFI13:
 545               		.cfi_def_cfa_offset 4
 546               		.cfi_offset 17, -3
 547 0004 CF93      		push r28
 548               	.LCFI14:
 549               		.cfi_def_cfa_offset 5
 550               		.cfi_offset 28, -4
 551 0006 DF93      		push r29
 552               	.LCFI15:
 553               		.cfi_def_cfa_offset 6
 554               		.cfi_offset 29, -5
 555 0008 00D0      		rcall .
 556 000a 00D0      		rcall .
 557               	.LCFI16:
 558               		.cfi_def_cfa_offset 10
 559 000c CDB7      		in r28,__SP_L__
 560 000e DEB7      		in r29,__SP_H__
 561               	.LCFI17:
 562               		.cfi_def_cfa_register 28
 563               	/* prologue: function */
 564               	/* frame size = 4 */
 565               	/* stack size = 8 */
 566               	.L__stack_usage = 8
 567               		.loc 1 141 34 is_stmt 1 view .LVU84
 568 0010 41E0      		ldi r20,lo8(1)
 569 0012 50E0      		ldi r21,0
 570 0014 60E0      		ldi r22,0
 571 0016 70E0      		ldi r23,0
 572 0018 8A01      		movw r16,r20
 573 001a 9B01      		movw r18,r22
 574 001c 00C0      		rjmp 2f
 575               		1:
 576 001e 000F      		lsl r16
 577 0020 111F      		rol r17
 578 0022 221F      		rol r18
 579 0024 331F      		rol r19
 580               		2:
 581 0026 8A95      		dec r24
 582 0028 02F4      		brpl 1b
 583 002a 0983      		std Y+1,r16
 584 002c 1A83      		std Y+2,r17
 585 002e 2B83      		std Y+3,r18
 586 0030 3C83      		std Y+4,r19
 587 0032 C901      		movw r24,r18
 588               	.LVL33:
 589               		.loc 1 141 34 is_stmt 0 view .LVU85
 590 0034 B801      		movw r22,r16
 591               	/* epilogue start */
 592               		.loc 1 141 78 view .LVU86
 593 0036 0F90      		pop __tmp_reg__
 594 0038 0F90      		pop __tmp_reg__
 595 003a 0F90      		pop __tmp_reg__
 596 003c 0F90      		pop __tmp_reg__
 597 003e DF91      		pop r29
 598 0040 CF91      		pop r28
 599 0042 1F91      		pop r17
 600 0044 0F91      		pop r16
 601               		.loc 1 141 34 view .LVU87
 602 0046 0C94 0000 		jmp layer_state_set
 603               	.LVL34:
 604               		.cfi_endproc
 605               	.LFE18:
 607               		.section	.text.layer_on,"ax",@progbits
 608               	.global	layer_on
 610               	layer_on:
 611               	.LVL35:
 612               	.LFB19:
 142:quantum/action_layer.c **** 
 143:quantum/action_layer.c **** /** \brief Layer on
 144:quantum/action_layer.c ****  *
 145:quantum/action_layer.c ****  * Turns on given layer
 146:quantum/action_layer.c ****  */
 147:quantum/action_layer.c **** void layer_on(uint8_t layer) { layer_state_set(layer_state | ((layer_state_t)1 << layer)); }
 613               		.loc 1 147 30 is_stmt 1 view -0
 614               		.cfi_startproc
 615               		.loc 1 147 30 is_stmt 0 view .LVU89
 616 0000 0F93      		push r16
 617               	.LCFI18:
 618               		.cfi_def_cfa_offset 3
 619               		.cfi_offset 16, -2
 620 0002 1F93      		push r17
 621               	.LCFI19:
 622               		.cfi_def_cfa_offset 4
 623               		.cfi_offset 17, -3
 624 0004 CF93      		push r28
 625               	.LCFI20:
 626               		.cfi_def_cfa_offset 5
 627               		.cfi_offset 28, -4
 628 0006 DF93      		push r29
 629               	.LCFI21:
 630               		.cfi_def_cfa_offset 6
 631               		.cfi_offset 29, -5
 632 0008 00D0      		rcall .
 633 000a 00D0      		rcall .
 634               	.LCFI22:
 635               		.cfi_def_cfa_offset 10
 636 000c CDB7      		in r28,__SP_L__
 637 000e DEB7      		in r29,__SP_H__
 638               	.LCFI23:
 639               		.cfi_def_cfa_register 28
 640               	/* prologue: function */
 641               	/* frame size = 4 */
 642               	/* stack size = 8 */
 643               	.L__stack_usage = 8
 644               		.loc 1 147 32 is_stmt 1 view .LVU90
 645               		.loc 1 147 80 is_stmt 0 view .LVU91
 646 0010 41E0      		ldi r20,lo8(1)
 647 0012 50E0      		ldi r21,0
 648 0014 60E0      		ldi r22,0
 649 0016 70E0      		ldi r23,0
 650 0018 00C0      		rjmp 2f
 651               		1:
 652 001a 440F      		lsl r20
 653 001c 551F      		rol r21
 654 001e 661F      		rol r22
 655 0020 771F      		rol r23
 656               		2:
 657 0022 8A95      		dec r24
 658 0024 02F4      		brpl 1b
 659               		.loc 1 147 32 view .LVU92
 660 0026 8091 0000 		lds r24,layer_state
 661 002a 9091 0000 		lds r25,layer_state+1
 662 002e A091 0000 		lds r26,layer_state+2
 663 0032 B091 0000 		lds r27,layer_state+3
 664               	.LVL36:
 665               		.loc 1 147 32 view .LVU93
 666 0036 8A01      		movw r16,r20
 667 0038 9B01      		movw r18,r22
 668 003a 082B      		or r16,r24
 669 003c 192B      		or r17,r25
 670 003e 2A2B      		or r18,r26
 671 0040 3B2B      		or r19,r27
 672 0042 0983      		std Y+1,r16
 673 0044 1A83      		std Y+2,r17
 674 0046 2B83      		std Y+3,r18
 675 0048 3C83      		std Y+4,r19
 676 004a C901      		movw r24,r18
 677 004c B801      		movw r22,r16
 678               	/* epilogue start */
 679               		.loc 1 147 92 view .LVU94
 680 004e 0F90      		pop __tmp_reg__
 681 0050 0F90      		pop __tmp_reg__
 682 0052 0F90      		pop __tmp_reg__
 683 0054 0F90      		pop __tmp_reg__
 684 0056 DF91      		pop r29
 685 0058 CF91      		pop r28
 686 005a 1F91      		pop r17
 687 005c 0F91      		pop r16
 688               		.loc 1 147 32 view .LVU95
 689 005e 0C94 0000 		jmp layer_state_set
 690               	.LVL37:
 691               		.cfi_endproc
 692               	.LFE19:
 694               		.section	.text.layer_off,"ax",@progbits
 695               	.global	layer_off
 697               	layer_off:
 698               	.LVL38:
 699               	.LFB20:
 148:quantum/action_layer.c **** 
 149:quantum/action_layer.c **** /** \brief Layer off
 150:quantum/action_layer.c ****  *
 151:quantum/action_layer.c ****  * Turns off given layer
 152:quantum/action_layer.c ****  */
 153:quantum/action_layer.c **** void layer_off(uint8_t layer) { layer_state_set(layer_state & ~((layer_state_t)1 << layer)); }
 700               		.loc 1 153 31 is_stmt 1 view -0
 701               		.cfi_startproc
 702               		.loc 1 153 31 is_stmt 0 view .LVU97
 703 0000 0F93      		push r16
 704               	.LCFI24:
 705               		.cfi_def_cfa_offset 3
 706               		.cfi_offset 16, -2
 707 0002 1F93      		push r17
 708               	.LCFI25:
 709               		.cfi_def_cfa_offset 4
 710               		.cfi_offset 17, -3
 711 0004 CF93      		push r28
 712               	.LCFI26:
 713               		.cfi_def_cfa_offset 5
 714               		.cfi_offset 28, -4
 715 0006 DF93      		push r29
 716               	.LCFI27:
 717               		.cfi_def_cfa_offset 6
 718               		.cfi_offset 29, -5
 719 0008 00D0      		rcall .
 720 000a 00D0      		rcall .
 721               	.LCFI28:
 722               		.cfi_def_cfa_offset 10
 723 000c CDB7      		in r28,__SP_L__
 724 000e DEB7      		in r29,__SP_H__
 725               	.LCFI29:
 726               		.cfi_def_cfa_register 28
 727               	/* prologue: function */
 728               	/* frame size = 4 */
 729               	/* stack size = 8 */
 730               	.L__stack_usage = 8
 731               		.loc 1 153 33 is_stmt 1 view .LVU98
 732               		.loc 1 153 82 is_stmt 0 view .LVU99
 733 0010 41E0      		ldi r20,lo8(1)
 734 0012 50E0      		ldi r21,0
 735 0014 60E0      		ldi r22,0
 736 0016 70E0      		ldi r23,0
 737 0018 00C0      		rjmp 2f
 738               		1:
 739 001a 440F      		lsl r20
 740 001c 551F      		rol r21
 741 001e 661F      		rol r22
 742 0020 771F      		rol r23
 743               		2:
 744 0022 8A95      		dec r24
 745 0024 02F4      		brpl 1b
 746               		.loc 1 153 63 view .LVU100
 747 0026 4095      		com r20
 748 0028 5095      		com r21
 749 002a 6095      		com r22
 750 002c 7095      		com r23
 751               		.loc 1 153 33 view .LVU101
 752 002e 8091 0000 		lds r24,layer_state
 753 0032 9091 0000 		lds r25,layer_state+1
 754 0036 A091 0000 		lds r26,layer_state+2
 755 003a B091 0000 		lds r27,layer_state+3
 756               	.LVL39:
 757               		.loc 1 153 33 view .LVU102
 758 003e 8A01      		movw r16,r20
 759 0040 9B01      		movw r18,r22
 760 0042 0823      		and r16,r24
 761 0044 1923      		and r17,r25
 762 0046 2A23      		and r18,r26
 763 0048 3B23      		and r19,r27
 764 004a 0983      		std Y+1,r16
 765 004c 1A83      		std Y+2,r17
 766 004e 2B83      		std Y+3,r18
 767 0050 3C83      		std Y+4,r19
 768 0052 C901      		movw r24,r18
 769 0054 B801      		movw r22,r16
 770               	/* epilogue start */
 771               		.loc 1 153 94 view .LVU103
 772 0056 0F90      		pop __tmp_reg__
 773 0058 0F90      		pop __tmp_reg__
 774 005a 0F90      		pop __tmp_reg__
 775 005c 0F90      		pop __tmp_reg__
 776 005e DF91      		pop r29
 777 0060 CF91      		pop r28
 778 0062 1F91      		pop r17
 779 0064 0F91      		pop r16
 780               		.loc 1 153 33 view .LVU104
 781 0066 0C94 0000 		jmp layer_state_set
 782               	.LVL40:
 783               		.cfi_endproc
 784               	.LFE20:
 786               		.section	.text.layer_invert,"ax",@progbits
 787               	.global	layer_invert
 789               	layer_invert:
 790               	.LVL41:
 791               	.LFB21:
 154:quantum/action_layer.c **** 
 155:quantum/action_layer.c **** /** \brief Layer invert
 156:quantum/action_layer.c ****  *
 157:quantum/action_layer.c ****  * Toggle the given layer (set it if it's unset, or unset it if it's set)
 158:quantum/action_layer.c ****  */
 159:quantum/action_layer.c **** void layer_invert(uint8_t layer) { layer_state_set(layer_state ^ ((layer_state_t)1 << layer)); }
 792               		.loc 1 159 34 is_stmt 1 view -0
 793               		.cfi_startproc
 794               		.loc 1 159 34 is_stmt 0 view .LVU106
 795 0000 0F93      		push r16
 796               	.LCFI30:
 797               		.cfi_def_cfa_offset 3
 798               		.cfi_offset 16, -2
 799 0002 1F93      		push r17
 800               	.LCFI31:
 801               		.cfi_def_cfa_offset 4
 802               		.cfi_offset 17, -3
 803 0004 CF93      		push r28
 804               	.LCFI32:
 805               		.cfi_def_cfa_offset 5
 806               		.cfi_offset 28, -4
 807 0006 DF93      		push r29
 808               	.LCFI33:
 809               		.cfi_def_cfa_offset 6
 810               		.cfi_offset 29, -5
 811 0008 00D0      		rcall .
 812 000a 00D0      		rcall .
 813               	.LCFI34:
 814               		.cfi_def_cfa_offset 10
 815 000c CDB7      		in r28,__SP_L__
 816 000e DEB7      		in r29,__SP_H__
 817               	.LCFI35:
 818               		.cfi_def_cfa_register 28
 819               	/* prologue: function */
 820               	/* frame size = 4 */
 821               	/* stack size = 8 */
 822               	.L__stack_usage = 8
 823               		.loc 1 159 36 is_stmt 1 view .LVU107
 824               		.loc 1 159 84 is_stmt 0 view .LVU108
 825 0010 41E0      		ldi r20,lo8(1)
 826 0012 50E0      		ldi r21,0
 827 0014 60E0      		ldi r22,0
 828 0016 70E0      		ldi r23,0
 829 0018 00C0      		rjmp 2f
 830               		1:
 831 001a 440F      		lsl r20
 832 001c 551F      		rol r21
 833 001e 661F      		rol r22
 834 0020 771F      		rol r23
 835               		2:
 836 0022 8A95      		dec r24
 837 0024 02F4      		brpl 1b
 838               		.loc 1 159 36 view .LVU109
 839 0026 8091 0000 		lds r24,layer_state
 840 002a 9091 0000 		lds r25,layer_state+1
 841 002e A091 0000 		lds r26,layer_state+2
 842 0032 B091 0000 		lds r27,layer_state+3
 843               	.LVL42:
 844               		.loc 1 159 36 view .LVU110
 845 0036 8A01      		movw r16,r20
 846 0038 9B01      		movw r18,r22
 847 003a 0827      		eor r16,r24
 848 003c 1927      		eor r17,r25
 849 003e 2A27      		eor r18,r26
 850 0040 3B27      		eor r19,r27
 851 0042 0983      		std Y+1,r16
 852 0044 1A83      		std Y+2,r17
 853 0046 2B83      		std Y+3,r18
 854 0048 3C83      		std Y+4,r19
 855 004a C901      		movw r24,r18
 856 004c B801      		movw r22,r16
 857               	/* epilogue start */
 858               		.loc 1 159 96 view .LVU111
 859 004e 0F90      		pop __tmp_reg__
 860 0050 0F90      		pop __tmp_reg__
 861 0052 0F90      		pop __tmp_reg__
 862 0054 0F90      		pop __tmp_reg__
 863 0056 DF91      		pop r29
 864 0058 CF91      		pop r28
 865 005a 1F91      		pop r17
 866 005c 0F91      		pop r16
 867               		.loc 1 159 36 view .LVU112
 868 005e 0C94 0000 		jmp layer_state_set
 869               	.LVL43:
 870               		.cfi_endproc
 871               	.LFE21:
 873               		.section	.text.layer_or,"ax",@progbits
 874               	.global	layer_or
 876               	layer_or:
 877               	.LVL44:
 878               	.LFB22:
 160:quantum/action_layer.c **** 
 161:quantum/action_layer.c **** /** \brief Layer or
 162:quantum/action_layer.c ****  *
 163:quantum/action_layer.c ****  * Turns on layers based on matching bits between specifed layer and existing layer state
 164:quantum/action_layer.c ****  */
 165:quantum/action_layer.c **** void layer_or(layer_state_t state) { layer_state_set(layer_state | state); }
 879               		.loc 1 165 36 is_stmt 1 view -0
 880               		.cfi_startproc
 881               		.loc 1 165 36 is_stmt 0 view .LVU114
 882 0000 CF93      		push r28
 883               	.LCFI36:
 884               		.cfi_def_cfa_offset 3
 885               		.cfi_offset 28, -2
 886 0002 DF93      		push r29
 887               	.LCFI37:
 888               		.cfi_def_cfa_offset 4
 889               		.cfi_offset 29, -3
 890 0004 00D0      		rcall .
 891 0006 00D0      		rcall .
 892               	.LCFI38:
 893               		.cfi_def_cfa_offset 8
 894 0008 CDB7      		in r28,__SP_L__
 895 000a DEB7      		in r29,__SP_H__
 896               	.LCFI39:
 897               		.cfi_def_cfa_register 28
 898               	/* prologue: function */
 899               	/* frame size = 4 */
 900               	/* stack size = 6 */
 901               	.L__stack_usage = 6
 902 000c 6983      		std Y+1,r22
 903 000e 7A83      		std Y+2,r23
 904 0010 8B83      		std Y+3,r24
 905 0012 9C83      		std Y+4,r25
 906               		.loc 1 165 38 is_stmt 1 view .LVU115
 907 0014 8091 0000 		lds r24,layer_state
 908 0018 9091 0000 		lds r25,layer_state+1
 909 001c A091 0000 		lds r26,layer_state+2
 910 0020 B091 0000 		lds r27,layer_state+3
 911 0024 2981      		ldd r18,Y+1
 912 0026 3A81      		ldd r19,Y+2
 913 0028 4B81      		ldd r20,Y+3
 914 002a 5C81      		ldd r21,Y+4
 915 002c 282B      		or r18,r24
 916 002e 392B      		or r19,r25
 917 0030 4A2B      		or r20,r26
 918 0032 5B2B      		or r21,r27
 919 0034 2983      		std Y+1,r18
 920 0036 3A83      		std Y+2,r19
 921 0038 4B83      		std Y+3,r20
 922 003a 5C83      		std Y+4,r21
 923 003c CA01      		movw r24,r20
 924 003e B901      		movw r22,r18
 925               	.LVL45:
 926               	/* epilogue start */
 927               		.loc 1 165 76 is_stmt 0 view .LVU116
 928 0040 0F90      		pop __tmp_reg__
 929 0042 0F90      		pop __tmp_reg__
 930 0044 0F90      		pop __tmp_reg__
 931 0046 0F90      		pop __tmp_reg__
 932 0048 DF91      		pop r29
 933 004a CF91      		pop r28
 934               		.loc 1 165 38 view .LVU117
 935 004c 0C94 0000 		jmp layer_state_set
 936               	.LVL46:
 937               		.cfi_endproc
 938               	.LFE22:
 940               		.section	.text.layer_and,"ax",@progbits
 941               	.global	layer_and
 943               	layer_and:
 944               	.LVL47:
 945               	.LFB23:
 166:quantum/action_layer.c **** /** \brief Layer and
 167:quantum/action_layer.c ****  *
 168:quantum/action_layer.c ****  * Turns on layers based on matching enabled bits between specifed layer and existing layer state
 169:quantum/action_layer.c ****  */
 170:quantum/action_layer.c **** void layer_and(layer_state_t state) { layer_state_set(layer_state & state); }
 946               		.loc 1 170 37 is_stmt 1 view -0
 947               		.cfi_startproc
 948               		.loc 1 170 37 is_stmt 0 view .LVU119
 949 0000 CF93      		push r28
 950               	.LCFI40:
 951               		.cfi_def_cfa_offset 3
 952               		.cfi_offset 28, -2
 953 0002 DF93      		push r29
 954               	.LCFI41:
 955               		.cfi_def_cfa_offset 4
 956               		.cfi_offset 29, -3
 957 0004 00D0      		rcall .
 958 0006 00D0      		rcall .
 959               	.LCFI42:
 960               		.cfi_def_cfa_offset 8
 961 0008 CDB7      		in r28,__SP_L__
 962 000a DEB7      		in r29,__SP_H__
 963               	.LCFI43:
 964               		.cfi_def_cfa_register 28
 965               	/* prologue: function */
 966               	/* frame size = 4 */
 967               	/* stack size = 6 */
 968               	.L__stack_usage = 6
 969 000c 6983      		std Y+1,r22
 970 000e 7A83      		std Y+2,r23
 971 0010 8B83      		std Y+3,r24
 972 0012 9C83      		std Y+4,r25
 973               		.loc 1 170 39 is_stmt 1 view .LVU120
 974 0014 8091 0000 		lds r24,layer_state
 975 0018 9091 0000 		lds r25,layer_state+1
 976 001c A091 0000 		lds r26,layer_state+2
 977 0020 B091 0000 		lds r27,layer_state+3
 978 0024 2981      		ldd r18,Y+1
 979 0026 3A81      		ldd r19,Y+2
 980 0028 4B81      		ldd r20,Y+3
 981 002a 5C81      		ldd r21,Y+4
 982 002c 2823      		and r18,r24
 983 002e 3923      		and r19,r25
 984 0030 4A23      		and r20,r26
 985 0032 5B23      		and r21,r27
 986 0034 2983      		std Y+1,r18
 987 0036 3A83      		std Y+2,r19
 988 0038 4B83      		std Y+3,r20
 989 003a 5C83      		std Y+4,r21
 990 003c CA01      		movw r24,r20
 991 003e B901      		movw r22,r18
 992               	.LVL48:
 993               	/* epilogue start */
 994               		.loc 1 170 77 is_stmt 0 view .LVU121
 995 0040 0F90      		pop __tmp_reg__
 996 0042 0F90      		pop __tmp_reg__
 997 0044 0F90      		pop __tmp_reg__
 998 0046 0F90      		pop __tmp_reg__
 999 0048 DF91      		pop r29
 1000 004a CF91      		pop r28
 1001               		.loc 1 170 39 view .LVU122
 1002 004c 0C94 0000 		jmp layer_state_set
 1003               	.LVL49:
 1004               		.cfi_endproc
 1005               	.LFE23:
 1007               		.section	.text.layer_xor,"ax",@progbits
 1008               	.global	layer_xor
 1010               	layer_xor:
 1011               	.LVL50:
 1012               	.LFB24:
 171:quantum/action_layer.c **** /** \brief Layer xor
 172:quantum/action_layer.c ****  *
 173:quantum/action_layer.c ****  * Turns on layers based on non-matching bits between specifed layer and existing layer state
 174:quantum/action_layer.c ****  */
 175:quantum/action_layer.c **** void layer_xor(layer_state_t state) { layer_state_set(layer_state ^ state); }
 1013               		.loc 1 175 37 is_stmt 1 view -0
 1014               		.cfi_startproc
 1015               		.loc 1 175 37 is_stmt 0 view .LVU124
 1016 0000 CF93      		push r28
 1017               	.LCFI44:
 1018               		.cfi_def_cfa_offset 3
 1019               		.cfi_offset 28, -2
 1020 0002 DF93      		push r29
 1021               	.LCFI45:
 1022               		.cfi_def_cfa_offset 4
 1023               		.cfi_offset 29, -3
 1024 0004 00D0      		rcall .
 1025 0006 00D0      		rcall .
 1026               	.LCFI46:
 1027               		.cfi_def_cfa_offset 8
 1028 0008 CDB7      		in r28,__SP_L__
 1029 000a DEB7      		in r29,__SP_H__
 1030               	.LCFI47:
 1031               		.cfi_def_cfa_register 28
 1032               	/* prologue: function */
 1033               	/* frame size = 4 */
 1034               	/* stack size = 6 */
 1035               	.L__stack_usage = 6
 1036 000c 6983      		std Y+1,r22
 1037 000e 7A83      		std Y+2,r23
 1038 0010 8B83      		std Y+3,r24
 1039 0012 9C83      		std Y+4,r25
 1040               		.loc 1 175 39 is_stmt 1 view .LVU125
 1041 0014 8091 0000 		lds r24,layer_state
 1042 0018 9091 0000 		lds r25,layer_state+1
 1043 001c A091 0000 		lds r26,layer_state+2
 1044 0020 B091 0000 		lds r27,layer_state+3
 1045 0024 2981      		ldd r18,Y+1
 1046 0026 3A81      		ldd r19,Y+2
 1047 0028 4B81      		ldd r20,Y+3
 1048 002a 5C81      		ldd r21,Y+4
 1049 002c 2827      		eor r18,r24
 1050 002e 3927      		eor r19,r25
 1051 0030 4A27      		eor r20,r26
 1052 0032 5B27      		eor r21,r27
 1053 0034 2983      		std Y+1,r18
 1054 0036 3A83      		std Y+2,r19
 1055 0038 4B83      		std Y+3,r20
 1056 003a 5C83      		std Y+4,r21
 1057 003c CA01      		movw r24,r20
 1058 003e B901      		movw r22,r18
 1059               	.LVL51:
 1060               	/* epilogue start */
 1061               		.loc 1 175 77 is_stmt 0 view .LVU126
 1062 0040 0F90      		pop __tmp_reg__
 1063 0042 0F90      		pop __tmp_reg__
 1064 0044 0F90      		pop __tmp_reg__
 1065 0046 0F90      		pop __tmp_reg__
 1066 0048 DF91      		pop r29
 1067 004a CF91      		pop r28
 1068               		.loc 1 175 39 view .LVU127
 1069 004c 0C94 0000 		jmp layer_state_set
 1070               	.LVL52:
 1071               		.cfi_endproc
 1072               	.LFE24:
 1074               		.section	.text.layer_debug,"ax",@progbits
 1075               	.global	layer_debug
 1077               	layer_debug:
 1078               	.LFB32:
 1079               		.cfi_startproc
 1080               	/* prologue: function */
 1081               	/* frame size = 0 */
 1082               	/* stack size = 0 */
 1083               	.L__stack_usage = 0
 1084               	/* epilogue start */
 1085 0000 0895      		ret
 1086               		.cfi_endproc
 1087               	.LFE32:
 1089               		.section	.text.update_source_layers_cache,"ax",@progbits
 1090               	.global	update_source_layers_cache
 1092               	update_source_layers_cache:
 1093               	.LVL53:
 1094               	.LFB26:
 176:quantum/action_layer.c **** 
 177:quantum/action_layer.c **** /** \brief Layer debug printing
 178:quantum/action_layer.c ****  *
 179:quantum/action_layer.c ****  * Print out the hex value of the 32-bit layer state, as well as the value of the highest bit.
 180:quantum/action_layer.c ****  */
 181:quantum/action_layer.c **** void layer_debug(void) { dprintf("%08lX(%u)", layer_state, get_highest_layer(layer_state)); }
 182:quantum/action_layer.c **** #endif
 183:quantum/action_layer.c **** 
 184:quantum/action_layer.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 185:quantum/action_layer.c **** /** \brief source layer cache
 186:quantum/action_layer.c ****  */
 187:quantum/action_layer.c **** 
 188:quantum/action_layer.c **** uint8_t source_layers_cache[(MATRIX_ROWS * MATRIX_COLS + 7) / 8][MAX_LAYER_BITS] = {{0}};
 189:quantum/action_layer.c **** 
 190:quantum/action_layer.c **** /** \brief update source layers cache
 191:quantum/action_layer.c ****  *
 192:quantum/action_layer.c ****  * Updates the cached keys when changing layers
 193:quantum/action_layer.c ****  */
 194:quantum/action_layer.c **** void update_source_layers_cache(keypos_t key, uint8_t layer) {
 1095               		.loc 1 194 62 is_stmt 1 view -0
 1096               		.cfi_startproc
 1097               	/* prologue: function */
 1098               	/* frame size = 0 */
 1099               	/* stack size = 0 */
 1100               	.L__stack_usage = 0
 195:quantum/action_layer.c ****     const uint8_t key_number  = key.col + (key.row * MATRIX_COLS);
 1101               		.loc 1 195 5 view .LVU129
 1102               		.loc 1 195 41 is_stmt 0 view .LVU130
 1103 0000 E92F      		mov r30,r25
 1104 0002 EE0F      		lsl r30
 1105 0004 E90F      		add r30,r25
 1106               		.loc 1 195 19 view .LVU131
 1107 0006 E80F      		add r30,r24
 1108               	.LVL54:
 196:quantum/action_layer.c ****     const uint8_t storage_row = key_number / 8;
 1109               		.loc 1 196 5 is_stmt 1 view .LVU132
 197:quantum/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 1110               		.loc 1 197 5 view .LVU133
 198:quantum/action_layer.c **** 
 199:quantum/action_layer.c ****     for (uint8_t bit_number = 0; bit_number < MAX_LAYER_BITS; bit_number++) {
 1111               		.loc 1 199 5 view .LVU134
 1112               	.LBB6:
 1113               		.loc 1 199 10 view .LVU135
 1114               		.loc 1 199 45 view .LVU136
 1115               	.LBE6:
 197:quantum/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 1116               		.loc 1 197 19 is_stmt 0 view .LVU137
 1117 0008 8E2F      		mov r24,r30
 1118               	.LVL55:
 197:quantum/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 1119               		.loc 1 197 19 view .LVU138
 1120 000a 8770      		andi r24,lo8(7)
 1121               	.LVL56:
 1122               	.LBB7:
 200:quantum/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^= (-((layer & (1U << bit_number)) != 0) ^ sou
 1123               		.loc 1 200 143 view .LVU139
 1124 000c 41E0      		ldi r20,lo8(1)
 1125 000e 00C0      		rjmp 2f
 1126               		1:
 1127 0010 440F      		lsl r20
 1128               		2:
 1129 0012 8A95      		dec r24
 1130 0014 02F4      		brpl 1b
 1131               	.LBE7:
 196:quantum/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 1132               		.loc 1 196 19 view .LVU140
 1133 0016 E695      		lsr r30
 1134 0018 E695      		lsr r30
 1135 001a E695      		lsr r30
 1136               	.LVL57:
 196:quantum/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 1137               		.loc 1 196 19 view .LVU141
 1138 001c 85E0      		ldi r24,lo8(5)
 1139               	.LVL58:
 196:quantum/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 1140               		.loc 1 196 19 view .LVU142
 1141 001e E89F      		mul r30,r24
 1142 0020 F001      		movw r30,r0
 1143 0022 1124      		clr __zero_reg__
 1144               	.LVL59:
 196:quantum/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 1145               		.loc 1 196 19 view .LVU143
 1146 0024 E050      		subi r30,lo8(-(source_layers_cache))
 1147 0026 F040      		sbci r31,hi8(-(source_layers_cache))
 1148               	.LBB8:
 1149               		.loc 1 200 143 view .LVU144
 1150 0028 30E0      		ldi r19,0
 1151 002a 20E0      		ldi r18,0
 1152               		.loc 1 200 89 view .LVU145
 1153 002c 70E0      		ldi r23,0
 1154               	.LVL60:
 1155               	.L36:
 1156               		.loc 1 200 9 is_stmt 1 discriminator 3 view .LVU146
 1157               		.loc 1 200 54 is_stmt 0 discriminator 3 view .LVU147
 1158 002e 5191      		ld r21,Z+
 1159 0030 DF01      		movw r26,r30
 1160 0032 1197      		sbiw r26,1
 1161               		.loc 1 200 89 discriminator 3 view .LVU148
 1162 0034 CB01      		movw r24,r22
 1163 0036 022E      		mov r0,r18
 1164 0038 00C0      		rjmp 2f
 1165               		1:
 1166 003a 9695      		lsr r25
 1167 003c 8795      		ror r24
 1168               		2:
 1169 003e 0A94      		dec r0
 1170 0040 02F4      		brpl 1b
 1171 0042 8170      		andi r24,lo8(1)
 1172               		.loc 1 200 95 discriminator 3 view .LVU149
 1173 0044 8195      		neg r24
 1174               		.loc 1 200 143 discriminator 3 view .LVU150
 1175 0046 8527      		eor r24,r21
 1176 0048 8423      		and r24,r20
 1177               		.loc 1 200 54 discriminator 3 view .LVU151
 1178 004a 8527      		eor r24,r21
 1179 004c 8C93      		st X,r24
 199:quantum/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^= (-((layer & (1U << bit_number)) != 0) ^ sou
 1180               		.loc 1 199 73 is_stmt 1 discriminator 3 view .LVU152
 1181               	.LVL61:
 199:quantum/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^= (-((layer & (1U << bit_number)) != 0) ^ sou
 1182               		.loc 1 199 45 discriminator 3 view .LVU153
 1183 004e 2F5F      		subi r18,-1
 1184 0050 3F4F      		sbci r19,-1
 1185               	.LVL62:
 199:quantum/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^= (-((layer & (1U << bit_number)) != 0) ^ sou
 1186               		.loc 1 199 45 is_stmt 0 discriminator 3 view .LVU154
 1187 0052 2530      		cpi r18,5
 1188 0054 3105      		cpc r19,__zero_reg__
 1189 0056 01F4      		brne .L36
 1190               	/* epilogue start */
 1191               	.LBE8:
 201:quantum/action_layer.c ****     }
 202:quantum/action_layer.c **** }
 1192               		.loc 1 202 1 view .LVU155
 1193 0058 0895      		ret
 1194               		.cfi_endproc
 1195               	.LFE26:
 1197               		.section	.text.read_source_layers_cache,"ax",@progbits
 1198               	.global	read_source_layers_cache
 1200               	read_source_layers_cache:
 1201               	.LVL63:
 1202               	.LFB27:
 203:quantum/action_layer.c **** 
 204:quantum/action_layer.c **** /** \brief read source layers cache
 205:quantum/action_layer.c ****  *
 206:quantum/action_layer.c ****  * reads the cached keys stored when the layer was changed
 207:quantum/action_layer.c ****  */
 208:quantum/action_layer.c **** uint8_t read_source_layers_cache(keypos_t key) {
 1203               		.loc 1 208 48 is_stmt 1 view -0
 1204               		.cfi_startproc
 1205               	/* prologue: function */
 1206               	/* frame size = 0 */
 1207               	/* stack size = 0 */
 1208               	.L__stack_usage = 0
 209:quantum/action_layer.c ****     const uint8_t key_number  = key.col + (key.row * MATRIX_COLS);
 1209               		.loc 1 209 5 view .LVU157
 1210               		.loc 1 209 41 is_stmt 0 view .LVU158
 1211 0000 E92F      		mov r30,r25
 1212 0002 EE0F      		lsl r30
 1213 0004 E90F      		add r30,r25
 1214               		.loc 1 209 19 view .LVU159
 1215 0006 E80F      		add r30,r24
 1216               	.LVL64:
 210:quantum/action_layer.c ****     const uint8_t storage_row = key_number / 8;
 1217               		.loc 1 210 5 is_stmt 1 view .LVU160
 211:quantum/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 1218               		.loc 1 211 5 view .LVU161
 1219               		.loc 1 211 19 is_stmt 0 view .LVU162
 1220 0008 9E2F      		mov r25,r30
 1221 000a 9770      		andi r25,lo8(7)
 1222               	.LVL65:
 212:quantum/action_layer.c ****     uint8_t       layer       = 0;
 1223               		.loc 1 212 5 is_stmt 1 view .LVU163
 213:quantum/action_layer.c **** 
 214:quantum/action_layer.c ****     for (uint8_t bit_number = 0; bit_number < MAX_LAYER_BITS; bit_number++) {
 1224               		.loc 1 214 5 view .LVU164
 1225               	.LBB9:
 1226               		.loc 1 214 10 view .LVU165
 1227               		.loc 1 214 45 view .LVU166
 1228               	.LBE9:
 210:quantum/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 1229               		.loc 1 210 19 is_stmt 0 view .LVU167
 1230 000c E695      		lsr r30
 1231 000e E695      		lsr r30
 1232 0010 E695      		lsr r30
 1233               	.LVL66:
 210:quantum/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 1234               		.loc 1 210 19 view .LVU168
 1235 0012 85E0      		ldi r24,lo8(5)
 1236               	.LVL67:
 210:quantum/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 1237               		.loc 1 210 19 view .LVU169
 1238 0014 E89F      		mul r30,r24
 1239 0016 F001      		movw r30,r0
 1240 0018 1124      		clr __zero_reg__
 1241               	.LVL68:
 210:quantum/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 1242               		.loc 1 210 19 view .LVU170
 1243 001a E050      		subi r30,lo8(-(source_layers_cache))
 1244 001c F040      		sbci r31,hi8(-(source_layers_cache))
 211:quantum/action_layer.c ****     uint8_t       layer       = 0;
 1245               		.loc 1 211 19 view .LVU171
 1246 001e 50E0      		ldi r21,0
 1247 0020 40E0      		ldi r20,0
 212:quantum/action_layer.c **** 
 1248               		.loc 1 212 19 view .LVU172
 1249 0022 80E0      		ldi r24,0
 1250               	.LVL69:
 1251               	.L39:
 1252               	.LBB10:
 215:quantum/action_layer.c ****         layer |= ((source_layers_cache[storage_row][bit_number] & (1U << storage_bit)) != 0) << bit
 1253               		.loc 1 215 9 is_stmt 1 discriminator 3 view .LVU173
 1254               		.loc 1 215 52 is_stmt 0 discriminator 3 view .LVU174
 1255 0024 2191      		ld r18,Z+
 1256 0026 30E0      		ldi r19,0
 1257               		.loc 1 215 88 discriminator 3 view .LVU175
 1258 0028 092E      		mov r0,r25
 1259 002a 00C0      		rjmp 2f
 1260               		1:
 1261 002c 3695      		lsr r19
 1262 002e 2795      		ror r18
 1263               		2:
 1264 0030 0A94      		dec r0
 1265 0032 02F4      		brpl 1b
 1266 0034 2170      		andi r18,1
 1267 0036 3327      		clr r19
 1268               		.loc 1 215 94 discriminator 3 view .LVU176
 1269 0038 042E      		mov r0,r20
 1270 003a 00C0      		rjmp 2f
 1271               		1:
 1272 003c 220F      		lsl r18
 1273               		2:
 1274 003e 0A94      		dec r0
 1275 0040 02F4      		brpl 1b
 1276               		.loc 1 215 15 discriminator 3 view .LVU177
 1277 0042 822B      		or r24,r18
 1278               	.LVL70:
 214:quantum/action_layer.c ****         layer |= ((source_layers_cache[storage_row][bit_number] & (1U << storage_bit)) != 0) << bit
 1279               		.loc 1 214 73 is_stmt 1 discriminator 3 view .LVU178
 214:quantum/action_layer.c ****         layer |= ((source_layers_cache[storage_row][bit_number] & (1U << storage_bit)) != 0) << bit
 1280               		.loc 1 214 45 discriminator 3 view .LVU179
 1281 0044 4F5F      		subi r20,-1
 1282 0046 5F4F      		sbci r21,-1
 1283               	.LVL71:
 214:quantum/action_layer.c ****         layer |= ((source_layers_cache[storage_row][bit_number] & (1U << storage_bit)) != 0) << bit
 1284               		.loc 1 214 45 is_stmt 0 discriminator 3 view .LVU180
 1285 0048 4530      		cpi r20,5
 1286 004a 5105      		cpc r21,__zero_reg__
 1287 004c 01F4      		brne .L39
 1288               	.LBE10:
 216:quantum/action_layer.c ****     }
 217:quantum/action_layer.c **** 
 218:quantum/action_layer.c ****     return layer;
 1289               		.loc 1 218 5 is_stmt 1 view .LVU181
 1290               	/* epilogue start */
 219:quantum/action_layer.c **** }
 1291               		.loc 1 219 1 is_stmt 0 view .LVU182
 1292 004e 0895      		ret
 1293               		.cfi_endproc
 1294               	.LFE27:
 1296               		.section	.text.layer_switch_get_layer,"ax",@progbits
 1297               	.global	layer_switch_get_layer
 1299               	layer_switch_get_layer:
 1300               	.LVL72:
 1301               	.LFB29:
 220:quantum/action_layer.c **** #endif
 221:quantum/action_layer.c **** 
 222:quantum/action_layer.c **** /** \brief Store or get action (FIXME: Needs better summary)
 223:quantum/action_layer.c ****  *
 224:quantum/action_layer.c ****  * Make sure the action triggered when the key is released is the same
 225:quantum/action_layer.c ****  * one as the one triggered on press. It's important for the mod keys
 226:quantum/action_layer.c ****  * when the layer is switched after the down event but before the up
 227:quantum/action_layer.c ****  * event as they may get stuck otherwise.
 228:quantum/action_layer.c ****  */
 229:quantum/action_layer.c **** action_t store_or_get_action(bool pressed, keypos_t key) {
 230:quantum/action_layer.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 231:quantum/action_layer.c ****     if (disable_action_cache) {
 232:quantum/action_layer.c ****         return layer_switch_get_action(key);
 233:quantum/action_layer.c ****     }
 234:quantum/action_layer.c **** 
 235:quantum/action_layer.c ****     uint8_t layer;
 236:quantum/action_layer.c **** 
 237:quantum/action_layer.c ****     if (pressed) {
 238:quantum/action_layer.c ****         layer = layer_switch_get_layer(key);
 239:quantum/action_layer.c ****         update_source_layers_cache(key, layer);
 240:quantum/action_layer.c ****     } else {
 241:quantum/action_layer.c ****         layer = read_source_layers_cache(key);
 242:quantum/action_layer.c ****     }
 243:quantum/action_layer.c ****     return action_for_key(layer, key);
 244:quantum/action_layer.c **** #else
 245:quantum/action_layer.c ****     return layer_switch_get_action(key);
 246:quantum/action_layer.c **** #endif
 247:quantum/action_layer.c **** }
 248:quantum/action_layer.c **** 
 249:quantum/action_layer.c **** /** \brief Layer switch get layer
 250:quantum/action_layer.c ****  *
 251:quantum/action_layer.c ****  * Gets the layer based on key info
 252:quantum/action_layer.c ****  */
 253:quantum/action_layer.c **** uint8_t layer_switch_get_layer(keypos_t key) {
 1302               		.loc 1 253 46 is_stmt 1 view -0
 1303               		.cfi_startproc
 1304               		.loc 1 253 46 is_stmt 0 view .LVU184
 1305 0000 BF92      		push r11
 1306               	.LCFI48:
 1307               		.cfi_def_cfa_offset 3
 1308               		.cfi_offset 11, -2
 1309 0002 CF92      		push r12
 1310               	.LCFI49:
 1311               		.cfi_def_cfa_offset 4
 1312               		.cfi_offset 12, -3
 1313 0004 DF92      		push r13
 1314               	.LCFI50:
 1315               		.cfi_def_cfa_offset 5
 1316               		.cfi_offset 13, -4
 1317 0006 EF92      		push r14
 1318               	.LCFI51:
 1319               		.cfi_def_cfa_offset 6
 1320               		.cfi_offset 14, -5
 1321 0008 FF92      		push r15
 1322               	.LCFI52:
 1323               		.cfi_def_cfa_offset 7
 1324               		.cfi_offset 15, -6
 1325 000a 0F93      		push r16
 1326               	.LCFI53:
 1327               		.cfi_def_cfa_offset 8
 1328               		.cfi_offset 16, -7
 1329 000c 1F93      		push r17
 1330               	.LCFI54:
 1331               		.cfi_def_cfa_offset 9
 1332               		.cfi_offset 17, -8
 1333 000e CF93      		push r28
 1334               	.LCFI55:
 1335               		.cfi_def_cfa_offset 10
 1336               		.cfi_offset 28, -9
 1337 0010 DF93      		push r29
 1338               	.LCFI56:
 1339               		.cfi_def_cfa_offset 11
 1340               		.cfi_offset 29, -10
 1341               	/* prologue: function */
 1342               	/* frame size = 0 */
 1343               	/* stack size = 9 */
 1344               	.L__stack_usage = 9
 1345 0012 8C01      		movw r16,r24
 254:quantum/action_layer.c **** #ifndef NO_ACTION_LAYER
 255:quantum/action_layer.c ****     action_t action;
 1346               		.loc 1 255 5 is_stmt 1 view .LVU185
 256:quantum/action_layer.c ****     action.code = ACTION_TRANSPARENT;
 1347               		.loc 1 256 5 view .LVU186
 1348               	.LVL73:
 257:quantum/action_layer.c **** 
 258:quantum/action_layer.c ****     layer_state_t layers = layer_state | default_layer_state;
 1349               		.loc 1 258 5 view .LVU187
 1350               		.loc 1 258 19 is_stmt 0 view .LVU188
 1351 0014 C090 0000 		lds r12,layer_state
 1352 0018 D090 0000 		lds r13,layer_state+1
 1353 001c E090 0000 		lds r14,layer_state+2
 1354 0020 F090 0000 		lds r15,layer_state+3
 1355 0024 8091 0000 		lds r24,default_layer_state
 1356 0028 9091 0000 		lds r25,default_layer_state+1
 1357 002c A091 0000 		lds r26,default_layer_state+2
 1358 0030 B091 0000 		lds r27,default_layer_state+3
 1359               	.LVL74:
 1360               		.loc 1 258 19 view .LVU189
 1361 0034 C82A      		or r12,r24
 1362 0036 D92A      		or r13,r25
 1363 0038 EA2A      		or r14,r26
 1364 003a FB2A      		or r15,r27
 1365               	.LVL75:
 259:quantum/action_layer.c ****     /* check top layer first */
 260:quantum/action_layer.c ****     for (int8_t i = MAX_LAYER - 1; i >= 0; i--) {
 1366               		.loc 1 260 5 is_stmt 1 view .LVU190
 1367               	.LBB11:
 1368               		.loc 1 260 10 view .LVU191
 1369               		.loc 1 260 38 view .LVU192
 1370               	.LBE11:
 258:quantum/action_layer.c ****     /* check top layer first */
 1371               		.loc 1 258 19 is_stmt 0 view .LVU193
 1372 003c CFE1      		ldi r28,lo8(31)
 1373 003e D0E0      		ldi r29,0
 1374               	.LVL76:
 1375               	.L43:
 1376               	.LBB12:
 261:quantum/action_layer.c ****         if (layers & ((layer_state_t)1 << i)) {
 1377               		.loc 1 261 9 is_stmt 1 view .LVU194
 1378 0040 BC2E      		mov r11,r28
 1379               		.loc 1 261 13 is_stmt 0 view .LVU195
 1380 0042 D701      		movw r26,r14
 1381 0044 C601      		movw r24,r12
 1382 0046 0C2E      		mov r0,r28
 1383 0048 00C0      		rjmp 2f
 1384               		1:
 1385 004a B695      		lsr r27
 1386 004c A795      		ror r26
 1387 004e 9795      		ror r25
 1388 0050 8795      		ror r24
 1389               		2:
 1390 0052 0A94      		dec r0
 1391 0054 02F4      		brpl 1b
 1392               		.loc 1 261 12 view .LVU196
 1393 0056 80FD      		sbrc r24,0
 1394 0058 00C0      		rjmp .L42
 1395               	.L45:
 260:quantum/action_layer.c ****         if (layers & ((layer_state_t)1 << i)) {
 1396               		.loc 1 260 45 is_stmt 1 view .LVU197
 1397               	.LVL77:
 260:quantum/action_layer.c ****         if (layers & ((layer_state_t)1 << i)) {
 1398               		.loc 1 260 38 view .LVU198
 1399               	.LVL78:
 1400 005a 2197      		sbiw r28,1
 1401 005c 00F4      		brcc .L43
 260:quantum/action_layer.c ****         if (layers & ((layer_state_t)1 << i)) {
 1402               		.loc 1 260 38 is_stmt 0 view .LVU199
 1403               	.LBE12:
 262:quantum/action_layer.c ****             action = action_for_key(i, key);
 263:quantum/action_layer.c ****             if (action.code != ACTION_TRANSPARENT) {
 264:quantum/action_layer.c ****                 return i;
 265:quantum/action_layer.c ****             }
 266:quantum/action_layer.c ****         }
 267:quantum/action_layer.c ****     }
 268:quantum/action_layer.c ****     /* fall back to layer 0 */
 269:quantum/action_layer.c ****     return 0;
 1404               		.loc 1 269 12 view .LVU200
 1405 005e B12C      		mov r11,__zero_reg__
 1406               	.LVL79:
 1407               	.L41:
 270:quantum/action_layer.c **** #else
 271:quantum/action_layer.c ****     return get_highest_layer(default_layer_state);
 272:quantum/action_layer.c **** #endif
 273:quantum/action_layer.c **** }
 1408               		.loc 1 273 1 view .LVU201
 1409 0060 8B2D      		mov r24,r11
 1410               	/* epilogue start */
 1411 0062 DF91      		pop r29
 1412 0064 CF91      		pop r28
 1413 0066 1F91      		pop r17
 1414 0068 0F91      		pop r16
 1415 006a FF90      		pop r15
 1416 006c EF90      		pop r14
 1417 006e DF90      		pop r13
 1418 0070 CF90      		pop r12
 1419               	.LVL80:
 1420               		.loc 1 273 1 view .LVU202
 1421 0072 BF90      		pop r11
 1422 0074 0895      		ret
 1423               	.LVL81:
 1424               	.L42:
 1425               	.LBB13:
 262:quantum/action_layer.c ****             action = action_for_key(i, key);
 1426               		.loc 1 262 13 is_stmt 1 view .LVU203
 262:quantum/action_layer.c ****             action = action_for_key(i, key);
 1427               		.loc 1 262 22 is_stmt 0 view .LVU204
 1428 0076 B801      		movw r22,r16
 1429 0078 8C2F      		mov r24,r28
 1430 007a 0E94 0000 		call action_for_key
 1431               	.LVL82:
 263:quantum/action_layer.c ****                 return i;
 1432               		.loc 1 263 13 is_stmt 1 view .LVU205
 263:quantum/action_layer.c ****                 return i;
 1433               		.loc 1 263 16 is_stmt 0 view .LVU206
 1434 007e 0197      		sbiw r24,1
 1435 0080 01F0      		breq .L45
 1436 0082 00C0      		rjmp .L41
 1437               	.LBE13:
 1438               		.cfi_endproc
 1439               	.LFE29:
 1441               		.section	.text.layer_switch_get_action,"ax",@progbits
 1442               	.global	layer_switch_get_action
 1444               	layer_switch_get_action:
 1445               	.LVL83:
 1446               	.LFB30:
 274:quantum/action_layer.c **** 
 275:quantum/action_layer.c **** /** \brief Layer switch get layer
 276:quantum/action_layer.c ****  *
 277:quantum/action_layer.c ****  * Gets action code based on key position
 278:quantum/action_layer.c ****  */
 279:quantum/action_layer.c **** action_t layer_switch_get_action(keypos_t key) { return action_for_key(layer_switch_get_layer(key),
 1447               		.loc 1 279 48 is_stmt 1 view -0
 1448               		.cfi_startproc
 1449               		.loc 1 279 48 is_stmt 0 view .LVU208
 1450 0000 CF93      		push r28
 1451               	.LCFI57:
 1452               		.cfi_def_cfa_offset 3
 1453               		.cfi_offset 28, -2
 1454 0002 DF93      		push r29
 1455               	.LCFI58:
 1456               		.cfi_def_cfa_offset 4
 1457               		.cfi_offset 29, -3
 1458               	/* prologue: function */
 1459               	/* frame size = 0 */
 1460               	/* stack size = 2 */
 1461               	.L__stack_usage = 2
 1462 0004 D82F      		mov r29,r24
 1463               	.LVL84:
 1464               		.loc 1 279 48 view .LVU209
 1465 0006 C92F      		mov r28,r25
 1466               	.LVL85:
 1467               		.loc 1 279 50 is_stmt 1 view .LVU210
 1468               		.loc 1 279 57 is_stmt 0 view .LVU211
 1469 0008 0E94 0000 		call layer_switch_get_layer
 1470               	.LVL86:
 1471 000c 6D2F      		mov r22,r29
 1472 000e 7C2F      		mov r23,r28
 1473               	/* epilogue start */
 1474               		.loc 1 279 107 view .LVU212
 1475 0010 DF91      		pop r29
 1476               	.LVL87:
 1477               		.loc 1 279 107 view .LVU213
 1478 0012 CF91      		pop r28
 1479               		.loc 1 279 57 view .LVU214
 1480 0014 0C94 0000 		jmp action_for_key
 1481               	.LVL88:
 1482               		.cfi_endproc
 1483               	.LFE30:
 1485               		.section	.text.store_or_get_action,"ax",@progbits
 1486               	.global	store_or_get_action
 1488               	store_or_get_action:
 1489               	.LVL89:
 1490               	.LFB28:
 229:quantum/action_layer.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 1491               		.loc 1 229 58 is_stmt 1 view -0
 1492               		.cfi_startproc
 229:quantum/action_layer.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 1493               		.loc 1 229 58 is_stmt 0 view .LVU216
 1494 0000 1F93      		push r17
 1495               	.LCFI59:
 1496               		.cfi_def_cfa_offset 3
 1497               		.cfi_offset 17, -2
 1498 0002 CF93      		push r28
 1499               	.LCFI60:
 1500               		.cfi_def_cfa_offset 4
 1501               		.cfi_offset 28, -3
 1502 0004 DF93      		push r29
 1503               	.LCFI61:
 1504               		.cfi_def_cfa_offset 5
 1505               		.cfi_offset 29, -4
 1506               	/* prologue: function */
 1507               	/* frame size = 0 */
 1508               	/* stack size = 3 */
 1509               	.L__stack_usage = 3
 1510 0006 162F      		mov r17,r22
 1511               	.LVL90:
 229:quantum/action_layer.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 1512               		.loc 1 229 58 view .LVU217
 1513 0008 D72F      		mov r29,r23
 1514               	.LVL91:
 231:quantum/action_layer.c ****         return layer_switch_get_action(key);
 1515               		.loc 1 231 5 is_stmt 1 view .LVU218
 231:quantum/action_layer.c ****         return layer_switch_get_action(key);
 1516               		.loc 1 231 8 is_stmt 0 view .LVU219
 1517 000a 9091 0000 		lds r25,disable_action_cache
 1518 000e 9923      		tst r25
 1519 0010 01F0      		breq .L52
 232:quantum/action_layer.c ****     }
 1520               		.loc 1 232 9 is_stmt 1 view .LVU220
 1521               	.LVL92:
 232:quantum/action_layer.c ****     }
 1522               		.loc 1 232 16 is_stmt 0 view .LVU221
 1523 0012 862F      		mov r24,r22
 1524               	.LVL93:
 232:quantum/action_layer.c ****     }
 1525               		.loc 1 232 16 view .LVU222
 1526 0014 972F      		mov r25,r23
 1527               	/* epilogue start */
 247:quantum/action_layer.c **** 
 1528               		.loc 1 247 1 view .LVU223
 1529 0016 DF91      		pop r29
 1530               	.LVL94:
 247:quantum/action_layer.c **** 
 1531               		.loc 1 247 1 view .LVU224
 1532 0018 CF91      		pop r28
 1533 001a 1F91      		pop r17
 232:quantum/action_layer.c ****     }
 1534               		.loc 1 232 16 view .LVU225
 1535 001c 0C94 0000 		jmp layer_switch_get_action
 1536               	.LVL95:
 1537               	.L52:
 235:quantum/action_layer.c **** 
 1538               		.loc 1 235 5 is_stmt 1 view .LVU226
 237:quantum/action_layer.c ****         layer = layer_switch_get_layer(key);
 1539               		.loc 1 237 5 view .LVU227
 237:quantum/action_layer.c ****         layer = layer_switch_get_layer(key);
 1540               		.loc 1 237 8 is_stmt 0 view .LVU228
 1541 0020 8823      		tst r24
 1542 0022 01F0      		breq .L53
 238:quantum/action_layer.c ****         update_source_layers_cache(key, layer);
 1543               		.loc 1 238 9 is_stmt 1 view .LVU229
 238:quantum/action_layer.c ****         update_source_layers_cache(key, layer);
 1544               		.loc 1 238 17 is_stmt 0 view .LVU230
 1545 0024 862F      		mov r24,r22
 1546               	.LVL96:
 238:quantum/action_layer.c ****         update_source_layers_cache(key, layer);
 1547               		.loc 1 238 17 view .LVU231
 1548 0026 972F      		mov r25,r23
 1549 0028 0E94 0000 		call layer_switch_get_layer
 1550               	.LVL97:
 1551 002c C82F      		mov r28,r24
 1552               	.LVL98:
 239:quantum/action_layer.c ****     } else {
 1553               		.loc 1 239 9 is_stmt 1 view .LVU232
 1554 002e 682F      		mov r22,r24
 1555 0030 812F      		mov r24,r17
 1556               	.LVL99:
 239:quantum/action_layer.c ****     } else {
 1557               		.loc 1 239 9 is_stmt 0 view .LVU233
 1558 0032 9D2F      		mov r25,r29
 1559 0034 0E94 0000 		call update_source_layers_cache
 1560               	.LVL100:
 1561               	.L54:
 243:quantum/action_layer.c **** #else
 1562               		.loc 1 243 5 is_stmt 1 view .LVU234
 243:quantum/action_layer.c **** #else
 1563               		.loc 1 243 12 is_stmt 0 view .LVU235
 1564 0038 612F      		mov r22,r17
 1565 003a 7D2F      		mov r23,r29
 1566 003c 8C2F      		mov r24,r28
 1567               	/* epilogue start */
 247:quantum/action_layer.c **** 
 1568               		.loc 1 247 1 view .LVU236
 1569 003e DF91      		pop r29
 1570               	.LVL101:
 247:quantum/action_layer.c **** 
 1571               		.loc 1 247 1 view .LVU237
 1572 0040 CF91      		pop r28
 1573               	.LVL102:
 247:quantum/action_layer.c **** 
 1574               		.loc 1 247 1 view .LVU238
 1575 0042 1F91      		pop r17
 243:quantum/action_layer.c **** #else
 1576               		.loc 1 243 12 view .LVU239
 1577 0044 0C94 0000 		jmp action_for_key
 1578               	.LVL103:
 1579               	.L53:
 241:quantum/action_layer.c ****     }
 1580               		.loc 1 241 9 is_stmt 1 view .LVU240
 241:quantum/action_layer.c ****     }
 1581               		.loc 1 241 17 is_stmt 0 view .LVU241
 1582 0048 862F      		mov r24,r22
 1583               	.LVL104:
 241:quantum/action_layer.c ****     }
 1584               		.loc 1 241 17 view .LVU242
 1585 004a 972F      		mov r25,r23
 1586 004c 0E94 0000 		call read_source_layers_cache
 1587               	.LVL105:
 1588 0050 C82F      		mov r28,r24
 1589               	.LVL106:
 241:quantum/action_layer.c ****     }
 1590               		.loc 1 241 17 view .LVU243
 1591 0052 00C0      		rjmp .L54
 1592               		.cfi_endproc
 1593               	.LFE28:
 1595               	.global	source_layers_cache
 1596               		.section	.bss.source_layers_cache,"aw",@nobits
 1599               	source_layers_cache:
 1600 0000 0000 0000 		.zero	5
 1600      00
 1601               	.global	layer_state
 1602               		.section	.bss.layer_state,"aw",@nobits
 1605               	layer_state:
 1606 0000 0000 0000 		.zero	4
 1607               	.global	default_layer_state
 1608               		.section	.bss.default_layer_state,"aw",@nobits
 1611               	default_layer_state:
 1612 0000 0000 0000 		.zero	4
 1613               		.text
 1614               	.Letext0:
 1615               		.file 2 "/usr/avr/include/stdint.h"
 1616               		.file 3 "quantum/keyboard.h"
 1617               		.file 4 "quantum/action_code.h"
 1618               		.file 5 "quantum/action_layer.h"
 1619               		.file 6 "quantum/action.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_layer.c
     /tmp/cc3skqxN.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc3skqxN.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc3skqxN.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc3skqxN.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc3skqxN.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc3skqxN.s:13     .text.default_layer_state_set_user:0000000000000000 default_layer_state_set_user
     /tmp/cc3skqxN.s:13     .text.default_layer_state_set_user:0000000000000000 default_layer_state_set_user.localalias
     /tmp/cc3skqxN.s:34     .text.default_layer_state_set_kb:0000000000000000 default_layer_state_set_kb
     /tmp/cc3skqxN.s:53     .text.default_layer_state_set:0000000000000000 default_layer_state_set
     /tmp/cc3skqxN.s:1611   .bss.default_layer_state:0000000000000000 default_layer_state
     /tmp/cc3skqxN.s:88     .text.default_layer_debug:0000000000000000 default_layer_debug
     /tmp/cc3skqxN.s:106    .text.default_layer_set:0000000000000000 default_layer_set
     /tmp/cc3skqxN.s:125    .text.default_layer_or:0000000000000000 default_layer_or
     /tmp/cc3skqxN.s:192    .text.default_layer_and:0000000000000000 default_layer_and
     /tmp/cc3skqxN.s:259    .text.default_layer_xor:0000000000000000 default_layer_xor
     /tmp/cc3skqxN.s:326    .text.layer_state_set_user:0000000000000000 layer_state_set_user
     /tmp/cc3skqxN.s:340    .text.layer_state_set_kb:0000000000000000 layer_state_set_kb
     /tmp/cc3skqxN.s:360    .text.layer_state_set:0000000000000000 layer_state_set
     /tmp/cc3skqxN.s:1605   .bss.layer_state:0000000000000000 layer_state
     /tmp/cc3skqxN.s:395    .text.layer_clear:0000000000000000 layer_clear
     /tmp/cc3skqxN.s:415    .text.layer_state_is:0000000000000000 layer_state_is
     /tmp/cc3skqxN.s:482    .text.layer_state_cmp:0000000000000000 layer_state_cmp
     /tmp/cc3skqxN.s:533    .text.layer_move:0000000000000000 layer_move
     /tmp/cc3skqxN.s:610    .text.layer_on:0000000000000000 layer_on
     /tmp/cc3skqxN.s:697    .text.layer_off:0000000000000000 layer_off
     /tmp/cc3skqxN.s:789    .text.layer_invert:0000000000000000 layer_invert
     /tmp/cc3skqxN.s:876    .text.layer_or:0000000000000000 layer_or
     /tmp/cc3skqxN.s:943    .text.layer_and:0000000000000000 layer_and
     /tmp/cc3skqxN.s:1010   .text.layer_xor:0000000000000000 layer_xor
     /tmp/cc3skqxN.s:1077   .text.layer_debug:0000000000000000 layer_debug
     /tmp/cc3skqxN.s:1092   .text.update_source_layers_cache:0000000000000000 update_source_layers_cache
     /tmp/cc3skqxN.s:1599   .bss.source_layers_cache:0000000000000000 source_layers_cache
     /tmp/cc3skqxN.s:1200   .text.read_source_layers_cache:0000000000000000 read_source_layers_cache
     /tmp/cc3skqxN.s:1299   .text.layer_switch_get_layer:0000000000000000 layer_switch_get_layer
     /tmp/cc3skqxN.s:1444   .text.layer_switch_get_action:0000000000000000 layer_switch_get_action
     /tmp/cc3skqxN.s:1488   .text.store_or_get_action:0000000000000000 store_or_get_action

UNDEFINED SYMBOLS
clear_keyboard_but_mods_and_keys
action_for_key
disable_action_cache
__do_clear_bss
