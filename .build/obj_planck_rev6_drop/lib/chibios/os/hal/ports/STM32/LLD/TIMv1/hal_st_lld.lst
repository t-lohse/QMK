   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 2
  15              		.file	"hal_st_lld.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c"
  20              		.section	.text.st_lld_init,"ax",%progbits
  21              		.align	1
  22              		.global	st_lld_init
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	st_lld_init:
  28              	.LFB283:
   1:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*
   2:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
   4:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     you may not use this file except in compliance with the License.
   6:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     You may obtain a copy of the License at
   7:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
   8:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  10:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     Unless required by applicable law or agreed to in writing, software
  11:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     See the License for the specific language governing permissions and
  14:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     limitations under the License.
  15:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** */
  16:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  17:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /**
  18:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @file    TIMv1/hal_st_lld.c
  19:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @brief   ST Driver subsystem low level driver code.
  20:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  *
  21:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @addtogroup ST
  22:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @{
  23:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  */
  24:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  25:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #include "hal.h"
  26:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  27:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
  28:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  29:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
  30:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /* Driver local definitions.                                                 */
  31:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
  32:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  33:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  34:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  35:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32)
  36:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ARR_INIT                         0xFFFFFFFFU
  37:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
  38:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ARR_INIT                         0x0000FFFFU
  39:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  40:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  41:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if STM32_ST_USE_TIMER == 2
  42:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  43:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if !STM32_HAS_TIM2
  44:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM2 not present in the selected device"
  45:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  46:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  47:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM2_IS_32BITS
  48:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM2 is not a 32bits timer"
  49:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  50:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  51:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM2_HANDLER
  52:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM2_NUMBER
  53:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK1
  54:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM2(true)
  55:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32F1XX)
  56:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->CR |= DBGMCU_CR_DBG_TIM2_STOP
  57:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32L4XX) || defined(STM32L4XXP) || defined(STM32G4XX)
  58:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_TIM2_STOP
  59:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32G0XX)
  60:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBG->APBFZ1 |= DBG_APB_FZ1_DBG_TIM2_STOP
  61:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32H7XX)
  62:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM2
  63:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
  64:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM2_STOP
  65:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  66:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  67:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 3
  68:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  69:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if !STM32_HAS_TIM3
  70:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM3 not present in the selected device"
  71:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  72:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  73:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM3_IS_32BITS
  74:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM3 is not a 32bits timer"
  75:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  76:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  77:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM3_HANDLER
  78:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM3_NUMBER
  79:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK1
  80:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM3(true)
  81:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32F1XX)
  82:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->CR |= DBGMCU_CR_DBG_TIM3_STOP
  83:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32L4XX) || defined(STM32L4XXP) || defined(STM32G4XX)
  84:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_TIM3_STOP
  85:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32G0XX)
  86:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBG->APBFZ1 |= DBG_APB_FZ1_DBG_TIM3_STOP
  87:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32H7XX)
  88:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM3
  89:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
  90:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM3_STOP
  91:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  92:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  93:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 4
  94:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  95:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if !STM32_HAS_TIM4
  96:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM4 not present in the selected device"
  97:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  98:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  99:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM4_IS_32BITS
 100:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM4 is not a 32bits timer"
 101:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 102:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 103:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM4_HANDLER
 104:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM4_NUMBER
 105:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK1
 106:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM4(true)
 107:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32F1XX)
 108:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->CR |= DBGMCU_CR_DBG_TIM4_STOP
 109:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32L4XX) || defined(STM32L4XXP) || defined(STM32G4XX)
 110:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_TIM4_STOP
 111:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32H7XX)
 112:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM4
 113:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 114:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM4_STOP
 115:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 116:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 117:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 5
 118:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 119:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if !STM32_HAS_TIM5
 120:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM5 not present in the selected device"
 121:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 122:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 123:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM5_IS_32BITS
 124:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM5 is not a 32bits timer"
 125:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 126:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 127:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM5_HANDLER
 128:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM5_NUMBER
 129:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK1
 130:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM5(true)
 131:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32F1XX)
 132:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->CR |= DBGMCU_CR_DBG_TIM5_STOP
 133:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32L4XX) || defined(STM32L4XXP) || defined(STM32G4XX)
 134:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_TIM5_STOP
 135:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32H7XX)
 136:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM5
 137:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 138:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM5_STOP
 139:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 140:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 141:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 9
 142:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 143:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if !STM32_HAS_TIM9
 144:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM9 not present in the selected device"
 145:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 146:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 147:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM9_IS_32BITS
 148:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM9 is not a 32bits timer"
 149:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 150:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 151:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM9_HANDLER
 152:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM9_NUMBER
 153:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK2
 154:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM9(true)
 155:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32F1XX)
 156:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->CR |= DBGMCU_CR_DBG_TIM9_STOP
 157:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32L4XX) || defined(STM32L4XXP) || defined(STM32G4XX)
 158:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB2FZR1 |= DBGMCU_APB2FZR1_DBG_TIM9_STOP
 159:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32H7XX)
 160:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB2LFZ1 |= DBGMCU_APB2LFZ1_DBG_TIM9
 161:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 162:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB2FZ |= DBGMCU_APB2_FZ_DBG_TIM9_STOP
 163:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 164:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 165:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 10
 166:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 167:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if !STM32_HAS_TIM10
 168:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM10 not present in the selected device"
 169:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 170:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 171:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM10_IS_32BITS
 172:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM10 is not a 32bits timer"
 173:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 174:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 175:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM10_HANDLER
 176:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM10_NUMBER
 177:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK2
 178:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM10(true)
 179:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32F1XX)
 180:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->CR |= DBGMCU_CR_DBG_TIM10_STOP
 181:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32L4XX) || defined(STM32L4XXP) || defined(STM32G4XX)
 182:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB2FZR1 |= DBGMCU_APB2FZR1_DBG_TIM10_STOP
 183:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32H7XX)
 184:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB2LFZ1 |= DBGMCU_APB2LFZ1_DBG_TIM10
 185:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 186:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB2FZ |= DBGMCU_APB2_FZ_DBG_TIM10_STOP
 187:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 188:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 189:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 11
 190:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 191:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if !STM32_HAS_TIM11
 192:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM11 not present in the selected device"
 193:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 194:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 195:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM11_IS_32BITS
 196:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM11 is not a 32bits timer"
 197:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 198:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 199:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM11_HANDLER
 200:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM11_NUMBER
 201:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK2
 202:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM11(true)
 203:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32F1XX)
 204:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->CR |= DBGMCU_CR_DBG_TIM11_STOP
 205:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32L4XX) || defined(STM32L4XXP) || defined(STM32G4XX)
 206:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB2FZR1 |= DBGMCU_APB2FZR1_DBG_TIM11_STOP
 207:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32H7XX)
 208:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB2LFZ1 |= DBGMCU_APB2LFZ1_DBG_TIM11
 209:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 210:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB2FZ |= DBGMCU_APB2_FZ_DBG_TIM11_STOP
 211:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 212:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 213:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 12
 214:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 215:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if !STM32_HAS_TIM12
 216:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM12 not present in the selected device"
 217:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 218:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 219:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM12_IS_32BITS
 220:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM12 is not a 32bits timer"
 221:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 222:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 223:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM12_HANDLER
 224:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM12_NUMBER
 225:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK1
 226:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM12(true)
 227:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32F1XX)
 228:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->CR |= DBGMCU_CR_DBG_TIM12_STOP
 229:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32L4XX) || defined(STM32L4XXP) || defined(STM32G4XX)
 230:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_TIM12_STOP
 231:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32H7XX)
 232:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM12
 233:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 234:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM12_STOP
 235:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 236:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 237:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 13
 238:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 239:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if !STM32_HAS_TIM13
 240:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM13 not present in the selected device"
 241:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 242:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 243:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM13_IS_32BITS
 244:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM13 is not a 32bits timer"
 245:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 246:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 247:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM13_HANDLER
 248:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM13_NUMBER
 249:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK1
 250:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM13(true)
 251:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32F1XX)
 252:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->CR |= DBGMCU_CR_DBG_TIM13_STOP
 253:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32L4XX) || defined(STM32L4XXP) || defined(STM32G4XX)
 254:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_TIM13_STOP
 255:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32H7XX)
 256:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM13
 257:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 258:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM13_STOP
 259:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 260:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 261:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 14
 262:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 263:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if !STM32_HAS_TIM14
 264:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM14 not present in the selected device"
 265:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 266:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 267:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM14_IS_32BITS
 268:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM14 is not a 32bits timer"
 269:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 270:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 271:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM14_HANDLER
 272:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM14_NUMBER
 273:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK1
 274:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM14(true)
 275:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32F1XX)
 276:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->CR |= DBGMCU_CR_DBG_TIM14_STOP
 277:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32L4XX) || defined(STM32L4XXP) || defined(STM32G4XX)
 278:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_TIM14_STOP
 279:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32H7XX)
 280:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM14
 281:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 282:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM14_STOP
 283:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 284:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 285:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 21
 286:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 287:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if !STM32_HAS_TIM21
 288:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM21 not present in the selected device"
 289:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 290:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 291:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM21_IS_32BITS
 292:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM21 is not a 32bits timer"
 293:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 294:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 295:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM21_HANDLER
 296:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM21_NUMBER
 297:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK2
 298:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM21(true)
 299:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZ |= DBGMCU_APB2_FZ_DBG_TIM21_STOP
 300:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 301:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 22
 302:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 303:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if !STM32_HAS_TIM22
 304:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM22 not present in the selected device"
 305:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 306:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 307:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM22_IS_32BITS
 308:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM21 is not a 32bits timer"
 309:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 310:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 311:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM22_HANDLER
 312:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM22_NUMBER
 313:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK2
 314:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM22(true)
 315:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZ |= DBGMCU_APB2_FZ_DBG_TIM21_STOP
 316:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 317:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 318:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "STM32_ST_USE_TIMER specifies an unsupported timer"
 319:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 320:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 321:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if ST_CLOCK_SRC % OSAL_ST_FREQUENCY != 0
 322:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "the selected ST frequency is not obtainable because integer rounding"
 323:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 324:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 325:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1 > 0xFFFF
 326:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "the selected ST frequency is not obtainable because TIM timer prescaler limits"
 327:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 328:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 329:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */
 330:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 331:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
 332:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 333:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          SysTick_Handler
 334:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 335:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32_CORE_CK)
 336:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define SYSTICK_CK                          STM32_CORE_CK
 337:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 338:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define SYSTICK_CK                          STM32_HCLK
 339:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 340:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 341:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if SYSTICK_CK % OSAL_ST_FREQUENCY != 0
 342:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "the selected ST frequency is not obtainable because integer rounding"
 343:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 344:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 345:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (SYSTICK_CK / OSAL_ST_FREQUENCY) - 1 > 0xFFFFFF
 346:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "the selected ST frequency is not obtainable because SysTick timer counter limits"
 347:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 348:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 349:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
 350:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 351:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 352:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /* Driver exported variables.                                                */
 353:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 354:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 355:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 356:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /* Driver local types.                                                       */
 357:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 358:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 359:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 360:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /* Driver local variables and types.                                         */
 361:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 362:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 363:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 364:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /* Driver local functions.                                                   */
 365:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 366:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 367:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 368:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /* Driver interrupt handlers.                                                */
 369:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 370:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 371:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if !defined(STM32_SYSTICK_SUPPRESS_ISR)
 372:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /**
 373:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @brief   Interrupt handler.
 374:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  *
 375:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @isr
 376:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  */
 377:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** OSAL_IRQ_HANDLER(ST_HANDLER) {
 378:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 379:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   OSAL_IRQ_PROLOGUE();
 380:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 381:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   st_lld_serve_interrupt();
 382:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 383:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   OSAL_IRQ_EPILOGUE();
 384:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** }
 385:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 386:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 387:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 388:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /* Driver exported functions.                                                */
 389:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 390:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 391:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /**
 392:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @brief   Low level ST driver initialization.
 393:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  *
 394:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @notapi
 395:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  */
 396:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** void st_lld_init(void) {
  29              		.loc 1 396 24 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 397:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 398:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
 399:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   /* Free running counter mode.*/
 400:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 401:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   /* Enabling timer clock.*/
 402:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   ST_ENABLE_CLOCK();
  34              		.loc 1 402 3 view .LVU1
  35 0000 0E4B     		ldr	r3, .L2
  36 0002 DA69     		ldr	r2, [r3, #28]
  37 0004 42F00202 		orr	r2, r2, #2
  38 0008 DA61     		str	r2, [r3, #28]
  39              		.loc 1 402 3 view .LVU2
 403:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 404:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   /* Enabling the stop mode during debug for this timer.*/
 405:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   ST_ENABLE_STOP();
  40              		.loc 1 405 3 is_stmt 0 view .LVU3
  41 000a 0D4A     		ldr	r2, .L2+4
 402:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  42              		.loc 1 402 3 view .LVU4
  43 000c DB69     		ldr	r3, [r3, #28]
 402:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  44              		.loc 1 402 20 is_stmt 1 view .LVU5
  45              		.loc 1 405 3 view .LVU6
  46 000e 9368     		ldr	r3, [r2, #8]
  47 0010 43F00203 		orr	r3, r3, #2
  48 0014 9360     		str	r3, [r2, #8]
 406:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 407:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   /* Initializing the counter in free running mode.*/
 408:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  49              		.loc 1 408 3 view .LVU7
  50              		.loc 1 408 24 is_stmt 0 view .LVU8
  51 0016 0B4B     		ldr	r3, .L2+8
  52 0018 41F61F42 		movw	r2, #7199
  53 001c 9A62     		str	r2, [r3, #40]
 409:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->ARR    = ST_ARR_INIT;
  54              		.loc 1 409 3 is_stmt 1 view .LVU9
  55              		.loc 1 409 24 is_stmt 0 view .LVU10
  56 001e 4FF6FF72 		movw	r2, #65535
  57 0022 DA62     		str	r2, [r3, #44]
 410:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->CCMR1  = 0;
  58              		.loc 1 410 3 is_stmt 1 view .LVU11
  59              		.loc 1 410 24 is_stmt 0 view .LVU12
  60 0024 0022     		movs	r2, #0
  61 0026 9A61     		str	r2, [r3, #24]
 411:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->CCR[0] = 0;
  62              		.loc 1 411 3 is_stmt 1 view .LVU13
  63              		.loc 1 411 24 is_stmt 0 view .LVU14
  64 0028 5A63     		str	r2, [r3, #52]
 412:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if ST_LLD_NUM_ALARMS > 1
 413:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->CCR[1] = 0;
 414:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 415:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if ST_LLD_NUM_ALARMS > 2
 416:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->CCR[2] = 0;
 417:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 418:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if ST_LLD_NUM_ALARMS > 3
 419:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->CCR[3] = 0;
 420:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 421:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->DIER   = 0;
  65              		.loc 1 421 3 is_stmt 1 view .LVU15
  66              		.loc 1 421 24 is_stmt 0 view .LVU16
  67 002a DA60     		str	r2, [r3, #12]
 422:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->CR2    = 0;
  68              		.loc 1 422 3 is_stmt 1 view .LVU17
  69              		.loc 1 422 24 is_stmt 0 view .LVU18
  70 002c 5A60     		str	r2, [r3, #4]
 423:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->EGR    = TIM_EGR_UG;
  71              		.loc 1 423 3 is_stmt 1 view .LVU19
  72              		.loc 1 423 24 is_stmt 0 view .LVU20
  73 002e 0122     		movs	r2, #1
  74 0030 5A61     		str	r2, [r3, #20]
 424:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->CR1    = TIM_CR1_CEN;
  75              		.loc 1 424 3 is_stmt 1 view .LVU21
 425:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 426:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if !defined(STM32_SYSTICK_SUPPRESS_ISR)
 427:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   /* IRQ enabled.*/
 428:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
  76              		.loc 1 428 3 is_stmt 0 view .LVU22
  77 0032 0821     		movs	r1, #8
 424:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->CR1    = TIM_CR1_CEN;
  78              		.loc 1 424 24 view .LVU23
  79 0034 1A60     		str	r2, [r3]
  80              		.loc 1 428 3 is_stmt 1 view .LVU24
  81 0036 1D20     		movs	r0, #29
  82 0038 FFF7FEBF 		b	nvicEnableVector
  83              	.LVL0:
  84              	.L3:
  85              		.align	2
  86              	.L2:
  87 003c 00100240 		.word	1073876992
  88 0040 002004E0 		.word	-536600576
  89 0044 00040040 		.word	1073742848
  90              		.cfi_endproc
  91              	.LFE283:
  93              		.section	.text.st_lld_serve_interrupt,"ax",%progbits
  94              		.align	1
  95              		.global	st_lld_serve_interrupt
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
 100              	st_lld_serve_interrupt:
 101              	.LFB284:
 429:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 430:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */
 431:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 432:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
 433:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   /* Periodic systick mode, the Cortex-Mx internal systick timer is used
 434:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****      in this mode.*/
 435:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   SysTick->LOAD = (SYSTICK_CK / OSAL_ST_FREQUENCY) - 1;
 436:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   SysTick->VAL = 0;
 437:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 438:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****                   SysTick_CTRL_ENABLE_Msk |
 439:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****                   SysTick_CTRL_TICKINT_Msk;
 440:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 441:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   /* IRQ enabled.*/
 442:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 443:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
 444:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** }
 445:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 446:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /**
 447:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @brief   IRQ handling code.
 448:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  */
 449:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** void st_lld_serve_interrupt(void) {
 102              		.loc 1 449 35 view -0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 450:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
 451:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   uint32_t sr;
 106              		.loc 1 451 3 view .LVU26
 452:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   stm32_tim_t *timp = STM32_ST_TIM;
 107              		.loc 1 452 3 view .LVU27
 108              	.LVL1:
 453:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 454:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   sr  = timp->SR;
 109              		.loc 1 454 3 view .LVU28
 110              		.loc 1 454 7 is_stmt 0 view .LVU29
 111 0000 094A     		ldr	r2, .L9
 449:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
 112              		.loc 1 449 35 view .LVU30
 113 0002 08B5     		push	{r3, lr}
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 3, -8
 116              		.cfi_offset 14, -4
 117              		.loc 1 454 7 view .LVU31
 118 0004 1169     		ldr	r1, [r2, #16]
 119              	.LVL2:
 455:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 120              		.loc 1 455 3 is_stmt 1 view .LVU32
 121              		.loc 1 455 13 is_stmt 0 view .LVU33
 122 0006 D368     		ldr	r3, [r2, #12]
 123 0008 0B40     		ands	r3, r3, r1
 124              	.LVL3:
 456:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   timp->SR = ~sr;
 125              		.loc 1 456 3 is_stmt 1 view .LVU34
 455:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 126              		.loc 1 455 6 is_stmt 0 view .LVU35
 127 000a D9B2     		uxtb	r1, r3
 128              		.loc 1 456 14 view .LVU36
 129 000c C943     		mvns	r1, r1
 457:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 458:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   if ((sr & TIM_SR_CC1IF) != 0U)
 130              		.loc 1 458 6 view .LVU37
 131 000e 9B07     		lsls	r3, r3, #30
 132              	.LVL4:
 456:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   timp->SR = ~sr;
 133              		.loc 1 456 12 view .LVU38
 134 0010 1161     		str	r1, [r2, #16]
 135              		.loc 1 458 3 is_stmt 1 view .LVU39
 136              		.loc 1 458 6 is_stmt 0 view .LVU40
 137 0012 07D5     		bpl	.L4
 138              	.LBB84:
 139              	.LBI84:
 449:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
 140              		.loc 1 449 6 is_stmt 1 view .LVU41
 141              	.LBB85:
 459:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 460:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   {
 461:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     osalSysLockFromISR();
 142              		.loc 1 461 5 view .LVU42
 143              	.LBB86:
 144              	.LBI86:
 145              		.file 2 "./lib/chibios/os/hal/osal/rt-nil/osal.h"
   1:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /*
   2:./lib/chibios/os/hal/osal/rt-nil/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
   4:./lib/chibios/os/hal/osal/rt-nil/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./lib/chibios/os/hal/osal/rt-nil/osal.h ****     you may not use this file except in compliance with the License.
   6:./lib/chibios/os/hal/osal/rt-nil/osal.h ****     You may obtain a copy of the License at
   7:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
   8:./lib/chibios/os/hal/osal/rt-nil/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
  10:./lib/chibios/os/hal/osal/rt-nil/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:./lib/chibios/os/hal/osal/rt-nil/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./lib/chibios/os/hal/osal/rt-nil/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./lib/chibios/os/hal/osal/rt-nil/osal.h ****     See the License for the specific language governing permissions and
  14:./lib/chibios/os/hal/osal/rt-nil/osal.h ****     limitations under the License.
  15:./lib/chibios/os/hal/osal/rt-nil/osal.h **** */
  16:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
  17:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
  18:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @file    osal.h
  19:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module header.
  20:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
  21:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @addtogroup OSAL
  22:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @{
  23:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
  24:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
  25:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #ifndef OSAL_H
  26:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_H
  27:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
  28:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #include <stddef.h>
  29:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #include <stdint.h>
  30:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #include <stdbool.h>
  31:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
  32:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #include "ch.h"
  33:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
  34:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  35:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /* Module constants.                                                         */
  36:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  37:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
  38:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
  39:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @name    Common constants
  40:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @{
  41:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
  42:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define FALSE                               0
  44:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
  45:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
  46:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define TRUE                                1
  48:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
  49:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
  50:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_SUCCESS                        false
  51:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_FAILED                         true
  52:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /** @} */
  53:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
  54:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if 0
  55:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
  56:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @name    Messages
  57:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @{
  58:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
  59:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define MSG_OK                              (msg_t)0
  60:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /** @} */
  63:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
  64:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
  65:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if 0
  66:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
  67:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @name    Special time constants
  68:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @{
  69:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
  70:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /** @} */
  73:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
  74:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
  75:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
  76:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @name    Systick modes.
  77:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @{
  78:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
  79:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /** @} */
  83:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
  84:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
  85:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @name    Systick parameters.
  86:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @{
  87:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
  88:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
  89:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
  91:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
  93:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
  94:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Required systick frequency or resolution.
  95:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
  96:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
  98:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
  99:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 101:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #else
 104:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 106:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /** @} */
 107:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 108:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 109:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /* Module pre-compile time settings.                                         */
 110:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 111:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 112:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 113:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /* Derived constants and error checks.                                       */
 114:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 115:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 116:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:./lib/chibios/os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:./lib/chibios/os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 121:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 122:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32) &&             \
 123:./lib/chibios/os/hal/osal/rt-nil/osal.h ****     (OSAL_ST_RESOLUTION != 64)
 124:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16, 32 or 64"
 125:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 126:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 127:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 128:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /* Module data structures and types.                                         */
 129:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 130:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 131:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if 0
 132:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 133:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a system status word.
 134:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 135:./lib/chibios/os/hal/osal/rt-nil/osal.h **** typedef uint32_t syssts_t;
 136:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 137:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 138:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if 0
 139:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 140:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a message.
 141:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 142:./lib/chibios/os/hal/osal/rt-nil/osal.h **** typedef int32_t msg_t;
 143:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 144:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 145:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if 0
 146:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 147:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time counter.
 148:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 149:./lib/chibios/os/hal/osal/rt-nil/osal.h **** typedef uint32_t systime_t;
 150:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 151:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 152:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if 0
 153:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 154:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time interval.
 155:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 156:./lib/chibios/os/hal/osal/rt-nil/osal.h **** typedef uint32_t sysinterval_t;
 157:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 158:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 159:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if 0
 160:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 161:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Type of time conversion variable.
 162:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    This type must have double width than other time types, it is
 163:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          only used internally for conversions.
 164:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 165:./lib/chibios/os/hal/osal/rt-nil/osal.h **** typedef uint64_t time_conv_t;
 166:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 167:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 168:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if 0
 169:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 170:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Type of realtime counter.
 171:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 172:./lib/chibios/os/hal/osal/rt-nil/osal.h **** typedef uint32_t rtcnt_t;
 173:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 174:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 175:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if 0
 176:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 177:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread reference.
 178:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 179:./lib/chibios/os/hal/osal/rt-nil/osal.h **** typedef thread_t * thread_reference_t;
 180:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 181:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 182:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if 0
 183:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 184:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags mask.
 185:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 186:./lib/chibios/os/hal/osal/rt-nil/osal.h **** typedef uint32_t eventflags_t;
 187:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 188:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 189:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 190:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 191:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags object.
 192:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 193:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 194:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 195:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 196:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 197:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 198:./lib/chibios/os/hal/osal/rt-nil/osal.h **** typedef struct event_source event_source_t;
 199:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 200:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 201:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event source callback.
 202:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 203:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          exclusively as an example and for convenience.
 204:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 205:./lib/chibios/os/hal/osal/rt-nil/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 206:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 207:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 208:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Events source object.
 209:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 210:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 211:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 212:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 213:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 214:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 215:./lib/chibios/os/hal/osal/rt-nil/osal.h **** struct event_source {
 216:./lib/chibios/os/hal/osal/rt-nil/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 217:./lib/chibios/os/hal/osal/rt-nil/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 218:./lib/chibios/os/hal/osal/rt-nil/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 219:./lib/chibios/os/hal/osal/rt-nil/osal.h **** };
 220:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 221:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 222:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 223:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a mutex.
 224:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 225:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          mechanism can be simulated.
 226:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 227:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 228:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 229:./lib/chibios/os/hal/osal/rt-nil/osal.h **** typedef semaphore_t mutex_t;
 230:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #else
 231:./lib/chibios/os/hal/osal/rt-nil/osal.h **** typedef uint32_t mutex_t;
 232:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 233:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 234:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if 0
 235:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 236:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread queue.
 237:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 238:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          can be dequeued one at time or all together.
 239:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    In this implementation it is implemented as a single reference
 240:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          because there are no real threads.
 241:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 242:./lib/chibios/os/hal/osal/rt-nil/osal.h **** typedef struct {
 243:./lib/chibios/os/hal/osal/rt-nil/osal.h ****   thread_reference_t    tr;
 244:./lib/chibios/os/hal/osal/rt-nil/osal.h **** } threads_queue_t;
 245:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 246:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 247:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 248:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /* Module macros.                                                            */
 249:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 250:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 251:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 252:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @name    Debug related macros
 253:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @{
 254:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 255:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 256:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Condition assertion.
 257:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 258:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          message and halts.
 259:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 260:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          switch is enabled.
 261:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The remark string is not currently used except for putting a
 262:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          comment in the code about the assertion.
 263:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 264:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 265:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] remark    a remark string
 266:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 267:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 268:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 269:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 270:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 271:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 272:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Function parameters check.
 273:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 274:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 275:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          is enabled.
 276:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 277:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 278:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 279:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 280:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 281:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 282:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 283:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 284:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   I-Class state check.
 285:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 286:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 287:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 288:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 289:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 290:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   S-Class state check.
 291:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 292:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 293:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 294:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /** @} */
 295:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 296:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 297:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @name    IRQ service routines wrappers
 298:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @{
 299:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 300:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 301:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Priority level verification macro.
 302:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 303:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 304:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 305:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 306:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ prologue code.
 307:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 308:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 309:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 310:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 311:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 312:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ epilogue code.
 313:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 314:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 315:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 316:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 317:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 318:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ handler function declaration.
 319:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 320:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 321:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 322:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 323:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 324:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /** @} */
 325:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 326:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 327:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities
 328:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @{
 329:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 330:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 331:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to time interval.
 332:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to system ticks number.
 333:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 334:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 335:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 336:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          converted.
 337:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 338:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      number of seconds
 339:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 340:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 341:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 342:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 343:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 344:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 345:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 346:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to time interval.
 347:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to system ticks number.
 348:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 349:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 350:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 351:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          converted.
 352:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 353:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     number of milliseconds
 354:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 355:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 356:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 357:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 358:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 359:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 360:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 361:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to time interval.
 362:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to system ticks number.
 363:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 364:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 365:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 366:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          converted.
 367:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 368:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     number of microseconds
 369:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 370:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 371:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 372:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 373:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 374:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 375:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 376:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to seconds.
 377:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to seconds.
 378:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next second boundary.
 379:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 380:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 381:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          converted.
 382:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 383:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 384:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @return              The number of seconds.
 385:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 386:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 387:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 388:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_I2S(interval) TIME_I2S(interval)
 389:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 390:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 391:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to milliseconds.
 392:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to milliseconds.
 393:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next millisecond boundary.
 394:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 395:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 396:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          converted.
 397:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 398:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 399:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @return              The number of milliseconds.
 400:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 401:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 402:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 403:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_I2MS(interval) TIME_I2MS(interval)
 404:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 405:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 406:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to microseconds.
 407:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to microseconds.
 408:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next microsecond boundary.
 409:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 410:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 411:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          converted.
 412:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 413:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 414:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @return              The number of microseconds.
 415:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 416:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 417:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 418:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_I2US(interval) TIME_I2US(interval)
 419:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /** @} */
 420:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 421:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 422:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities for the realtime counter
 423:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @{
 424:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 425:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 426:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to realtime counter.
 427:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 428:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 429:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 430:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 431:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] sec       number of seconds
 432:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 433:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 434:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 435:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 436:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 437:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 438:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 439:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to realtime counter.
 440:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 441:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 442:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 443:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 444:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 445:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] msec      number of milliseconds
 446:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 447:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 448:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 449:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 450:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 451:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 452:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 453:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to realtime counter.
 454:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 455:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 456:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 457:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 458:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 459:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] usec      number of microseconds
 460:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 461:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 462:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 463:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 464:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 465:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /** @} */
 466:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 467:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 468:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @name    Sleep macros using absolute time
 469:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @{
 470:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 471:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 472:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 473:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 474:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 475:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 476:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 477:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 478:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 479:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 480:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 481:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 482:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 483:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 484:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 485:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          milliseconds.
 486:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 487:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 488:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 489:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 490:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 491:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 492:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 493:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 494:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 495:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 496:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 497:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 498:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          microseconds.
 499:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 500:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 501:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 502:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 503:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 504:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 505:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 506:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 507:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 508:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /** @} */
 509:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 510:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 511:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /* External declarations.                                                    */
 512:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 513:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 514:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 515:./lib/chibios/os/hal/osal/rt-nil/osal.h **** extern "C" {
 516:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 517:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 518:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 519:./lib/chibios/os/hal/osal/rt-nil/osal.h **** }
 520:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 521:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 522:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 523:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /* Module inline functions.                                                  */
 524:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 525:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 526:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 527:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module initialization.
 528:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 529:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 530:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 531:./lib/chibios/os/hal/osal/rt-nil/osal.h **** static inline void osalInit(void) {
 532:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 533:./lib/chibios/os/hal/osal/rt-nil/osal.h **** }
 534:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 535:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 536:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   System halt with error message.
 537:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 538:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] reason    the halt message pointer
 539:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 540:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @api
 541:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 542:./lib/chibios/os/hal/osal/rt-nil/osal.h **** static inline void osalSysHalt(const char *reason) {
 543:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 544:./lib/chibios/os/hal/osal/rt-nil/osal.h ****   chSysHalt(reason);
 545:./lib/chibios/os/hal/osal/rt-nil/osal.h **** }
 546:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 547:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 548:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Disables interrupts globally.
 549:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 550:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @special
 551:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 552:./lib/chibios/os/hal/osal/rt-nil/osal.h **** static inline void osalSysDisable(void) {
 553:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 554:./lib/chibios/os/hal/osal/rt-nil/osal.h ****   chSysDisable();
 555:./lib/chibios/os/hal/osal/rt-nil/osal.h **** }
 556:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 557:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 558:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Enables interrupts globally.
 559:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 560:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @special
 561:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 562:./lib/chibios/os/hal/osal/rt-nil/osal.h **** static inline void osalSysEnable(void) {
 563:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 564:./lib/chibios/os/hal/osal/rt-nil/osal.h ****   chSysEnable();
 565:./lib/chibios/os/hal/osal/rt-nil/osal.h **** }
 566:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 567:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 568:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from thread context.
 569:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 570:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 571:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @special
 572:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 573:./lib/chibios/os/hal/osal/rt-nil/osal.h **** static inline void osalSysLock(void) {
 574:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 575:./lib/chibios/os/hal/osal/rt-nil/osal.h ****   chSysLock();
 576:./lib/chibios/os/hal/osal/rt-nil/osal.h **** }
 577:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 578:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 579:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from thread context.
 580:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 581:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 582:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @special
 583:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 584:./lib/chibios/os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlock(void) {
 585:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 586:./lib/chibios/os/hal/osal/rt-nil/osal.h ****   chSysUnlock();
 587:./lib/chibios/os/hal/osal/rt-nil/osal.h **** }
 588:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 589:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 590:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from ISR context.
 591:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 592:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 593:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @special
 594:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 595:./lib/chibios/os/hal/osal/rt-nil/osal.h **** static inline void osalSysLockFromISR(void) {
 146              		.loc 2 595 20 view .LVU43
 596:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 597:./lib/chibios/os/hal/osal/rt-nil/osal.h ****   chSysLockFromISR();
 147              		.loc 2 597 3 view .LVU44
 148              	.LBB87:
 149              	.LBI87:
 150              		.file 3 "./lib/chibios/os/rt/include/chsys.h"
   1:./lib/chibios/os/rt/include/chsys.h **** /*
   2:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsys.h **** 
   4:./lib/chibios/os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsys.h **** 
   6:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsys.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsys.h **** 
  11:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsys.h **** 
  16:./lib/chibios/os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsys.h **** */
  19:./lib/chibios/os/rt/include/chsys.h **** 
  20:./lib/chibios/os/rt/include/chsys.h **** /**
  21:./lib/chibios/os/rt/include/chsys.h ****  * @file    rt/include/chsys.h
  22:./lib/chibios/os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:./lib/chibios/os/rt/include/chsys.h ****  *
  24:./lib/chibios/os/rt/include/chsys.h ****  * @addtogroup system
  25:./lib/chibios/os/rt/include/chsys.h ****  * @{
  26:./lib/chibios/os/rt/include/chsys.h ****  */
  27:./lib/chibios/os/rt/include/chsys.h **** 
  28:./lib/chibios/os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:./lib/chibios/os/rt/include/chsys.h **** #define CHSYS_H
  30:./lib/chibios/os/rt/include/chsys.h **** 
  31:./lib/chibios/os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:./lib/chibios/os/rt/include/chsys.h **** 
  33:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsys.h **** 
  37:./lib/chibios/os/rt/include/chsys.h **** /**
  38:./lib/chibios/os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:./lib/chibios/os/rt/include/chsys.h ****  * @{
  40:./lib/chibios/os/rt/include/chsys.h ****  */
  41:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:./lib/chibios/os/rt/include/chsys.h **** /** @} */
  46:./lib/chibios/os/rt/include/chsys.h **** 
  47:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  50:./lib/chibios/os/rt/include/chsys.h **** 
  51:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  52:./lib/chibios/os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  54:./lib/chibios/os/rt/include/chsys.h **** 
  55:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  56:./lib/chibios/os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  58:./lib/chibios/os/rt/include/chsys.h **** 
  59:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  60:./lib/chibios/os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  62:./lib/chibios/os/rt/include/chsys.h **** 
  63:./lib/chibios/os/rt/include/chsys.h **** /**
  64:./lib/chibios/os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:./lib/chibios/os/rt/include/chsys.h ****  * @{
  66:./lib/chibios/os/rt/include/chsys.h ****  */
  67:./lib/chibios/os/rt/include/chsys.h **** /**
  68:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  69:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  70:./lib/chibios/os/rt/include/chsys.h ****  *          level for the underlying architecture.
  71:./lib/chibios/os/rt/include/chsys.h ****  *
  72:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  73:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  74:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  75:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  76:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  77:./lib/chibios/os/rt/include/chsys.h ****  */
  78:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  79:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  80:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  81:./lib/chibios/os/rt/include/chsys.h **** #else
  82:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  83:./lib/chibios/os/rt/include/chsys.h **** #endif
  84:./lib/chibios/os/rt/include/chsys.h **** 
  85:./lib/chibios/os/rt/include/chsys.h **** /**
  86:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  87:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  88:./lib/chibios/os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  89:./lib/chibios/os/rt/include/chsys.h ****  *
  90:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  91:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  92:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  93:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  94:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  95:./lib/chibios/os/rt/include/chsys.h ****  */
  96:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  97:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  98:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  99:./lib/chibios/os/rt/include/chsys.h **** #else
 100:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 101:./lib/chibios/os/rt/include/chsys.h **** #endif
 102:./lib/chibios/os/rt/include/chsys.h **** 
 103:./lib/chibios/os/rt/include/chsys.h **** /**
 104:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 105:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 106:./lib/chibios/os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 107:./lib/chibios/os/rt/include/chsys.h ****  *
 108:./lib/chibios/os/rt/include/chsys.h ****  * @special
 109:./lib/chibios/os/rt/include/chsys.h ****  */
 110:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 111:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 112:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 113:./lib/chibios/os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 114:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 115:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 116:./lib/chibios/os/rt/include/chsys.h **** 
 117:./lib/chibios/os/rt/include/chsys.h **** /**
 118:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 119:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 120:./lib/chibios/os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 121:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 122:./lib/chibios/os/rt/include/chsys.h ****  *
 123:./lib/chibios/os/rt/include/chsys.h ****  * @special
 124:./lib/chibios/os/rt/include/chsys.h ****  */
 125:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 126:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 127:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 128:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 129:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 130:./lib/chibios/os/rt/include/chsys.h **** 
 131:./lib/chibios/os/rt/include/chsys.h **** /**
 132:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 133:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 134:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 135:./lib/chibios/os/rt/include/chsys.h ****  *
 136:./lib/chibios/os/rt/include/chsys.h ****  * @special
 137:./lib/chibios/os/rt/include/chsys.h ****  */
 138:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 139:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 140:./lib/chibios/os/rt/include/chsys.h **** 
 141:./lib/chibios/os/rt/include/chsys.h **** /**
 142:./lib/chibios/os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 143:./lib/chibios/os/rt/include/chsys.h ****  * @{
 144:./lib/chibios/os/rt/include/chsys.h ****  */
 145:./lib/chibios/os/rt/include/chsys.h **** /**
 146:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 147:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 148:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 149:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 150:./lib/chibios/os/rt/include/chsys.h ****  *
 151:./lib/chibios/os/rt/include/chsys.h ****  * @special
 152:./lib/chibios/os/rt/include/chsys.h ****  */
 153:./lib/chibios/os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 154:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 155:./lib/chibios/os/rt/include/chsys.h **** 
 156:./lib/chibios/os/rt/include/chsys.h **** /**
 157:./lib/chibios/os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 158:./lib/chibios/os/rt/include/chsys.h ****  * @{
 159:./lib/chibios/os/rt/include/chsys.h ****  */
 160:./lib/chibios/os/rt/include/chsys.h **** /**
 161:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 162:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 163:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 164:./lib/chibios/os/rt/include/chsys.h ****  *
 165:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 166:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 167:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 168:./lib/chibios/os/rt/include/chsys.h ****  *
 169:./lib/chibios/os/rt/include/chsys.h ****  * @api
 170:./lib/chibios/os/rt/include/chsys.h ****  */
 171:./lib/chibios/os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 172:./lib/chibios/os/rt/include/chsys.h **** 
 173:./lib/chibios/os/rt/include/chsys.h **** /**
 174:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 175:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 176:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 177:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 178:./lib/chibios/os/rt/include/chsys.h ****  *
 179:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 180:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 181:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 182:./lib/chibios/os/rt/include/chsys.h ****  *
 183:./lib/chibios/os/rt/include/chsys.h ****  * @api
 184:./lib/chibios/os/rt/include/chsys.h ****  */
 185:./lib/chibios/os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 186:./lib/chibios/os/rt/include/chsys.h **** 
 187:./lib/chibios/os/rt/include/chsys.h **** /**
 188:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 189:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 190:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 191:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 192:./lib/chibios/os/rt/include/chsys.h ****  *
 193:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 194:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 195:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 196:./lib/chibios/os/rt/include/chsys.h ****  *
 197:./lib/chibios/os/rt/include/chsys.h ****  * @api
 198:./lib/chibios/os/rt/include/chsys.h ****  */
 199:./lib/chibios/os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 200:./lib/chibios/os/rt/include/chsys.h **** 
 201:./lib/chibios/os/rt/include/chsys.h **** /**
 202:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 203:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 204:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 205:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 206:./lib/chibios/os/rt/include/chsys.h ****  *
 207:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 208:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 209:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of seconds.
 210:./lib/chibios/os/rt/include/chsys.h ****  *
 211:./lib/chibios/os/rt/include/chsys.h ****  * @api
 212:./lib/chibios/os/rt/include/chsys.h ****  */
 213:./lib/chibios/os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 214:./lib/chibios/os/rt/include/chsys.h **** 
 215:./lib/chibios/os/rt/include/chsys.h **** /**
 216:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 217:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 218:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 219:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 220:./lib/chibios/os/rt/include/chsys.h ****  *
 221:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 222:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 223:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 224:./lib/chibios/os/rt/include/chsys.h ****  *
 225:./lib/chibios/os/rt/include/chsys.h ****  * @api
 226:./lib/chibios/os/rt/include/chsys.h ****  */
 227:./lib/chibios/os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 228:./lib/chibios/os/rt/include/chsys.h **** 
 229:./lib/chibios/os/rt/include/chsys.h **** /**
 230:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 231:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 232:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 233:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 234:./lib/chibios/os/rt/include/chsys.h ****  *
 235:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 236:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 237:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of microseconds.
 238:./lib/chibios/os/rt/include/chsys.h ****  *
 239:./lib/chibios/os/rt/include/chsys.h ****  * @api
 240:./lib/chibios/os/rt/include/chsys.h ****  */
 241:./lib/chibios/os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 242:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 243:./lib/chibios/os/rt/include/chsys.h **** 
 244:./lib/chibios/os/rt/include/chsys.h **** /**
 245:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 246:./lib/chibios/os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 247:./lib/chibios/os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 248:./lib/chibios/os/rt/include/chsys.h ****  *
 249:./lib/chibios/os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 250:./lib/chibios/os/rt/include/chsys.h ****  *                      type rtcnt_t.
 251:./lib/chibios/os/rt/include/chsys.h ****  *
 252:./lib/chibios/os/rt/include/chsys.h ****  * @xclass
 253:./lib/chibios/os/rt/include/chsys.h ****  */
 254:./lib/chibios/os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 255:./lib/chibios/os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 256:./lib/chibios/os/rt/include/chsys.h **** #endif
 257:./lib/chibios/os/rt/include/chsys.h **** 
 258:./lib/chibios/os/rt/include/chsys.h **** /**
 259:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 260:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 261:./lib/chibios/os/rt/include/chsys.h ****  *          itself or from within the port layer.
 262:./lib/chibios/os/rt/include/chsys.h ****  *
 263:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 264:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 265:./lib/chibios/os/rt/include/chsys.h ****  *
 266:./lib/chibios/os/rt/include/chsys.h ****  * @special
 267:./lib/chibios/os/rt/include/chsys.h ****  */
 268:./lib/chibios/os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 269:./lib/chibios/os/rt/include/chsys.h ****                                                                             \
 270:./lib/chibios/os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 271:./lib/chibios/os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 272:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 273:./lib/chibios/os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 274:./lib/chibios/os/rt/include/chsys.h **** }
 275:./lib/chibios/os/rt/include/chsys.h **** 
 276:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chsys.h **** /* External declarations.                                                    */
 278:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 279:./lib/chibios/os/rt/include/chsys.h **** 
 280:./lib/chibios/os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 281:./lib/chibios/os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 282:./lib/chibios/os/rt/include/chsys.h **** #endif
 283:./lib/chibios/os/rt/include/chsys.h **** 
 284:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 285:./lib/chibios/os/rt/include/chsys.h **** extern "C" {
 286:./lib/chibios/os/rt/include/chsys.h **** #endif
 287:./lib/chibios/os/rt/include/chsys.h ****   void chSysInit(void);
 288:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 289:./lib/chibios/os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 290:./lib/chibios/os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 291:./lib/chibios/os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 292:./lib/chibios/os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 293:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 294:./lib/chibios/os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 295:./lib/chibios/os/rt/include/chsys.h **** #endif
 296:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 297:./lib/chibios/os/rt/include/chsys.h **** }
 298:./lib/chibios/os/rt/include/chsys.h **** #endif
 299:./lib/chibios/os/rt/include/chsys.h **** 
 300:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 301:./lib/chibios/os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 302:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 303:./lib/chibios/os/rt/include/chsys.h **** 
 304:./lib/chibios/os/rt/include/chsys.h **** /**
 305:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 306:./lib/chibios/os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 307:./lib/chibios/os/rt/include/chsys.h ****  *          hardware priority.
 308:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 309:./lib/chibios/os/rt/include/chsys.h ****  *
 310:./lib/chibios/os/rt/include/chsys.h ****  * @special
 311:./lib/chibios/os/rt/include/chsys.h ****  */
 312:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 313:./lib/chibios/os/rt/include/chsys.h **** 
 314:./lib/chibios/os/rt/include/chsys.h ****   port_disable();
 315:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_disable();
 316:./lib/chibios/os/rt/include/chsys.h **** }
 317:./lib/chibios/os/rt/include/chsys.h **** 
 318:./lib/chibios/os/rt/include/chsys.h **** /**
 319:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 320:./lib/chibios/os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 321:./lib/chibios/os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 322:./lib/chibios/os/rt/include/chsys.h ****  *          enabled.
 323:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 324:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 325:./lib/chibios/os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 326:./lib/chibios/os/rt/include/chsys.h ****  *
 327:./lib/chibios/os/rt/include/chsys.h ****  * @special
 328:./lib/chibios/os/rt/include/chsys.h ****  */
 329:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 330:./lib/chibios/os/rt/include/chsys.h **** 
 331:./lib/chibios/os/rt/include/chsys.h ****   port_suspend();
 332:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_suspend();
 333:./lib/chibios/os/rt/include/chsys.h **** }
 334:./lib/chibios/os/rt/include/chsys.h **** 
 335:./lib/chibios/os/rt/include/chsys.h **** /**
 336:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 337:./lib/chibios/os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 338:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 339:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 340:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 341:./lib/chibios/os/rt/include/chsys.h ****  *
 342:./lib/chibios/os/rt/include/chsys.h ****  * @special
 343:./lib/chibios/os/rt/include/chsys.h ****  */
 344:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 345:./lib/chibios/os/rt/include/chsys.h **** 
 346:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enable();
 347:./lib/chibios/os/rt/include/chsys.h ****   port_enable();
 348:./lib/chibios/os/rt/include/chsys.h **** }
 349:./lib/chibios/os/rt/include/chsys.h **** 
 350:./lib/chibios/os/rt/include/chsys.h **** /**
 351:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 352:./lib/chibios/os/rt/include/chsys.h ****  *
 353:./lib/chibios/os/rt/include/chsys.h ****  * @special
 354:./lib/chibios/os/rt/include/chsys.h ****  */
 355:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLock(void) {
 356:./lib/chibios/os/rt/include/chsys.h **** 
 357:./lib/chibios/os/rt/include/chsys.h ****   port_lock();
 358:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 359:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 360:./lib/chibios/os/rt/include/chsys.h **** }
 361:./lib/chibios/os/rt/include/chsys.h **** 
 362:./lib/chibios/os/rt/include/chsys.h **** /**
 363:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 364:./lib/chibios/os/rt/include/chsys.h ****  *
 365:./lib/chibios/os/rt/include/chsys.h ****  * @special
 366:./lib/chibios/os/rt/include/chsys.h ****  */
 367:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 368:./lib/chibios/os/rt/include/chsys.h **** 
 369:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock();
 370:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 371:./lib/chibios/os/rt/include/chsys.h **** 
 372:./lib/chibios/os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 373:./lib/chibios/os/rt/include/chsys.h ****      in a critical section not followed by a chSchRescheduleS(), this means
 374:./lib/chibios/os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 375:./lib/chibios/os/rt/include/chsys.h ****      the ready list.*/
 376:./lib/chibios/os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 377:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 378:./lib/chibios/os/rt/include/chsys.h ****               "priority order violation");
 379:./lib/chibios/os/rt/include/chsys.h **** 
 380:./lib/chibios/os/rt/include/chsys.h ****   port_unlock();
 381:./lib/chibios/os/rt/include/chsys.h **** }
 382:./lib/chibios/os/rt/include/chsys.h **** 
 383:./lib/chibios/os/rt/include/chsys.h **** /**
 384:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state from within an interrupt handler.
 385:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 386:./lib/chibios/os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 387:./lib/chibios/os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 388:./lib/chibios/os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 389:./lib/chibios/os/rt/include/chsys.h ****  *          It is good practice to invoke this API before invoking any I-class
 390:./lib/chibios/os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 391:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 392:./lib/chibios/os/rt/include/chsys.h ****  *
 393:./lib/chibios/os/rt/include/chsys.h ****  * @special
 394:./lib/chibios/os/rt/include/chsys.h ****  */
 395:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLockFromISR(void) {
 151              		.loc 3 395 20 view .LVU45
 396:./lib/chibios/os/rt/include/chsys.h **** 
 397:./lib/chibios/os/rt/include/chsys.h ****   port_lock_from_isr();
 152              		.loc 3 397 3 view .LVU46
 153              	.LBB88:
 154              	.LBI88:
 155              		.file 4 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @file    chcore_v7m.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   ARMv7-M architecture port macros and structures.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @addtogroup ARMCMx_V7M_CORE
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifndef CHCORE_V7M_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CHCORE_V7M_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Port Capabilities and Constants
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   This port supports a realtime counter.
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SUPPORTS_RT                TRUE
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Natural alignment constant.
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the minimum alignment for pointer-size variables.
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_NATURAL_ALIGN              sizeof (void *)
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack alignment constant.
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment required for the stack pointer.
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_STACK_ALIGN                sizeof (stkalign_t)
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Working Areas alignment constant.
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment to be enforced for thread working areas.
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA_ALIGN         ((PORT_ENABLE_GUARD_PAGES == TRUE) ?\
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                          32U : PORT_STACK_ALIGN)
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Disabled value for BASEPRI register.
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_DISABLED         0U
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module pre-compile time settings.                                         */
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Implements a syscall interface on SVC.
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_SYSCALL) || defined(__DOXYGEN__)
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_SYSCALL                FALSE
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Number of MPU regions to be saved/restored during context switch.
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The first region is always region zero.
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 8 bytes for each
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          region for each thread.
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Allowed values are 0..4, zero means none.
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_SWITCHED_REGIONS_NUMBER) || defined(__DOXYGEN__)
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SWITCHED_REGIONS_NUMBER    0
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables stack overflow guard pages using MPU.
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This option can only be enabled if also option
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CH_DBG_ENABLE_STACK_CHECK is enabled.
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 32 bytes for each
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          thread.
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_ENABLE_GUARD_PAGES) || defined(__DOXYGEN__)
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ENABLE_GUARD_PAGES         FALSE
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU region to be used to stack guards.
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Make sure this region is not included in the
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p PORT_SWITCHED_REGIONS_NUMBER regions range.
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_GUARD_MPU_REGION) || defined(__DOXYGEN__)
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_GUARD_MPU_REGION       MPU_REGION_7
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack size for the system idle thread.
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This size depends on the idle thread implementation, usually
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          the idle thread should take no more space than those reserved
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it is set to 16 because the idle thread does have
 117:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          a stack frame when compiling without optimizations. You may
 118:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          reduce this value to zero when compiling with optimizations.
 119:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 120:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 121:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IDLE_THREAD_STACK_SIZE     16
 122:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 123:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 124:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 125:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 126:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This constant is used in the calculation of the correct working
 127:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          area size.
 128:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port this value is conservatively set to 64 because the
 129:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          function @p chSchDoReschedule() can have a stack frame, especially
 130:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          with compiler optimizations disabled. The value can be reduced
 131:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          when compiler optimizations are enabled.
 132:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 133:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 134:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INT_REQUIRED_STACK         64
 135:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 136:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 137:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 138:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables the use of the WFI instruction in the idle thread loop.
 139:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 140:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_ENABLE_WFI_IDLE)
 141:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_ENABLE_WFI_IDLE          FALSE
 142:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 143:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 144:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 145:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   FPU support in context switch.
 146:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option activates the FPU support in the kernel.
 147:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 148:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_USE_FPU)
 149:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_USE_FPU                  CORTEX_HAS_FPU
 150:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_USE_FPU == TRUE) && (CORTEX_HAS_FPU == FALSE)
 151:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* This setting requires an FPU presence check in case it is externally
 152:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    redefined.*/
 153:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "the selected core does not have an FPU"
 154:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 155:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 156:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 157:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Simplified priority handling flag.
 158:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option makes the Kernel work in compact mode.
 159:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          In compact mode interrupts are disabled globally instead of
 160:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          raising the priority mask to some intermediate level.
 161:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 162:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_SIMPLIFIED_PRIORITY)
 163:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_SIMPLIFIED_PRIORITY      FALSE
 164:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 165:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 166:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 167:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   SVCALL handler priority.
 168:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The default SVCALL handler priority is defaulted to
 169:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY+1, this reserves the
 170:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY priority level as fast interrupts
 171:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority level.
 172:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 173:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIORITY_SVCALL)
 174:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_SVCALL          (CORTEX_MAXIMUM_PRIORITY + 1U)
 175:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif !PORT_IRQ_IS_VALID_PRIORITY(CORTEX_PRIORITY_SVCALL)
 176:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* If it is externally redefined then better perform a validity check on it.*/
 177:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid priority level specified for CORTEX_PRIORITY_SVCALL"
 178:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 179:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 180:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 181:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   NVIC PRIGROUP initialization expression.
 182:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details The default assigns all available priority bits as preemption
 183:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority with no sub-priority.
 184:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 185:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIGROUP_INIT) || defined(__DOXYGEN__)
 186:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIGROUP_INIT            (7 - CORTEX_PRIORITY_BITS)
 187:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 188:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 189:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 190:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Derived constants and error checks.                                       */
 191:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 192:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 193:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER < 0) || (PORT_SWITCHED_REGIONS_NUMBER > 4)
 194:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid PORT_SWITCHED_REGIONS_NUMBER value"
 195:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 196:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 197:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 198:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 199:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU guard page size.
 200:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 201:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == TRUE) || defined(__DOXYGEN__)
 202:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_DBG_ENABLE_STACK_CHECK == FALSE
 203:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "PORT_ENABLE_GUARD_PAGES requires CH_DBG_ENABLE_STACK_CHECK"
 204:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 205:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if __MPU_PRESENT == 0
 206:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "MPU not present in current device"
 207:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 208:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          32U
 209:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 210:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          0U
 211:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 212:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(_FROM_ASM_) */
 213:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 214:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 215:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Architecture and Compiler
 216:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
 217:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 218:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_MODEL == 3) || defined(__DOXYGEN__)
 219:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 220:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM3)
 221:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM3 not defined"
 222:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 223:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 224:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM3 == FALSE
 225:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M3 port not licensed"
 226:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 227:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 228:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 229:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Macro defining the specific ARM architecture.
 230:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 231:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7M
 232:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 233:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 234:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the implemented architecture.
 235:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 236:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv7-M"
 237:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 238:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 239:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the architecture variant.
 240:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 241:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 242:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3"
 243:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 244:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3 (MPU)"
 245:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 246:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 247:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 4)
 248:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 249:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM4)
 250:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM4 not defined"
 251:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 252:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 253:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM4 == FALSE
 254:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #error "ChibiOS Cortex-M4 port not licensed"
 255:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 256:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 257:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_ARM_v7ME
 258:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 259:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 260:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 261:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F"
 262:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 263:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F (MPU)"
 264:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 265:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 266:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 267:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4"
 268:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 269:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4 (MPU)"
 270:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 271:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 272:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 273:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 7)
 274:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 275:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM7)
 276:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM7 not defined"
 277:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 278:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 279:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM7 == FALSE
 280:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M7 port not licensed"
 281:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 282:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 283:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7ME
 284:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 285:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 286:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 287:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F"
 288:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 289:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F (MPU)"
 290:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 291:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 292:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 293:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7"
 294:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 295:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7 (MPU)"
 296:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 297:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 298:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 299:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 300:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 301:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Port-specific information string.
 302:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 303:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 304:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Advanced kernel mode"
 305:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 306:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Compact kernel mode"
 307:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 308:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
 309:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 310:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 311:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 312:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Maximum usable priority for normal ISRs.
 313:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 314:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      (CORTEX_PRIORITY_SVCALL + 1U)
 315:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 316:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 317:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   BASEPRI level within kernel lock.
 318:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 319:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_KERNEL                                               \
 320:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   CORTEX_PRIO_MASK(CORTEX_MAX_KERNEL_PRIORITY)
 321:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 322:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 323:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      0U
 324:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 325:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 326:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 327:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   PendSV priority level.
 328:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This priority is enforced to be equal to
 329:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAX_KERNEL_PRIORITY, this handler always have the
 330:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          highest priority that cannot preempt the kernel.
 331:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 332:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_PENDSV          CORTEX_MAX_KERNEL_PRIORITY
 333:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 334:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 335:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module data structures and types.                                         */
 336:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 337:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 338:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The following code is not processed when the file is included from an
 339:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    asm module.*/
 340:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 341:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 342:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The documentation of the following declarations is in chconf.h in order
 343:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    to not have duplicated structure names into the documentation.*/
 344:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(__DOXYGEN__)
 345:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_extctx {
 346:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r0;
 347:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r1;
 348:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r2;
 349:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r3;
 350:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r12;
 351:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr_thd;
 352:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      pc;
 353:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      xpsr;
 354:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 355:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s0;
 356:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s1;
 357:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s2;
 358:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s3;
 359:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s4;
 360:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s5;
 361:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s6;
 362:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s7;
 363:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s8;
 364:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s9;
 365:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s10;
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s11;
 367:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s12;
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s13;
 369:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s14;
 370:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s15;
 371:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      fpscr;
 372:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      reserved;
 373:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 374:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 375:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 376:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 377:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Link context structure.
 379:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This structure is used when there is the need to save extra
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          context information that is not part of the registers stacked
 381:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          in HW.
 382:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 383:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_linkctx {
 384:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t              control;
 385:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_extctx    *ectxp;
 386:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 388:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_intctx {
 390:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER > 0) || defined(__DOXYGEN__)
 391:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 392:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rbar;
 393:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rasr;
 394:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } regions[PORT_SWITCHED_REGIONS_NUMBER];
 395:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 397:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s16;
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s17;
 399:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s18;
 400:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s19;
 401:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s20;
 402:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s21;
 403:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s22;
 404:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s23;
 405:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s24;
 406:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s25;
 407:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s26;
 408:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s27;
 409:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s28;
 410:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s29;
 411:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s30;
 412:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s31;
 413:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 414:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r4;
 415:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r5;
 416:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r6;
 417:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r7;
 418:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r8;
 419:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r9;
 420:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r10;
 421:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r11;
 422:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr;
 423:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 424:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 425:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_context {
 426:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx    *sp;
 427:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 428:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 429:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t            psp;
 430:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     const void          *p;
 431:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } syscall;
 432:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 433:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 434:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(__DOXYGEN__) */
 435:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 436:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 437:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module macros.                                                            */
 438:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 439:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 440:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have no syscall context information.*/
 441:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 442:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)                              \
 443:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.psp = (uint32_t)(wtop);                                 \
 444:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.p   = NULL;
 445:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 446:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)
 447:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 448:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 449:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have all regions disabled.*/
 450:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER == 0) || defined(__DOXYGEN__)
 451:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)
 452:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 1) || defined(__DOXYGEN__)
 453:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 454:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 455:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U
 456:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 2) || defined(__DOXYGEN__)
 457:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 458:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 459:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 460:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 461:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U
 462:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 3) || defined(__DOXYGEN__)
 463:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 464:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 465:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 466:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 467:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 468:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 469:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U
 470:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 4) || defined(__DOXYGEN__)
 471:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 472:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 473:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 474:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 475:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 476:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 477:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U;                                      \
 478:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rbar  = 0U;                                      \
 479:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rasr  = 0U
 480:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 481:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 482:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 483:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 484:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 485:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This code usually setup the context switching frame represented
 486:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by an @p port_intctx structure.
 487:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 488:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 489:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                 \
 490:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                         sizeof (struct port_intctx));       \
 491:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r4 = (uint32_t)(pf);                                        \
 492:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r5 = (uint32_t)(arg);                                       \
 493:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->lr = (uint32_t)_port_thread_start;                          \
 494:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_MPU(tp);                                             \
 495:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop);                                   \
 496:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 497:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 498:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** //  __PORT_SETUP_CONTEXT_MPU(tp)
 499:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 500:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 501:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Computes the thread working area global size.
 502:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    There is no need to perform alignments in this macro.
 503:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 504:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WA_SIZE(n) ((size_t)PORT_GUARD_PAGE_SIZE +                     \
 505:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_intctx) +                      \
 506:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_extctx) +                      \
 507:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)(n) +                                      \
 508:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)PORT_INT_REQUIRED_STACK)
 509:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 510:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 511:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Static working area allocation.
 512:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro is used to allocate a static thread working area
 513:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          aligned as both position and size.
 514:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 515:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] s         the name to be assigned to the stack array
 516:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] n         the stack size to be assigned to the thread
 517:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 518:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 519:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 520:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 521:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 522:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 523:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   ALIGNED_VAR(32) stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 524:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 525:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 526:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 527:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ prologue code.
 528:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 529:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 530:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 531:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_PROLOGUE()
 532:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 533:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 534:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ epilogue code.
 535:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 536:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 537:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 538:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_EPILOGUE() _port_irq_epilogue()
 539:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 540:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 541:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ handler function declaration.
 542:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 543:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 544:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 545:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 546:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) extern "C" void id(void)
 547:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 548:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) void id(void)
 549:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 550:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 551:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 552:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Fast IRQ handler function declaration.
 553:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 554:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 555:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 556:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 557:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) extern "C" void id(void)
 558:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 559:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) void id(void)
 560:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 561:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 562:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 563:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Performs a context switch between two threads.
 564:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This is the most critical code in any port, this function
 565:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          is responsible for the context switch between 2 threads.
 566:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 567:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          switch performance so optimize here as much as you can.
 568:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 569:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] ntp       the thread to be switched in
 570:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] otp       the thread to be switched out
 571:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 572:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CH_DBG_ENABLE_STACK_CHECK == FALSE) || defined(__DOXYGEN__)
 573:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 574:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 575:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_ENABLE_GUARD_PAGES == FALSE
 576:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 577:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx *r13 = (struct port_intctx *)__get_PSP();              \
 578:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   if ((stkalign_t *)(r13 - 1) < (otp)->wabase) {                            \
 579:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     chSysHalt("stack overflow");                                            \
 580:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   }                                                                         \
 581:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 582:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 583:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 584:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 585:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 586:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                                                             \
 587:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   /* Setting up the guard page for the switched-in thread.*/                \
 588:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   mpuSetRegionAddress(PORT_USE_GUARD_MPU_REGION,                            \
 589:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                       chThdGetSelfX()->wabase);                             \
 590:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 591:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 592:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 593:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 594:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 595:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* External declarations.                                                    */
 596:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 597:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 598:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 599:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** extern "C" {
 600:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 601:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_init(void);
 602:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_irq_epilogue(void);
 603:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 604:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_thread_start(void);
 605:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch_from_isr(void);
 606:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_exit_from_isr(void);
 607:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_USE_SYSCALL == TRUE
 608:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_unprivileged_jump(uint32_t pc, uint32_t psp);
 609:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 610:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 611:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 612:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 613:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 614:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 615:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module inline functions.                                                  */
 616:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 617:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 618:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 619:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Returns a word encoding the current interrupts status.
 620:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 621:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupts status.
 622:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 623:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE syssts_t port_get_irq_status(void) {
 624:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   syssts_t sts;
 625:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 626:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 627:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_BASEPRI();
 628:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 629:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_PRIMASK();
 630:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 631:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts;
 632:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 633:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 634:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 635:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Checks the interrupt status.
 636:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 637:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] sts       the interrupt status word
 638:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 639:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupt status.
 640:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        the word specified a disabled interrupts status.
 641:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         the word specified an enabled interrupts status.
 642:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 643:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_irq_enabled(syssts_t sts) {
 644:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 645:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 646:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 647:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 648:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (sts & (syssts_t)1) == (syssts_t)0;
 649:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 650:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 651:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 652:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 653:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Determines the current execution context.
 654:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 655:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The execution context.
 656:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        not running in ISR mode.
 657:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         running in ISR mode.
 658:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 659:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_is_isr_context(void) {
 660:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 661:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 662:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 663:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 664:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 665:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action.
 666:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 667:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 668:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock(void) {
 670:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 671:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 672:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 673:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 674:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 675:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 676:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
 678:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 679:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 680:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 681:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 682:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 683:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 684:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 685:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 686:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 687:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 688:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 689:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action.
 690:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 691:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 692:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock(void) {
 694:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 695:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
 697:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 698:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 699:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 700:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 701:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 702:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 703:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action from an interrupt handler.
 704:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 705:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 706:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Same as @p port_lock() in this port.
 707:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 708:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock_from_isr(void) {
 156              		.loc 4 708 27 view .LVU47
 709:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 710:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   port_lock();
 157              		.loc 4 710 3 view .LVU48
 158              	.LBB89:
 159              	.LBI89:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 160              		.loc 4 669 27 view .LVU49
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 161              		.loc 4 677 3 view .LVU50
 162              	.LVL5:
 163              	.LBB90:
 164              	.LBI90:
 165              		.file 5 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 144:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 145:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 146:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 147:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 150:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 151:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 153:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 154:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 155:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 157:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 158:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 159:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 160:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 162:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 166:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 168:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 169:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 170:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 172:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 173:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 174:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 175:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 176:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 177:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 181:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 183:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 185:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 187:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 189:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 193:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 195:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 197:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 198:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 199:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 200:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 201:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 208:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 211:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 212:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 214:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 215:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 219:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 221:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 222:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 223:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 225:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 226:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 228:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 241:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 243:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 247:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 249:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 250:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 251:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 253:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 254:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 255:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 265:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 268:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 269:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 270:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 271:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 272:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 273:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 277:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 279:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 281:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 282:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 283:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 285:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 289:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 291:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 294:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 296:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 297:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 301:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 303:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 304:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 305:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 307:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 308:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 310:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 312:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 316:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 318:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 319:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 320:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 322:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 323:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 324:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 325:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 326:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 327:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 331:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 333:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 335:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 336:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 337:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 339:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 343:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 345:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 347:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 348:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 355:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 359:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 360:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 362:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 363:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 364:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 365:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 366:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 370:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 372:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 374:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 375:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 378:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 382:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 384:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 385:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 386:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 388:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 389:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 390:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 391:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 393:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 397:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 399:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 400:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 401:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 403:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 404:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 405:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 406:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 407:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 408:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 412:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 414:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 416:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 418:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 420:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 424:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 426:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 428:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 429:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 430:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 435:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 439:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 441:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 443:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 445:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 446:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 450:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 452:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 454:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 455:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 456:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 457:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 461:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 463:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 464:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 465:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 467:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 468:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 469:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 470:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 472:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 476:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 478:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 479:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 480:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 482:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 484:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 486:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 166              		.loc 5 491 27 view .LVU51
 167              	.LBB91:
 492:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 168              		.loc 5 493 3 view .LVU52
 169 0014 2023     		movs	r3, #32
 170              		.syntax unified
 171              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 172 0016 83F31188 		MSR basepri, r3
 173              	@ 0 "" 2
 174              	.LVL6:
 175              		.loc 5 493 3 is_stmt 0 view .LVU53
 176              		.thumb
 177              		.syntax unified
 178              	.LBE91:
 179              	.LBE90:
 180              	.LBE89:
 181              	.LBE88:
 398:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_isr();
 182              		.loc 3 398 34 is_stmt 1 view .LVU54
 399:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock_from_isr();
 183              		.loc 3 399 29 view .LVU55
 184              	.LBE87:
 185              	.LBE86:
 462:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     osalOsTimerHandlerI();
 186              		.loc 1 462 5 view .LVU56
 187              	.LBB92:
 188              	.LBI92:
 598:./lib/chibios/os/hal/osal/rt-nil/osal.h **** }
 599:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 600:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 601:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 602:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 603:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 604:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @special
 605:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 606:./lib/chibios/os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlockFromISR(void) {
 607:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 608:./lib/chibios/os/hal/osal/rt-nil/osal.h ****   chSysUnlockFromISR();
 609:./lib/chibios/os/hal/osal/rt-nil/osal.h **** }
 610:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 611:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 612:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 613:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @details This functions enters into a critical zone and can be called
 614:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          from any context. Because its flexibility it is less efficient
 615:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 616:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          is known.
 617:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @post    The system is in a critical zone.
 618:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 619:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @return              The previous system status, the encoding of this
 620:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *                      status word is architecture-dependent and opaque.
 621:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 622:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @xclass
 623:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 624:./lib/chibios/os/hal/osal/rt-nil/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 625:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 626:./lib/chibios/os/hal/osal/rt-nil/osal.h ****   return chSysGetStatusAndLockX();
 627:./lib/chibios/os/hal/osal/rt-nil/osal.h **** }
 628:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 629:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 630:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 631:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 632:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 633:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 634:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] sts       the system status to be restored.
 635:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 636:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @xclass
 637:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 638:./lib/chibios/os/hal/osal/rt-nil/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 639:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 640:./lib/chibios/os/hal/osal/rt-nil/osal.h ****   chSysRestoreStatusX(sts);
 641:./lib/chibios/os/hal/osal/rt-nil/osal.h **** }
 642:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 643:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 644:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Polled delay.
 645:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 646:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          value.
 647:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 648:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @param[in] cycles    number of cycles
 649:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *
 650:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @xclass
 651:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 652:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 653:./lib/chibios/os/hal/osal/rt-nil/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 654:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 655:./lib/chibios/os/hal/osal/rt-nil/osal.h ****   chSysPolledDelayX(cycles);
 656:./lib/chibios/os/hal/osal/rt-nil/osal.h **** }
 657:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #endif
 658:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 659:./lib/chibios/os/hal/osal/rt-nil/osal.h **** /**
 660:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @brief   Systick callback for the underlying OS.
 661:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 662:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  *          service from the HAL.
 663:./lib/chibios/os/hal/osal/rt-nil/osal.h ****  */
 664:./lib/chibios/os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 665:./lib/chibios/os/hal/osal/rt-nil/osal.h **** static inline void osalOsTimerHandlerI(void) {
 189              		.loc 2 665 20 view .LVU57
 190              	.LBB93:
 666:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 667:./lib/chibios/os/hal/osal/rt-nil/osal.h ****   chSysTimerHandlerI();
 191              		.loc 2 667 3 view .LVU58
 192 001a FFF7FEFF 		bl	chSysTimerHandlerI
 193              	.LVL7:
 194              	.LBE93:
 195              	.LBE92:
 463:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     osalSysUnlockFromISR();
 196              		.loc 1 463 5 view .LVU59
 197              	.LBB94:
 198              	.LBI94:
 606:./lib/chibios/os/hal/osal/rt-nil/osal.h **** 
 199              		.loc 2 606 20 view .LVU60
 608:./lib/chibios/os/hal/osal/rt-nil/osal.h **** }
 200              		.loc 2 608 3 view .LVU61
 201              	.LBB95:
 202              	.LBI95:
 400:./lib/chibios/os/rt/include/chsys.h **** }
 401:./lib/chibios/os/rt/include/chsys.h **** 
 402:./lib/chibios/os/rt/include/chsys.h **** /**
 403:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state from within an interrupt handler.
 404:./lib/chibios/os/rt/include/chsys.h ****  *
 405:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 406:./lib/chibios/os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 407:./lib/chibios/os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 408:./lib/chibios/os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 409:./lib/chibios/os/rt/include/chsys.h ****  *          It is good practice to invoke this API after invoking any I-class
 410:./lib/chibios/os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 411:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 412:./lib/chibios/os/rt/include/chsys.h ****  *
 413:./lib/chibios/os/rt/include/chsys.h ****  * @special
 414:./lib/chibios/os/rt/include/chsys.h ****  */
 415:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlockFromISR(void) {
 203              		.loc 3 415 20 view .LVU62
 416:./lib/chibios/os/rt/include/chsys.h **** 
 417:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock_from_isr();
 204              		.loc 3 417 31 view .LVU63
 418:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_isr();
 205              		.loc 3 418 33 view .LVU64
 419:./lib/chibios/os/rt/include/chsys.h ****   port_unlock_from_isr();
 206              		.loc 3 419 3 view .LVU65
 207              	.LBB96:
 208              	.LBI96:
 711:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 712:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 713:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 714:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action from an interrupt handler.
 715:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 716:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 717:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Same as @p port_unlock() in this port.
 718:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 719:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock_from_isr(void) {
 209              		.loc 4 719 27 view .LVU66
 720:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 721:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   port_unlock();
 210              		.loc 4 721 3 view .LVU67
 211              	.LBB97:
 212              	.LBI97:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 213              		.loc 4 693 27 view .LVU68
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 214              		.loc 4 696 3 view .LVU69
 215              	.LBB98:
 216              	.LBI98:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 217              		.loc 5 491 27 view .LVU70
 218              	.LBB99:
 219              		.loc 5 493 3 view .LVU71
 220 001e 0023     		movs	r3, #0
 221              		.syntax unified
 222              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 223 0020 83F31188 		MSR basepri, r3
 224              	@ 0 "" 2
 225              	.LVL8:
 226              		.thumb
 227              		.syntax unified
 228              	.L4:
 229              		.loc 5 493 3 is_stmt 0 view .LVU72
 230              	.LBE99:
 231              	.LBE98:
 232              	.LBE97:
 233              	.LBE96:
 234              	.LBE95:
 235              	.LBE94:
 236              	.LBE85:
 237              	.LBE84:
 464:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   }
 465:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
 466:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if ST_LLD_NUM_ALARMS > 1
 467:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   if ((sr & TIM_SR_CC2IF) != 0U) {
 468:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     if (st_callbacks[2] != NULL) {
 469:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****       st_callbacks[0](1U);
 470:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     }
 471:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   }
 472:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 473:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if ST_LLD_NUM_ALARMS > 2
 474:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   if ((sr & TIM_SR_CC3IF) != 0U) {
 475:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     if (st_callbacks[2] != NULL) {
 476:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****       st_callbacks[1](2U);
 477:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     }
 478:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   }
 479:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 480:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if ST_LLD_NUM_ALARMS > 3
 481:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   if ((sr & TIM_SR_CC4IF) != 0U) {
 482:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     if (st_callbacks[2] != NULL) {
 483:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****       st_callbacks[2](3U);
 484:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     }
 485:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   }
 486:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 487:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 488:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** }
 238              		.loc 1 488 1 view .LVU73
 239 0024 08BD     		pop	{r3, pc}
 240              	.L10:
 241 0026 00BF     		.align	2
 242              	.L9:
 243 0028 00040040 		.word	1073742848
 244              		.cfi_endproc
 245              	.LFE284:
 247              		.section	.text.VectorB4,"ax",%progbits
 248              		.align	1
 249              		.global	VectorB4
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 254              	VectorB4:
 255              	.LFB282:
 377:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 256              		.loc 1 377 30 is_stmt 1 view -0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 379:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 260              		.loc 1 379 3 view .LVU75
 379:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 261              		.loc 1 379 3 view .LVU76
 379:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 262              		.loc 1 379 3 view .LVU77
 379:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 263              		.loc 1 379 3 view .LVU78
 379:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 264              		.loc 1 379 3 view .LVU79
 379:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 265              		.loc 1 379 22 view .LVU80
 381:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 266              		.loc 1 381 3 view .LVU81
 377:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 267              		.loc 1 377 30 is_stmt 0 view .LVU82
 268 0000 08B5     		push	{r3, lr}
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 3, -8
 271              		.cfi_offset 14, -4
 381:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 272              		.loc 1 381 3 view .LVU83
 273 0002 FFF7FEFF 		bl	st_lld_serve_interrupt
 274              	.LVL9:
 383:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** }
 275              		.loc 1 383 3 is_stmt 1 view .LVU84
 383:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** }
 276              		.loc 1 383 3 view .LVU85
 383:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** }
 277              		.loc 1 383 3 view .LVU86
 383:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** }
 278              		.loc 1 383 3 view .LVU87
 383:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** }
 279              		.loc 1 383 3 view .LVU88
 384:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 280              		.loc 1 384 1 is_stmt 0 view .LVU89
 281 0006 BDE80840 		pop	{r3, lr}
 282              		.cfi_restore 14
 283              		.cfi_restore 3
 284              		.cfi_def_cfa_offset 0
 383:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** }
 285              		.loc 1 383 3 view .LVU90
 286 000a FFF7FEBF 		b	_port_irq_epilogue
 287              	.LVL10:
 288              		.cfi_endproc
 289              	.LFE282:
 291              		.text
 292              	.Letext0:
 293              		.file 6 "/usr/arm-none-eabi/include/machine/_default_types.h"
 294              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 295              		.file 8 "./lib/chibios/os/common/ext/ST/STM32F3xx/stm32f303xc.h"
 296              		.file 9 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 297              		.file 10 "./lib/chibios/os/hal/ports/common/ARMCMx/nvic.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_st_lld.c
     /tmp/ccaoMaMT.s:21     .text.st_lld_init:0000000000000000 $t
     /tmp/ccaoMaMT.s:27     .text.st_lld_init:0000000000000000 st_lld_init
     /tmp/ccaoMaMT.s:87     .text.st_lld_init:000000000000003c $d
     /tmp/ccaoMaMT.s:94     .text.st_lld_serve_interrupt:0000000000000000 $t
     /tmp/ccaoMaMT.s:100    .text.st_lld_serve_interrupt:0000000000000000 st_lld_serve_interrupt
     /tmp/ccaoMaMT.s:243    .text.st_lld_serve_interrupt:0000000000000028 $d
     /tmp/ccaoMaMT.s:248    .text.VectorB4:0000000000000000 $t
     /tmp/ccaoMaMT.s:254    .text.VectorB4:0000000000000000 VectorB4

UNDEFINED SYMBOLS
nvicEnableVector
chSysTimerHandlerI
_port_irq_epilogue
