   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 2
  15              		.file	"chschd.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "lib/chibios/os/rt/src/chschd.c"
  20              		.section	.text._scheduler_init,"ax",%progbits
  21              		.align	1
  22              		.global	_scheduler_init
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	_scheduler_init:
  28              	.LFB244:
   1:lib/chibios/os/rt/src/chschd.c **** /*
   2:lib/chibios/os/rt/src/chschd.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chschd.c **** 
   4:lib/chibios/os/rt/src/chschd.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chschd.c **** 
   6:lib/chibios/os/rt/src/chschd.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chschd.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chschd.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chschd.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chschd.c **** 
  11:lib/chibios/os/rt/src/chschd.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chschd.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chschd.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chschd.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chschd.c **** 
  16:lib/chibios/os/rt/src/chschd.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chschd.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chschd.c **** */
  19:lib/chibios/os/rt/src/chschd.c **** 
  20:lib/chibios/os/rt/src/chschd.c **** /**
  21:lib/chibios/os/rt/src/chschd.c ****  * @file    rt/src/chschd.c
  22:lib/chibios/os/rt/src/chschd.c ****  * @brief   Scheduler code.
  23:lib/chibios/os/rt/src/chschd.c ****  *
  24:lib/chibios/os/rt/src/chschd.c ****  * @addtogroup scheduler
  25:lib/chibios/os/rt/src/chschd.c ****  * @details This module provides the default portable scheduler code.
  26:lib/chibios/os/rt/src/chschd.c ****  * @{
  27:lib/chibios/os/rt/src/chschd.c ****  */
  28:lib/chibios/os/rt/src/chschd.c **** 
  29:lib/chibios/os/rt/src/chschd.c **** #include "ch.h"
  30:lib/chibios/os/rt/src/chschd.c **** 
  31:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  32:lib/chibios/os/rt/src/chschd.c **** /* Module local definitions.                                                 */
  33:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  34:lib/chibios/os/rt/src/chschd.c **** 
  35:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  36:lib/chibios/os/rt/src/chschd.c **** /* Module exported variables.                                                */
  37:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  38:lib/chibios/os/rt/src/chschd.c **** 
  39:lib/chibios/os/rt/src/chschd.c **** /**
  40:lib/chibios/os/rt/src/chschd.c ****  * @brief   System data structures.
  41:lib/chibios/os/rt/src/chschd.c ****  */
  42:lib/chibios/os/rt/src/chschd.c **** ch_system_t ch;
  43:lib/chibios/os/rt/src/chschd.c **** 
  44:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  45:lib/chibios/os/rt/src/chschd.c **** /* Module local types.                                                       */
  46:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  47:lib/chibios/os/rt/src/chschd.c **** 
  48:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  49:lib/chibios/os/rt/src/chschd.c **** /* Module local variables.                                                   */
  50:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  51:lib/chibios/os/rt/src/chschd.c **** 
  52:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  53:lib/chibios/os/rt/src/chschd.c **** /* Module local functions.                                                   */
  54:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  55:lib/chibios/os/rt/src/chschd.c **** 
  56:lib/chibios/os/rt/src/chschd.c **** /*
  57:lib/chibios/os/rt/src/chschd.c ****  * Timeout wakeup callback.
  58:lib/chibios/os/rt/src/chschd.c ****  */
  59:lib/chibios/os/rt/src/chschd.c **** static void wakeup(void *p) {
  60:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = (thread_t *)p;
  61:lib/chibios/os/rt/src/chschd.c **** 
  62:lib/chibios/os/rt/src/chschd.c ****   chSysLockFromISR();
  63:lib/chibios/os/rt/src/chschd.c ****   switch (tp->state) {
  64:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_READY:
  65:lib/chibios/os/rt/src/chschd.c ****     /* Handling the special case where the thread has been made ready by
  66:lib/chibios/os/rt/src/chschd.c ****        another thread with higher priority.*/
  67:lib/chibios/os/rt/src/chschd.c ****     chSysUnlockFromISR();
  68:lib/chibios/os/rt/src/chschd.c ****     return;
  69:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_SUSPENDED:
  70:lib/chibios/os/rt/src/chschd.c ****     *tp->u.wttrp = NULL;
  71:lib/chibios/os/rt/src/chschd.c ****     break;
  72:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_USE_SEMAPHORES == TRUE
  73:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_WTSEM:
  74:lib/chibios/os/rt/src/chschd.c ****     chSemFastSignalI(tp->u.wtsemp);
  75:lib/chibios/os/rt/src/chschd.c **** #endif
  76:lib/chibios/os/rt/src/chschd.c ****     /* Falls through.*/
  77:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_QUEUED:
  78:lib/chibios/os/rt/src/chschd.c ****     /* Falls through.*/
  79:lib/chibios/os/rt/src/chschd.c **** #if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  80:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_WTCOND:
  81:lib/chibios/os/rt/src/chschd.c **** #endif
  82:lib/chibios/os/rt/src/chschd.c ****     /* States requiring dequeuing.*/
  83:lib/chibios/os/rt/src/chschd.c ****     (void) ch_queue_dequeue(&tp->hdr.queue);
  84:lib/chibios/os/rt/src/chschd.c ****     break;
  85:lib/chibios/os/rt/src/chschd.c ****   default:
  86:lib/chibios/os/rt/src/chschd.c ****     /* Any other state, nothing to do.*/
  87:lib/chibios/os/rt/src/chschd.c ****     break;
  88:lib/chibios/os/rt/src/chschd.c ****   }
  89:lib/chibios/os/rt/src/chschd.c ****   tp->u.rdymsg = MSG_TIMEOUT;
  90:lib/chibios/os/rt/src/chschd.c ****   (void) chSchReadyI(tp);
  91:lib/chibios/os/rt/src/chschd.c ****   chSysUnlockFromISR();
  92:lib/chibios/os/rt/src/chschd.c **** }
  93:lib/chibios/os/rt/src/chschd.c **** 
  94:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  95:lib/chibios/os/rt/src/chschd.c **** /* Module exported functions.                                                */
  96:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  97:lib/chibios/os/rt/src/chschd.c **** 
  98:lib/chibios/os/rt/src/chschd.c **** #if (CH_CFG_OPTIMIZE_SPEED == FALSE) || defined(__DOXYGEN__)
  99:lib/chibios/os/rt/src/chschd.c **** /**
 100:lib/chibios/os/rt/src/chschd.c ****  * @brief   Inserts a thread into a priority ordered queue.
 101:lib/chibios/os/rt/src/chschd.c ****  * @note    The insertion is done by scanning the list from the highest
 102:lib/chibios/os/rt/src/chschd.c ****  *          priority toward the lowest.
 103:lib/chibios/os/rt/src/chschd.c ****  *
 104:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the pointer to the thread to be inserted in the list
 105:lib/chibios/os/rt/src/chschd.c ****  * @param[in] qp        the pointer to the threads list header
 106:lib/chibios/os/rt/src/chschd.c ****  *
 107:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 108:lib/chibios/os/rt/src/chschd.c ****  */
 109:lib/chibios/os/rt/src/chschd.c **** void ch_sch_prio_insert(ch_queue_t *tp, ch_queue_t *qp) {
 110:lib/chibios/os/rt/src/chschd.c **** 
 111:lib/chibios/os/rt/src/chschd.c ****   ch_queue_t *cp = qp;
 112:lib/chibios/os/rt/src/chschd.c ****   do {
 113:lib/chibios/os/rt/src/chschd.c ****     cp = cp->next;
 114:lib/chibios/os/rt/src/chschd.c ****   } while ((cp != qp) &&
 115:lib/chibios/os/rt/src/chschd.c ****            (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
 116:lib/chibios/os/rt/src/chschd.c ****   tp->next       = cp;
 117:lib/chibios/os/rt/src/chschd.c ****   tp->prev       = cp->prev;
 118:lib/chibios/os/rt/src/chschd.c ****   tp->prev->next = tp;
 119:lib/chibios/os/rt/src/chschd.c ****   cp->prev       = tp;
 120:lib/chibios/os/rt/src/chschd.c **** }
 121:lib/chibios/os/rt/src/chschd.c **** #endif /* CH_CFG_OPTIMIZE_SPEED */
 122:lib/chibios/os/rt/src/chschd.c **** 
 123:lib/chibios/os/rt/src/chschd.c **** /**
 124:lib/chibios/os/rt/src/chschd.c ****  * @brief   Scheduler initialization.
 125:lib/chibios/os/rt/src/chschd.c ****  *
 126:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 127:lib/chibios/os/rt/src/chschd.c ****  */
 128:lib/chibios/os/rt/src/chschd.c **** void _scheduler_init(void) {
  29              		.loc 1 128 28 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 129:lib/chibios/os/rt/src/chschd.c **** 
 130:lib/chibios/os/rt/src/chschd.c ****   ch_pqueue_init(&ch.rlist.pqueue);
  34              		.loc 1 130 3 view .LVU1
  35              	.LVL0:
  36              	.LBB57:
  37              	.LBI57:
  38              		.file 2 "./lib/chibios/os/rt/include/chlists.h"
   1:./lib/chibios/os/rt/include/chlists.h **** /*
   2:./lib/chibios/os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chlists.h **** 
   4:./lib/chibios/os/rt/include/chlists.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chlists.h **** 
   6:./lib/chibios/os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chlists.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chlists.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chlists.h **** 
  11:./lib/chibios/os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chlists.h **** 
  16:./lib/chibios/os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chlists.h **** */
  19:./lib/chibios/os/rt/include/chlists.h **** 
  20:./lib/chibios/os/rt/include/chlists.h **** /**
  21:./lib/chibios/os/rt/include/chlists.h ****  * @file    chlists.h
  22:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:./lib/chibios/os/rt/include/chlists.h ****  *
  24:./lib/chibios/os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:./lib/chibios/os/rt/include/chlists.h ****  * @{
  26:./lib/chibios/os/rt/include/chlists.h ****  */
  27:./lib/chibios/os/rt/include/chlists.h **** 
  28:./lib/chibios/os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:./lib/chibios/os/rt/include/chlists.h **** #define CHLISTS_H
  30:./lib/chibios/os/rt/include/chlists.h **** 
  31:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chlists.h **** 
  35:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chlists.h **** 
  39:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chlists.h **** 
  43:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  44:./lib/chibios/os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  46:./lib/chibios/os/rt/include/chlists.h **** 
  47:./lib/chibios/os/rt/include/chlists.h **** /**
  48:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:./lib/chibios/os/rt/include/chlists.h ****  */
  50:./lib/chibios/os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:./lib/chibios/os/rt/include/chlists.h **** 
  52:./lib/chibios/os/rt/include/chlists.h **** /**
  53:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:./lib/chibios/os/rt/include/chlists.h ****  *          and element.
  55:./lib/chibios/os/rt/include/chlists.h ****  */
  56:./lib/chibios/os/rt/include/chlists.h **** struct ch_list {
  57:./lib/chibios/os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:./lib/chibios/os/rt/include/chlists.h **** };
  59:./lib/chibios/os/rt/include/chlists.h **** 
  60:./lib/chibios/os/rt/include/chlists.h **** /**
  61:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:./lib/chibios/os/rt/include/chlists.h ****  */
  63:./lib/chibios/os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:./lib/chibios/os/rt/include/chlists.h **** 
  65:./lib/chibios/os/rt/include/chlists.h **** /**
  66:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:./lib/chibios/os/rt/include/chlists.h ****  *          and element.
  68:./lib/chibios/os/rt/include/chlists.h ****  */
  69:./lib/chibios/os/rt/include/chlists.h **** struct ch_queue {
  70:./lib/chibios/os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:./lib/chibios/os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:./lib/chibios/os/rt/include/chlists.h **** };
  73:./lib/chibios/os/rt/include/chlists.h **** 
  74:./lib/chibios/os/rt/include/chlists.h **** /**
  75:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:./lib/chibios/os/rt/include/chlists.h ****  *          header and element.
  77:./lib/chibios/os/rt/include/chlists.h ****  */
  78:./lib/chibios/os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:./lib/chibios/os/rt/include/chlists.h **** 
  80:./lib/chibios/os/rt/include/chlists.h **** /**
  81:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:./lib/chibios/os/rt/include/chlists.h ****  *          linked list header and element.
  83:./lib/chibios/os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:./lib/chibios/os/rt/include/chlists.h ****  */
  85:./lib/chibios/os/rt/include/chlists.h **** struct ch_priority_queue {
  86:./lib/chibios/os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the list/queue.     */
  87:./lib/chibios/os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:./lib/chibios/os/rt/include/chlists.h ****   tprio_t               prio;
  89:./lib/chibios/os/rt/include/chlists.h **** };
  90:./lib/chibios/os/rt/include/chlists.h **** 
  91:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  92:./lib/chibios/os/rt/include/chlists.h **** /* Module macros.                                                            */
  93:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
  94:./lib/chibios/os/rt/include/chlists.h **** 
  95:./lib/chibios/os/rt/include/chlists.h **** /**
  96:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
  97:./lib/chibios/os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
  98:./lib/chibios/os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
  99:./lib/chibios/os/rt/include/chlists.h ****  *
 100:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 101:./lib/chibios/os/rt/include/chlists.h ****  */
 102:./lib/chibios/os/rt/include/chlists.h **** #define _CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 103:./lib/chibios/os/rt/include/chlists.h **** 
 104:./lib/chibios/os/rt/include/chlists.h **** /**
 105:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 106:./lib/chibios/os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 107:./lib/chibios/os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 108:./lib/chibios/os/rt/include/chlists.h ****  *
 109:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 110:./lib/chibios/os/rt/include/chlists.h ****  */
 111:./lib/chibios/os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 112:./lib/chibios/os/rt/include/chlists.h ****     ch_queue_t name = _CH_QUEUE_DATA(name)
 113:./lib/chibios/os/rt/include/chlists.h **** 
 114:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
 115:./lib/chibios/os/rt/include/chlists.h **** /* External declarations.                                                    */
 116:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
 117:./lib/chibios/os/rt/include/chlists.h **** 
 118:./lib/chibios/os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 119:./lib/chibios/os/rt/include/chlists.h **** #ifdef __cplusplus
 120:./lib/chibios/os/rt/include/chlists.h **** extern "C" {
 121:./lib/chibios/os/rt/include/chlists.h **** #endif
 122:./lib/chibios/os/rt/include/chlists.h **** 
 123:./lib/chibios/os/rt/include/chlists.h **** #ifdef __cplusplus
 124:./lib/chibios/os/rt/include/chlists.h **** }
 125:./lib/chibios/os/rt/include/chlists.h **** #endif
 126:./lib/chibios/os/rt/include/chlists.h **** 
 127:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
 128:./lib/chibios/os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 129:./lib/chibios/os/rt/include/chlists.h **** /*===========================================================================*/
 130:./lib/chibios/os/rt/include/chlists.h **** 
 131:./lib/chibios/os/rt/include/chlists.h **** /**
 132:./lib/chibios/os/rt/include/chlists.h ****  * @brief   List initialization.
 133:./lib/chibios/os/rt/include/chlists.h ****  *
 134:./lib/chibios/os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 135:./lib/chibios/os/rt/include/chlists.h ****  *
 136:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 137:./lib/chibios/os/rt/include/chlists.h ****  */
 138:./lib/chibios/os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 139:./lib/chibios/os/rt/include/chlists.h **** 
 140:./lib/chibios/os/rt/include/chlists.h ****   lp->next = lp;
 141:./lib/chibios/os/rt/include/chlists.h **** }
 142:./lib/chibios/os/rt/include/chlists.h **** 
 143:./lib/chibios/os/rt/include/chlists.h **** /**
 144:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 145:./lib/chibios/os/rt/include/chlists.h ****  *
 146:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 147:./lib/chibios/os/rt/include/chlists.h ****  * @return              The status of the list.
 148:./lib/chibios/os/rt/include/chlists.h ****  *
 149:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 150:./lib/chibios/os/rt/include/chlists.h ****  */
 151:./lib/chibios/os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 152:./lib/chibios/os/rt/include/chlists.h **** 
 153:./lib/chibios/os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 154:./lib/chibios/os/rt/include/chlists.h **** }
 155:./lib/chibios/os/rt/include/chlists.h **** 
 156:./lib/chibios/os/rt/include/chlists.h **** /**
 157:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 158:./lib/chibios/os/rt/include/chlists.h ****  *
 159:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 160:./lib/chibios/os/rt/include/chlists.h ****  * @return              The status of the list.
 161:./lib/chibios/os/rt/include/chlists.h ****  *
 162:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 163:./lib/chibios/os/rt/include/chlists.h ****  */
 164:./lib/chibios/os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 165:./lib/chibios/os/rt/include/chlists.h **** 
 166:./lib/chibios/os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 167:./lib/chibios/os/rt/include/chlists.h **** }
 168:./lib/chibios/os/rt/include/chlists.h **** 
 169:./lib/chibios/os/rt/include/chlists.h **** /**
 170:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 171:./lib/chibios/os/rt/include/chlists.h ****  *
 172:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 173:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 174:./lib/chibios/os/rt/include/chlists.h ****  *
 175:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 176:./lib/chibios/os/rt/include/chlists.h ****  */
 177:./lib/chibios/os/rt/include/chlists.h **** static inline void ch_list_push(ch_list_t *p, ch_list_t *lp) {
 178:./lib/chibios/os/rt/include/chlists.h **** 
 179:./lib/chibios/os/rt/include/chlists.h ****   p->next = lp->next;
 180:./lib/chibios/os/rt/include/chlists.h ****   lp->next = p;
 181:./lib/chibios/os/rt/include/chlists.h **** }
 182:./lib/chibios/os/rt/include/chlists.h **** 
 183:./lib/chibios/os/rt/include/chlists.h **** /**
 184:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 185:./lib/chibios/os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 186:./lib/chibios/os/rt/include/chlists.h ****  *
 187:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 188:./lib/chibios/os/rt/include/chlists.h ****  * @return              The removed element pointer.
 189:./lib/chibios/os/rt/include/chlists.h ****  *
 190:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 191:./lib/chibios/os/rt/include/chlists.h ****  */
 192:./lib/chibios/os/rt/include/chlists.h **** static inline ch_list_t *ch_list_pop(ch_list_t *lp) {
 193:./lib/chibios/os/rt/include/chlists.h **** 
 194:./lib/chibios/os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 195:./lib/chibios/os/rt/include/chlists.h ****   lp->next = p->next;
 196:./lib/chibios/os/rt/include/chlists.h **** 
 197:./lib/chibios/os/rt/include/chlists.h ****   return p;
 198:./lib/chibios/os/rt/include/chlists.h **** }
 199:./lib/chibios/os/rt/include/chlists.h **** 
 200:./lib/chibios/os/rt/include/chlists.h **** /**
 201:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Queue initialization.
 202:./lib/chibios/os/rt/include/chlists.h ****  *
 203:./lib/chibios/os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 204:./lib/chibios/os/rt/include/chlists.h ****  *
 205:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 206:./lib/chibios/os/rt/include/chlists.h ****  */
 207:./lib/chibios/os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 208:./lib/chibios/os/rt/include/chlists.h **** 
 209:./lib/chibios/os/rt/include/chlists.h ****   qp->next = qp;
 210:./lib/chibios/os/rt/include/chlists.h ****   qp->prev = qp;
 211:./lib/chibios/os/rt/include/chlists.h **** }
 212:./lib/chibios/os/rt/include/chlists.h **** 
 213:./lib/chibios/os/rt/include/chlists.h **** /**
 214:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 215:./lib/chibios/os/rt/include/chlists.h ****  *
 216:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 217:./lib/chibios/os/rt/include/chlists.h ****  * @return              The status of the queue.
 218:./lib/chibios/os/rt/include/chlists.h ****  *
 219:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 220:./lib/chibios/os/rt/include/chlists.h ****  */
 221:./lib/chibios/os/rt/include/chlists.h **** static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 222:./lib/chibios/os/rt/include/chlists.h **** 
 223:./lib/chibios/os/rt/include/chlists.h ****   return (bool)(qp->next == qp);
 224:./lib/chibios/os/rt/include/chlists.h **** }
 225:./lib/chibios/os/rt/include/chlists.h **** 
 226:./lib/chibios/os/rt/include/chlists.h **** /**
 227:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 228:./lib/chibios/os/rt/include/chlists.h ****  *
 229:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 230:./lib/chibios/os/rt/include/chlists.h ****  * @return              The status of the queue.
 231:./lib/chibios/os/rt/include/chlists.h ****  *
 232:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 233:./lib/chibios/os/rt/include/chlists.h ****  */
 234:./lib/chibios/os/rt/include/chlists.h **** static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 235:./lib/chibios/os/rt/include/chlists.h **** 
 236:./lib/chibios/os/rt/include/chlists.h ****   return (bool)(qp->next != qp);
 237:./lib/chibios/os/rt/include/chlists.h **** }
 238:./lib/chibios/os/rt/include/chlists.h **** 
 239:./lib/chibios/os/rt/include/chlists.h **** /**
 240:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Inserts an element into a queue.
 241:./lib/chibios/os/rt/include/chlists.h ****  *
 242:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 243:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue header
 244:./lib/chibios/os/rt/include/chlists.h ****  *
 245:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 246:./lib/chibios/os/rt/include/chlists.h ****  */
 247:./lib/chibios/os/rt/include/chlists.h **** static inline void ch_queue_insert(ch_queue_t *p, ch_queue_t *qp) {
 248:./lib/chibios/os/rt/include/chlists.h **** 
 249:./lib/chibios/os/rt/include/chlists.h ****   p->next       = qp;
 250:./lib/chibios/os/rt/include/chlists.h ****   p->prev       = qp->prev;
 251:./lib/chibios/os/rt/include/chlists.h ****   p->prev->next = p;
 252:./lib/chibios/os/rt/include/chlists.h ****   qp->prev      = p;
 253:./lib/chibios/os/rt/include/chlists.h **** }
 254:./lib/chibios/os/rt/include/chlists.h **** 
 255:./lib/chibios/os/rt/include/chlists.h **** /**
 256:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Removes the first-out element from a queue and returns it.
 257:./lib/chibios/os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 258:./lib/chibios/os/rt/include/chlists.h ****  *          element with the highest priority.
 259:./lib/chibios/os/rt/include/chlists.h ****  *
 260:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue list header
 261:./lib/chibios/os/rt/include/chlists.h ****  * @return              The removed element pointer.
 262:./lib/chibios/os/rt/include/chlists.h ****  *
 263:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 264:./lib/chibios/os/rt/include/chlists.h ****  */
 265:./lib/chibios/os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 266:./lib/chibios/os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 267:./lib/chibios/os/rt/include/chlists.h **** 
 268:./lib/chibios/os/rt/include/chlists.h ****   qp->next       = p->next;
 269:./lib/chibios/os/rt/include/chlists.h ****   qp->next->prev = qp;
 270:./lib/chibios/os/rt/include/chlists.h **** 
 271:./lib/chibios/os/rt/include/chlists.h ****   return p;
 272:./lib/chibios/os/rt/include/chlists.h **** }
 273:./lib/chibios/os/rt/include/chlists.h **** 
 274:./lib/chibios/os/rt/include/chlists.h **** /**
 275:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Removes the last-out element from a queue and returns it.
 276:./lib/chibios/os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 277:./lib/chibios/os/rt/include/chlists.h ****  *          element with the lowest priority.
 278:./lib/chibios/os/rt/include/chlists.h ****  *
 279:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] qp    the pointer to the queue list header
 280:./lib/chibios/os/rt/include/chlists.h ****  * @return          The removed element pointer.
 281:./lib/chibios/os/rt/include/chlists.h ****  *
 282:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 283:./lib/chibios/os/rt/include/chlists.h ****  */
 284:./lib/chibios/os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_lifo_remove(ch_queue_t *qp) {
 285:./lib/chibios/os/rt/include/chlists.h ****   ch_queue_t *p = qp->prev;
 286:./lib/chibios/os/rt/include/chlists.h **** 
 287:./lib/chibios/os/rt/include/chlists.h ****   qp->prev       = p->prev;
 288:./lib/chibios/os/rt/include/chlists.h ****   qp->prev->next = qp;
 289:./lib/chibios/os/rt/include/chlists.h **** 
 290:./lib/chibios/os/rt/include/chlists.h ****   return p;
 291:./lib/chibios/os/rt/include/chlists.h **** }
 292:./lib/chibios/os/rt/include/chlists.h **** 
 293:./lib/chibios/os/rt/include/chlists.h **** /**
 294:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Removes an element from a queue and returns it.
 295:./lib/chibios/os/rt/include/chlists.h ****  * @details The element is removed from the queue regardless of its relative
 296:./lib/chibios/os/rt/include/chlists.h ****  *          position and regardless the used insertion method.
 297:./lib/chibios/os/rt/include/chlists.h ****  *
 298:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be removed from the queue
 299:./lib/chibios/os/rt/include/chlists.h ****  * @return              The removed element pointer.
 300:./lib/chibios/os/rt/include/chlists.h ****  *
 301:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 302:./lib/chibios/os/rt/include/chlists.h ****  */
 303:./lib/chibios/os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 304:./lib/chibios/os/rt/include/chlists.h **** 
 305:./lib/chibios/os/rt/include/chlists.h ****   p->prev->next = p->next;
 306:./lib/chibios/os/rt/include/chlists.h ****   p->next->prev = p->prev;
 307:./lib/chibios/os/rt/include/chlists.h **** 
 308:./lib/chibios/os/rt/include/chlists.h ****   return p;
 309:./lib/chibios/os/rt/include/chlists.h **** }
 310:./lib/chibios/os/rt/include/chlists.h **** 
 311:./lib/chibios/os/rt/include/chlists.h **** /**
 312:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Priority queue initialization.
 313:./lib/chibios/os/rt/include/chlists.h ****  * @note    The queue header priority is initialized to zero, all other
 314:./lib/chibios/os/rt/include/chlists.h ****  *          elements in the queue are assumed to have priority greater
 315:./lib/chibios/os/rt/include/chlists.h ****  *          than zero.
 316:./lib/chibios/os/rt/include/chlists.h ****  *
 317:./lib/chibios/os/rt/include/chlists.h ****  * @param[out] pqp      pointer to the priority queue header
 318:./lib/chibios/os/rt/include/chlists.h ****  *
 319:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 320:./lib/chibios/os/rt/include/chlists.h ****  */
 321:./lib/chibios/os/rt/include/chlists.h **** static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {
  39              		.loc 2 321 20 view .LVU2
  40              	.LBB58:
 322:./lib/chibios/os/rt/include/chlists.h **** 
 323:./lib/chibios/os/rt/include/chlists.h ****   pqp->next = pqp;
  41              		.loc 2 323 3 view .LVU3
  42              		.loc 2 323 13 is_stmt 0 view .LVU4
  43 0000 024B     		ldr	r3, .L2
 324:./lib/chibios/os/rt/include/chlists.h ****   pqp->prev = pqp;
 325:./lib/chibios/os/rt/include/chlists.h ****   pqp->prio = (tprio_t)0;
  44              		.loc 2 325 13 view .LVU5
  45 0002 0022     		movs	r2, #0
 324:./lib/chibios/os/rt/include/chlists.h ****   pqp->prev = pqp;
  46              		.loc 2 324 13 view .LVU6
  47 0004 C3E90033 		strd	r3, r3, [r3]
  48              		.loc 2 325 3 is_stmt 1 view .LVU7
  49              		.loc 2 325 13 is_stmt 0 view .LVU8
  50 0008 9A60     		str	r2, [r3, #8]
  51              	.LVL1:
  52              		.loc 2 325 13 view .LVU9
  53              	.LBE58:
  54              	.LBE57:
 131:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_USE_REGISTRY == TRUE
 132:lib/chibios/os/rt/src/chschd.c ****   ch.rlist.newer = (thread_t *)&ch.rlist;
 133:lib/chibios/os/rt/src/chschd.c ****   ch.rlist.older = (thread_t *)&ch.rlist;
 134:lib/chibios/os/rt/src/chschd.c **** #endif
 135:lib/chibios/os/rt/src/chschd.c **** }
  55              		.loc 1 135 1 view .LVU10
  56 000a 7047     		bx	lr
  57              	.L3:
  58              		.align	2
  59              	.L2:
  60 000c 00000000 		.word	ch
  61              		.cfi_endproc
  62              	.LFE244:
  64              		.section	.text.chSchReadyI,"ax",%progbits
  65              		.align	1
  66              		.global	chSchReadyI
  67              		.syntax unified
  68              		.thumb
  69              		.thumb_func
  71              	chSchReadyI:
  72              	.LVL2:
  73              	.LFB245:
 136:lib/chibios/os/rt/src/chschd.c **** 
 137:lib/chibios/os/rt/src/chschd.c **** /**
 138:lib/chibios/os/rt/src/chschd.c ****  * @brief   Inserts a thread in the Ready List placing it behind its peers.
 139:lib/chibios/os/rt/src/chschd.c ****  * @details The thread is positioned behind all threads with higher or equal
 140:lib/chibios/os/rt/src/chschd.c ****  *          priority.
 141:lib/chibios/os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 142:lib/chibios/os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 143:lib/chibios/os/rt/src/chschd.c ****  * @post    This function does not reschedule so a call to a rescheduling
 144:lib/chibios/os/rt/src/chschd.c ****  *          function must be performed before unlocking the kernel. Note that
 145:lib/chibios/os/rt/src/chschd.c ****  *          interrupt handlers always reschedule on exit so an explicit
 146:lib/chibios/os/rt/src/chschd.c ****  *          reschedule must not be performed in ISRs.
 147:lib/chibios/os/rt/src/chschd.c ****  *
 148:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the thread to be made ready
 149:lib/chibios/os/rt/src/chschd.c ****  * @return              The thread pointer.
 150:lib/chibios/os/rt/src/chschd.c ****  *
 151:lib/chibios/os/rt/src/chschd.c ****  * @iclass
 152:lib/chibios/os/rt/src/chschd.c ****  */
 153:lib/chibios/os/rt/src/chschd.c **** thread_t *chSchReadyI(thread_t *tp) {
  74              		.loc 1 153 37 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
 154:lib/chibios/os/rt/src/chschd.c **** 
 155:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassI();
  79              		.loc 1 155 21 view .LVU12
 156:lib/chibios/os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
  80              		.loc 1 156 3 view .LVU13
  81              		.loc 1 156 3 view .LVU14
  82              		.loc 1 156 3 view .LVU15
 157:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
  83              		.loc 1 157 3 view .LVU16
  84              		.loc 1 157 3 view .LVU17
  85              		.loc 1 157 3 view .LVU18
 158:lib/chibios/os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 159:lib/chibios/os/rt/src/chschd.c ****               "invalid state");
 160:lib/chibios/os/rt/src/chschd.c **** 
 161:lib/chibios/os/rt/src/chschd.c ****   /* The thread is marked ready.*/
 162:lib/chibios/os/rt/src/chschd.c ****   tp->state = CH_STATE_READY;
  86              		.loc 1 162 3 view .LVU19
  87              		.loc 1 162 13 is_stmt 0 view .LVU20
  88 0000 0023     		movs	r3, #0
  89 0002 0374     		strb	r3, [r0, #16]
 163:lib/chibios/os/rt/src/chschd.c **** 
 164:lib/chibios/os/rt/src/chschd.c ****   /* Insertion in the priority queue.*/
 165:lib/chibios/os/rt/src/chschd.c ****   return (thread_t *)ch_pqueue_insert_behind(&ch.rlist.pqueue,
  90              		.loc 1 165 3 is_stmt 1 view .LVU21
  91              	.LVL3:
  92              	.LBB61:
  93              	.LBI61:
 326:./lib/chibios/os/rt/include/chlists.h **** }
 327:./lib/chibios/os/rt/include/chlists.h **** 
 328:./lib/chibios/os/rt/include/chlists.h **** /**
 329:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Removes the highest priority element from a priority queue and
 330:./lib/chibios/os/rt/include/chlists.h ****  *          returns it.
 331:./lib/chibios/os/rt/include/chlists.h ****  *
 332:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 333:./lib/chibios/os/rt/include/chlists.h ****  * @return              The removed element pointer.
 334:./lib/chibios/os/rt/include/chlists.h ****  *
 335:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 336:./lib/chibios/os/rt/include/chlists.h ****  */
 337:./lib/chibios/os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
 338:./lib/chibios/os/rt/include/chlists.h ****   ch_priority_queue_t *p = pqp->next;
 339:./lib/chibios/os/rt/include/chlists.h **** 
 340:./lib/chibios/os/rt/include/chlists.h ****   pqp->next       = p->next;
 341:./lib/chibios/os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 342:./lib/chibios/os/rt/include/chlists.h **** 
 343:./lib/chibios/os/rt/include/chlists.h ****   return p;
 344:./lib/chibios/os/rt/include/chlists.h **** }
 345:./lib/chibios/os/rt/include/chlists.h **** 
 346:./lib/chibios/os/rt/include/chlists.h **** /**
 347:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Inserts an element in the priority queue placing it behind
 348:./lib/chibios/os/rt/include/chlists.h ****  *          its peers.
 349:./lib/chibios/os/rt/include/chlists.h ****  * @details The element is positioned behind all elements with higher or
 350:./lib/chibios/os/rt/include/chlists.h ****  *          equal priority.
 351:./lib/chibios/os/rt/include/chlists.h ****  *
 352:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 353:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 354:./lib/chibios/os/rt/include/chlists.h ****  * @return              The inserted element pointer.
 355:./lib/chibios/os/rt/include/chlists.h ****  *
 356:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 357:./lib/chibios/os/rt/include/chlists.h ****  */
 358:./lib/chibios/os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_insert_behind(ch_priority_queue_t *pqp,
  94              		.loc 2 358 36 view .LVU22
  95              	.LBB62:
 359:./lib/chibios/os/rt/include/chlists.h ****                                                            ch_priority_queue_t *p) {
 360:./lib/chibios/os/rt/include/chlists.h **** 
 361:./lib/chibios/os/rt/include/chlists.h ****   /* Scanning priority queue.*/
 362:./lib/chibios/os/rt/include/chlists.h ****   do {
 363:./lib/chibios/os/rt/include/chlists.h ****     pqp = pqp->next;
 364:./lib/chibios/os/rt/include/chlists.h ****   } while (pqp->prio >= p->prio);
  96              		.loc 2 364 26 is_stmt 0 view .LVU23
  97 0004 8268     		ldr	r2, [r0, #8]
  98 0006 054B     		ldr	r3, .L7
  99              	.LVL4:
 100              	.L5:
 362:./lib/chibios/os/rt/include/chlists.h ****     pqp = pqp->next;
 101              		.loc 2 362 3 is_stmt 1 view .LVU24
 363:./lib/chibios/os/rt/include/chlists.h ****   } while (pqp->prio >= p->prio);
 102              		.loc 2 363 5 view .LVU25
 363:./lib/chibios/os/rt/include/chlists.h ****   } while (pqp->prio >= p->prio);
 103              		.loc 2 363 9 is_stmt 0 view .LVU26
 104 0008 1B68     		ldr	r3, [r3]
 105              	.LVL5:
 106              		.loc 2 364 22 is_stmt 1 view .LVU27
 107 000a 9968     		ldr	r1, [r3, #8]
 108 000c 9142     		cmp	r1, r2
 109 000e FBD2     		bcs	.L5
 365:./lib/chibios/os/rt/include/chlists.h **** 
 366:./lib/chibios/os/rt/include/chlists.h ****   /* Insertion on prev.*/
 367:./lib/chibios/os/rt/include/chlists.h ****   p->next       = pqp;
 110              		.loc 2 367 3 view .LVU28
 368:./lib/chibios/os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 111              		.loc 2 368 22 is_stmt 0 view .LVU29
 112 0010 5A68     		ldr	r2, [r3, #4]
 367:./lib/chibios/os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 113              		.loc 2 367 17 view .LVU30
 114 0012 0360     		str	r3, [r0]
 115              		.loc 2 368 3 is_stmt 1 view .LVU31
 116              		.loc 2 368 17 is_stmt 0 view .LVU32
 117 0014 4260     		str	r2, [r0, #4]
 369:./lib/chibios/os/rt/include/chlists.h ****   p->prev->next = p;
 118              		.loc 2 369 3 is_stmt 1 view .LVU33
 119              		.loc 2 369 17 is_stmt 0 view .LVU34
 120 0016 1060     		str	r0, [r2]
 370:./lib/chibios/os/rt/include/chlists.h ****   pqp->prev     = p;
 121              		.loc 2 370 3 is_stmt 1 view .LVU35
 122              		.loc 2 370 17 is_stmt 0 view .LVU36
 123 0018 5860     		str	r0, [r3, #4]
 371:./lib/chibios/os/rt/include/chlists.h **** 
 372:./lib/chibios/os/rt/include/chlists.h ****   return p;
 124              		.loc 2 372 3 is_stmt 1 view .LVU37
 125              	.LVL6:
 126              		.loc 2 372 3 is_stmt 0 view .LVU38
 127              	.LBE62:
 128              	.LBE61:
 166:lib/chibios/os/rt/src/chschd.c ****                                              &tp->hdr.pqueue);
 167:lib/chibios/os/rt/src/chschd.c **** }
 129              		.loc 1 167 1 view .LVU39
 130 001a 7047     		bx	lr
 131              	.L8:
 132              		.align	2
 133              	.L7:
 134 001c 00000000 		.word	ch
 135              		.cfi_endproc
 136              	.LFE245:
 138              		.section	.text.wakeup,"ax",%progbits
 139              		.align	1
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 144              	wakeup:
 145              	.LVL7:
 146              	.LFB243:
  59:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = (thread_t *)p;
 147              		.loc 1 59 29 is_stmt 1 view -0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
  60:lib/chibios/os/rt/src/chschd.c **** 
 151              		.loc 1 60 3 view .LVU41
  62:lib/chibios/os/rt/src/chschd.c ****   switch (tp->state) {
 152              		.loc 1 62 3 view .LVU42
 153              	.LBB84:
 154              	.LBI84:
 155              		.file 3 "./lib/chibios/os/rt/include/chsys.h"
   1:./lib/chibios/os/rt/include/chsys.h **** /*
   2:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsys.h **** 
   4:./lib/chibios/os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsys.h **** 
   6:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsys.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsys.h **** 
  11:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsys.h **** 
  16:./lib/chibios/os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsys.h **** */
  19:./lib/chibios/os/rt/include/chsys.h **** 
  20:./lib/chibios/os/rt/include/chsys.h **** /**
  21:./lib/chibios/os/rt/include/chsys.h ****  * @file    rt/include/chsys.h
  22:./lib/chibios/os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:./lib/chibios/os/rt/include/chsys.h ****  *
  24:./lib/chibios/os/rt/include/chsys.h ****  * @addtogroup system
  25:./lib/chibios/os/rt/include/chsys.h ****  * @{
  26:./lib/chibios/os/rt/include/chsys.h ****  */
  27:./lib/chibios/os/rt/include/chsys.h **** 
  28:./lib/chibios/os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:./lib/chibios/os/rt/include/chsys.h **** #define CHSYS_H
  30:./lib/chibios/os/rt/include/chsys.h **** 
  31:./lib/chibios/os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:./lib/chibios/os/rt/include/chsys.h **** 
  33:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsys.h **** 
  37:./lib/chibios/os/rt/include/chsys.h **** /**
  38:./lib/chibios/os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:./lib/chibios/os/rt/include/chsys.h ****  * @{
  40:./lib/chibios/os/rt/include/chsys.h ****  */
  41:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:./lib/chibios/os/rt/include/chsys.h **** /** @} */
  46:./lib/chibios/os/rt/include/chsys.h **** 
  47:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  50:./lib/chibios/os/rt/include/chsys.h **** 
  51:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  52:./lib/chibios/os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  54:./lib/chibios/os/rt/include/chsys.h **** 
  55:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  56:./lib/chibios/os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  58:./lib/chibios/os/rt/include/chsys.h **** 
  59:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  60:./lib/chibios/os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  62:./lib/chibios/os/rt/include/chsys.h **** 
  63:./lib/chibios/os/rt/include/chsys.h **** /**
  64:./lib/chibios/os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:./lib/chibios/os/rt/include/chsys.h ****  * @{
  66:./lib/chibios/os/rt/include/chsys.h ****  */
  67:./lib/chibios/os/rt/include/chsys.h **** /**
  68:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  69:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  70:./lib/chibios/os/rt/include/chsys.h ****  *          level for the underlying architecture.
  71:./lib/chibios/os/rt/include/chsys.h ****  *
  72:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  73:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  74:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  75:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  76:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  77:./lib/chibios/os/rt/include/chsys.h ****  */
  78:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  79:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  80:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  81:./lib/chibios/os/rt/include/chsys.h **** #else
  82:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  83:./lib/chibios/os/rt/include/chsys.h **** #endif
  84:./lib/chibios/os/rt/include/chsys.h **** 
  85:./lib/chibios/os/rt/include/chsys.h **** /**
  86:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  87:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  88:./lib/chibios/os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  89:./lib/chibios/os/rt/include/chsys.h ****  *
  90:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  91:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  92:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  93:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  94:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  95:./lib/chibios/os/rt/include/chsys.h ****  */
  96:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  97:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  98:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  99:./lib/chibios/os/rt/include/chsys.h **** #else
 100:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 101:./lib/chibios/os/rt/include/chsys.h **** #endif
 102:./lib/chibios/os/rt/include/chsys.h **** 
 103:./lib/chibios/os/rt/include/chsys.h **** /**
 104:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 105:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 106:./lib/chibios/os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 107:./lib/chibios/os/rt/include/chsys.h ****  *
 108:./lib/chibios/os/rt/include/chsys.h ****  * @special
 109:./lib/chibios/os/rt/include/chsys.h ****  */
 110:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 111:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 112:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 113:./lib/chibios/os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 114:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 115:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 116:./lib/chibios/os/rt/include/chsys.h **** 
 117:./lib/chibios/os/rt/include/chsys.h **** /**
 118:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 119:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 120:./lib/chibios/os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 121:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 122:./lib/chibios/os/rt/include/chsys.h ****  *
 123:./lib/chibios/os/rt/include/chsys.h ****  * @special
 124:./lib/chibios/os/rt/include/chsys.h ****  */
 125:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 126:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 127:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 128:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 129:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 130:./lib/chibios/os/rt/include/chsys.h **** 
 131:./lib/chibios/os/rt/include/chsys.h **** /**
 132:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 133:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 134:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 135:./lib/chibios/os/rt/include/chsys.h ****  *
 136:./lib/chibios/os/rt/include/chsys.h ****  * @special
 137:./lib/chibios/os/rt/include/chsys.h ****  */
 138:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 139:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 140:./lib/chibios/os/rt/include/chsys.h **** 
 141:./lib/chibios/os/rt/include/chsys.h **** /**
 142:./lib/chibios/os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 143:./lib/chibios/os/rt/include/chsys.h ****  * @{
 144:./lib/chibios/os/rt/include/chsys.h ****  */
 145:./lib/chibios/os/rt/include/chsys.h **** /**
 146:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 147:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 148:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 149:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 150:./lib/chibios/os/rt/include/chsys.h ****  *
 151:./lib/chibios/os/rt/include/chsys.h ****  * @special
 152:./lib/chibios/os/rt/include/chsys.h ****  */
 153:./lib/chibios/os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 154:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 155:./lib/chibios/os/rt/include/chsys.h **** 
 156:./lib/chibios/os/rt/include/chsys.h **** /**
 157:./lib/chibios/os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 158:./lib/chibios/os/rt/include/chsys.h ****  * @{
 159:./lib/chibios/os/rt/include/chsys.h ****  */
 160:./lib/chibios/os/rt/include/chsys.h **** /**
 161:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 162:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 163:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 164:./lib/chibios/os/rt/include/chsys.h ****  *
 165:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 166:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 167:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 168:./lib/chibios/os/rt/include/chsys.h ****  *
 169:./lib/chibios/os/rt/include/chsys.h ****  * @api
 170:./lib/chibios/os/rt/include/chsys.h ****  */
 171:./lib/chibios/os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 172:./lib/chibios/os/rt/include/chsys.h **** 
 173:./lib/chibios/os/rt/include/chsys.h **** /**
 174:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 175:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 176:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 177:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 178:./lib/chibios/os/rt/include/chsys.h ****  *
 179:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 180:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 181:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 182:./lib/chibios/os/rt/include/chsys.h ****  *
 183:./lib/chibios/os/rt/include/chsys.h ****  * @api
 184:./lib/chibios/os/rt/include/chsys.h ****  */
 185:./lib/chibios/os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 186:./lib/chibios/os/rt/include/chsys.h **** 
 187:./lib/chibios/os/rt/include/chsys.h **** /**
 188:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 189:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 190:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 191:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 192:./lib/chibios/os/rt/include/chsys.h ****  *
 193:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 194:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 195:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 196:./lib/chibios/os/rt/include/chsys.h ****  *
 197:./lib/chibios/os/rt/include/chsys.h ****  * @api
 198:./lib/chibios/os/rt/include/chsys.h ****  */
 199:./lib/chibios/os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 200:./lib/chibios/os/rt/include/chsys.h **** 
 201:./lib/chibios/os/rt/include/chsys.h **** /**
 202:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 203:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 204:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 205:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 206:./lib/chibios/os/rt/include/chsys.h ****  *
 207:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 208:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 209:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of seconds.
 210:./lib/chibios/os/rt/include/chsys.h ****  *
 211:./lib/chibios/os/rt/include/chsys.h ****  * @api
 212:./lib/chibios/os/rt/include/chsys.h ****  */
 213:./lib/chibios/os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 214:./lib/chibios/os/rt/include/chsys.h **** 
 215:./lib/chibios/os/rt/include/chsys.h **** /**
 216:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 217:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 218:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 219:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 220:./lib/chibios/os/rt/include/chsys.h ****  *
 221:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 222:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 223:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 224:./lib/chibios/os/rt/include/chsys.h ****  *
 225:./lib/chibios/os/rt/include/chsys.h ****  * @api
 226:./lib/chibios/os/rt/include/chsys.h ****  */
 227:./lib/chibios/os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 228:./lib/chibios/os/rt/include/chsys.h **** 
 229:./lib/chibios/os/rt/include/chsys.h **** /**
 230:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 231:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 232:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 233:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 234:./lib/chibios/os/rt/include/chsys.h ****  *
 235:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 236:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 237:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of microseconds.
 238:./lib/chibios/os/rt/include/chsys.h ****  *
 239:./lib/chibios/os/rt/include/chsys.h ****  * @api
 240:./lib/chibios/os/rt/include/chsys.h ****  */
 241:./lib/chibios/os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 242:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 243:./lib/chibios/os/rt/include/chsys.h **** 
 244:./lib/chibios/os/rt/include/chsys.h **** /**
 245:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 246:./lib/chibios/os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 247:./lib/chibios/os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 248:./lib/chibios/os/rt/include/chsys.h ****  *
 249:./lib/chibios/os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 250:./lib/chibios/os/rt/include/chsys.h ****  *                      type rtcnt_t.
 251:./lib/chibios/os/rt/include/chsys.h ****  *
 252:./lib/chibios/os/rt/include/chsys.h ****  * @xclass
 253:./lib/chibios/os/rt/include/chsys.h ****  */
 254:./lib/chibios/os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 255:./lib/chibios/os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 256:./lib/chibios/os/rt/include/chsys.h **** #endif
 257:./lib/chibios/os/rt/include/chsys.h **** 
 258:./lib/chibios/os/rt/include/chsys.h **** /**
 259:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 260:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 261:./lib/chibios/os/rt/include/chsys.h ****  *          itself or from within the port layer.
 262:./lib/chibios/os/rt/include/chsys.h ****  *
 263:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 264:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 265:./lib/chibios/os/rt/include/chsys.h ****  *
 266:./lib/chibios/os/rt/include/chsys.h ****  * @special
 267:./lib/chibios/os/rt/include/chsys.h ****  */
 268:./lib/chibios/os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 269:./lib/chibios/os/rt/include/chsys.h ****                                                                             \
 270:./lib/chibios/os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 271:./lib/chibios/os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 272:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 273:./lib/chibios/os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 274:./lib/chibios/os/rt/include/chsys.h **** }
 275:./lib/chibios/os/rt/include/chsys.h **** 
 276:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chsys.h **** /* External declarations.                                                    */
 278:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 279:./lib/chibios/os/rt/include/chsys.h **** 
 280:./lib/chibios/os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 281:./lib/chibios/os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 282:./lib/chibios/os/rt/include/chsys.h **** #endif
 283:./lib/chibios/os/rt/include/chsys.h **** 
 284:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 285:./lib/chibios/os/rt/include/chsys.h **** extern "C" {
 286:./lib/chibios/os/rt/include/chsys.h **** #endif
 287:./lib/chibios/os/rt/include/chsys.h ****   void chSysInit(void);
 288:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 289:./lib/chibios/os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 290:./lib/chibios/os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 291:./lib/chibios/os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 292:./lib/chibios/os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 293:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 294:./lib/chibios/os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 295:./lib/chibios/os/rt/include/chsys.h **** #endif
 296:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 297:./lib/chibios/os/rt/include/chsys.h **** }
 298:./lib/chibios/os/rt/include/chsys.h **** #endif
 299:./lib/chibios/os/rt/include/chsys.h **** 
 300:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 301:./lib/chibios/os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 302:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 303:./lib/chibios/os/rt/include/chsys.h **** 
 304:./lib/chibios/os/rt/include/chsys.h **** /**
 305:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 306:./lib/chibios/os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 307:./lib/chibios/os/rt/include/chsys.h ****  *          hardware priority.
 308:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 309:./lib/chibios/os/rt/include/chsys.h ****  *
 310:./lib/chibios/os/rt/include/chsys.h ****  * @special
 311:./lib/chibios/os/rt/include/chsys.h ****  */
 312:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 313:./lib/chibios/os/rt/include/chsys.h **** 
 314:./lib/chibios/os/rt/include/chsys.h ****   port_disable();
 315:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_disable();
 316:./lib/chibios/os/rt/include/chsys.h **** }
 317:./lib/chibios/os/rt/include/chsys.h **** 
 318:./lib/chibios/os/rt/include/chsys.h **** /**
 319:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 320:./lib/chibios/os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 321:./lib/chibios/os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 322:./lib/chibios/os/rt/include/chsys.h ****  *          enabled.
 323:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 324:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 325:./lib/chibios/os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 326:./lib/chibios/os/rt/include/chsys.h ****  *
 327:./lib/chibios/os/rt/include/chsys.h ****  * @special
 328:./lib/chibios/os/rt/include/chsys.h ****  */
 329:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 330:./lib/chibios/os/rt/include/chsys.h **** 
 331:./lib/chibios/os/rt/include/chsys.h ****   port_suspend();
 332:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_suspend();
 333:./lib/chibios/os/rt/include/chsys.h **** }
 334:./lib/chibios/os/rt/include/chsys.h **** 
 335:./lib/chibios/os/rt/include/chsys.h **** /**
 336:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 337:./lib/chibios/os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 338:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 339:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 340:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 341:./lib/chibios/os/rt/include/chsys.h ****  *
 342:./lib/chibios/os/rt/include/chsys.h ****  * @special
 343:./lib/chibios/os/rt/include/chsys.h ****  */
 344:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 345:./lib/chibios/os/rt/include/chsys.h **** 
 346:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enable();
 347:./lib/chibios/os/rt/include/chsys.h ****   port_enable();
 348:./lib/chibios/os/rt/include/chsys.h **** }
 349:./lib/chibios/os/rt/include/chsys.h **** 
 350:./lib/chibios/os/rt/include/chsys.h **** /**
 351:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 352:./lib/chibios/os/rt/include/chsys.h ****  *
 353:./lib/chibios/os/rt/include/chsys.h ****  * @special
 354:./lib/chibios/os/rt/include/chsys.h ****  */
 355:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLock(void) {
 356:./lib/chibios/os/rt/include/chsys.h **** 
 357:./lib/chibios/os/rt/include/chsys.h ****   port_lock();
 358:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 359:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 360:./lib/chibios/os/rt/include/chsys.h **** }
 361:./lib/chibios/os/rt/include/chsys.h **** 
 362:./lib/chibios/os/rt/include/chsys.h **** /**
 363:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 364:./lib/chibios/os/rt/include/chsys.h ****  *
 365:./lib/chibios/os/rt/include/chsys.h ****  * @special
 366:./lib/chibios/os/rt/include/chsys.h ****  */
 367:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 368:./lib/chibios/os/rt/include/chsys.h **** 
 369:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock();
 370:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 371:./lib/chibios/os/rt/include/chsys.h **** 
 372:./lib/chibios/os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 373:./lib/chibios/os/rt/include/chsys.h ****      in a critical section not followed by a chSchRescheduleS(), this means
 374:./lib/chibios/os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 375:./lib/chibios/os/rt/include/chsys.h ****      the ready list.*/
 376:./lib/chibios/os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 377:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 378:./lib/chibios/os/rt/include/chsys.h ****               "priority order violation");
 379:./lib/chibios/os/rt/include/chsys.h **** 
 380:./lib/chibios/os/rt/include/chsys.h ****   port_unlock();
 381:./lib/chibios/os/rt/include/chsys.h **** }
 382:./lib/chibios/os/rt/include/chsys.h **** 
 383:./lib/chibios/os/rt/include/chsys.h **** /**
 384:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state from within an interrupt handler.
 385:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 386:./lib/chibios/os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 387:./lib/chibios/os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 388:./lib/chibios/os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 389:./lib/chibios/os/rt/include/chsys.h ****  *          It is good practice to invoke this API before invoking any I-class
 390:./lib/chibios/os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 391:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 392:./lib/chibios/os/rt/include/chsys.h ****  *
 393:./lib/chibios/os/rt/include/chsys.h ****  * @special
 394:./lib/chibios/os/rt/include/chsys.h ****  */
 395:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLockFromISR(void) {
 156              		.loc 3 395 20 view .LVU43
 396:./lib/chibios/os/rt/include/chsys.h **** 
 397:./lib/chibios/os/rt/include/chsys.h ****   port_lock_from_isr();
 157              		.loc 3 397 3 view .LVU44
 158              	.LBB85:
 159              	.LBI85:
 160              		.file 4 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @file    chcore_v7m.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   ARMv7-M architecture port macros and structures.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @addtogroup ARMCMx_V7M_CORE
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifndef CHCORE_V7M_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CHCORE_V7M_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Port Capabilities and Constants
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   This port supports a realtime counter.
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SUPPORTS_RT                TRUE
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Natural alignment constant.
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the minimum alignment for pointer-size variables.
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_NATURAL_ALIGN              sizeof (void *)
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack alignment constant.
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment required for the stack pointer.
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_STACK_ALIGN                sizeof (stkalign_t)
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Working Areas alignment constant.
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment to be enforced for thread working areas.
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA_ALIGN         ((PORT_ENABLE_GUARD_PAGES == TRUE) ?\
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                          32U : PORT_STACK_ALIGN)
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Disabled value for BASEPRI register.
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_DISABLED         0U
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module pre-compile time settings.                                         */
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Implements a syscall interface on SVC.
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_SYSCALL) || defined(__DOXYGEN__)
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_SYSCALL                FALSE
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Number of MPU regions to be saved/restored during context switch.
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The first region is always region zero.
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 8 bytes for each
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          region for each thread.
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Allowed values are 0..4, zero means none.
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_SWITCHED_REGIONS_NUMBER) || defined(__DOXYGEN__)
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SWITCHED_REGIONS_NUMBER    0
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables stack overflow guard pages using MPU.
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This option can only be enabled if also option
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CH_DBG_ENABLE_STACK_CHECK is enabled.
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 32 bytes for each
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          thread.
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_ENABLE_GUARD_PAGES) || defined(__DOXYGEN__)
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ENABLE_GUARD_PAGES         FALSE
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU region to be used to stack guards.
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Make sure this region is not included in the
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p PORT_SWITCHED_REGIONS_NUMBER regions range.
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_GUARD_MPU_REGION) || defined(__DOXYGEN__)
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_GUARD_MPU_REGION       MPU_REGION_7
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack size for the system idle thread.
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This size depends on the idle thread implementation, usually
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          the idle thread should take no more space than those reserved
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it is set to 16 because the idle thread does have
 117:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          a stack frame when compiling without optimizations. You may
 118:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          reduce this value to zero when compiling with optimizations.
 119:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 120:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 121:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IDLE_THREAD_STACK_SIZE     16
 122:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 123:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 124:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 125:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 126:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This constant is used in the calculation of the correct working
 127:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          area size.
 128:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port this value is conservatively set to 64 because the
 129:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          function @p chSchDoReschedule() can have a stack frame, especially
 130:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          with compiler optimizations disabled. The value can be reduced
 131:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          when compiler optimizations are enabled.
 132:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 133:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 134:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INT_REQUIRED_STACK         64
 135:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 136:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 137:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 138:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables the use of the WFI instruction in the idle thread loop.
 139:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 140:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_ENABLE_WFI_IDLE)
 141:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_ENABLE_WFI_IDLE          FALSE
 142:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 143:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 144:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 145:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   FPU support in context switch.
 146:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option activates the FPU support in the kernel.
 147:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 148:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_USE_FPU)
 149:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_USE_FPU                  CORTEX_HAS_FPU
 150:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_USE_FPU == TRUE) && (CORTEX_HAS_FPU == FALSE)
 151:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* This setting requires an FPU presence check in case it is externally
 152:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    redefined.*/
 153:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "the selected core does not have an FPU"
 154:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 155:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 156:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 157:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Simplified priority handling flag.
 158:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option makes the Kernel work in compact mode.
 159:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          In compact mode interrupts are disabled globally instead of
 160:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          raising the priority mask to some intermediate level.
 161:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 162:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_SIMPLIFIED_PRIORITY)
 163:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_SIMPLIFIED_PRIORITY      FALSE
 164:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 165:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 166:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 167:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   SVCALL handler priority.
 168:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The default SVCALL handler priority is defaulted to
 169:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY+1, this reserves the
 170:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY priority level as fast interrupts
 171:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority level.
 172:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 173:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIORITY_SVCALL)
 174:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_SVCALL          (CORTEX_MAXIMUM_PRIORITY + 1U)
 175:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif !PORT_IRQ_IS_VALID_PRIORITY(CORTEX_PRIORITY_SVCALL)
 176:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* If it is externally redefined then better perform a validity check on it.*/
 177:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid priority level specified for CORTEX_PRIORITY_SVCALL"
 178:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 179:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 180:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 181:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   NVIC PRIGROUP initialization expression.
 182:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details The default assigns all available priority bits as preemption
 183:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority with no sub-priority.
 184:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 185:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIGROUP_INIT) || defined(__DOXYGEN__)
 186:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIGROUP_INIT            (7 - CORTEX_PRIORITY_BITS)
 187:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 188:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 189:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 190:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Derived constants and error checks.                                       */
 191:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 192:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 193:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER < 0) || (PORT_SWITCHED_REGIONS_NUMBER > 4)
 194:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid PORT_SWITCHED_REGIONS_NUMBER value"
 195:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 196:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 197:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 198:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 199:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU guard page size.
 200:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 201:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == TRUE) || defined(__DOXYGEN__)
 202:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_DBG_ENABLE_STACK_CHECK == FALSE
 203:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "PORT_ENABLE_GUARD_PAGES requires CH_DBG_ENABLE_STACK_CHECK"
 204:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 205:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if __MPU_PRESENT == 0
 206:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "MPU not present in current device"
 207:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 208:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          32U
 209:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 210:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          0U
 211:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 212:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(_FROM_ASM_) */
 213:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 214:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 215:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Architecture and Compiler
 216:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
 217:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 218:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_MODEL == 3) || defined(__DOXYGEN__)
 219:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 220:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM3)
 221:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM3 not defined"
 222:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 223:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 224:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM3 == FALSE
 225:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M3 port not licensed"
 226:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 227:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 228:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 229:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Macro defining the specific ARM architecture.
 230:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 231:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7M
 232:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 233:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 234:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the implemented architecture.
 235:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 236:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv7-M"
 237:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 238:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 239:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the architecture variant.
 240:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 241:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 242:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3"
 243:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 244:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3 (MPU)"
 245:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 246:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 247:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 4)
 248:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 249:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM4)
 250:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM4 not defined"
 251:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 252:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 253:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM4 == FALSE
 254:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #error "ChibiOS Cortex-M4 port not licensed"
 255:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 256:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 257:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_ARM_v7ME
 258:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 259:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 260:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 261:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F"
 262:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 263:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F (MPU)"
 264:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 265:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 266:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 267:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4"
 268:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 269:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4 (MPU)"
 270:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 271:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 272:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 273:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 7)
 274:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 275:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM7)
 276:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM7 not defined"
 277:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 278:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 279:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM7 == FALSE
 280:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M7 port not licensed"
 281:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 282:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 283:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7ME
 284:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 285:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 286:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 287:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F"
 288:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 289:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F (MPU)"
 290:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 291:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 292:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 293:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7"
 294:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 295:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7 (MPU)"
 296:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 297:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 298:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 299:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 300:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 301:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Port-specific information string.
 302:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 303:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 304:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Advanced kernel mode"
 305:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 306:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Compact kernel mode"
 307:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 308:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
 309:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 310:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 311:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 312:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Maximum usable priority for normal ISRs.
 313:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 314:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      (CORTEX_PRIORITY_SVCALL + 1U)
 315:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 316:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 317:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   BASEPRI level within kernel lock.
 318:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 319:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_KERNEL                                               \
 320:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   CORTEX_PRIO_MASK(CORTEX_MAX_KERNEL_PRIORITY)
 321:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 322:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 323:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      0U
 324:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 325:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 326:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 327:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   PendSV priority level.
 328:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This priority is enforced to be equal to
 329:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAX_KERNEL_PRIORITY, this handler always have the
 330:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          highest priority that cannot preempt the kernel.
 331:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 332:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_PENDSV          CORTEX_MAX_KERNEL_PRIORITY
 333:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 334:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 335:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module data structures and types.                                         */
 336:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 337:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 338:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The following code is not processed when the file is included from an
 339:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    asm module.*/
 340:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 341:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 342:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The documentation of the following declarations is in chconf.h in order
 343:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    to not have duplicated structure names into the documentation.*/
 344:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(__DOXYGEN__)
 345:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_extctx {
 346:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r0;
 347:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r1;
 348:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r2;
 349:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r3;
 350:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r12;
 351:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr_thd;
 352:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      pc;
 353:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      xpsr;
 354:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 355:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s0;
 356:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s1;
 357:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s2;
 358:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s3;
 359:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s4;
 360:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s5;
 361:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s6;
 362:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s7;
 363:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s8;
 364:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s9;
 365:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s10;
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s11;
 367:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s12;
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s13;
 369:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s14;
 370:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s15;
 371:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      fpscr;
 372:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      reserved;
 373:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 374:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 375:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 376:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 377:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Link context structure.
 379:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This structure is used when there is the need to save extra
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          context information that is not part of the registers stacked
 381:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          in HW.
 382:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 383:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_linkctx {
 384:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t              control;
 385:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_extctx    *ectxp;
 386:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 388:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_intctx {
 390:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER > 0) || defined(__DOXYGEN__)
 391:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 392:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rbar;
 393:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rasr;
 394:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } regions[PORT_SWITCHED_REGIONS_NUMBER];
 395:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 397:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s16;
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s17;
 399:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s18;
 400:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s19;
 401:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s20;
 402:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s21;
 403:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s22;
 404:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s23;
 405:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s24;
 406:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s25;
 407:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s26;
 408:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s27;
 409:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s28;
 410:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s29;
 411:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s30;
 412:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s31;
 413:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 414:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r4;
 415:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r5;
 416:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r6;
 417:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r7;
 418:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r8;
 419:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r9;
 420:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r10;
 421:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r11;
 422:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr;
 423:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 424:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 425:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_context {
 426:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx    *sp;
 427:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 428:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 429:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t            psp;
 430:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     const void          *p;
 431:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } syscall;
 432:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 433:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 434:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(__DOXYGEN__) */
 435:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 436:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 437:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module macros.                                                            */
 438:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 439:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 440:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have no syscall context information.*/
 441:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 442:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)                              \
 443:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.psp = (uint32_t)(wtop);                                 \
 444:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.p   = NULL;
 445:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 446:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)
 447:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 448:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 449:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have all regions disabled.*/
 450:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER == 0) || defined(__DOXYGEN__)
 451:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)
 452:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 1) || defined(__DOXYGEN__)
 453:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 454:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 455:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U
 456:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 2) || defined(__DOXYGEN__)
 457:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 458:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 459:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 460:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 461:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U
 462:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 3) || defined(__DOXYGEN__)
 463:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 464:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 465:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 466:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 467:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 468:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 469:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U
 470:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 4) || defined(__DOXYGEN__)
 471:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 472:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 473:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 474:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 475:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 476:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 477:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U;                                      \
 478:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rbar  = 0U;                                      \
 479:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rasr  = 0U
 480:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 481:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 482:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 483:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 484:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 485:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This code usually setup the context switching frame represented
 486:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by an @p port_intctx structure.
 487:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 488:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 489:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                 \
 490:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                         sizeof (struct port_intctx));       \
 491:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r4 = (uint32_t)(pf);                                        \
 492:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r5 = (uint32_t)(arg);                                       \
 493:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->lr = (uint32_t)_port_thread_start;                          \
 494:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_MPU(tp);                                             \
 495:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop);                                   \
 496:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 497:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 498:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** //  __PORT_SETUP_CONTEXT_MPU(tp)
 499:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 500:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 501:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Computes the thread working area global size.
 502:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    There is no need to perform alignments in this macro.
 503:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 504:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WA_SIZE(n) ((size_t)PORT_GUARD_PAGE_SIZE +                     \
 505:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_intctx) +                      \
 506:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_extctx) +                      \
 507:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)(n) +                                      \
 508:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)PORT_INT_REQUIRED_STACK)
 509:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 510:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 511:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Static working area allocation.
 512:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro is used to allocate a static thread working area
 513:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          aligned as both position and size.
 514:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 515:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] s         the name to be assigned to the stack array
 516:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] n         the stack size to be assigned to the thread
 517:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 518:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 519:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 520:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 521:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 522:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 523:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   ALIGNED_VAR(32) stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 524:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 525:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 526:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 527:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ prologue code.
 528:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 529:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 530:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 531:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_PROLOGUE()
 532:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 533:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 534:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ epilogue code.
 535:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 536:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 537:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 538:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_EPILOGUE() _port_irq_epilogue()
 539:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 540:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 541:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ handler function declaration.
 542:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 543:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 544:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 545:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 546:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) extern "C" void id(void)
 547:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 548:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) void id(void)
 549:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 550:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 551:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 552:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Fast IRQ handler function declaration.
 553:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 554:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 555:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 556:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 557:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) extern "C" void id(void)
 558:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 559:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) void id(void)
 560:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 561:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 562:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 563:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Performs a context switch between two threads.
 564:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This is the most critical code in any port, this function
 565:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          is responsible for the context switch between 2 threads.
 566:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 567:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          switch performance so optimize here as much as you can.
 568:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 569:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] ntp       the thread to be switched in
 570:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] otp       the thread to be switched out
 571:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 572:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CH_DBG_ENABLE_STACK_CHECK == FALSE) || defined(__DOXYGEN__)
 573:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 574:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 575:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_ENABLE_GUARD_PAGES == FALSE
 576:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 577:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx *r13 = (struct port_intctx *)__get_PSP();              \
 578:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   if ((stkalign_t *)(r13 - 1) < (otp)->wabase) {                            \
 579:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     chSysHalt("stack overflow");                                            \
 580:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   }                                                                         \
 581:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 582:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 583:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 584:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 585:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 586:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                                                             \
 587:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   /* Setting up the guard page for the switched-in thread.*/                \
 588:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   mpuSetRegionAddress(PORT_USE_GUARD_MPU_REGION,                            \
 589:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                       chThdGetSelfX()->wabase);                             \
 590:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 591:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 592:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 593:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 594:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 595:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* External declarations.                                                    */
 596:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 597:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 598:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 599:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** extern "C" {
 600:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 601:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_init(void);
 602:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_irq_epilogue(void);
 603:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 604:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_thread_start(void);
 605:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch_from_isr(void);
 606:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_exit_from_isr(void);
 607:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_USE_SYSCALL == TRUE
 608:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_unprivileged_jump(uint32_t pc, uint32_t psp);
 609:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 610:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 611:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 612:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 613:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 614:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 615:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module inline functions.                                                  */
 616:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 617:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 618:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 619:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Returns a word encoding the current interrupts status.
 620:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 621:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupts status.
 622:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 623:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE syssts_t port_get_irq_status(void) {
 624:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   syssts_t sts;
 625:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 626:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 627:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_BASEPRI();
 628:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 629:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_PRIMASK();
 630:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 631:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts;
 632:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 633:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 634:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 635:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Checks the interrupt status.
 636:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 637:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] sts       the interrupt status word
 638:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 639:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupt status.
 640:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        the word specified a disabled interrupts status.
 641:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         the word specified an enabled interrupts status.
 642:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 643:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_irq_enabled(syssts_t sts) {
 644:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 645:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 646:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 647:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 648:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (sts & (syssts_t)1) == (syssts_t)0;
 649:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 650:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 651:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 652:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 653:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Determines the current execution context.
 654:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 655:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The execution context.
 656:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        not running in ISR mode.
 657:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         running in ISR mode.
 658:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 659:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_is_isr_context(void) {
 660:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 661:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 662:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 663:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 664:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 665:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action.
 666:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 667:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 668:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock(void) {
 670:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 671:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 672:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 673:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 674:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 675:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 676:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
 678:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 679:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 680:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 681:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 682:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 683:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 684:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 685:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 686:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 687:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 688:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 689:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action.
 690:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 691:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 692:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock(void) {
 694:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 695:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
 697:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 698:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 699:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 700:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 701:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 702:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 703:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action from an interrupt handler.
 704:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 705:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 706:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Same as @p port_lock() in this port.
 707:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 708:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock_from_isr(void) {
 161              		.loc 4 708 27 view .LVU45
 709:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 710:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   port_lock();
 162              		.loc 4 710 3 view .LVU46
 163              	.LBB86:
 164              	.LBI86:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 165              		.loc 4 669 27 view .LVU47
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 166              		.loc 4 677 3 view .LVU48
 167              	.LBB87:
 168              	.LBI87:
 169              		.file 5 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 144:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 145:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 146:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 147:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 150:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 151:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 153:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 154:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 155:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 157:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 158:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 159:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 160:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 162:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 166:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 168:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 169:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 170:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 172:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 173:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 174:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 175:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 176:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 177:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 181:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 183:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 185:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 187:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 189:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 193:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 195:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 197:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 198:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 199:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 200:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 201:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 208:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 211:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 212:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 214:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 215:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 219:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 221:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 222:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 223:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 225:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 226:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 228:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 241:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 243:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 247:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 249:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 250:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 251:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 253:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 254:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 255:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 265:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 268:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 269:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 270:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 271:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 272:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 273:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 277:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 279:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 281:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 282:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 283:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 285:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 289:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 291:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 294:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 296:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 297:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 301:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 303:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 304:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 305:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 307:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 308:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 310:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 312:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 316:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 318:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 319:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 320:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 322:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 323:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 324:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 325:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 326:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 327:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 331:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 333:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 335:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 336:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 337:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 339:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 343:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 345:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 347:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 348:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 355:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 359:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 360:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 362:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 363:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 364:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 365:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 366:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 370:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 372:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 374:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 375:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 378:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 382:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 384:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 385:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 386:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 388:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 389:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 390:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 391:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 393:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 397:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 399:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 400:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 401:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 403:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 404:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 405:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 406:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 407:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 408:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 412:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 414:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 416:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 418:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 420:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 424:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 426:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 428:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 429:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 430:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 435:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 439:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 441:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 443:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 445:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 446:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 450:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 452:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 454:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 455:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 456:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 457:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 461:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 463:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 464:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 465:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 467:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 468:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 469:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 470:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 472:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 476:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 478:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 479:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 480:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 482:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 484:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 486:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 170              		.loc 5 491 27 view .LVU49
 171              	.LBB88:
 492:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 172              		.loc 5 493 3 view .LVU50
 173              	.LBE88:
 174              	.LBE87:
 175              	.LBE86:
 176              	.LBE85:
 177              	.LBE84:
  59:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = (thread_t *)p;
 178              		.loc 1 59 29 is_stmt 0 view .LVU51
 179 0000 08B5     		push	{r3, lr}
 180              		.cfi_def_cfa_offset 8
 181              		.cfi_offset 3, -8
 182              		.cfi_offset 14, -4
 183              	.LBB93:
 184              	.LBB92:
 185              	.LBB91:
 186              	.LBB90:
 187              	.LBB89:
 188              		.loc 5 493 3 view .LVU52
 189 0002 2023     		movs	r3, #32
 190              		.syntax unified
 191              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 192 0004 83F31188 		MSR basepri, r3
 193              	@ 0 "" 2
 194              	.LVL8:
 195              		.loc 5 493 3 view .LVU53
 196              		.thumb
 197              		.syntax unified
 198              	.LBE89:
 199              	.LBE90:
 200              	.LBE91:
 201              	.LBE92:
 398:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_isr();
 202              		.loc 3 398 34 is_stmt 1 view .LVU54
 399:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock_from_isr();
 203              		.loc 3 399 29 view .LVU55
 204              	.LBE93:
  63:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_READY:
 205              		.loc 1 63 3 view .LVU56
 206 0008 027C     		ldrb	r2, [r0, #16]	@ zero_extendqisi2
 207 000a 0023     		movs	r3, #0
 208 000c 052A     		cmp	r2, #5
 209 000e 06D8     		bhi	.L10
 210 0010 DFE802F0 		tbb	[pc, r2]
 211              	.L12:
 212 0014 0B       		.byte	(.L19-.L12)/2
 213 0015 05       		.byte	(.L10-.L12)/2
 214 0016 05       		.byte	(.L10-.L12)/2
 215 0017 03       		.byte	(.L14-.L12)/2
 216 0018 12       		.byte	(.L13-.L12)/2
 217 0019 0E       		.byte	(.L11-.L12)/2
 218              		.p2align 1
 219              	.L14:
  70:lib/chibios/os/rt/src/chschd.c ****     break;
 220              		.loc 1 70 5 view .LVU57
  70:lib/chibios/os/rt/src/chschd.c ****     break;
 221              		.loc 1 70 11 is_stmt 0 view .LVU58
 222 001a 4269     		ldr	r2, [r0, #20]
  70:lib/chibios/os/rt/src/chschd.c ****     break;
 223              		.loc 1 70 18 view .LVU59
 224 001c 1360     		str	r3, [r2]
  71:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_USE_SEMAPHORES == TRUE
 225              		.loc 1 71 5 is_stmt 1 view .LVU60
 226              	.L10:
  89:lib/chibios/os/rt/src/chschd.c ****   (void) chSchReadyI(tp);
 227              		.loc 1 89 3 view .LVU61
  89:lib/chibios/os/rt/src/chschd.c ****   (void) chSchReadyI(tp);
 228              		.loc 1 89 16 is_stmt 0 view .LVU62
 229 001e 4FF0FF33 		mov	r3, #-1
 230 0022 4361     		str	r3, [r0, #20]
  90:lib/chibios/os/rt/src/chschd.c ****   chSysUnlockFromISR();
 231              		.loc 1 90 3 is_stmt 1 view .LVU63
  90:lib/chibios/os/rt/src/chschd.c ****   chSysUnlockFromISR();
 232              		.loc 1 90 10 is_stmt 0 view .LVU64
 233 0024 FFF7FEFF 		bl	chSchReadyI
 234              	.LVL9:
  91:lib/chibios/os/rt/src/chschd.c **** }
 235              		.loc 1 91 3 is_stmt 1 view .LVU65
 236              	.LBB94:
 237              	.LBI94:
 400:./lib/chibios/os/rt/include/chsys.h **** }
 401:./lib/chibios/os/rt/include/chsys.h **** 
 402:./lib/chibios/os/rt/include/chsys.h **** /**
 403:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state from within an interrupt handler.
 404:./lib/chibios/os/rt/include/chsys.h ****  *
 405:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 406:./lib/chibios/os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 407:./lib/chibios/os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 408:./lib/chibios/os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 409:./lib/chibios/os/rt/include/chsys.h ****  *          It is good practice to invoke this API after invoking any I-class
 410:./lib/chibios/os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 411:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 412:./lib/chibios/os/rt/include/chsys.h ****  *
 413:./lib/chibios/os/rt/include/chsys.h ****  * @special
 414:./lib/chibios/os/rt/include/chsys.h ****  */
 415:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlockFromISR(void) {
 238              		.loc 3 415 20 view .LVU66
 239              	.LBB95:
 416:./lib/chibios/os/rt/include/chsys.h **** 
 417:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock_from_isr();
 240              		.loc 3 417 31 view .LVU67
 418:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_isr();
 241              		.loc 3 418 33 view .LVU68
 419:./lib/chibios/os/rt/include/chsys.h ****   port_unlock_from_isr();
 242              		.loc 3 419 3 view .LVU69
 243              	.LBB96:
 244              	.LBI96:
 711:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 712:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 713:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 714:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action from an interrupt handler.
 715:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 716:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 717:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Same as @p port_unlock() in this port.
 718:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 719:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock_from_isr(void) {
 245              		.loc 4 719 27 view .LVU70
 720:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 721:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   port_unlock();
 246              		.loc 4 721 3 view .LVU71
 247              	.LBB97:
 248              	.LBI97:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 249              		.loc 4 693 27 view .LVU72
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 250              		.loc 4 696 3 view .LVU73
 251              	.LBB98:
 252              	.LBI98:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 253              		.loc 5 491 27 view .LVU74
 254              	.LBB99:
 255              		.loc 5 493 3 view .LVU75
 256 0028 0023     		movs	r3, #0
 257              	.LVL10:
 258              	.L19:
 259              		.loc 5 493 3 is_stmt 0 view .LVU76
 260              		.syntax unified
 261              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 262 002a 83F31188 		MSR basepri, r3
 263              	@ 0 "" 2
 264              		.thumb
 265              		.syntax unified
 266              	.LBE99:
 267              	.LBE98:
 268              	.LBE97:
 269              	.LBE96:
 270              	.LBE95:
 271              	.LBE94:
  92:lib/chibios/os/rt/src/chschd.c **** 
 272              		.loc 1 92 1 view .LVU77
 273 002e 08BD     		pop	{r3, pc}
 274              	.LVL11:
 275              	.L11:
  74:lib/chibios/os/rt/src/chschd.c **** #endif
 276              		.loc 1 74 5 is_stmt 1 view .LVU78
  74:lib/chibios/os/rt/src/chschd.c **** #endif
 277              		.loc 1 74 27 is_stmt 0 view .LVU79
 278 0030 4269     		ldr	r2, [r0, #20]
 279              	.LVL12:
 280              	.LBB100:
 281              	.LBI100:
 282              		.file 6 "./lib/chibios/os/rt/include/chsem.h"
   1:./lib/chibios/os/rt/include/chsem.h **** /*
   2:./lib/chibios/os/rt/include/chsem.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsem.h **** 
   4:./lib/chibios/os/rt/include/chsem.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsem.h **** 
   6:./lib/chibios/os/rt/include/chsem.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsem.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsem.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsem.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsem.h **** 
  11:./lib/chibios/os/rt/include/chsem.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsem.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsem.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsem.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsem.h **** 
  16:./lib/chibios/os/rt/include/chsem.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsem.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsem.h **** */
  19:./lib/chibios/os/rt/include/chsem.h **** 
  20:./lib/chibios/os/rt/include/chsem.h **** /**
  21:./lib/chibios/os/rt/include/chsem.h ****  * @file    rt/include/chsem.h
  22:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Semaphores macros and structures.
  23:./lib/chibios/os/rt/include/chsem.h ****  *
  24:./lib/chibios/os/rt/include/chsem.h ****  * @addtogroup semaphores
  25:./lib/chibios/os/rt/include/chsem.h ****  * @{
  26:./lib/chibios/os/rt/include/chsem.h ****  */
  27:./lib/chibios/os/rt/include/chsem.h **** 
  28:./lib/chibios/os/rt/include/chsem.h **** #ifndef CHSEM_H
  29:./lib/chibios/os/rt/include/chsem.h **** #define CHSEM_H
  30:./lib/chibios/os/rt/include/chsem.h **** 
  31:./lib/chibios/os/rt/include/chsem.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
  32:./lib/chibios/os/rt/include/chsem.h **** 
  33:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsem.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsem.h **** 
  37:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chsem.h **** /* Module pre-compile time settings.                                         */
  39:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chsem.h **** 
  41:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chsem.h **** /* Derived constants and error checks.                                       */
  43:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  44:./lib/chibios/os/rt/include/chsem.h **** 
  45:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  46:./lib/chibios/os/rt/include/chsem.h **** /* Module data structures and types.                                         */
  47:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsem.h **** 
  49:./lib/chibios/os/rt/include/chsem.h **** /**
  50:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Semaphore structure.
  51:./lib/chibios/os/rt/include/chsem.h ****  */
  52:./lib/chibios/os/rt/include/chsem.h **** typedef struct ch_semaphore {
  53:./lib/chibios/os/rt/include/chsem.h ****   ch_queue_t            queue;      /**< @brief Queue of the threads sleeping
  54:./lib/chibios/os/rt/include/chsem.h ****                                                 on this semaphore.          */
  55:./lib/chibios/os/rt/include/chsem.h ****   cnt_t                 cnt;        /**< @brief The semaphore counter.      */
  56:./lib/chibios/os/rt/include/chsem.h **** } semaphore_t;
  57:./lib/chibios/os/rt/include/chsem.h **** 
  58:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  59:./lib/chibios/os/rt/include/chsem.h **** /* Module macros.                                                            */
  60:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  61:./lib/chibios/os/rt/include/chsem.h **** 
  62:./lib/chibios/os/rt/include/chsem.h **** /**
  63:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Data part of a static semaphore initializer.
  64:./lib/chibios/os/rt/include/chsem.h ****  * @details This macro should be used when statically initializing a semaphore
  65:./lib/chibios/os/rt/include/chsem.h ****  *          that is part of a bigger structure.
  66:./lib/chibios/os/rt/include/chsem.h ****  *
  67:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] name      the name of the semaphore variable
  68:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] n         the counter initial value, this value must be
  69:./lib/chibios/os/rt/include/chsem.h ****  *                      non-negative
  70:./lib/chibios/os/rt/include/chsem.h ****  */
  71:./lib/chibios/os/rt/include/chsem.h **** #define _SEMAPHORE_DATA(name, n) {_CH_QUEUE_DATA(name.queue), n}
  72:./lib/chibios/os/rt/include/chsem.h **** 
  73:./lib/chibios/os/rt/include/chsem.h **** /**
  74:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Static semaphore initializer.
  75:./lib/chibios/os/rt/include/chsem.h ****  * @details Statically initialized semaphores require no explicit
  76:./lib/chibios/os/rt/include/chsem.h ****  *          initialization using @p chSemInit().
  77:./lib/chibios/os/rt/include/chsem.h ****  *
  78:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] name      the name of the semaphore variable
  79:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] n         the counter initial value, this value must be
  80:./lib/chibios/os/rt/include/chsem.h ****  *                      non-negative
  81:./lib/chibios/os/rt/include/chsem.h ****  */
  82:./lib/chibios/os/rt/include/chsem.h **** #define SEMAPHORE_DECL(name, n) semaphore_t name = _SEMAPHORE_DATA(name, n)
  83:./lib/chibios/os/rt/include/chsem.h **** 
  84:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  85:./lib/chibios/os/rt/include/chsem.h **** /* External declarations.                                                    */
  86:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  87:./lib/chibios/os/rt/include/chsem.h **** 
  88:./lib/chibios/os/rt/include/chsem.h **** #ifdef __cplusplus
  89:./lib/chibios/os/rt/include/chsem.h **** extern "C" {
  90:./lib/chibios/os/rt/include/chsem.h **** #endif
  91:./lib/chibios/os/rt/include/chsem.h ****   void chSemObjectInit(semaphore_t *sp, cnt_t n);
  92:./lib/chibios/os/rt/include/chsem.h ****   void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg);
  93:./lib/chibios/os/rt/include/chsem.h ****   void chSemResetWithMessageI(semaphore_t *sp, cnt_t n, msg_t msg);
  94:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWait(semaphore_t *sp);
  95:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWaitS(semaphore_t *sp);
  96:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout);
  97:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWaitTimeoutS(semaphore_t *sp, sysinterval_t timeout);
  98:./lib/chibios/os/rt/include/chsem.h ****   void chSemSignal(semaphore_t *sp);
  99:./lib/chibios/os/rt/include/chsem.h ****   void chSemSignalI(semaphore_t *sp);
 100:./lib/chibios/os/rt/include/chsem.h ****   void chSemAddCounterI(semaphore_t *sp, cnt_t n);
 101:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw);
 102:./lib/chibios/os/rt/include/chsem.h **** #ifdef __cplusplus
 103:./lib/chibios/os/rt/include/chsem.h **** }
 104:./lib/chibios/os/rt/include/chsem.h **** #endif
 105:./lib/chibios/os/rt/include/chsem.h **** 
 106:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
 107:./lib/chibios/os/rt/include/chsem.h **** /* Module inline functions.                                                  */
 108:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
 109:./lib/chibios/os/rt/include/chsem.h **** 
 110:./lib/chibios/os/rt/include/chsem.h **** /**
 111:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Performs a reset operation on the semaphore.
 112:./lib/chibios/os/rt/include/chsem.h ****  * @post    After invoking this function all the threads waiting on the
 113:./lib/chibios/os/rt/include/chsem.h ****  *          semaphore, if any, are released and the semaphore counter is set
 114:./lib/chibios/os/rt/include/chsem.h ****  *          to the specified, non negative, value.
 115:./lib/chibios/os/rt/include/chsem.h ****  * @note    This function implicitly sends @p MSG_RESET as message.
 116:./lib/chibios/os/rt/include/chsem.h ****  *
 117:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t structure
 118:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] n         the new value of the semaphore counter. The value must
 119:./lib/chibios/os/rt/include/chsem.h ****  *                      be non-negative.
 120:./lib/chibios/os/rt/include/chsem.h ****  *
 121:./lib/chibios/os/rt/include/chsem.h ****  * @api
 122:./lib/chibios/os/rt/include/chsem.h ****  */
 123:./lib/chibios/os/rt/include/chsem.h **** static inline void chSemReset(semaphore_t *sp, cnt_t n) {
 124:./lib/chibios/os/rt/include/chsem.h **** 
 125:./lib/chibios/os/rt/include/chsem.h ****   chSemResetWithMessage(sp, n, MSG_RESET);
 126:./lib/chibios/os/rt/include/chsem.h **** }
 127:./lib/chibios/os/rt/include/chsem.h **** 
 128:./lib/chibios/os/rt/include/chsem.h **** /**
 129:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Performs a reset operation on the semaphore.
 130:./lib/chibios/os/rt/include/chsem.h ****  * @post    After invoking this function all the threads waiting on the
 131:./lib/chibios/os/rt/include/chsem.h ****  *          semaphore, if any, are released and the semaphore counter is set
 132:./lib/chibios/os/rt/include/chsem.h ****  *          to the specified, non negative, value.
 133:./lib/chibios/os/rt/include/chsem.h ****  * @post    This function does not reschedule so a call to a rescheduling
 134:./lib/chibios/os/rt/include/chsem.h ****  *          function must be performed before unlocking the kernel. Note that
 135:./lib/chibios/os/rt/include/chsem.h ****  *          interrupt handlers always reschedule on exit so an explicit
 136:./lib/chibios/os/rt/include/chsem.h ****  *          reschedule must not be performed in ISRs.
 137:./lib/chibios/os/rt/include/chsem.h ****  * @note    This function implicitly sends @p MSG_RESET as message.
 138:./lib/chibios/os/rt/include/chsem.h ****  *
 139:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t structure
 140:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] n         the new value of the semaphore counter. The value must
 141:./lib/chibios/os/rt/include/chsem.h ****  *                      be non-negative.
 142:./lib/chibios/os/rt/include/chsem.h ****  *
 143:./lib/chibios/os/rt/include/chsem.h ****  * @iclass
 144:./lib/chibios/os/rt/include/chsem.h ****  */
 145:./lib/chibios/os/rt/include/chsem.h **** static inline void chSemResetI(semaphore_t *sp, cnt_t n) {
 146:./lib/chibios/os/rt/include/chsem.h **** 
 147:./lib/chibios/os/rt/include/chsem.h ****   chSemResetWithMessageI(sp, n, MSG_RESET);
 148:./lib/chibios/os/rt/include/chsem.h **** }
 149:./lib/chibios/os/rt/include/chsem.h **** 
 150:./lib/chibios/os/rt/include/chsem.h **** /**
 151:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Decreases the semaphore counter.
 152:./lib/chibios/os/rt/include/chsem.h ****  * @details This macro can be used when the counter is known to be positive.
 153:./lib/chibios/os/rt/include/chsem.h ****  *
 154:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t structure
 155:./lib/chibios/os/rt/include/chsem.h ****  *
 156:./lib/chibios/os/rt/include/chsem.h ****  * @iclass
 157:./lib/chibios/os/rt/include/chsem.h ****  */
 158:./lib/chibios/os/rt/include/chsem.h **** static inline void chSemFastWaitI(semaphore_t *sp) {
 159:./lib/chibios/os/rt/include/chsem.h **** 
 160:./lib/chibios/os/rt/include/chsem.h ****   chDbgCheckClassI();
 161:./lib/chibios/os/rt/include/chsem.h **** 
 162:./lib/chibios/os/rt/include/chsem.h ****   sp->cnt--;
 163:./lib/chibios/os/rt/include/chsem.h **** }
 164:./lib/chibios/os/rt/include/chsem.h **** 
 165:./lib/chibios/os/rt/include/chsem.h **** /**
 166:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Increases the semaphore counter.
 167:./lib/chibios/os/rt/include/chsem.h ****  * @details This macro can be used when the counter is known to be not
 168:./lib/chibios/os/rt/include/chsem.h ****  *          negative.
 169:./lib/chibios/os/rt/include/chsem.h ****  *
 170:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t structure
 171:./lib/chibios/os/rt/include/chsem.h ****  *
 172:./lib/chibios/os/rt/include/chsem.h ****  * @iclass
 173:./lib/chibios/os/rt/include/chsem.h ****  */
 174:./lib/chibios/os/rt/include/chsem.h **** static inline void chSemFastSignalI(semaphore_t *sp) {
 283              		.loc 6 174 20 is_stmt 1 view .LVU80
 284              	.LBB101:
 175:./lib/chibios/os/rt/include/chsem.h **** 
 176:./lib/chibios/os/rt/include/chsem.h ****   chDbgCheckClassI();
 285              		.loc 6 176 21 view .LVU81
 177:./lib/chibios/os/rt/include/chsem.h **** 
 178:./lib/chibios/os/rt/include/chsem.h ****   sp->cnt++;
 286              		.loc 6 178 3 view .LVU82
 287              		.loc 6 178 10 is_stmt 0 view .LVU83
 288 0032 9368     		ldr	r3, [r2, #8]
 289 0034 0133     		adds	r3, r3, #1
 290 0036 9360     		str	r3, [r2, #8]
 291              	.LVL13:
 292              	.L13:
 293              		.loc 6 178 10 view .LVU84
 294              	.LBE101:
 295              	.LBE100:
  83:lib/chibios/os/rt/src/chschd.c ****     break;
 296              		.loc 1 83 5 is_stmt 1 view .LVU85
 297              	.LBB102:
 298              	.LBI102:
 303:./lib/chibios/os/rt/include/chlists.h **** 
 299              		.loc 2 303 27 view .LVU86
 300              	.LBB103:
 305:./lib/chibios/os/rt/include/chlists.h ****   p->next->prev = p->prev;
 301              		.loc 2 305 3 view .LVU87
 305:./lib/chibios/os/rt/include/chlists.h ****   p->next->prev = p->prev;
 302              		.loc 2 305 20 is_stmt 0 view .LVU88
 303 0038 D0E90032 		ldrd	r3, r2, [r0]
 305:./lib/chibios/os/rt/include/chlists.h ****   p->next->prev = p->prev;
 304              		.loc 2 305 17 view .LVU89
 305 003c 1360     		str	r3, [r2]
 306:./lib/chibios/os/rt/include/chlists.h **** 
 306              		.loc 2 306 3 is_stmt 1 view .LVU90
 306:./lib/chibios/os/rt/include/chlists.h **** 
 307              		.loc 2 306 17 is_stmt 0 view .LVU91
 308 003e 5A60     		str	r2, [r3, #4]
 308:./lib/chibios/os/rt/include/chlists.h **** }
 309              		.loc 2 308 3 is_stmt 1 view .LVU92
 308:./lib/chibios/os/rt/include/chlists.h **** }
 310              		.loc 2 308 10 is_stmt 0 view .LVU93
 311 0040 EDE7     		b	.L10
 312              	.LBE103:
 313              	.LBE102:
 314              		.cfi_endproc
 315              	.LFE243:
 317              		.section	.text.chSchReadyAheadI,"ax",%progbits
 318              		.align	1
 319              		.global	chSchReadyAheadI
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 324              	chSchReadyAheadI:
 325              	.LVL14:
 326              	.LFB246:
 168:lib/chibios/os/rt/src/chschd.c **** 
 169:lib/chibios/os/rt/src/chschd.c **** /**
 170:lib/chibios/os/rt/src/chschd.c ****  * @brief   Inserts a thread in the Ready List placing it ahead its peers.
 171:lib/chibios/os/rt/src/chschd.c ****  * @details The thread is positioned ahead all threads with higher or equal
 172:lib/chibios/os/rt/src/chschd.c ****  *          priority.
 173:lib/chibios/os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 174:lib/chibios/os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 175:lib/chibios/os/rt/src/chschd.c ****  * @post    This function does not reschedule so a call to a rescheduling
 176:lib/chibios/os/rt/src/chschd.c ****  *          function must be performed before unlocking the kernel. Note that
 177:lib/chibios/os/rt/src/chschd.c ****  *          interrupt handlers always reschedule on exit so an explicit
 178:lib/chibios/os/rt/src/chschd.c ****  *          reschedule must not be performed in ISRs.
 179:lib/chibios/os/rt/src/chschd.c ****  *
 180:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the thread to be made ready
 181:lib/chibios/os/rt/src/chschd.c ****  * @return              The thread pointer.
 182:lib/chibios/os/rt/src/chschd.c ****  *
 183:lib/chibios/os/rt/src/chschd.c ****  * @iclass
 184:lib/chibios/os/rt/src/chschd.c ****  */
 185:lib/chibios/os/rt/src/chschd.c **** thread_t *chSchReadyAheadI(thread_t *tp) {
 327              		.loc 1 185 42 is_stmt 1 view -0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 186:lib/chibios/os/rt/src/chschd.c **** 
 187:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassI();
 332              		.loc 1 187 21 view .LVU95
 188:lib/chibios/os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 333              		.loc 1 188 3 view .LVU96
 334              		.loc 1 188 3 view .LVU97
 335              		.loc 1 188 3 view .LVU98
 189:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 336              		.loc 1 189 3 view .LVU99
 337              		.loc 1 189 3 view .LVU100
 338              		.loc 1 189 3 view .LVU101
 190:lib/chibios/os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 191:lib/chibios/os/rt/src/chschd.c ****               "invalid state");
 192:lib/chibios/os/rt/src/chschd.c **** 
 193:lib/chibios/os/rt/src/chschd.c ****   /* The thread is marked ready.*/
 194:lib/chibios/os/rt/src/chschd.c ****   tp->state = CH_STATE_READY;
 339              		.loc 1 194 3 view .LVU102
 340              		.loc 1 194 13 is_stmt 0 view .LVU103
 341 0000 0023     		movs	r3, #0
 342 0002 0374     		strb	r3, [r0, #16]
 195:lib/chibios/os/rt/src/chschd.c **** 
 196:lib/chibios/os/rt/src/chschd.c ****   /* Insertion in the priority queue.*/
 197:lib/chibios/os/rt/src/chschd.c ****   return (thread_t *)ch_pqueue_insert_ahead(&ch.rlist.pqueue,
 343              		.loc 1 197 3 is_stmt 1 view .LVU104
 344              	.LVL15:
 345              	.LBB106:
 346              	.LBI106:
 373:./lib/chibios/os/rt/include/chlists.h **** }
 374:./lib/chibios/os/rt/include/chlists.h **** 
 375:./lib/chibios/os/rt/include/chlists.h **** /**
 376:./lib/chibios/os/rt/include/chlists.h ****  * @brief   Inserts an element in the priority queue placing it ahead of
 377:./lib/chibios/os/rt/include/chlists.h ****  *          its peers.
 378:./lib/chibios/os/rt/include/chlists.h ****  * @details The element is positioned ahead of all elements with higher or
 379:./lib/chibios/os/rt/include/chlists.h ****  *          equal priority.
 380:./lib/chibios/os/rt/include/chlists.h ****  *
 381:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 382:./lib/chibios/os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 383:./lib/chibios/os/rt/include/chlists.h ****  * @return              The inserted element pointer.
 384:./lib/chibios/os/rt/include/chlists.h ****  *
 385:./lib/chibios/os/rt/include/chlists.h ****  * @notapi
 386:./lib/chibios/os/rt/include/chlists.h ****  */
 387:./lib/chibios/os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
 347              		.loc 2 387 36 view .LVU105
 348              	.LBB107:
 388:./lib/chibios/os/rt/include/chlists.h ****                                                           ch_priority_queue_t *p) {
 389:./lib/chibios/os/rt/include/chlists.h **** 
 390:./lib/chibios/os/rt/include/chlists.h ****   /* Scanning priority queue.*/
 391:./lib/chibios/os/rt/include/chlists.h ****   do {
 392:./lib/chibios/os/rt/include/chlists.h ****     pqp = pqp->next;
 393:./lib/chibios/os/rt/include/chlists.h ****   } while (pqp->prio > p->prio);
 349              		.loc 2 393 25 is_stmt 0 view .LVU106
 350 0004 8268     		ldr	r2, [r0, #8]
 351 0006 054B     		ldr	r3, .L23
 352              	.LVL16:
 353              	.L21:
 391:./lib/chibios/os/rt/include/chlists.h ****     pqp = pqp->next;
 354              		.loc 2 391 3 is_stmt 1 view .LVU107
 392:./lib/chibios/os/rt/include/chlists.h ****   } while (pqp->prio > p->prio);
 355              		.loc 2 392 5 view .LVU108
 392:./lib/chibios/os/rt/include/chlists.h ****   } while (pqp->prio > p->prio);
 356              		.loc 2 392 9 is_stmt 0 view .LVU109
 357 0008 1B68     		ldr	r3, [r3]
 358              	.LVL17:
 359              		.loc 2 393 22 is_stmt 1 view .LVU110
 360 000a 9968     		ldr	r1, [r3, #8]
 361 000c 9142     		cmp	r1, r2
 362 000e FBD8     		bhi	.L21
 394:./lib/chibios/os/rt/include/chlists.h **** 
 395:./lib/chibios/os/rt/include/chlists.h ****   /* Insertion on prev.*/
 396:./lib/chibios/os/rt/include/chlists.h ****   p->next       = pqp;
 363              		.loc 2 396 3 view .LVU111
 397:./lib/chibios/os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 364              		.loc 2 397 22 is_stmt 0 view .LVU112
 365 0010 5A68     		ldr	r2, [r3, #4]
 396:./lib/chibios/os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 366              		.loc 2 396 17 view .LVU113
 367 0012 0360     		str	r3, [r0]
 368              		.loc 2 397 3 is_stmt 1 view .LVU114
 369              		.loc 2 397 17 is_stmt 0 view .LVU115
 370 0014 4260     		str	r2, [r0, #4]
 398:./lib/chibios/os/rt/include/chlists.h ****   p->prev->next = p;
 371              		.loc 2 398 3 is_stmt 1 view .LVU116
 372              		.loc 2 398 17 is_stmt 0 view .LVU117
 373 0016 1060     		str	r0, [r2]
 399:./lib/chibios/os/rt/include/chlists.h ****   pqp->prev     = p;
 374              		.loc 2 399 3 is_stmt 1 view .LVU118
 375              		.loc 2 399 17 is_stmt 0 view .LVU119
 376 0018 5860     		str	r0, [r3, #4]
 400:./lib/chibios/os/rt/include/chlists.h **** 
 401:./lib/chibios/os/rt/include/chlists.h ****   return p;
 377              		.loc 2 401 3 is_stmt 1 view .LVU120
 378              	.LVL18:
 379              		.loc 2 401 3 is_stmt 0 view .LVU121
 380              	.LBE107:
 381              	.LBE106:
 198:lib/chibios/os/rt/src/chschd.c ****                                             &tp->hdr.pqueue);
 199:lib/chibios/os/rt/src/chschd.c **** }
 382              		.loc 1 199 1 view .LVU122
 383 001a 7047     		bx	lr
 384              	.L24:
 385              		.align	2
 386              	.L23:
 387 001c 00000000 		.word	ch
 388              		.cfi_endproc
 389              	.LFE246:
 391              		.section	.text.chSchGoSleepS,"ax",%progbits
 392              		.align	1
 393              		.global	chSchGoSleepS
 394              		.syntax unified
 395              		.thumb
 396              		.thumb_func
 398              	chSchGoSleepS:
 399              	.LVL19:
 400              	.LFB247:
 200:lib/chibios/os/rt/src/chschd.c **** 
 201:lib/chibios/os/rt/src/chschd.c **** /**
 202:lib/chibios/os/rt/src/chschd.c ****  * @brief   Puts the current thread to sleep into the specified state.
 203:lib/chibios/os/rt/src/chschd.c ****  * @details The thread goes into a sleeping state. The possible
 204:lib/chibios/os/rt/src/chschd.c ****  *          @ref thread_states are defined into @p threads.h.
 205:lib/chibios/os/rt/src/chschd.c ****  *
 206:lib/chibios/os/rt/src/chschd.c ****  * @param[in] newstate  the new thread state
 207:lib/chibios/os/rt/src/chschd.c ****  *
 208:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 209:lib/chibios/os/rt/src/chschd.c ****  */
 210:lib/chibios/os/rt/src/chschd.c **** void chSchGoSleepS(tstate_t newstate) {
 401              		.loc 1 210 39 is_stmt 1 view -0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 0
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405              		@ link register save eliminated.
 211:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 406              		.loc 1 211 3 view .LVU124
 407              		.loc 1 211 13 is_stmt 0 view .LVU125
 408 0000 054B     		ldr	r3, .L26
 409 0002 1969     		ldr	r1, [r3, #16]
 410              	.LVL20:
 212:lib/chibios/os/rt/src/chschd.c **** 
 213:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 411              		.loc 1 213 21 is_stmt 1 view .LVU126
 214:lib/chibios/os/rt/src/chschd.c **** 
 215:lib/chibios/os/rt/src/chschd.c ****   /* New state.*/
 216:lib/chibios/os/rt/src/chschd.c ****   otp->state = newstate;
 412              		.loc 1 216 3 view .LVU127
 413              		.loc 1 216 14 is_stmt 0 view .LVU128
 414 0004 0874     		strb	r0, [r1, #16]
 217:lib/chibios/os/rt/src/chschd.c **** 
 218:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 219:lib/chibios/os/rt/src/chschd.c ****   /* The thread is renouncing its remaining time slices so it will have a new
 220:lib/chibios/os/rt/src/chschd.c ****      time quantum when it will wakeup.*/
 221:lib/chibios/os/rt/src/chschd.c ****   otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
 222:lib/chibios/os/rt/src/chschd.c **** #endif
 223:lib/chibios/os/rt/src/chschd.c **** 
 224:lib/chibios/os/rt/src/chschd.c ****   /* Next thread in ready list becomes current.*/
 225:lib/chibios/os/rt/src/chschd.c ****   currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 415              		.loc 1 225 3 is_stmt 1 view .LVU129
 416              	.LVL21:
 417              	.LBB108:
 418              	.LBI108:
 337:./lib/chibios/os/rt/include/chlists.h ****   ch_priority_queue_t *p = pqp->next;
 419              		.loc 2 337 36 view .LVU130
 420              	.LBB109:
 338:./lib/chibios/os/rt/include/chlists.h **** 
 421              		.loc 2 338 3 view .LVU131
 338:./lib/chibios/os/rt/include/chlists.h **** 
 422              		.loc 2 338 24 is_stmt 0 view .LVU132
 423 0006 1868     		ldr	r0, [r3]
 424              	.LVL22:
 340:./lib/chibios/os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 425              		.loc 2 340 3 is_stmt 1 view .LVU133
 340:./lib/chibios/os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 426              		.loc 2 340 22 is_stmt 0 view .LVU134
 427 0008 0268     		ldr	r2, [r0]
 340:./lib/chibios/os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 428              		.loc 2 340 19 view .LVU135
 429 000a 1A60     		str	r2, [r3]
 341:./lib/chibios/os/rt/include/chlists.h **** 
 430              		.loc 2 341 3 is_stmt 1 view .LVU136
 341:./lib/chibios/os/rt/include/chlists.h **** 
 431              		.loc 2 341 19 is_stmt 0 view .LVU137
 432 000c 5360     		str	r3, [r2, #4]
 433              	.LVL23:
 343:./lib/chibios/os/rt/include/chlists.h **** }
 434              		.loc 2 343 3 is_stmt 1 view .LVU138
 343:./lib/chibios/os/rt/include/chlists.h **** }
 435              		.loc 2 343 3 is_stmt 0 view .LVU139
 436              	.LBE109:
 437              	.LBE108:
 438              		.loc 1 225 9 view .LVU140
 439 000e 1861     		str	r0, [r3, #16]
 226:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 440              		.loc 1 226 3 is_stmt 1 view .LVU141
 441              		.loc 1 226 16 is_stmt 0 view .LVU142
 442 0010 0123     		movs	r3, #1
 443 0012 0374     		strb	r3, [r0, #16]
 227:lib/chibios/os/rt/src/chschd.c **** 
 228:lib/chibios/os/rt/src/chschd.c ****   /* Handling idle-enter hook.*/
 229:lib/chibios/os/rt/src/chschd.c ****   if (currp->hdr.pqueue.prio == IDLEPRIO) {
 444              		.loc 1 229 3 is_stmt 1 view .LVU143
 230:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_ENTER_HOOK();
 445              		.loc 1 230 5 view .LVU144
 446              		.loc 1 230 29 view .LVU145
 231:lib/chibios/os/rt/src/chschd.c ****   }
 232:lib/chibios/os/rt/src/chschd.c **** 
 233:lib/chibios/os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 234:lib/chibios/os/rt/src/chschd.c ****   chSysSwitch(currp, otp);
 447              		.loc 1 234 3 view .LVU146
 448              		.loc 1 234 3 view .LVU147
 449              		.loc 1 234 3 view .LVU148
 450              		.loc 1 234 3 view .LVU149
 451              		.loc 1 234 3 view .LVU150
 452 0014 FFF7FEBF 		b	_port_switch
 453              	.LVL24:
 454              	.L27:
 455              		.loc 1 234 3 is_stmt 0 view .LVU151
 456              		.align	2
 457              	.L26:
 458 0018 00000000 		.word	ch
 459              		.cfi_endproc
 460              	.LFE247:
 462              		.section	.text.chSchGoSleepTimeoutS,"ax",%progbits
 463              		.align	1
 464              		.global	chSchGoSleepTimeoutS
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 469              	chSchGoSleepTimeoutS:
 470              	.LVL25:
 471              	.LFB248:
 235:lib/chibios/os/rt/src/chschd.c **** }
 236:lib/chibios/os/rt/src/chschd.c **** 
 237:lib/chibios/os/rt/src/chschd.c **** /**
 238:lib/chibios/os/rt/src/chschd.c ****  * @brief   Puts the current thread to sleep into the specified state with
 239:lib/chibios/os/rt/src/chschd.c ****  *          timeout specification.
 240:lib/chibios/os/rt/src/chschd.c ****  * @details The thread goes into a sleeping state, if it is not awakened
 241:lib/chibios/os/rt/src/chschd.c ****  *          explicitly within the specified timeout then it is forcibly
 242:lib/chibios/os/rt/src/chschd.c ****  *          awakened with a @p MSG_TIMEOUT low level message. The possible
 243:lib/chibios/os/rt/src/chschd.c ****  *          @ref thread_states are defined into @p threads.h.
 244:lib/chibios/os/rt/src/chschd.c ****  *
 245:lib/chibios/os/rt/src/chschd.c ****  * @param[in] newstate  the new thread state
 246:lib/chibios/os/rt/src/chschd.c ****  * @param[in] timeout   the number of ticks before the operation timeouts, the
 247:lib/chibios/os/rt/src/chschd.c ****  *                      special values are handled as follow:
 248:lib/chibios/os/rt/src/chschd.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 249:lib/chibios/os/rt/src/chschd.c ****  *                        state, this is equivalent to invoking
 250:lib/chibios/os/rt/src/chschd.c ****  *                        @p chSchGoSleepS() but, of course, less efficient.
 251:lib/chibios/os/rt/src/chschd.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 252:lib/chibios/os/rt/src/chschd.c ****  *                      .
 253:lib/chibios/os/rt/src/chschd.c ****  * @return              The wakeup message.
 254:lib/chibios/os/rt/src/chschd.c ****  * @retval MSG_TIMEOUT  if a timeout occurs.
 255:lib/chibios/os/rt/src/chschd.c ****  *
 256:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 257:lib/chibios/os/rt/src/chschd.c ****  */
 258:lib/chibios/os/rt/src/chschd.c **** msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 472              		.loc 1 258 70 is_stmt 1 view -0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 24
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 259:lib/chibios/os/rt/src/chschd.c **** 
 260:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 476              		.loc 1 260 21 view .LVU153
 261:lib/chibios/os/rt/src/chschd.c **** 
 262:lib/chibios/os/rt/src/chschd.c ****   if (TIME_INFINITE != timeout) {
 477              		.loc 1 262 3 view .LVU154
 258:lib/chibios/os/rt/src/chschd.c **** 
 478              		.loc 1 258 70 is_stmt 0 view .LVU155
 479 0000 30B5     		push	{r4, r5, lr}
 480              		.cfi_def_cfa_offset 12
 481              		.cfi_offset 4, -12
 482              		.cfi_offset 5, -8
 483              		.cfi_offset 14, -4
 484              		.loc 1 262 6 view .LVU156
 485 0002 4B1C     		adds	r3, r1, #1
 486 0004 0B4D     		ldr	r5, .L35
 258:lib/chibios/os/rt/src/chschd.c **** 
 487              		.loc 1 258 70 view .LVU157
 488 0006 87B0     		sub	sp, sp, #28
 489              		.cfi_def_cfa_offset 40
 258:lib/chibios/os/rt/src/chschd.c **** 
 490              		.loc 1 258 70 view .LVU158
 491 0008 0446     		mov	r4, r0
 492              		.loc 1 262 6 view .LVU159
 493 000a 10D0     		beq	.L29
 494              	.LBB110:
 263:lib/chibios/os/rt/src/chschd.c ****     virtual_timer_t vt;
 495              		.loc 1 263 5 is_stmt 1 view .LVU160
 264:lib/chibios/os/rt/src/chschd.c **** 
 265:lib/chibios/os/rt/src/chschd.c ****     chVTDoSetI(&vt, timeout, wakeup, currp);
 496              		.loc 1 265 5 view .LVU161
 497 000c 2B69     		ldr	r3, [r5, #16]
 498 000e 0A4A     		ldr	r2, .L35+4
 499 0010 01A8     		add	r0, sp, #4
 500              	.LVL26:
 501              		.loc 1 265 5 is_stmt 0 view .LVU162
 502 0012 FFF7FEFF 		bl	chVTDoSetI
 503              	.LVL27:
 266:lib/chibios/os/rt/src/chschd.c ****     chSchGoSleepS(newstate);
 504              		.loc 1 266 5 is_stmt 1 view .LVU163
 505 0016 2046     		mov	r0, r4
 506 0018 FFF7FEFF 		bl	chSchGoSleepS
 507              	.LVL28:
 267:lib/chibios/os/rt/src/chschd.c ****     if (chVTIsArmedI(&vt)) {
 508              		.loc 1 267 5 view .LVU164
 509              	.LBB111:
 510              	.LBI111:
 511              		.file 7 "./lib/chibios/os/rt/include/chvt.h"
   1:./lib/chibios/os/rt/include/chvt.h **** /*
   2:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chvt.h **** 
   4:./lib/chibios/os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chvt.h **** 
   6:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chvt.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chvt.h **** 
  11:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chvt.h **** 
  16:./lib/chibios/os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chvt.h **** */
  19:./lib/chibios/os/rt/include/chvt.h **** 
  20:./lib/chibios/os/rt/include/chvt.h **** /**
  21:./lib/chibios/os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:./lib/chibios/os/rt/include/chvt.h ****  *
  24:./lib/chibios/os/rt/include/chvt.h ****  * @addtogroup time
  25:./lib/chibios/os/rt/include/chvt.h ****  * @{
  26:./lib/chibios/os/rt/include/chvt.h ****  */
  27:./lib/chibios/os/rt/include/chvt.h **** 
  28:./lib/chibios/os/rt/include/chvt.h **** #ifndef CHVT_H
  29:./lib/chibios/os/rt/include/chvt.h **** #define CHVT_H
  30:./lib/chibios/os/rt/include/chvt.h **** 
  31:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chvt.h **** 
  35:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chvt.h **** 
  39:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chvt.h **** 
  43:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:./lib/chibios/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:./lib/chibios/os/rt/include/chvt.h ****        "be zero or greater than one"
  46:./lib/chibios/os/rt/include/chvt.h **** #endif
  47:./lib/chibios/os/rt/include/chvt.h **** 
  48:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:./lib/chibios/os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:./lib/chibios/os/rt/include/chvt.h **** #endif
  51:./lib/chibios/os/rt/include/chvt.h **** 
  52:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:./lib/chibios/os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:./lib/chibios/os/rt/include/chvt.h **** #endif
  55:./lib/chibios/os/rt/include/chvt.h **** 
  56:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  57:./lib/chibios/os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  59:./lib/chibios/os/rt/include/chvt.h **** 
  60:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  61:./lib/chibios/os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  63:./lib/chibios/os/rt/include/chvt.h **** 
  64:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  65:./lib/chibios/os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  67:./lib/chibios/os/rt/include/chvt.h **** 
  68:./lib/chibios/os/rt/include/chvt.h **** /*
  69:./lib/chibios/os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:./lib/chibios/os/rt/include/chvt.h ****  */
  71:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
  72:./lib/chibios/os/rt/include/chvt.h **** extern "C" {
  73:./lib/chibios/os/rt/include/chvt.h **** #endif
  74:./lib/chibios/os/rt/include/chvt.h ****   void _vt_init(void);
  75:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  76:./lib/chibios/os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  77:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  78:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoTickI(void);
  79:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
  80:./lib/chibios/os/rt/include/chvt.h **** }
  81:./lib/chibios/os/rt/include/chvt.h **** #endif
  82:./lib/chibios/os/rt/include/chvt.h **** 
  83:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  84:./lib/chibios/os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  85:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  86:./lib/chibios/os/rt/include/chvt.h **** 
  87:./lib/chibios/os/rt/include/chvt.h **** /**
  88:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  89:./lib/chibios/os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  90:./lib/chibios/os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  91:./lib/chibios/os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  92:./lib/chibios/os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  93:./lib/chibios/os/rt/include/chvt.h ****  *
  94:./lib/chibios/os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  95:./lib/chibios/os/rt/include/chvt.h ****  *
  96:./lib/chibios/os/rt/include/chvt.h ****  * @init
  97:./lib/chibios/os/rt/include/chvt.h ****  */
  98:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
  99:./lib/chibios/os/rt/include/chvt.h **** 
 100:./lib/chibios/os/rt/include/chvt.h ****   vtp->func = NULL;
 101:./lib/chibios/os/rt/include/chvt.h **** }
 102:./lib/chibios/os/rt/include/chvt.h **** 
 103:./lib/chibios/os/rt/include/chvt.h **** /**
 104:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 105:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 106:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 107:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 108:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 109:./lib/chibios/os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 110:./lib/chibios/os/rt/include/chvt.h ****  *          @p systime_t size.
 111:./lib/chibios/os/rt/include/chvt.h ****  *
 112:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 113:./lib/chibios/os/rt/include/chvt.h ****  *
 114:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 115:./lib/chibios/os/rt/include/chvt.h ****  */
 116:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 117:./lib/chibios/os/rt/include/chvt.h **** 
 118:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 119:./lib/chibios/os/rt/include/chvt.h ****   return ch.vtlist.systime;
 120:./lib/chibios/os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 121:./lib/chibios/os/rt/include/chvt.h ****   return port_timer_get_time();
 122:./lib/chibios/os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 123:./lib/chibios/os/rt/include/chvt.h **** }
 124:./lib/chibios/os/rt/include/chvt.h **** 
 125:./lib/chibios/os/rt/include/chvt.h **** /**
 126:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 127:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 128:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 129:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 130:./lib/chibios/os/rt/include/chvt.h ****  *
 131:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 132:./lib/chibios/os/rt/include/chvt.h ****  *
 133:./lib/chibios/os/rt/include/chvt.h ****  * @api
 134:./lib/chibios/os/rt/include/chvt.h ****  */
 135:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 136:./lib/chibios/os/rt/include/chvt.h ****   systime_t systime;
 137:./lib/chibios/os/rt/include/chvt.h **** 
 138:./lib/chibios/os/rt/include/chvt.h ****   chSysLock();
 139:./lib/chibios/os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 140:./lib/chibios/os/rt/include/chvt.h ****   chSysUnlock();
 141:./lib/chibios/os/rt/include/chvt.h **** 
 142:./lib/chibios/os/rt/include/chvt.h ****   return systime;
 143:./lib/chibios/os/rt/include/chvt.h **** }
 144:./lib/chibios/os/rt/include/chvt.h **** 
 145:./lib/chibios/os/rt/include/chvt.h **** /**
 146:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 147:./lib/chibios/os/rt/include/chvt.h ****  *
 148:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     start time
 149:./lib/chibios/os/rt/include/chvt.h ****  * @return              The elapsed time.
 150:./lib/chibios/os/rt/include/chvt.h ****  *
 151:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 152:./lib/chibios/os/rt/include/chvt.h ****  */
 153:./lib/chibios/os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 154:./lib/chibios/os/rt/include/chvt.h **** 
 155:./lib/chibios/os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 156:./lib/chibios/os/rt/include/chvt.h **** }
 157:./lib/chibios/os/rt/include/chvt.h **** 
 158:./lib/chibios/os/rt/include/chvt.h **** /**
 159:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 160:./lib/chibios/os/rt/include/chvt.h ****  *          window.
 161:./lib/chibios/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 162:./lib/chibios/os/rt/include/chvt.h ****  *          time window has zero size.
 163:./lib/chibios/os/rt/include/chvt.h ****  *
 164:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 165:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 166:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 167:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 168:./lib/chibios/os/rt/include/chvt.h ****  *
 169:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 170:./lib/chibios/os/rt/include/chvt.h ****  */
 171:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 172:./lib/chibios/os/rt/include/chvt.h **** 
 173:./lib/chibios/os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 174:./lib/chibios/os/rt/include/chvt.h **** }
 175:./lib/chibios/os/rt/include/chvt.h **** 
 176:./lib/chibios/os/rt/include/chvt.h **** /**
 177:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 178:./lib/chibios/os/rt/include/chvt.h ****  *          window.
 179:./lib/chibios/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 180:./lib/chibios/os/rt/include/chvt.h ****  *          time window has zero size.
 181:./lib/chibios/os/rt/include/chvt.h ****  *
 182:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 183:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 184:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 185:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 186:./lib/chibios/os/rt/include/chvt.h ****  *
 187:./lib/chibios/os/rt/include/chvt.h ****  * @api
 188:./lib/chibios/os/rt/include/chvt.h ****  */
 189:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 190:./lib/chibios/os/rt/include/chvt.h **** 
 191:./lib/chibios/os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 192:./lib/chibios/os/rt/include/chvt.h **** }
 193:./lib/chibios/os/rt/include/chvt.h **** 
 194:./lib/chibios/os/rt/include/chvt.h **** /**
 195:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 196:./lib/chibios/os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 197:./lib/chibios/os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 198:./lib/chibios/os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 199:./lib/chibios/os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 200:./lib/chibios/os/rt/include/chvt.h ****  *
 201:./lib/chibios/os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 202:./lib/chibios/os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 203:./lib/chibios/os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 204:./lib/chibios/os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 205:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 206:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 207:./lib/chibios/os/rt/include/chvt.h ****  *
 208:./lib/chibios/os/rt/include/chvt.h ****  * @iclass
 209:./lib/chibios/os/rt/include/chvt.h ****  */
 210:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 211:./lib/chibios/os/rt/include/chvt.h ****   virtual_timers_list_t *vtlp = &ch.vtlist;
 212:./lib/chibios/os/rt/include/chvt.h ****   delta_list_t *dlp = &vtlp->dlist;
 213:./lib/chibios/os/rt/include/chvt.h **** 
 214:./lib/chibios/os/rt/include/chvt.h ****   chDbgCheckClassI();
 215:./lib/chibios/os/rt/include/chvt.h **** 
 216:./lib/chibios/os/rt/include/chvt.h ****   if (dlp == dlp->next) {
 217:./lib/chibios/os/rt/include/chvt.h ****     return false;
 218:./lib/chibios/os/rt/include/chvt.h ****   }
 219:./lib/chibios/os/rt/include/chvt.h **** 
 220:./lib/chibios/os/rt/include/chvt.h ****   if (timep != NULL) {
 221:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 222:./lib/chibios/os/rt/include/chvt.h ****     *timep = dlp->next->delta;
 223:./lib/chibios/os/rt/include/chvt.h **** #else
 224:./lib/chibios/os/rt/include/chvt.h ****     *timep = (dlp->next->delta + (sysinterval_t)CH_CFG_ST_TIMEDELTA) -
 225:./lib/chibios/os/rt/include/chvt.h ****              chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 226:./lib/chibios/os/rt/include/chvt.h **** #endif
 227:./lib/chibios/os/rt/include/chvt.h ****   }
 228:./lib/chibios/os/rt/include/chvt.h **** 
 229:./lib/chibios/os/rt/include/chvt.h ****   return true;
 230:./lib/chibios/os/rt/include/chvt.h **** }
 231:./lib/chibios/os/rt/include/chvt.h **** 
 232:./lib/chibios/os/rt/include/chvt.h **** /**
 233:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 234:./lib/chibios/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 235:./lib/chibios/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 236:./lib/chibios/os/rt/include/chvt.h ****  *
 237:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 238:./lib/chibios/os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 239:./lib/chibios/os/rt/include/chvt.h ****  *
 240:./lib/chibios/os/rt/include/chvt.h ****  * @iclass
 241:./lib/chibios/os/rt/include/chvt.h ****  */
 242:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 512              		.loc 7 242 20 view .LVU165
 513              	.LBB112:
 243:./lib/chibios/os/rt/include/chvt.h **** 
 244:./lib/chibios/os/rt/include/chvt.h ****   chDbgCheckClassI();
 514              		.loc 7 244 21 view .LVU166
 245:./lib/chibios/os/rt/include/chvt.h **** 
 246:./lib/chibios/os/rt/include/chvt.h ****   return (bool)(vtp->func != NULL);
 515              		.loc 7 246 3 view .LVU167
 516              		.loc 7 246 3 is_stmt 0 view .LVU168
 517              	.LBE112:
 518              	.LBE111:
 519              		.loc 1 267 8 view .LVU169
 520 001c 049B     		ldr	r3, [sp, #16]
 521 001e 13B1     		cbz	r3, .L31
 268:lib/chibios/os/rt/src/chschd.c ****       chVTDoResetI(&vt);
 522              		.loc 1 268 7 is_stmt 1 view .LVU170
 523 0020 01A8     		add	r0, sp, #4
 524 0022 FFF7FEFF 		bl	chVTDoResetI
 525              	.LVL29:
 526              	.L31:
 527              	.LBE110:
 269:lib/chibios/os/rt/src/chschd.c ****     }
 270:lib/chibios/os/rt/src/chschd.c ****   }
 271:lib/chibios/os/rt/src/chschd.c ****   else {
 272:lib/chibios/os/rt/src/chschd.c ****     chSchGoSleepS(newstate);
 273:lib/chibios/os/rt/src/chschd.c ****   }
 274:lib/chibios/os/rt/src/chschd.c **** 
 275:lib/chibios/os/rt/src/chschd.c ****   return currp->u.rdymsg;
 528              		.loc 1 275 3 view .LVU171
 529              		.loc 1 275 18 is_stmt 0 view .LVU172
 530 0026 2B69     		ldr	r3, [r5, #16]
 276:lib/chibios/os/rt/src/chschd.c **** }
 531              		.loc 1 276 1 view .LVU173
 532 0028 5869     		ldr	r0, [r3, #20]
 533 002a 07B0     		add	sp, sp, #28
 534              		.cfi_remember_state
 535              		.cfi_def_cfa_offset 12
 536              		@ sp needed
 537 002c 30BD     		pop	{r4, r5, pc}
 538              	.LVL30:
 539              	.L29:
 540              		.cfi_restore_state
 272:lib/chibios/os/rt/src/chschd.c ****   }
 541              		.loc 1 272 5 is_stmt 1 view .LVU174
 542 002e FFF7FEFF 		bl	chSchGoSleepS
 543              	.LVL31:
 272:lib/chibios/os/rt/src/chschd.c ****   }
 544              		.loc 1 272 5 is_stmt 0 view .LVU175
 545 0032 F8E7     		b	.L31
 546              	.L36:
 547              		.align	2
 548              	.L35:
 549 0034 00000000 		.word	ch
 550 0038 00000000 		.word	wakeup
 551              		.cfi_endproc
 552              	.LFE248:
 554              		.section	.text.chSchWakeupS,"ax",%progbits
 555              		.align	1
 556              		.global	chSchWakeupS
 557              		.syntax unified
 558              		.thumb
 559              		.thumb_func
 561              	chSchWakeupS:
 562              	.LVL32:
 563              	.LFB249:
 277:lib/chibios/os/rt/src/chschd.c **** 
 278:lib/chibios/os/rt/src/chschd.c **** /**
 279:lib/chibios/os/rt/src/chschd.c ****  * @brief   Wakes up a thread.
 280:lib/chibios/os/rt/src/chschd.c ****  * @details The thread is inserted into the ready list or immediately made
 281:lib/chibios/os/rt/src/chschd.c ****  *          running depending on its relative priority compared to the current
 282:lib/chibios/os/rt/src/chschd.c ****  *          thread.
 283:lib/chibios/os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 284:lib/chibios/os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 285:lib/chibios/os/rt/src/chschd.c ****  * @note    It is equivalent to a @p chSchReadyI() followed by a
 286:lib/chibios/os/rt/src/chschd.c ****  *          @p chSchRescheduleS() but much more efficient.
 287:lib/chibios/os/rt/src/chschd.c ****  * @note    The function assumes that the current thread has the highest
 288:lib/chibios/os/rt/src/chschd.c ****  *          priority.
 289:lib/chibios/os/rt/src/chschd.c ****  *
 290:lib/chibios/os/rt/src/chschd.c ****  * @param[in] ntp       the thread to be made ready
 291:lib/chibios/os/rt/src/chschd.c ****  * @param[in] msg       the wakeup message
 292:lib/chibios/os/rt/src/chschd.c ****  *
 293:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 294:lib/chibios/os/rt/src/chschd.c ****  */
 295:lib/chibios/os/rt/src/chschd.c **** void chSchWakeupS(thread_t *ntp, msg_t msg) {
 564              		.loc 1 295 45 is_stmt 1 view -0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 296:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 568              		.loc 1 296 3 view .LVU177
 295:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 569              		.loc 1 295 45 is_stmt 0 view .LVU178
 570 0000 38B5     		push	{r3, r4, r5, lr}
 571              		.cfi_def_cfa_offset 16
 572              		.cfi_offset 3, -16
 573              		.cfi_offset 4, -12
 574              		.cfi_offset 5, -8
 575              		.cfi_offset 14, -4
 576              		.loc 1 296 13 view .LVU179
 577 0002 0C4D     		ldr	r5, .L39
 297:lib/chibios/os/rt/src/chschd.c **** 
 298:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 299:lib/chibios/os/rt/src/chschd.c **** 
 300:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 301:lib/chibios/os/rt/src/chschd.c ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 302:lib/chibios/os/rt/src/chschd.c ****               "priority order violation");
 303:lib/chibios/os/rt/src/chschd.c **** 
 304:lib/chibios/os/rt/src/chschd.c ****   /* Storing the message to be retrieved by the target thread when it will
 305:lib/chibios/os/rt/src/chschd.c ****      restart execution.*/
 306:lib/chibios/os/rt/src/chschd.c ****   ntp->u.rdymsg = msg;
 578              		.loc 1 306 17 view .LVU180
 579 0004 4161     		str	r1, [r0, #20]
 296:lib/chibios/os/rt/src/chschd.c **** 
 580              		.loc 1 296 13 view .LVU181
 581 0006 2B69     		ldr	r3, [r5, #16]
 582              	.LVL33:
 298:lib/chibios/os/rt/src/chschd.c **** 
 583              		.loc 1 298 21 is_stmt 1 view .LVU182
 300:lib/chibios/os/rt/src/chschd.c ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 584              		.loc 1 300 3 view .LVU183
 300:lib/chibios/os/rt/src/chschd.c ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 585              		.loc 1 300 3 view .LVU184
 300:lib/chibios/os/rt/src/chschd.c ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 586              		.loc 1 300 3 view .LVU185
 587              		.loc 1 306 3 view .LVU186
 307:lib/chibios/os/rt/src/chschd.c **** 
 308:lib/chibios/os/rt/src/chschd.c ****   /* If the waken thread has a not-greater priority than the current
 309:lib/chibios/os/rt/src/chschd.c ****      one then it is just inserted in the ready list else it made
 310:lib/chibios/os/rt/src/chschd.c ****      running immediately and the invoking thread goes in the ready
 311:lib/chibios/os/rt/src/chschd.c ****      list instead.*/
 312:lib/chibios/os/rt/src/chschd.c ****   if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
 588              		.loc 1 312 3 view .LVU187
 589              		.loc 1 312 6 is_stmt 0 view .LVU188
 590 0008 8168     		ldr	r1, [r0, #8]
 591              	.LVL34:
 592              		.loc 1 312 6 view .LVU189
 593 000a 9A68     		ldr	r2, [r3, #8]
 594 000c 9142     		cmp	r1, r2
 295:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 595              		.loc 1 295 45 view .LVU190
 596 000e 0446     		mov	r4, r0
 597              		.loc 1 312 6 view .LVU191
 598 0010 03D8     		bhi	.L38
 313:lib/chibios/os/rt/src/chschd.c ****     (void) chSchReadyI(ntp);
 599              		.loc 1 313 5 is_stmt 1 view .LVU192
 314:lib/chibios/os/rt/src/chschd.c ****   }
 315:lib/chibios/os/rt/src/chschd.c ****   else {
 316:lib/chibios/os/rt/src/chschd.c ****     otp = chSchReadyAheadI(otp);
 317:lib/chibios/os/rt/src/chschd.c **** 
 318:lib/chibios/os/rt/src/chschd.c ****     /* Handling idle-leave hook.*/
 319:lib/chibios/os/rt/src/chschd.c ****     if (otp->hdr.pqueue.prio == IDLEPRIO) {
 320:lib/chibios/os/rt/src/chschd.c ****       CH_CFG_IDLE_LEAVE_HOOK();
 321:lib/chibios/os/rt/src/chschd.c ****     }
 322:lib/chibios/os/rt/src/chschd.c **** 
 323:lib/chibios/os/rt/src/chschd.c ****     /* The extracted thread is marked as current.*/
 324:lib/chibios/os/rt/src/chschd.c ****     currp = ntp;
 325:lib/chibios/os/rt/src/chschd.c ****     ntp->state = CH_STATE_CURRENT;
 326:lib/chibios/os/rt/src/chschd.c **** 
 327:lib/chibios/os/rt/src/chschd.c ****     /* Swap operation as tail call.*/
 328:lib/chibios/os/rt/src/chschd.c ****     chSysSwitch(ntp, otp);
 329:lib/chibios/os/rt/src/chschd.c ****   }
 330:lib/chibios/os/rt/src/chschd.c **** }
 600              		.loc 1 330 1 is_stmt 0 view .LVU193
 601 0012 BDE83840 		pop	{r3, r4, r5, lr}
 602              		.cfi_remember_state
 603              		.cfi_restore 14
 604              		.cfi_restore 5
 605              		.cfi_restore 4
 606              		.cfi_restore 3
 607              		.cfi_def_cfa_offset 0
 608              	.LVL35:
 313:lib/chibios/os/rt/src/chschd.c ****     (void) chSchReadyI(ntp);
 609              		.loc 1 313 12 view .LVU194
 610 0016 FFF7FEBF 		b	chSchReadyI
 611              	.LVL36:
 612              	.L38:
 613              		.cfi_restore_state
 316:lib/chibios/os/rt/src/chschd.c **** 
 614              		.loc 1 316 5 is_stmt 1 view .LVU195
 316:lib/chibios/os/rt/src/chschd.c **** 
 615              		.loc 1 316 11 is_stmt 0 view .LVU196
 616 001a 1846     		mov	r0, r3
 617              	.LVL37:
 316:lib/chibios/os/rt/src/chschd.c **** 
 618              		.loc 1 316 11 view .LVU197
 619 001c FFF7FEFF 		bl	chSchReadyAheadI
 620              	.LVL38:
 325:lib/chibios/os/rt/src/chschd.c **** 
 621              		.loc 1 325 16 view .LVU198
 622 0020 0123     		movs	r3, #1
 324:lib/chibios/os/rt/src/chschd.c ****     ntp->state = CH_STATE_CURRENT;
 623              		.loc 1 324 11 view .LVU199
 624 0022 2C61     		str	r4, [r5, #16]
 325:lib/chibios/os/rt/src/chschd.c **** 
 625              		.loc 1 325 16 view .LVU200
 626 0024 2374     		strb	r3, [r4, #16]
 316:lib/chibios/os/rt/src/chschd.c **** 
 627              		.loc 1 316 11 view .LVU201
 628 0026 0146     		mov	r1, r0
 629              	.LVL39:
 319:lib/chibios/os/rt/src/chschd.c ****       CH_CFG_IDLE_LEAVE_HOOK();
 630              		.loc 1 319 5 is_stmt 1 view .LVU202
 320:lib/chibios/os/rt/src/chschd.c ****     }
 631              		.loc 1 320 7 view .LVU203
 320:lib/chibios/os/rt/src/chschd.c ****     }
 632              		.loc 1 320 31 view .LVU204
 324:lib/chibios/os/rt/src/chschd.c ****     ntp->state = CH_STATE_CURRENT;
 633              		.loc 1 324 5 view .LVU205
 325:lib/chibios/os/rt/src/chschd.c **** 
 634              		.loc 1 325 5 view .LVU206
 328:lib/chibios/os/rt/src/chschd.c ****   }
 635              		.loc 1 328 5 view .LVU207
 328:lib/chibios/os/rt/src/chschd.c ****   }
 636              		.loc 1 328 5 view .LVU208
 328:lib/chibios/os/rt/src/chschd.c ****   }
 637              		.loc 1 328 5 view .LVU209
 328:lib/chibios/os/rt/src/chschd.c ****   }
 638              		.loc 1 328 5 view .LVU210
 328:lib/chibios/os/rt/src/chschd.c ****   }
 639              		.loc 1 328 5 view .LVU211
 640 0028 2046     		mov	r0, r4
 641              	.LVL40:
 642              		.loc 1 330 1 is_stmt 0 view .LVU212
 643 002a BDE83840 		pop	{r3, r4, r5, lr}
 644              		.cfi_restore 14
 645              		.cfi_restore 5
 646              		.cfi_restore 4
 647              		.cfi_restore 3
 648              		.cfi_def_cfa_offset 0
 649              	.LVL41:
 328:lib/chibios/os/rt/src/chschd.c ****   }
 650              		.loc 1 328 5 view .LVU213
 651 002e FFF7FEBF 		b	_port_switch
 652              	.LVL42:
 653              	.L40:
 328:lib/chibios/os/rt/src/chschd.c ****   }
 654              		.loc 1 328 5 view .LVU214
 655 0032 00BF     		.align	2
 656              	.L39:
 657 0034 00000000 		.word	ch
 658              		.cfi_endproc
 659              	.LFE249:
 661              		.section	.text.chSchIsPreemptionRequired,"ax",%progbits
 662              		.align	1
 663              		.global	chSchIsPreemptionRequired
 664              		.syntax unified
 665              		.thumb
 666              		.thumb_func
 668              	chSchIsPreemptionRequired:
 669              	.LFB251:
 331:lib/chibios/os/rt/src/chschd.c **** 
 332:lib/chibios/os/rt/src/chschd.c **** /**
 333:lib/chibios/os/rt/src/chschd.c ****  * @brief   Performs a reschedule if a higher priority thread is runnable.
 334:lib/chibios/os/rt/src/chschd.c ****  * @details If a thread with a higher priority than the current thread is in
 335:lib/chibios/os/rt/src/chschd.c ****  *          the ready list then make the higher priority thread running.
 336:lib/chibios/os/rt/src/chschd.c ****  *
 337:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 338:lib/chibios/os/rt/src/chschd.c ****  */
 339:lib/chibios/os/rt/src/chschd.c **** void chSchRescheduleS(void) {
 340:lib/chibios/os/rt/src/chschd.c **** 
 341:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 342:lib/chibios/os/rt/src/chschd.c **** 
 343:lib/chibios/os/rt/src/chschd.c ****   if (chSchIsRescRequiredI()) {
 344:lib/chibios/os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 345:lib/chibios/os/rt/src/chschd.c ****   }
 346:lib/chibios/os/rt/src/chschd.c **** }
 347:lib/chibios/os/rt/src/chschd.c **** 
 348:lib/chibios/os/rt/src/chschd.c **** #if !defined(CH_SCH_IS_PREEMPTION_REQUIRED_HOOKED)
 349:lib/chibios/os/rt/src/chschd.c **** /**
 350:lib/chibios/os/rt/src/chschd.c ****  * @brief   Evaluates if preemption is required.
 351:lib/chibios/os/rt/src/chschd.c ****  * @details The decision is taken by comparing the relative priorities and
 352:lib/chibios/os/rt/src/chschd.c ****  *          depending on the state of the round robin timeout counter.
 353:lib/chibios/os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 354:lib/chibios/os/rt/src/chschd.c ****  *          itself or from within the port layer.
 355:lib/chibios/os/rt/src/chschd.c ****  *
 356:lib/chibios/os/rt/src/chschd.c ****  * @retval true         if there is a thread that must go in running state
 357:lib/chibios/os/rt/src/chschd.c ****  *                      immediately.
 358:lib/chibios/os/rt/src/chschd.c ****  * @retval false        if preemption is not required.
 359:lib/chibios/os/rt/src/chschd.c ****  *
 360:lib/chibios/os/rt/src/chschd.c ****  * @special
 361:lib/chibios/os/rt/src/chschd.c ****  */
 362:lib/chibios/os/rt/src/chschd.c **** bool chSchIsPreemptionRequired(void) {
 670              		.loc 1 362 38 is_stmt 1 view -0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 0
 673              		@ frame_needed = 0, uses_anonymous_args = 0
 674              		@ link register save eliminated.
 363:lib/chibios/os/rt/src/chschd.c ****   tprio_t p1 = firstprio(&ch.rlist.pqueue);
 675              		.loc 1 363 3 view .LVU216
 676              	.LVL43:
 364:lib/chibios/os/rt/src/chschd.c ****   tprio_t p2 = currp->hdr.pqueue.prio;
 677              		.loc 1 364 3 view .LVU217
 365:lib/chibios/os/rt/src/chschd.c **** 
 366:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 367:lib/chibios/os/rt/src/chschd.c ****   /* If the running thread has not reached its time quantum, reschedule only
 368:lib/chibios/os/rt/src/chschd.c ****      if the first thread on the ready queue has a higher priority.
 369:lib/chibios/os/rt/src/chschd.c ****      Otherwise, if the running thread has used up its time quantum, reschedule
 370:lib/chibios/os/rt/src/chschd.c ****      if the first thread on the ready queue has equal or higher priority.*/
 371:lib/chibios/os/rt/src/chschd.c ****   return (currp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 372:lib/chibios/os/rt/src/chschd.c **** #else
 373:lib/chibios/os/rt/src/chschd.c ****   /* If the round robin preemption feature is not enabled then performs a
 374:lib/chibios/os/rt/src/chschd.c ****      simpler comparison.*/
 375:lib/chibios/os/rt/src/chschd.c ****   return p1 > p2;
 678              		.loc 1 375 3 view .LVU218
 363:lib/chibios/os/rt/src/chschd.c ****   tprio_t p2 = currp->hdr.pqueue.prio;
 679              		.loc 1 363 16 is_stmt 0 view .LVU219
 680 0000 044B     		ldr	r3, .L42
 681              	.LVL44:
 363:lib/chibios/os/rt/src/chschd.c ****   tprio_t p2 = currp->hdr.pqueue.prio;
 682              		.loc 1 363 11 view .LVU220
 683 0002 1A68     		ldr	r2, [r3]
 364:lib/chibios/os/rt/src/chschd.c ****   tprio_t p2 = currp->hdr.pqueue.prio;
 684              		.loc 1 364 11 view .LVU221
 685 0004 1B69     		ldr	r3, [r3, #16]
 686              	.LVL45:
 687              		.loc 1 375 13 view .LVU222
 688 0006 9068     		ldr	r0, [r2, #8]
 689 0008 9B68     		ldr	r3, [r3, #8]
 376:lib/chibios/os/rt/src/chschd.c **** #endif
 377:lib/chibios/os/rt/src/chschd.c **** }
 690              		.loc 1 377 1 view .LVU223
 691 000a 9842     		cmp	r0, r3
 692 000c 94BF     		ite	ls
 693 000e 0020     		movls	r0, #0
 694 0010 0120     		movhi	r0, #1
 695 0012 7047     		bx	lr
 696              	.L43:
 697              		.align	2
 698              	.L42:
 699 0014 00000000 		.word	ch
 700              		.cfi_endproc
 701              	.LFE251:
 703              		.thumb_set chSchIsRescRequiredI,chSchIsPreemptionRequired
 704              		.section	.text.chSchDoRescheduleBehind,"ax",%progbits
 705              		.align	1
 706              		.global	chSchDoRescheduleBehind
 707              		.syntax unified
 708              		.thumb
 709              		.thumb_func
 711              	chSchDoRescheduleBehind:
 712              	.LFB252:
 378:lib/chibios/os/rt/src/chschd.c **** #endif /* !defined(CH_SCH_IS_PREEMPTION_REQUIRED_HOOKED) */
 379:lib/chibios/os/rt/src/chschd.c **** 
 380:lib/chibios/os/rt/src/chschd.c **** /**
 381:lib/chibios/os/rt/src/chschd.c ****  * @brief   Switches to the first thread on the runnable queue.
 382:lib/chibios/os/rt/src/chschd.c ****  * @details The current thread is positioned in the ready list behind all
 383:lib/chibios/os/rt/src/chschd.c ****  *          threads having the same priority. The thread regains its time
 384:lib/chibios/os/rt/src/chschd.c ****  *          quantum.
 385:lib/chibios/os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 386:lib/chibios/os/rt/src/chschd.c ****  *          itself.
 387:lib/chibios/os/rt/src/chschd.c ****  *
 388:lib/chibios/os/rt/src/chschd.c ****  * @special
 389:lib/chibios/os/rt/src/chschd.c ****  */
 390:lib/chibios/os/rt/src/chschd.c **** void chSchDoRescheduleBehind(void) {
 713              		.loc 1 390 36 is_stmt 1 view -0
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 0
 716              		@ frame_needed = 0, uses_anonymous_args = 0
 391:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 717              		.loc 1 391 3 view .LVU225
 390:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 718              		.loc 1 390 36 is_stmt 0 view .LVU226
 719 0000 10B5     		push	{r4, lr}
 720              		.cfi_def_cfa_offset 8
 721              		.cfi_offset 4, -8
 722              		.cfi_offset 14, -4
 723              		.loc 1 391 13 view .LVU227
 724 0002 084C     		ldr	r4, .L45
 725              	.LBB113:
 726              	.LBB114:
 338:./lib/chibios/os/rt/include/chlists.h **** 
 727              		.loc 2 338 24 view .LVU228
 728 0004 2368     		ldr	r3, [r4]
 729              	.LBE114:
 730              	.LBE113:
 731              		.loc 1 391 13 view .LVU229
 732 0006 2069     		ldr	r0, [r4, #16]
 733              	.LVL46:
 392:lib/chibios/os/rt/src/chschd.c **** 
 393:lib/chibios/os/rt/src/chschd.c ****   /* Picks the first thread from the ready queue and makes it current.*/
 394:lib/chibios/os/rt/src/chschd.c ****   currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 734              		.loc 1 394 3 is_stmt 1 view .LVU230
 735              	.LBB116:
 736              	.LBI113:
 337:./lib/chibios/os/rt/include/chlists.h ****   ch_priority_queue_t *p = pqp->next;
 737              		.loc 2 337 36 view .LVU231
 738              	.LBB115:
 338:./lib/chibios/os/rt/include/chlists.h **** 
 739              		.loc 2 338 3 view .LVU232
 340:./lib/chibios/os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 740              		.loc 2 340 3 view .LVU233
 340:./lib/chibios/os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 741              		.loc 2 340 22 is_stmt 0 view .LVU234
 742 0008 1A68     		ldr	r2, [r3]
 340:./lib/chibios/os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 743              		.loc 2 340 19 view .LVU235
 744 000a 2260     		str	r2, [r4]
 341:./lib/chibios/os/rt/include/chlists.h **** 
 745              		.loc 2 341 3 is_stmt 1 view .LVU236
 341:./lib/chibios/os/rt/include/chlists.h **** 
 746              		.loc 2 341 19 is_stmt 0 view .LVU237
 747 000c 5460     		str	r4, [r2, #4]
 343:./lib/chibios/os/rt/include/chlists.h **** }
 748              		.loc 2 343 3 is_stmt 1 view .LVU238
 749              	.LVL47:
 343:./lib/chibios/os/rt/include/chlists.h **** }
 750              		.loc 2 343 3 is_stmt 0 view .LVU239
 751              	.LBE115:
 752              	.LBE116:
 395:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 753              		.loc 1 395 16 view .LVU240
 754 000e 0122     		movs	r2, #1
 394:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 755              		.loc 1 394 9 view .LVU241
 756 0010 2361     		str	r3, [r4, #16]
 757              		.loc 1 395 3 is_stmt 1 view .LVU242
 758              		.loc 1 395 16 is_stmt 0 view .LVU243
 759 0012 1A74     		strb	r2, [r3, #16]
 396:lib/chibios/os/rt/src/chschd.c **** 
 397:lib/chibios/os/rt/src/chschd.c ****   /* Handling idle-leave hook.*/
 398:lib/chibios/os/rt/src/chschd.c ****   if (otp->hdr.pqueue.prio == IDLEPRIO) {
 760              		.loc 1 398 3 is_stmt 1 view .LVU244
 399:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 761              		.loc 1 399 5 view .LVU245
 762              		.loc 1 399 29 view .LVU246
 400:lib/chibios/os/rt/src/chschd.c ****   }
 401:lib/chibios/os/rt/src/chschd.c **** 
 402:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 403:lib/chibios/os/rt/src/chschd.c ****   /* It went behind peers so it gets a new time quantum.*/
 404:lib/chibios/os/rt/src/chschd.c ****   otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
 405:lib/chibios/os/rt/src/chschd.c **** #endif
 406:lib/chibios/os/rt/src/chschd.c **** 
 407:lib/chibios/os/rt/src/chschd.c ****   /* Placing in ready list behind peers.*/
 408:lib/chibios/os/rt/src/chschd.c ****   otp = chSchReadyI(otp);
 763              		.loc 1 408 3 view .LVU247
 764              		.loc 1 408 9 is_stmt 0 view .LVU248
 765 0014 FFF7FEFF 		bl	chSchReadyI
 766              	.LVL48:
 767              		.loc 1 408 9 view .LVU249
 768 0018 0146     		mov	r1, r0
 769              	.LVL49:
 409:lib/chibios/os/rt/src/chschd.c **** 
 410:lib/chibios/os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 411:lib/chibios/os/rt/src/chschd.c ****   chSysSwitch(currp, otp);
 770              		.loc 1 411 3 is_stmt 1 view .LVU250
 771              		.loc 1 411 3 view .LVU251
 772              		.loc 1 411 3 view .LVU252
 773              		.loc 1 411 3 view .LVU253
 774              		.loc 1 411 3 view .LVU254
 775 001a 2069     		ldr	r0, [r4, #16]
 776              	.LVL50:
 412:lib/chibios/os/rt/src/chschd.c **** }
 777              		.loc 1 412 1 is_stmt 0 view .LVU255
 778 001c BDE81040 		pop	{r4, lr}
 779              		.cfi_restore 14
 780              		.cfi_restore 4
 781              		.cfi_def_cfa_offset 0
 411:lib/chibios/os/rt/src/chschd.c **** }
 782              		.loc 1 411 3 view .LVU256
 783 0020 FFF7FEBF 		b	_port_switch
 784              	.LVL51:
 785              	.L46:
 411:lib/chibios/os/rt/src/chschd.c **** }
 786              		.loc 1 411 3 view .LVU257
 787              		.align	2
 788              	.L45:
 789 0024 00000000 		.word	ch
 790              		.cfi_endproc
 791              	.LFE252:
 793              		.section	.text.chSchDoRescheduleAhead,"ax",%progbits
 794              		.align	1
 795              		.global	chSchDoRescheduleAhead
 796              		.syntax unified
 797              		.thumb
 798              		.thumb_func
 800              	chSchDoRescheduleAhead:
 801              	.LFB253:
 413:lib/chibios/os/rt/src/chschd.c **** 
 414:lib/chibios/os/rt/src/chschd.c **** /**
 415:lib/chibios/os/rt/src/chschd.c ****  * @brief   Switches to the first thread on the runnable queue.
 416:lib/chibios/os/rt/src/chschd.c ****  * @details The current thread is positioned in the ready list ahead of all
 417:lib/chibios/os/rt/src/chschd.c ****  *          threads having the same priority.
 418:lib/chibios/os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 419:lib/chibios/os/rt/src/chschd.c ****  *          itself.
 420:lib/chibios/os/rt/src/chschd.c ****  *
 421:lib/chibios/os/rt/src/chschd.c ****  * @special
 422:lib/chibios/os/rt/src/chschd.c ****  */
 423:lib/chibios/os/rt/src/chschd.c **** void chSchDoRescheduleAhead(void) {
 802              		.loc 1 423 35 is_stmt 1 view -0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 424:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 806              		.loc 1 424 3 view .LVU259
 423:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 807              		.loc 1 423 35 is_stmt 0 view .LVU260
 808 0000 10B5     		push	{r4, lr}
 809              		.cfi_def_cfa_offset 8
 810              		.cfi_offset 4, -8
 811              		.cfi_offset 14, -4
 812              		.loc 1 424 13 view .LVU261
 813 0002 084C     		ldr	r4, .L48
 814              	.LBB117:
 815              	.LBB118:
 338:./lib/chibios/os/rt/include/chlists.h **** 
 816              		.loc 2 338 24 view .LVU262
 817 0004 2368     		ldr	r3, [r4]
 818              	.LBE118:
 819              	.LBE117:
 820              		.loc 1 424 13 view .LVU263
 821 0006 2069     		ldr	r0, [r4, #16]
 822              	.LVL52:
 425:lib/chibios/os/rt/src/chschd.c **** 
 426:lib/chibios/os/rt/src/chschd.c ****   /* Picks the first thread from the ready queue and makes it current.*/
 427:lib/chibios/os/rt/src/chschd.c ****   currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 823              		.loc 1 427 3 is_stmt 1 view .LVU264
 824              	.LBB120:
 825              	.LBI117:
 337:./lib/chibios/os/rt/include/chlists.h ****   ch_priority_queue_t *p = pqp->next;
 826              		.loc 2 337 36 view .LVU265
 827              	.LBB119:
 338:./lib/chibios/os/rt/include/chlists.h **** 
 828              		.loc 2 338 3 view .LVU266
 340:./lib/chibios/os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 829              		.loc 2 340 3 view .LVU267
 340:./lib/chibios/os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 830              		.loc 2 340 22 is_stmt 0 view .LVU268
 831 0008 1A68     		ldr	r2, [r3]
 340:./lib/chibios/os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 832              		.loc 2 340 19 view .LVU269
 833 000a 2260     		str	r2, [r4]
 341:./lib/chibios/os/rt/include/chlists.h **** 
 834              		.loc 2 341 3 is_stmt 1 view .LVU270
 341:./lib/chibios/os/rt/include/chlists.h **** 
 835              		.loc 2 341 19 is_stmt 0 view .LVU271
 836 000c 5460     		str	r4, [r2, #4]
 343:./lib/chibios/os/rt/include/chlists.h **** }
 837              		.loc 2 343 3 is_stmt 1 view .LVU272
 838              	.LVL53:
 343:./lib/chibios/os/rt/include/chlists.h **** }
 839              		.loc 2 343 3 is_stmt 0 view .LVU273
 840              	.LBE119:
 841              	.LBE120:
 428:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 842              		.loc 1 428 16 view .LVU274
 843 000e 0122     		movs	r2, #1
 427:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 844              		.loc 1 427 9 view .LVU275
 845 0010 2361     		str	r3, [r4, #16]
 846              		.loc 1 428 3 is_stmt 1 view .LVU276
 847              		.loc 1 428 16 is_stmt 0 view .LVU277
 848 0012 1A74     		strb	r2, [r3, #16]
 429:lib/chibios/os/rt/src/chschd.c **** 
 430:lib/chibios/os/rt/src/chschd.c ****   /* Handling idle-leave hook.*/
 431:lib/chibios/os/rt/src/chschd.c ****   if (otp->hdr.pqueue.prio == IDLEPRIO) {
 849              		.loc 1 431 3 is_stmt 1 view .LVU278
 432:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 850              		.loc 1 432 5 view .LVU279
 851              		.loc 1 432 29 view .LVU280
 433:lib/chibios/os/rt/src/chschd.c ****   }
 434:lib/chibios/os/rt/src/chschd.c **** 
 435:lib/chibios/os/rt/src/chschd.c ****   /* Placing in ready list ahead of peers.*/
 436:lib/chibios/os/rt/src/chschd.c ****   otp = chSchReadyAheadI(otp);
 852              		.loc 1 436 3 view .LVU281
 853              		.loc 1 436 9 is_stmt 0 view .LVU282
 854 0014 FFF7FEFF 		bl	chSchReadyAheadI
 855              	.LVL54:
 856              		.loc 1 436 9 view .LVU283
 857 0018 0146     		mov	r1, r0
 858              	.LVL55:
 437:lib/chibios/os/rt/src/chschd.c **** 
 438:lib/chibios/os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 439:lib/chibios/os/rt/src/chschd.c ****   chSysSwitch(currp, otp);
 859              		.loc 1 439 3 is_stmt 1 view .LVU284
 860              		.loc 1 439 3 view .LVU285
 861              		.loc 1 439 3 view .LVU286
 862              		.loc 1 439 3 view .LVU287
 863              		.loc 1 439 3 view .LVU288
 864 001a 2069     		ldr	r0, [r4, #16]
 865              	.LVL56:
 440:lib/chibios/os/rt/src/chschd.c **** }
 866              		.loc 1 440 1 is_stmt 0 view .LVU289
 867 001c BDE81040 		pop	{r4, lr}
 868              		.cfi_restore 14
 869              		.cfi_restore 4
 870              		.cfi_def_cfa_offset 0
 439:lib/chibios/os/rt/src/chschd.c **** }
 871              		.loc 1 439 3 view .LVU290
 872 0020 FFF7FEBF 		b	_port_switch
 873              	.LVL57:
 874              	.L49:
 439:lib/chibios/os/rt/src/chschd.c **** }
 875              		.loc 1 439 3 view .LVU291
 876              		.align	2
 877              	.L48:
 878 0024 00000000 		.word	ch
 879              		.cfi_endproc
 880              	.LFE253:
 882              		.section	.text.chSchRescheduleS,"ax",%progbits
 883              		.align	1
 884              		.global	chSchRescheduleS
 885              		.syntax unified
 886              		.thumb
 887              		.thumb_func
 889              	chSchRescheduleS:
 890              	.LFB250:
 339:lib/chibios/os/rt/src/chschd.c **** 
 891              		.loc 1 339 29 is_stmt 1 view -0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 0
 894              		@ frame_needed = 0, uses_anonymous_args = 0
 341:lib/chibios/os/rt/src/chschd.c **** 
 895              		.loc 1 341 21 view .LVU293
 343:lib/chibios/os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 896              		.loc 1 343 3 view .LVU294
 339:lib/chibios/os/rt/src/chschd.c **** 
 897              		.loc 1 339 29 is_stmt 0 view .LVU295
 898 0000 08B5     		push	{r3, lr}
 899              		.cfi_def_cfa_offset 8
 900              		.cfi_offset 3, -8
 901              		.cfi_offset 14, -4
 343:lib/chibios/os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 902              		.loc 1 343 7 view .LVU296
 903 0002 FFF7FEFF 		bl	chSchIsRescRequiredI
 904              	.LVL58:
 343:lib/chibios/os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 905              		.loc 1 343 6 view .LVU297
 906 0006 18B1     		cbz	r0, .L50
 344:lib/chibios/os/rt/src/chschd.c ****   }
 907              		.loc 1 344 5 is_stmt 1 view .LVU298
 346:lib/chibios/os/rt/src/chschd.c **** 
 908              		.loc 1 346 1 is_stmt 0 view .LVU299
 909 0008 BDE80840 		pop	{r3, lr}
 910              		.cfi_remember_state
 911              		.cfi_restore 14
 912              		.cfi_restore 3
 913              		.cfi_def_cfa_offset 0
 344:lib/chibios/os/rt/src/chschd.c ****   }
 914              		.loc 1 344 5 view .LVU300
 915 000c FFF7FEBF 		b	chSchDoRescheduleAhead
 916              	.LVL59:
 917              	.L50:
 918              		.cfi_restore_state
 346:lib/chibios/os/rt/src/chschd.c **** 
 919              		.loc 1 346 1 view .LVU301
 920 0010 08BD     		pop	{r3, pc}
 921              		.cfi_endproc
 922              	.LFE250:
 924              		.section	.text.chSchDoReschedule,"ax",%progbits
 925              		.align	1
 926              		.global	chSchDoReschedule
 927              		.syntax unified
 928              		.thumb
 929              		.thumb_func
 931              	chSchDoReschedule:
 932              	.LFB256:
 933              		.cfi_startproc
 441:lib/chibios/os/rt/src/chschd.c **** 
 442:lib/chibios/os/rt/src/chschd.c **** #if !defined(CH_SCH_DO_RESCHEDULE_HOOKED)
 443:lib/chibios/os/rt/src/chschd.c **** /**
 444:lib/chibios/os/rt/src/chschd.c ****  * @brief   Switches to the first thread on the runnable queue.
 445:lib/chibios/os/rt/src/chschd.c ****  * @details The current thread is positioned in the ready list behind or
 446:lib/chibios/os/rt/src/chschd.c ****  *          ahead of all threads having the same priority depending on
 447:lib/chibios/os/rt/src/chschd.c ****  *          if it used its whole time slice.
 448:lib/chibios/os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 449:lib/chibios/os/rt/src/chschd.c ****  *          itself or from within the port layer.
 450:lib/chibios/os/rt/src/chschd.c ****  *
 451:lib/chibios/os/rt/src/chschd.c ****  * @special
 452:lib/chibios/os/rt/src/chschd.c ****  */
 453:lib/chibios/os/rt/src/chschd.c **** void chSchDoReschedule(void) {
 934              		.loc 1 453 6 is_stmt 1 view -0
 935              		@ args = 0, pretend = 0, frame = 0
 936              		@ frame_needed = 0, uses_anonymous_args = 0
 937              		@ link register save eliminated.
 938 0000 FFF7FEBF 		b	chSchDoRescheduleAhead
 939              		.cfi_endproc
 940              	.LFE256:
 942              		.comm	ch,76,4
 943              		.text
 944              	.Letext0:
 945              		.file 8 "/usr/arm-none-eabi/include/machine/_default_types.h"
 946              		.file 9 "/usr/arm-none-eabi/include/sys/_stdint.h"
 947              		.file 10 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 948              		.file 11 "./lib/chibios/os/rt/include/chsystypes.h"
 949              		.file 12 "./lib/chibios/os/rt/include/chschd.h"
 950              		.file 13 "./lib/chibios/os/rt/include/chtime.h"
 951              		.file 14 "./lib/chibios/os/rt/include/chmtx.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chschd.c
     /tmp/ccug2QYS.s:21     .text._scheduler_init:0000000000000000 $t
     /tmp/ccug2QYS.s:27     .text._scheduler_init:0000000000000000 _scheduler_init
     /tmp/ccug2QYS.s:60     .text._scheduler_init:000000000000000c $d
                            *COM*:000000000000004c ch
     /tmp/ccug2QYS.s:65     .text.chSchReadyI:0000000000000000 $t
     /tmp/ccug2QYS.s:71     .text.chSchReadyI:0000000000000000 chSchReadyI
     /tmp/ccug2QYS.s:134    .text.chSchReadyI:000000000000001c $d
     /tmp/ccug2QYS.s:139    .text.wakeup:0000000000000000 $t
     /tmp/ccug2QYS.s:144    .text.wakeup:0000000000000000 wakeup
     /tmp/ccug2QYS.s:212    .text.wakeup:0000000000000014 $d
     /tmp/ccug2QYS.s:218    .text.wakeup:000000000000001a $t
     /tmp/ccug2QYS.s:318    .text.chSchReadyAheadI:0000000000000000 $t
     /tmp/ccug2QYS.s:324    .text.chSchReadyAheadI:0000000000000000 chSchReadyAheadI
     /tmp/ccug2QYS.s:387    .text.chSchReadyAheadI:000000000000001c $d
     /tmp/ccug2QYS.s:392    .text.chSchGoSleepS:0000000000000000 $t
     /tmp/ccug2QYS.s:398    .text.chSchGoSleepS:0000000000000000 chSchGoSleepS
     /tmp/ccug2QYS.s:458    .text.chSchGoSleepS:0000000000000018 $d
     /tmp/ccug2QYS.s:463    .text.chSchGoSleepTimeoutS:0000000000000000 $t
     /tmp/ccug2QYS.s:469    .text.chSchGoSleepTimeoutS:0000000000000000 chSchGoSleepTimeoutS
     /tmp/ccug2QYS.s:549    .text.chSchGoSleepTimeoutS:0000000000000034 $d
     /tmp/ccug2QYS.s:555    .text.chSchWakeupS:0000000000000000 $t
     /tmp/ccug2QYS.s:561    .text.chSchWakeupS:0000000000000000 chSchWakeupS
     /tmp/ccug2QYS.s:657    .text.chSchWakeupS:0000000000000034 $d
     /tmp/ccug2QYS.s:662    .text.chSchIsPreemptionRequired:0000000000000000 $t
     /tmp/ccug2QYS.s:668    .text.chSchIsPreemptionRequired:0000000000000000 chSchIsPreemptionRequired
     /tmp/ccug2QYS.s:699    .text.chSchIsPreemptionRequired:0000000000000014 $d
     /tmp/ccug2QYS.s:668    .text.chSchIsPreemptionRequired:0000000000000000 chSchIsRescRequiredI
     /tmp/ccug2QYS.s:705    .text.chSchDoRescheduleBehind:0000000000000000 $t
     /tmp/ccug2QYS.s:711    .text.chSchDoRescheduleBehind:0000000000000000 chSchDoRescheduleBehind
     /tmp/ccug2QYS.s:789    .text.chSchDoRescheduleBehind:0000000000000024 $d
     /tmp/ccug2QYS.s:794    .text.chSchDoRescheduleAhead:0000000000000000 $t
     /tmp/ccug2QYS.s:800    .text.chSchDoRescheduleAhead:0000000000000000 chSchDoRescheduleAhead
     /tmp/ccug2QYS.s:878    .text.chSchDoRescheduleAhead:0000000000000024 $d
     /tmp/ccug2QYS.s:883    .text.chSchRescheduleS:0000000000000000 $t
     /tmp/ccug2QYS.s:889    .text.chSchRescheduleS:0000000000000000 chSchRescheduleS
     /tmp/ccug2QYS.s:925    .text.chSchDoReschedule:0000000000000000 $t
     /tmp/ccug2QYS.s:931    .text.chSchDoReschedule:0000000000000000 chSchDoReschedule

UNDEFINED SYMBOLS
_port_switch
chVTDoSetI
chVTDoResetI
