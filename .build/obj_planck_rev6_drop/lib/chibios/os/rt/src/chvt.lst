   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 2
  15              		.file	"chvt.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "lib/chibios/os/rt/src/chvt.c"
  20              		.section	.text._vt_init,"ax",%progbits
  21              		.align	1
  22              		.global	_vt_init
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	_vt_init:
  28              	.LFB248:
   1:lib/chibios/os/rt/src/chvt.c **** /*
   2:lib/chibios/os/rt/src/chvt.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chvt.c **** 
   4:lib/chibios/os/rt/src/chvt.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chvt.c **** 
   6:lib/chibios/os/rt/src/chvt.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chvt.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chvt.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chvt.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chvt.c **** 
  11:lib/chibios/os/rt/src/chvt.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chvt.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chvt.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chvt.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chvt.c **** 
  16:lib/chibios/os/rt/src/chvt.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chvt.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chvt.c **** */
  19:lib/chibios/os/rt/src/chvt.c **** 
  20:lib/chibios/os/rt/src/chvt.c **** /**
  21:lib/chibios/os/rt/src/chvt.c ****  * @file    rt/src/chvt.c
  22:lib/chibios/os/rt/src/chvt.c ****  * @brief   Time and Virtual Timers module code.
  23:lib/chibios/os/rt/src/chvt.c ****  *
  24:lib/chibios/os/rt/src/chvt.c ****  * @addtogroup time
  25:lib/chibios/os/rt/src/chvt.c ****  * @details Time and Virtual Timers related APIs and services.
  26:lib/chibios/os/rt/src/chvt.c ****  * @{
  27:lib/chibios/os/rt/src/chvt.c ****  */
  28:lib/chibios/os/rt/src/chvt.c **** 
  29:lib/chibios/os/rt/src/chvt.c **** #include "ch.h"
  30:lib/chibios/os/rt/src/chvt.c **** 
  31:lib/chibios/os/rt/src/chvt.c **** /*===========================================================================*/
  32:lib/chibios/os/rt/src/chvt.c **** /* Module local definitions.                                                 */
  33:lib/chibios/os/rt/src/chvt.c **** /*===========================================================================*/
  34:lib/chibios/os/rt/src/chvt.c **** 
  35:lib/chibios/os/rt/src/chvt.c **** /*===========================================================================*/
  36:lib/chibios/os/rt/src/chvt.c **** /* Module exported variables.                                                */
  37:lib/chibios/os/rt/src/chvt.c **** /*===========================================================================*/
  38:lib/chibios/os/rt/src/chvt.c **** 
  39:lib/chibios/os/rt/src/chvt.c **** /*===========================================================================*/
  40:lib/chibios/os/rt/src/chvt.c **** /* Module local types.                                                       */
  41:lib/chibios/os/rt/src/chvt.c **** /*===========================================================================*/
  42:lib/chibios/os/rt/src/chvt.c **** 
  43:lib/chibios/os/rt/src/chvt.c **** /*===========================================================================*/
  44:lib/chibios/os/rt/src/chvt.c **** /* Module local variables.                                                   */
  45:lib/chibios/os/rt/src/chvt.c **** /*===========================================================================*/
  46:lib/chibios/os/rt/src/chvt.c **** 
  47:lib/chibios/os/rt/src/chvt.c **** /*===========================================================================*/
  48:lib/chibios/os/rt/src/chvt.c **** /* Module local functions.                                                   */
  49:lib/chibios/os/rt/src/chvt.c **** /*===========================================================================*/
  50:lib/chibios/os/rt/src/chvt.c **** 
  51:lib/chibios/os/rt/src/chvt.c **** /**
  52:lib/chibios/os/rt/src/chvt.c ****  * @brief   List empty check.
  53:lib/chibios/os/rt/src/chvt.c ****  *
  54:lib/chibios/os/rt/src/chvt.c ****  * @param[in] dlhp      pointer to the delta list header
  55:lib/chibios/os/rt/src/chvt.c ****  *
  56:lib/chibios/os/rt/src/chvt.c ****  * @notapi
  57:lib/chibios/os/rt/src/chvt.c ****  */
  58:lib/chibios/os/rt/src/chvt.c **** static inline bool is_vtlist_empty(delta_list_t *dlhp) {
  59:lib/chibios/os/rt/src/chvt.c **** 
  60:lib/chibios/os/rt/src/chvt.c ****   return (bool)(dlhp == dlhp->next);
  61:lib/chibios/os/rt/src/chvt.c **** }
  62:lib/chibios/os/rt/src/chvt.c **** 
  63:lib/chibios/os/rt/src/chvt.c **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
  64:lib/chibios/os/rt/src/chvt.c **** /**
  65:lib/chibios/os/rt/src/chvt.c ****  * @brief   Last timer in the list check.
  66:lib/chibios/os/rt/src/chvt.c ****  *
  67:lib/chibios/os/rt/src/chvt.c ****  * @param[in] dlhp      pointer to the delta list header
  68:lib/chibios/os/rt/src/chvt.c ****  * @param[in] dlp       pointer to the delta list element
  69:lib/chibios/os/rt/src/chvt.c ****  *
  70:lib/chibios/os/rt/src/chvt.c ****  * @notapi
  71:lib/chibios/os/rt/src/chvt.c ****  */
  72:lib/chibios/os/rt/src/chvt.c **** static inline bool is_last_timer(delta_list_t *dlhp, delta_list_t *dlp) {
  73:lib/chibios/os/rt/src/chvt.c **** 
  74:lib/chibios/os/rt/src/chvt.c ****   return (bool)(dlp->next == dlhp);
  75:lib/chibios/os/rt/src/chvt.c **** }
  76:lib/chibios/os/rt/src/chvt.c **** 
  77:lib/chibios/os/rt/src/chvt.c **** /**
  78:lib/chibios/os/rt/src/chvt.c ****  * @brief   Fist timer in the list check.
  79:lib/chibios/os/rt/src/chvt.c ****  *
  80:lib/chibios/os/rt/src/chvt.c ****  * @param[in] dlhp      pointer to the delta list header
  81:lib/chibios/os/rt/src/chvt.c ****  * @param[in] dlp       pointer to the delta list element
  82:lib/chibios/os/rt/src/chvt.c ****  *
  83:lib/chibios/os/rt/src/chvt.c ****  * @notapi
  84:lib/chibios/os/rt/src/chvt.c ****  */
  85:lib/chibios/os/rt/src/chvt.c **** static inline bool is_first_timer(delta_list_t *dlhp, delta_list_t *dlp) {
  86:lib/chibios/os/rt/src/chvt.c **** 
  87:lib/chibios/os/rt/src/chvt.c ****   return (bool)(dlhp->next == dlp);
  88:lib/chibios/os/rt/src/chvt.c **** }
  89:lib/chibios/os/rt/src/chvt.c **** 
  90:lib/chibios/os/rt/src/chvt.c **** /**
  91:lib/chibios/os/rt/src/chvt.c ****  * @brief   Timer check.
  92:lib/chibios/os/rt/src/chvt.c ****  *
  93:lib/chibios/os/rt/src/chvt.c ****  * @param[in] dlhp      pointer to the delta list header
  94:lib/chibios/os/rt/src/chvt.c ****  * @param[in] dlp       pointer to the delta list element
  95:lib/chibios/os/rt/src/chvt.c ****  *
  96:lib/chibios/os/rt/src/chvt.c ****  * @notapi
  97:lib/chibios/os/rt/src/chvt.c ****  */
  98:lib/chibios/os/rt/src/chvt.c **** static inline bool is_timer(delta_list_t *dlhp, delta_list_t *dlp) {
  99:lib/chibios/os/rt/src/chvt.c **** 
 100:lib/chibios/os/rt/src/chvt.c ****   return (bool)(dlp != dlhp);
 101:lib/chibios/os/rt/src/chvt.c **** }
 102:lib/chibios/os/rt/src/chvt.c **** 
 103:lib/chibios/os/rt/src/chvt.c **** /**
 104:lib/chibios/os/rt/src/chvt.c ****  * @brief   Delta list compression.
 105:lib/chibios/os/rt/src/chvt.c ****  *
 106:lib/chibios/os/rt/src/chvt.c ****  * @param[in] vtlp      pointer to the delta list to be compressed
 107:lib/chibios/os/rt/src/chvt.c ****  * @param[in] deltanow  interval to be compacted starting from "lasttime"
 108:lib/chibios/os/rt/src/chvt.c ****  *
 109:lib/chibios/os/rt/src/chvt.c ****  * @notapi
 110:lib/chibios/os/rt/src/chvt.c ****  */
 111:lib/chibios/os/rt/src/chvt.c **** static void vt_list_compress(virtual_timers_list_t *vtlp,
 112:lib/chibios/os/rt/src/chvt.c ****                              sysinterval_t deltanow) {
 113:lib/chibios/os/rt/src/chvt.c ****   delta_list_t *dlp = vtlp->dlist.next;
 114:lib/chibios/os/rt/src/chvt.c **** 
 115:lib/chibios/os/rt/src/chvt.c ****   /* The loop is bounded because the delta list header has the delta field
 116:lib/chibios/os/rt/src/chvt.c ****      set to (sysinterval_t)-1 which is larger than all deltas.*/
 117:lib/chibios/os/rt/src/chvt.c ****   while (dlp->delta < deltanow) {
 118:lib/chibios/os/rt/src/chvt.c ****     deltanow  -= dlp->delta;
 119:lib/chibios/os/rt/src/chvt.c ****     dlp->delta = (sysinterval_t)0;
 120:lib/chibios/os/rt/src/chvt.c ****     dlp        = dlp->next;
 121:lib/chibios/os/rt/src/chvt.c ****   }
 122:lib/chibios/os/rt/src/chvt.c **** 
 123:lib/chibios/os/rt/src/chvt.c ****   vtlp->lasttime = vtlp->lasttime + deltanow;
 124:lib/chibios/os/rt/src/chvt.c **** 
 125:lib/chibios/os/rt/src/chvt.c ****   /* Adjusting next timer in the list, if any.*/
 126:lib/chibios/os/rt/src/chvt.c ****   if (is_timer(&vtlp->dlist, dlp)) {
 127:lib/chibios/os/rt/src/chvt.c ****     dlp->delta -= deltanow;
 128:lib/chibios/os/rt/src/chvt.c ****   }
 129:lib/chibios/os/rt/src/chvt.c **** }
 130:lib/chibios/os/rt/src/chvt.c **** #endif
 131:lib/chibios/os/rt/src/chvt.c **** 
 132:lib/chibios/os/rt/src/chvt.c **** /*===========================================================================*/
 133:lib/chibios/os/rt/src/chvt.c **** /* Module exported functions.                                                */
 134:lib/chibios/os/rt/src/chvt.c **** /*===========================================================================*/
 135:lib/chibios/os/rt/src/chvt.c **** 
 136:lib/chibios/os/rt/src/chvt.c **** /**
 137:lib/chibios/os/rt/src/chvt.c ****  * @brief   Virtual Timers initialization.
 138:lib/chibios/os/rt/src/chvt.c ****  * @note    Internal use only.
 139:lib/chibios/os/rt/src/chvt.c ****  *
 140:lib/chibios/os/rt/src/chvt.c ****  * @notapi
 141:lib/chibios/os/rt/src/chvt.c ****  */
 142:lib/chibios/os/rt/src/chvt.c **** void _vt_init(void) {
  29              		.loc 1 142 21 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 143:lib/chibios/os/rt/src/chvt.c **** 
 144:lib/chibios/os/rt/src/chvt.c ****   ch.vtlist.dlist.next = &ch.vtlist.dlist;
  34              		.loc 1 144 3 view .LVU1
  35              		.loc 1 144 24 is_stmt 0 view .LVU2
  36 0000 054B     		ldr	r3, .L2
  37 0002 03F11402 		add	r2, r3, #20
 145:lib/chibios/os/rt/src/chvt.c ****   ch.vtlist.dlist.prev = &ch.vtlist.dlist;
  38              		.loc 1 145 24 view .LVU3
  39 0006 C3E90522 		strd	r2, r2, [r3, #20]
 146:lib/chibios/os/rt/src/chvt.c ****   ch.vtlist.dlist.delta = (sysinterval_t)-1;
  40              		.loc 1 146 3 is_stmt 1 view .LVU4
  41              		.loc 1 146 25 is_stmt 0 view .LVU5
  42 000a 4FF0FF32 		mov	r2, #-1
  43 000e DA61     		str	r2, [r3, #28]
 147:lib/chibios/os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA == 0
 148:lib/chibios/os/rt/src/chvt.c ****   ch.vtlist.systime = (systime_t)0;
 149:lib/chibios/os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 150:lib/chibios/os/rt/src/chvt.c ****   ch.vtlist.lasttime = (systime_t)0;
  44              		.loc 1 150 3 is_stmt 1 view .LVU6
  45              		.loc 1 150 22 is_stmt 0 view .LVU7
  46 0010 0022     		movs	r2, #0
  47 0012 1A84     		strh	r2, [r3, #32]	@ movhi
 151:lib/chibios/os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 152:lib/chibios/os/rt/src/chvt.c **** }
  48              		.loc 1 152 1 view .LVU8
  49 0014 7047     		bx	lr
  50              	.L3:
  51 0016 00BF     		.align	2
  52              	.L2:
  53 0018 00000000 		.word	ch
  54              		.cfi_endproc
  55              	.LFE248:
  57              		.section	.text.chVTDoSetI,"ax",%progbits
  58              		.align	1
  59              		.global	chVTDoSetI
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  64              	chVTDoSetI:
  65              	.LVL0:
  66              	.LFB249:
 153:lib/chibios/os/rt/src/chvt.c **** 
 154:lib/chibios/os/rt/src/chvt.c **** /**
 155:lib/chibios/os/rt/src/chvt.c ****  * @brief   Enables a virtual timer.
 156:lib/chibios/os/rt/src/chvt.c ****  * @details The timer is enabled and programmed to trigger after the delay
 157:lib/chibios/os/rt/src/chvt.c ****  *          specified as parameter.
 158:lib/chibios/os/rt/src/chvt.c ****  * @pre     The timer must not be already armed before calling this function.
 159:lib/chibios/os/rt/src/chvt.c ****  * @note    The callback function is invoked from interrupt context.
 160:lib/chibios/os/rt/src/chvt.c ****  *
 161:lib/chibios/os/rt/src/chvt.c ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 162:lib/chibios/os/rt/src/chvt.c ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 163:lib/chibios/os/rt/src/chvt.c ****  *                      special values are handled as follow:
 164:lib/chibios/os/rt/src/chvt.c ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 165:lib/chibios/os/rt/src/chvt.c ****  *                        normal time specification.
 166:lib/chibios/os/rt/src/chvt.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 167:lib/chibios/os/rt/src/chvt.c ****  *                      .
 168:lib/chibios/os/rt/src/chvt.c ****  * @param[in] vtfunc    the timer callback function. After invoking the
 169:lib/chibios/os/rt/src/chvt.c ****  *                      callback the timer is disabled and the structure can
 170:lib/chibios/os/rt/src/chvt.c ****  *                      be disposed or reused.
 171:lib/chibios/os/rt/src/chvt.c ****  * @param[in] par       a parameter that will be passed to the callback
 172:lib/chibios/os/rt/src/chvt.c ****  *                      function
 173:lib/chibios/os/rt/src/chvt.c ****  *
 174:lib/chibios/os/rt/src/chvt.c ****  * @iclass
 175:lib/chibios/os/rt/src/chvt.c ****  */
 176:lib/chibios/os/rt/src/chvt.c **** void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
 177:lib/chibios/os/rt/src/chvt.c ****                 vtfunc_t vtfunc, void *par) {
  67              		.loc 1 177 45 is_stmt 1 view -0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
 178:lib/chibios/os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &ch.vtlist;
  71              		.loc 1 178 3 view .LVU10
 179:lib/chibios/os/rt/src/chvt.c ****   delta_list_t *dlp;
  72              		.loc 1 179 3 view .LVU11
 180:lib/chibios/os/rt/src/chvt.c ****   sysinterval_t delta;
  73              		.loc 1 180 3 view .LVU12
 181:lib/chibios/os/rt/src/chvt.c **** 
 182:lib/chibios/os/rt/src/chvt.c ****   chDbgCheckClassI();
  74              		.loc 1 182 21 view .LVU13
 183:lib/chibios/os/rt/src/chvt.c ****   chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
  75              		.loc 1 183 3 view .LVU14
  76              		.loc 1 183 3 view .LVU15
  77              		.loc 1 183 3 view .LVU16
 184:lib/chibios/os/rt/src/chvt.c **** 
 185:lib/chibios/os/rt/src/chvt.c ****   vtp->par = par;
  78              		.loc 1 185 3 view .LVU17
 177:lib/chibios/os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &ch.vtlist;
  79              		.loc 1 177 45 is_stmt 0 view .LVU18
  80 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  81              		.cfi_def_cfa_offset 24
  82              		.cfi_offset 4, -24
  83              		.cfi_offset 5, -20
  84              		.cfi_offset 6, -16
  85              		.cfi_offset 7, -12
  86              		.cfi_offset 8, -8
  87              		.cfi_offset 14, -4
 177:lib/chibios/os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &ch.vtlist;
  88              		.loc 1 177 45 view .LVU19
  89 0004 0D46     		mov	r5, r1
 186:lib/chibios/os/rt/src/chvt.c ****   vtp->func = vtfunc;
  90              		.loc 1 186 13 view .LVU20
  91 0006 C0E90323 		strd	r2, r3, [r0, #12]
  92              	.LBB114:
 187:lib/chibios/os/rt/src/chvt.c **** 
 188:lib/chibios/os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA > 0
 189:lib/chibios/os/rt/src/chvt.c ****   {
 190:lib/chibios/os/rt/src/chvt.c ****     systime_t now = chVTGetSystemTimeX();
  93              		.loc 1 190 5 is_stmt 1 view .LVU21
  94              	.LBB115:
  95              	.LBI115:
  96              		.file 2 "./lib/chibios/os/rt/include/chvt.h"
   1:./lib/chibios/os/rt/include/chvt.h **** /*
   2:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chvt.h **** 
   4:./lib/chibios/os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chvt.h **** 
   6:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chvt.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chvt.h **** 
  11:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chvt.h **** 
  16:./lib/chibios/os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chvt.h **** */
  19:./lib/chibios/os/rt/include/chvt.h **** 
  20:./lib/chibios/os/rt/include/chvt.h **** /**
  21:./lib/chibios/os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:./lib/chibios/os/rt/include/chvt.h ****  *
  24:./lib/chibios/os/rt/include/chvt.h ****  * @addtogroup time
  25:./lib/chibios/os/rt/include/chvt.h ****  * @{
  26:./lib/chibios/os/rt/include/chvt.h ****  */
  27:./lib/chibios/os/rt/include/chvt.h **** 
  28:./lib/chibios/os/rt/include/chvt.h **** #ifndef CHVT_H
  29:./lib/chibios/os/rt/include/chvt.h **** #define CHVT_H
  30:./lib/chibios/os/rt/include/chvt.h **** 
  31:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chvt.h **** 
  35:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chvt.h **** 
  39:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chvt.h **** 
  43:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:./lib/chibios/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:./lib/chibios/os/rt/include/chvt.h ****        "be zero or greater than one"
  46:./lib/chibios/os/rt/include/chvt.h **** #endif
  47:./lib/chibios/os/rt/include/chvt.h **** 
  48:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:./lib/chibios/os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:./lib/chibios/os/rt/include/chvt.h **** #endif
  51:./lib/chibios/os/rt/include/chvt.h **** 
  52:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:./lib/chibios/os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:./lib/chibios/os/rt/include/chvt.h **** #endif
  55:./lib/chibios/os/rt/include/chvt.h **** 
  56:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  57:./lib/chibios/os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  59:./lib/chibios/os/rt/include/chvt.h **** 
  60:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  61:./lib/chibios/os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  63:./lib/chibios/os/rt/include/chvt.h **** 
  64:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  65:./lib/chibios/os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  67:./lib/chibios/os/rt/include/chvt.h **** 
  68:./lib/chibios/os/rt/include/chvt.h **** /*
  69:./lib/chibios/os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:./lib/chibios/os/rt/include/chvt.h ****  */
  71:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
  72:./lib/chibios/os/rt/include/chvt.h **** extern "C" {
  73:./lib/chibios/os/rt/include/chvt.h **** #endif
  74:./lib/chibios/os/rt/include/chvt.h ****   void _vt_init(void);
  75:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  76:./lib/chibios/os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  77:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  78:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoTickI(void);
  79:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
  80:./lib/chibios/os/rt/include/chvt.h **** }
  81:./lib/chibios/os/rt/include/chvt.h **** #endif
  82:./lib/chibios/os/rt/include/chvt.h **** 
  83:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  84:./lib/chibios/os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  85:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  86:./lib/chibios/os/rt/include/chvt.h **** 
  87:./lib/chibios/os/rt/include/chvt.h **** /**
  88:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  89:./lib/chibios/os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  90:./lib/chibios/os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  91:./lib/chibios/os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  92:./lib/chibios/os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  93:./lib/chibios/os/rt/include/chvt.h ****  *
  94:./lib/chibios/os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  95:./lib/chibios/os/rt/include/chvt.h ****  *
  96:./lib/chibios/os/rt/include/chvt.h ****  * @init
  97:./lib/chibios/os/rt/include/chvt.h ****  */
  98:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
  99:./lib/chibios/os/rt/include/chvt.h **** 
 100:./lib/chibios/os/rt/include/chvt.h ****   vtp->func = NULL;
 101:./lib/chibios/os/rt/include/chvt.h **** }
 102:./lib/chibios/os/rt/include/chvt.h **** 
 103:./lib/chibios/os/rt/include/chvt.h **** /**
 104:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 105:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 106:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 107:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 108:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 109:./lib/chibios/os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 110:./lib/chibios/os/rt/include/chvt.h ****  *          @p systime_t size.
 111:./lib/chibios/os/rt/include/chvt.h ****  *
 112:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 113:./lib/chibios/os/rt/include/chvt.h ****  *
 114:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 115:./lib/chibios/os/rt/include/chvt.h ****  */
 116:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
  97              		.loc 2 116 25 view .LVU22
 117:./lib/chibios/os/rt/include/chvt.h **** 
 118:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 119:./lib/chibios/os/rt/include/chvt.h ****   return ch.vtlist.systime;
 120:./lib/chibios/os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 121:./lib/chibios/os/rt/include/chvt.h ****   return port_timer_get_time();
  98              		.loc 2 121 3 view .LVU23
  99              	.LBB116:
 100              	.LBI116:
 101              		.file 3 "./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @file    chcore_timer.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @brief   System timer header file.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @addtogroup ARMCMx_TIMER
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** #ifndef CHCORE_TIMER_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** #define CHCORE_TIMER_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Module pre-compile time settings.                                         */
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Derived constants and error checks.                                       */
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Module data structures and types.                                         */
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Module macros.                                                            */
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* External declarations.                                                    */
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** #ifdef __cplusplus
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** extern "C" {
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** #endif
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   void stStartAlarm(systime_t time);
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   void stStopAlarm(void);
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   void stSetAlarm(systime_t time);
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   systime_t stGetCounter(void);
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   systime_t stGetAlarm(void);
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** #ifdef __cplusplus
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** #endif
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Module inline functions.                                                  */
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /**
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @brief   Starts the alarm.
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @note    Makes sure that no spurious alarms are triggered after
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *          this call.
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @param[in] time      the time to be set for the first alarm
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @notapi
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  */
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** static inline void port_timer_start_alarm(systime_t time) {
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   stStartAlarm(time);
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /**
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @brief   Stops the alarm interrupt.
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @notapi
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  */
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** static inline void port_timer_stop_alarm(void) {
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   stStopAlarm();
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /**
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @brief   Sets the alarm time.
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @param[in] time      the time to be set for the next alarm
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @notapi
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  */
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** static inline void port_timer_set_alarm(systime_t time) {
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   stSetAlarm(time);
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /**
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @brief   Returns the system time.
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @return              The system time.
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @notapi
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  */
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** static inline systime_t port_timer_get_time(void) {
 102              		.loc 3 114 25 view .LVU24
 103              	.LBB117:
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   return stGetCounter();
 104              		.loc 3 116 3 view .LVU25
 105              	.LBE117:
 106              	.LBE116:
 107              	.LBE115:
 108              	.LBE114:
 177:lib/chibios/os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &ch.vtlist;
 109              		.loc 1 177 45 is_stmt 0 view .LVU26
 110 000a 0446     		mov	r4, r0
 111              	.LBB152:
 112              	.LBB120:
 113              	.LBB119:
 114              	.LBB118:
 115              		.loc 3 116 10 view .LVU27
 116 000c FFF7FEFF 		bl	stGetCounter
 117              	.LVL1:
 118              		.loc 3 116 10 view .LVU28
 119              	.LBE118:
 120              	.LBE119:
 121              	.LBE120:
 191:lib/chibios/os/rt/src/chvt.c ****     sysinterval_t deltanow;
 122              		.loc 1 191 5 is_stmt 1 view .LVU29
 192:lib/chibios/os/rt/src/chvt.c **** 
 193:lib/chibios/os/rt/src/chvt.c ****     /* If the requested delay is lower than the minimum safe delta then it
 194:lib/chibios/os/rt/src/chvt.c ****        is raised to the minimum safe value.*/
 195:lib/chibios/os/rt/src/chvt.c ****     if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 123              		.loc 1 195 5 view .LVU30
 124              		.loc 1 195 8 is_stmt 0 view .LVU31
 125 0010 022D     		cmp	r5, #2
 126 0012 2946     		mov	r1, r5
 127              	.LBB121:
 128              	.LBB122:
  60:lib/chibios/os/rt/src/chvt.c **** }
 129              		.loc 1 60 29 view .LVU32
 130 0014 284D     		ldr	r5, .L18
 131              	.LVL2:
  60:lib/chibios/os/rt/src/chvt.c **** }
 132              		.loc 1 60 29 view .LVU33
 133 0016 2F46     		mov	r7, r5
 134              	.LBE122:
 135              	.LBE121:
 136              		.loc 1 195 8 view .LVU34
 137 0018 38BF     		it	cc
 138 001a 0221     		movcc	r1, #2
 139              	.LVL3:
 196:lib/chibios/os/rt/src/chvt.c ****       delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 197:lib/chibios/os/rt/src/chvt.c ****     }
 198:lib/chibios/os/rt/src/chvt.c **** 
 199:lib/chibios/os/rt/src/chvt.c ****     /* Special case where the timers list is empty.*/
 200:lib/chibios/os/rt/src/chvt.c ****     if (is_vtlist_empty(&vtlp->dlist)) {
 140              		.loc 1 200 5 is_stmt 1 view .LVU35
 141              	.LBB124:
 142              	.LBI121:
  58:lib/chibios/os/rt/src/chvt.c **** 
 143              		.loc 1 58 20 view .LVU36
 144              	.LBB123:
  60:lib/chibios/os/rt/src/chvt.c **** }
 145              		.loc 1 60 3 view .LVU37
  60:lib/chibios/os/rt/src/chvt.c **** }
 146              		.loc 1 60 29 is_stmt 0 view .LVU38
 147 001c 57F8142F 		ldr	r2, [r7, #20]!
 148              	.LVL4:
  60:lib/chibios/os/rt/src/chvt.c **** }
 149              		.loc 1 60 29 view .LVU39
 150              	.LBE123:
 151              	.LBE124:
 152              		.loc 1 200 8 view .LVU40
 153 0020 BA42     		cmp	r2, r7
 154 0022 10D1     		bne	.L5
 201:lib/chibios/os/rt/src/chvt.c **** 
 202:lib/chibios/os/rt/src/chvt.c ****       /* The delta list is empty, the current time becomes the new
 203:lib/chibios/os/rt/src/chvt.c ****          delta list base time, the timer is inserted.*/
 204:lib/chibios/os/rt/src/chvt.c ****       vtlp->lasttime = now;
 155              		.loc 1 204 7 is_stmt 1 view .LVU41
 156              	.LBB125:
 157              	.LBB126:
 158              		.file 4 "./lib/chibios/os/rt/include/chtime.h"
   1:./lib/chibios/os/rt/include/chtime.h **** /*
   2:./lib/chibios/os/rt/include/chtime.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chtime.h **** 
   4:./lib/chibios/os/rt/include/chtime.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chtime.h **** 
   6:./lib/chibios/os/rt/include/chtime.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chtime.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chtime.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chtime.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chtime.h **** 
  11:./lib/chibios/os/rt/include/chtime.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chtime.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chtime.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chtime.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chtime.h **** 
  16:./lib/chibios/os/rt/include/chtime.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chtime.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chtime.h **** */
  19:./lib/chibios/os/rt/include/chtime.h **** 
  20:./lib/chibios/os/rt/include/chtime.h **** /**
  21:./lib/chibios/os/rt/include/chtime.h ****  * @file    rt/include/chtime.h
  22:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time and intervals macros and structures.
  23:./lib/chibios/os/rt/include/chtime.h ****  *
  24:./lib/chibios/os/rt/include/chtime.h ****  * @addtogroup time_intervals
  25:./lib/chibios/os/rt/include/chtime.h ****  * @details This module is responsible for handling of system time and time
  26:./lib/chibios/os/rt/include/chtime.h ****  *          intervals.
  27:./lib/chibios/os/rt/include/chtime.h ****  * @{
  28:./lib/chibios/os/rt/include/chtime.h ****  */
  29:./lib/chibios/os/rt/include/chtime.h **** 
  30:./lib/chibios/os/rt/include/chtime.h **** #ifndef CHTIME_H
  31:./lib/chibios/os/rt/include/chtime.h **** #define CHTIME_H
  32:./lib/chibios/os/rt/include/chtime.h **** 
  33:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chtime.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chtime.h **** 
  37:./lib/chibios/os/rt/include/chtime.h **** /**
  38:./lib/chibios/os/rt/include/chtime.h ****  * @name    Special time constants
  39:./lib/chibios/os/rt/include/chtime.h ****  * @{
  40:./lib/chibios/os/rt/include/chtime.h ****  */
  41:./lib/chibios/os/rt/include/chtime.h **** /**
  42:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Zero interval specification for some functions with a timeout
  43:./lib/chibios/os/rt/include/chtime.h ****  *          specification.
  44:./lib/chibios/os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  45:./lib/chibios/os/rt/include/chtime.h ****  *          see the specific function documentation.
  46:./lib/chibios/os/rt/include/chtime.h ****  */
  47:./lib/chibios/os/rt/include/chtime.h **** #define TIME_IMMEDIATE      ((sysinterval_t)0)
  48:./lib/chibios/os/rt/include/chtime.h **** 
  49:./lib/chibios/os/rt/include/chtime.h **** /**
  50:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Infinite interval specification for all functions with a timeout
  51:./lib/chibios/os/rt/include/chtime.h ****  *          specification.
  52:./lib/chibios/os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  53:./lib/chibios/os/rt/include/chtime.h ****  *          see the specific function documentation.
  54:./lib/chibios/os/rt/include/chtime.h ****  */
  55:./lib/chibios/os/rt/include/chtime.h **** #define TIME_INFINITE       ((sysinterval_t)-1)
  56:./lib/chibios/os/rt/include/chtime.h **** 
  57:./lib/chibios/os/rt/include/chtime.h **** /**
  58:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Maximum interval constant usable as timeout.
  59:./lib/chibios/os/rt/include/chtime.h ****  */
  60:./lib/chibios/os/rt/include/chtime.h **** #define TIME_MAX_INTERVAL   ((sysinterval_t)-2)
  61:./lib/chibios/os/rt/include/chtime.h **** 
  62:./lib/chibios/os/rt/include/chtime.h **** /**
  63:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Maximum system of system time before it wraps.
  64:./lib/chibios/os/rt/include/chtime.h ****  */
  65:./lib/chibios/os/rt/include/chtime.h **** #define TIME_MAX_SYSTIME    ((systime_t)-1)
  66:./lib/chibios/os/rt/include/chtime.h **** /** @} */
  67:./lib/chibios/os/rt/include/chtime.h **** 
  68:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  69:./lib/chibios/os/rt/include/chtime.h **** /* Module pre-compile time settings.                                         */
  70:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  71:./lib/chibios/os/rt/include/chtime.h **** 
  72:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  73:./lib/chibios/os/rt/include/chtime.h **** /* Derived constants and error checks.                                       */
  74:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  75:./lib/chibios/os/rt/include/chtime.h **** 
  76:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32) &&         \
  77:./lib/chibios/os/rt/include/chtime.h ****     (CH_CFG_ST_RESOLUTION != 64)
  78:./lib/chibios/os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16, 32 or 64"
  79:./lib/chibios/os/rt/include/chtime.h **** #endif
  80:./lib/chibios/os/rt/include/chtime.h **** 
  81:./lib/chibios/os/rt/include/chtime.h **** #if CH_CFG_ST_FREQUENCY < 10
  82:./lib/chibios/os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be >= 10"
  83:./lib/chibios/os/rt/include/chtime.h **** #endif
  84:./lib/chibios/os/rt/include/chtime.h **** 
  85:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE != 16) && (CH_CFG_INTERVALS_SIZE != 32) &&       \
  86:./lib/chibios/os/rt/include/chtime.h ****     (CH_CFG_INTERVALS_SIZE != 64)
  87:./lib/chibios/os/rt/include/chtime.h **** #error "invalid CH_CFG_INTERVALS_SIZE specified, must be 16, 32 or 64"
  88:./lib/chibios/os/rt/include/chtime.h **** #endif
  89:./lib/chibios/os/rt/include/chtime.h **** 
  90:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE != 16) && (CH_CFG_TIME_TYPES_SIZE != 32)
  91:./lib/chibios/os/rt/include/chtime.h **** #error "invalid CH_CFG_TIME_TYPES_SIZE specified, must be 16 or 32"
  92:./lib/chibios/os/rt/include/chtime.h **** #endif
  93:./lib/chibios/os/rt/include/chtime.h **** 
  94:./lib/chibios/os/rt/include/chtime.h **** #if CH_CFG_INTERVALS_SIZE < CH_CFG_ST_RESOLUTION
  95:./lib/chibios/os/rt/include/chtime.h **** #error "CH_CFG_INTERVALS_SIZE must be >= CH_CFG_ST_RESOLUTION"
  96:./lib/chibios/os/rt/include/chtime.h **** #endif
  97:./lib/chibios/os/rt/include/chtime.h **** 
  98:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  99:./lib/chibios/os/rt/include/chtime.h **** /* Module data structures and types.                                         */
 100:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 101:./lib/chibios/os/rt/include/chtime.h **** 
 102:./lib/chibios/os/rt/include/chtime.h **** /**
 103:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of system time.
 104:./lib/chibios/os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 105:./lib/chibios/os/rt/include/chtime.h ****  */
 106:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION == 64) || defined(__DOXYGEN__)
 107:./lib/chibios/os/rt/include/chtime.h **** typedef uint64_t systime_t;
 108:./lib/chibios/os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 32
 109:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t systime_t;
 110:./lib/chibios/os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 16
 111:./lib/chibios/os/rt/include/chtime.h **** typedef uint16_t systime_t;
 112:./lib/chibios/os/rt/include/chtime.h **** #endif
 113:./lib/chibios/os/rt/include/chtime.h **** 
 114:./lib/chibios/os/rt/include/chtime.h **** /**
 115:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of time interval.
 116:./lib/chibios/os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 117:./lib/chibios/os/rt/include/chtime.h ****  */
 118:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE == 64) || defined(__DOXYGEN__)
 119:./lib/chibios/os/rt/include/chtime.h **** typedef uint64_t sysinterval_t;
 120:./lib/chibios/os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 32
 121:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t sysinterval_t;
 122:./lib/chibios/os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 16
 123:./lib/chibios/os/rt/include/chtime.h **** typedef uint16_t sysinterval_t;
 124:./lib/chibios/os/rt/include/chtime.h **** #endif
 125:./lib/chibios/os/rt/include/chtime.h **** 
 126:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE == 32) || defined(__DOXYGEN__)
 127:./lib/chibios/os/rt/include/chtime.h **** /**
 128:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of seconds.
 129:./lib/chibios/os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 130:./lib/chibios/os/rt/include/chtime.h ****  */
 131:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t time_secs_t;
 132:./lib/chibios/os/rt/include/chtime.h **** 
 133:./lib/chibios/os/rt/include/chtime.h **** /**
 134:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of milliseconds.
 135:./lib/chibios/os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 136:./lib/chibios/os/rt/include/chtime.h ****  */
 137:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t time_msecs_t;
 138:./lib/chibios/os/rt/include/chtime.h **** 
 139:./lib/chibios/os/rt/include/chtime.h **** /**
 140:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of microseconds.
 141:./lib/chibios/os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 142:./lib/chibios/os/rt/include/chtime.h ****  */
 143:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t time_usecs_t;
 144:./lib/chibios/os/rt/include/chtime.h **** 
 145:./lib/chibios/os/rt/include/chtime.h **** /**
 146:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of time conversion variable.
 147:./lib/chibios/os/rt/include/chtime.h ****  * @note    This type must have double width than other time types, it is
 148:./lib/chibios/os/rt/include/chtime.h ****  *          only used internally for conversions.
 149:./lib/chibios/os/rt/include/chtime.h ****  */
 150:./lib/chibios/os/rt/include/chtime.h **** typedef uint64_t time_conv_t;
 151:./lib/chibios/os/rt/include/chtime.h **** 
 152:./lib/chibios/os/rt/include/chtime.h **** #else
 153:./lib/chibios/os/rt/include/chtime.h **** typedef uint16_t time_secs_t;
 154:./lib/chibios/os/rt/include/chtime.h **** typedef uint16_t time_msecs_t;
 155:./lib/chibios/os/rt/include/chtime.h **** typedef uint16_t time_usecs_t;
 156:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t time_conv_t;
 157:./lib/chibios/os/rt/include/chtime.h **** #endif
 158:./lib/chibios/os/rt/include/chtime.h **** 
 159:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 160:./lib/chibios/os/rt/include/chtime.h **** /* Module macros.                                                            */
 161:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 162:./lib/chibios/os/rt/include/chtime.h **** 
 163:./lib/chibios/os/rt/include/chtime.h **** /**
 164:./lib/chibios/os/rt/include/chtime.h ****  * @name    Fast time conversion utilities
 165:./lib/chibios/os/rt/include/chtime.h ****  * @{
 166:./lib/chibios/os/rt/include/chtime.h ****  */
 167:./lib/chibios/os/rt/include/chtime.h **** /**
 168:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 169:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 170:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 171:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 172:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 173:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 174:./lib/chibios/os/rt/include/chtime.h ****  *
 175:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 176:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 177:./lib/chibios/os/rt/include/chtime.h ****  *
 178:./lib/chibios/os/rt/include/chtime.h ****  * @api
 179:./lib/chibios/os/rt/include/chtime.h ****  */
 180:./lib/chibios/os/rt/include/chtime.h **** #define TIME_S2I(secs)                                                      \
 181:./lib/chibios/os/rt/include/chtime.h ****   ((sysinterval_t)((time_conv_t)(secs) * (time_conv_t)CH_CFG_ST_FREQUENCY))
 182:./lib/chibios/os/rt/include/chtime.h **** 
 183:./lib/chibios/os/rt/include/chtime.h **** /**
 184:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 185:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 186:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 187:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 188:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 189:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 190:./lib/chibios/os/rt/include/chtime.h ****  *
 191:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] msecs     number of milliseconds
 192:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 193:./lib/chibios/os/rt/include/chtime.h ****  *
 194:./lib/chibios/os/rt/include/chtime.h ****  * @api
 195:./lib/chibios/os/rt/include/chtime.h ****  */
 196:./lib/chibios/os/rt/include/chtime.h **** #define TIME_MS2I(msecs)                                                    \
 197:./lib/chibios/os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(msecs) *                                 \
 198:./lib/chibios/os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 199:./lib/chibios/os/rt/include/chtime.h ****                     (time_conv_t)999) / (time_conv_t)1000))
 200:./lib/chibios/os/rt/include/chtime.h **** 
 201:./lib/chibios/os/rt/include/chtime.h **** /**
 202:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 203:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 204:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 205:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 206:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 207:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 208:./lib/chibios/os/rt/include/chtime.h ****  *
 209:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] usecs     number of microseconds
 210:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 211:./lib/chibios/os/rt/include/chtime.h ****  *
 212:./lib/chibios/os/rt/include/chtime.h ****  * @api
 213:./lib/chibios/os/rt/include/chtime.h ****  */
 214:./lib/chibios/os/rt/include/chtime.h **** #define TIME_US2I(usecs)                                                    \
 215:./lib/chibios/os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(usecs) *                                 \
 216:./lib/chibios/os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 217:./lib/chibios/os/rt/include/chtime.h ****                     (time_conv_t)999999) / (time_conv_t)1000000))
 218:./lib/chibios/os/rt/include/chtime.h **** 
 219:./lib/chibios/os/rt/include/chtime.h **** /**
 220:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 221:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system ticks number to seconds.
 222:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 223:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 224:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 225:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 226:./lib/chibios/os/rt/include/chtime.h ****  *
 227:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 228:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of seconds.
 229:./lib/chibios/os/rt/include/chtime.h ****  *
 230:./lib/chibios/os/rt/include/chtime.h ****  * @api
 231:./lib/chibios/os/rt/include/chtime.h ****  */
 232:./lib/chibios/os/rt/include/chtime.h **** #define TIME_I2S(interval)                                                  \
 233:./lib/chibios/os/rt/include/chtime.h ****   (time_secs_t)(((time_conv_t)(interval) +                                  \
 234:./lib/chibios/os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY -                         \
 235:./lib/chibios/os/rt/include/chtime.h ****                  (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY)
 236:./lib/chibios/os/rt/include/chtime.h **** 
 237:./lib/chibios/os/rt/include/chtime.h **** /**
 238:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 239:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system ticks number to milliseconds.
 240:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 241:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 242:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 243:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 244:./lib/chibios/os/rt/include/chtime.h ****  *
 245:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 246:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 247:./lib/chibios/os/rt/include/chtime.h ****  *
 248:./lib/chibios/os/rt/include/chtime.h ****  * @api
 249:./lib/chibios/os/rt/include/chtime.h ****  */
 250:./lib/chibios/os/rt/include/chtime.h **** #define TIME_I2MS(interval)                                                 \
 251:./lib/chibios/os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000) +           \
 252:./lib/chibios/os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 253:./lib/chibios/os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 254:./lib/chibios/os/rt/include/chtime.h **** 
 255:./lib/chibios/os/rt/include/chtime.h **** /**
 256:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 257:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system ticks number to microseconds.
 258:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 259:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 260:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 261:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 262:./lib/chibios/os/rt/include/chtime.h ****  *
 263:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 264:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of microseconds.
 265:./lib/chibios/os/rt/include/chtime.h ****  *
 266:./lib/chibios/os/rt/include/chtime.h ****  * @api
 267:./lib/chibios/os/rt/include/chtime.h ****  */
 268:./lib/chibios/os/rt/include/chtime.h **** #define TIME_I2US(interval)                                                 \
 269:./lib/chibios/os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000000) +        \
 270:./lib/chibios/os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 271:./lib/chibios/os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 272:./lib/chibios/os/rt/include/chtime.h **** /** @} */
 273:./lib/chibios/os/rt/include/chtime.h **** 
 274:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 275:./lib/chibios/os/rt/include/chtime.h **** /* External declarations.                                                    */
 276:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chtime.h **** 
 278:./lib/chibios/os/rt/include/chtime.h **** /*
 279:./lib/chibios/os/rt/include/chtime.h ****  * Virtual Timers APIs.
 280:./lib/chibios/os/rt/include/chtime.h ****  */
 281:./lib/chibios/os/rt/include/chtime.h **** #ifdef __cplusplus
 282:./lib/chibios/os/rt/include/chtime.h **** extern "C" {
 283:./lib/chibios/os/rt/include/chtime.h **** #endif
 284:./lib/chibios/os/rt/include/chtime.h **** 
 285:./lib/chibios/os/rt/include/chtime.h **** #ifdef __cplusplus
 286:./lib/chibios/os/rt/include/chtime.h **** }
 287:./lib/chibios/os/rt/include/chtime.h **** #endif
 288:./lib/chibios/os/rt/include/chtime.h **** 
 289:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 290:./lib/chibios/os/rt/include/chtime.h **** /* Module inline functions.                                                  */
 291:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 292:./lib/chibios/os/rt/include/chtime.h **** 
 293:./lib/chibios/os/rt/include/chtime.h **** /**
 294:./lib/chibios/os/rt/include/chtime.h ****  * @name    Secure time conversion utilities
 295:./lib/chibios/os/rt/include/chtime.h ****  * @{
 296:./lib/chibios/os/rt/include/chtime.h ****  */
 297:./lib/chibios/os/rt/include/chtime.h **** /**
 298:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 299:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 300:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 301:./lib/chibios/os/rt/include/chtime.h ****  *
 302:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 303:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 304:./lib/chibios/os/rt/include/chtime.h ****  *
 305:./lib/chibios/os/rt/include/chtime.h ****  * @special
 306:./lib/chibios/os/rt/include/chtime.h ****  */
 307:./lib/chibios/os/rt/include/chtime.h **** static inline sysinterval_t chTimeS2I(time_secs_t secs) {
 308:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t ticks;
 309:./lib/chibios/os/rt/include/chtime.h **** 
 310:./lib/chibios/os/rt/include/chtime.h ****   ticks = (time_conv_t)secs * (time_conv_t)CH_CFG_ST_FREQUENCY;
 311:./lib/chibios/os/rt/include/chtime.h **** 
 312:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 313:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 314:./lib/chibios/os/rt/include/chtime.h **** 
 315:./lib/chibios/os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 316:./lib/chibios/os/rt/include/chtime.h **** }
 317:./lib/chibios/os/rt/include/chtime.h **** 
 318:./lib/chibios/os/rt/include/chtime.h **** /**
 319:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 320:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 321:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 322:./lib/chibios/os/rt/include/chtime.h ****  *
 323:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] msec      number of milliseconds
 324:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 325:./lib/chibios/os/rt/include/chtime.h ****  *
 326:./lib/chibios/os/rt/include/chtime.h ****  * @special
 327:./lib/chibios/os/rt/include/chtime.h ****  */
 328:./lib/chibios/os/rt/include/chtime.h **** static inline sysinterval_t chTimeMS2I(time_msecs_t msec) {
 329:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t ticks;
 330:./lib/chibios/os/rt/include/chtime.h **** 
 331:./lib/chibios/os/rt/include/chtime.h ****   ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 332:./lib/chibios/os/rt/include/chtime.h ****            (time_conv_t)999) / (time_conv_t)1000;
 333:./lib/chibios/os/rt/include/chtime.h **** 
 334:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 335:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 336:./lib/chibios/os/rt/include/chtime.h **** 
 337:./lib/chibios/os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 338:./lib/chibios/os/rt/include/chtime.h **** }
 339:./lib/chibios/os/rt/include/chtime.h **** 
 340:./lib/chibios/os/rt/include/chtime.h **** /**
 341:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 342:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 343:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 344:./lib/chibios/os/rt/include/chtime.h ****  *
 345:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] usec      number of microseconds
 346:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 347:./lib/chibios/os/rt/include/chtime.h ****  *
 348:./lib/chibios/os/rt/include/chtime.h ****  * @special
 349:./lib/chibios/os/rt/include/chtime.h ****  */
 350:./lib/chibios/os/rt/include/chtime.h **** static inline sysinterval_t chTimeUS2I(time_usecs_t usec) {
 351:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t ticks;
 352:./lib/chibios/os/rt/include/chtime.h **** 
 353:./lib/chibios/os/rt/include/chtime.h ****   ticks = (((time_conv_t)usec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 354:./lib/chibios/os/rt/include/chtime.h ****            (time_conv_t)999999) / (time_conv_t)1000000;
 355:./lib/chibios/os/rt/include/chtime.h **** 
 356:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 357:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 358:./lib/chibios/os/rt/include/chtime.h **** 
 359:./lib/chibios/os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 360:./lib/chibios/os/rt/include/chtime.h **** }
 361:./lib/chibios/os/rt/include/chtime.h **** 
 362:./lib/chibios/os/rt/include/chtime.h **** /**
 363:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 364:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system interval to seconds.
 365:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 366:./lib/chibios/os/rt/include/chtime.h ****  *
 367:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 368:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of seconds.
 369:./lib/chibios/os/rt/include/chtime.h ****  *
 370:./lib/chibios/os/rt/include/chtime.h ****  * @special
 371:./lib/chibios/os/rt/include/chtime.h ****  */
 372:./lib/chibios/os/rt/include/chtime.h **** static inline time_secs_t chTimeI2S(sysinterval_t interval) {
 373:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t secs;
 374:./lib/chibios/os/rt/include/chtime.h **** 
 375:./lib/chibios/os/rt/include/chtime.h ****   secs = ((time_conv_t)interval +
 376:./lib/chibios/os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY -
 377:./lib/chibios/os/rt/include/chtime.h ****           (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY;
 378:./lib/chibios/os/rt/include/chtime.h **** 
 379:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(secs < (time_conv_t)((time_secs_t)-1),
 380:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 381:./lib/chibios/os/rt/include/chtime.h **** 
 382:./lib/chibios/os/rt/include/chtime.h ****   return (time_secs_t)secs;
 383:./lib/chibios/os/rt/include/chtime.h **** }
 384:./lib/chibios/os/rt/include/chtime.h **** 
 385:./lib/chibios/os/rt/include/chtime.h **** /**
 386:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 387:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system interval to milliseconds.
 388:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 389:./lib/chibios/os/rt/include/chtime.h ****  *
 390:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 391:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 392:./lib/chibios/os/rt/include/chtime.h ****  *
 393:./lib/chibios/os/rt/include/chtime.h ****  * @special
 394:./lib/chibios/os/rt/include/chtime.h ****  */
 395:./lib/chibios/os/rt/include/chtime.h **** static inline time_msecs_t chTimeI2MS(sysinterval_t interval) {
 396:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t msecs;
 397:./lib/chibios/os/rt/include/chtime.h **** 
 398:./lib/chibios/os/rt/include/chtime.h ****   msecs = (((time_conv_t)interval * (time_conv_t)1000) +
 399:./lib/chibios/os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 400:./lib/chibios/os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 401:./lib/chibios/os/rt/include/chtime.h **** 
 402:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(msecs < (time_conv_t)((time_msecs_t)-1),
 403:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 404:./lib/chibios/os/rt/include/chtime.h **** 
 405:./lib/chibios/os/rt/include/chtime.h ****   return (time_msecs_t)msecs;
 406:./lib/chibios/os/rt/include/chtime.h **** }
 407:./lib/chibios/os/rt/include/chtime.h **** 
 408:./lib/chibios/os/rt/include/chtime.h **** /**
 409:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 410:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system interval to microseconds.
 411:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 412:./lib/chibios/os/rt/include/chtime.h ****  *
 413:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 414:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of microseconds.
 415:./lib/chibios/os/rt/include/chtime.h ****  *
 416:./lib/chibios/os/rt/include/chtime.h ****  * @special
 417:./lib/chibios/os/rt/include/chtime.h ****  */
 418:./lib/chibios/os/rt/include/chtime.h **** static inline time_usecs_t chTimeI2US(sysinterval_t interval) {
 419:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t usecs;
 420:./lib/chibios/os/rt/include/chtime.h **** 
 421:./lib/chibios/os/rt/include/chtime.h ****   usecs = (((time_conv_t)interval * (time_conv_t)1000000) +
 422:./lib/chibios/os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 423:./lib/chibios/os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 424:./lib/chibios/os/rt/include/chtime.h **** 
 425:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(usecs <= (time_conv_t)((time_usecs_t)-1),
 426:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 427:./lib/chibios/os/rt/include/chtime.h **** 
 428:./lib/chibios/os/rt/include/chtime.h ****   return (time_usecs_t)usecs;
 429:./lib/chibios/os/rt/include/chtime.h **** }
 430:./lib/chibios/os/rt/include/chtime.h **** 
 431:./lib/chibios/os/rt/include/chtime.h **** /**
 432:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Adds an interval to a system time returning a system time.
 433:./lib/chibios/os/rt/include/chtime.h ****  *
 434:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] systime   base system time
 435:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval to be added
 436:./lib/chibios/os/rt/include/chtime.h ****  * @return              The new system time.
 437:./lib/chibios/os/rt/include/chtime.h ****  *
 438:./lib/chibios/os/rt/include/chtime.h ****  * @xclass
 439:./lib/chibios/os/rt/include/chtime.h ****  */
 440:./lib/chibios/os/rt/include/chtime.h **** static inline systime_t chTimeAddX(systime_t systime,
 441:./lib/chibios/os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 442:./lib/chibios/os/rt/include/chtime.h **** 
 443:./lib/chibios/os/rt/include/chtime.h **** #if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
 444:./lib/chibios/os/rt/include/chtime.h ****   chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 445:./lib/chibios/os/rt/include/chtime.h **** #endif
 446:./lib/chibios/os/rt/include/chtime.h **** 
 447:./lib/chibios/os/rt/include/chtime.h ****   return systime + (systime_t)interval;
 159              		.loc 4 447 18 is_stmt 0 view .LVU42
 160 0024 4FF6FF73 		movw	r3, #65535
 161              	.LBE126:
 162              	.LBE125:
 163              		.loc 1 204 22 view .LVU43
 164 0028 2884     		strh	r0, [r5, #32]	@ movhi
 205:lib/chibios/os/rt/src/chvt.c ****       vtlp->dlist.next = &vtp->dlist;
 165              		.loc 1 205 7 is_stmt 1 view .LVU44
 166              	.LBB129:
 167              	.LBB127:
 168              		.loc 4 447 18 is_stmt 0 view .LVU45
 169 002a 9942     		cmp	r1, r3
 170 002c 94BF     		ite	ls
 171 002e 4018     		addls	r0, r0, r1
 172 0030 C018     		addhi	r0, r0, r3
 173              	.LVL5:
 174              		.loc 4 447 18 view .LVU46
 175              	.LBE127:
 176              	.LBE129:
 206:lib/chibios/os/rt/src/chvt.c ****       vtlp->dlist.prev = &vtp->dlist;
 177              		.loc 1 206 24 view .LVU47
 178 0032 C5E90544 		strd	r4, r4, [r5, #20]
 207:lib/chibios/os/rt/src/chvt.c ****       vtp->dlist.next = &vtlp->dlist;
 179              		.loc 1 207 7 is_stmt 1 view .LVU48
 180              	.LBB130:
 181              	.LBB131:
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 182              		.loc 3 82 3 is_stmt 0 view .LVU49
 183 0036 80B2     		uxth	r0, r0
 184              	.LBE131:
 185              	.LBE130:
 208:lib/chibios/os/rt/src/chvt.c ****       vtp->dlist.prev = &vtlp->dlist;
 186              		.loc 1 208 23 view .LVU50
 187 0038 C4E90022 		strd	r2, r2, [r4]
 209:lib/chibios/os/rt/src/chvt.c ****       vtp->dlist.delta = delay;
 188              		.loc 1 209 7 is_stmt 1 view .LVU51
 189              		.loc 1 209 24 is_stmt 0 view .LVU52
 190 003c A160     		str	r1, [r4, #8]
 210:lib/chibios/os/rt/src/chvt.c **** 
 211:lib/chibios/os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 212:lib/chibios/os/rt/src/chvt.c ****       /* The delta could be too large for the physical timer to handle.*/
 213:lib/chibios/os/rt/src/chvt.c ****       if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 191              		.loc 1 213 7 is_stmt 1 view .LVU53
 192              	.LVL6:
 214:lib/chibios/os/rt/src/chvt.c ****         delay = (sysinterval_t)TIME_MAX_SYSTIME;
 215:lib/chibios/os/rt/src/chvt.c ****       }
 216:lib/chibios/os/rt/src/chvt.c **** #endif
 217:lib/chibios/os/rt/src/chvt.c **** 
 218:lib/chibios/os/rt/src/chvt.c ****       /* Being the first element in the list the alarm timer is started.*/
 219:lib/chibios/os/rt/src/chvt.c ****       port_timer_start_alarm(chTimeAddX(vtlp->lasttime, delay));
 193              		.loc 1 219 7 view .LVU54
 194              	.LBB134:
 195              	.LBI125:
 440:./lib/chibios/os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 196              		.loc 4 440 25 view .LVU55
 197              	.LBB128:
 444:./lib/chibios/os/rt/include/chtime.h **** #endif
 198              		.loc 4 444 3 view .LVU56
 444:./lib/chibios/os/rt/include/chtime.h **** #endif
 199              		.loc 4 444 3 view .LVU57
 444:./lib/chibios/os/rt/include/chtime.h **** #endif
 200              		.loc 4 444 3 view .LVU58
 201              		.loc 4 447 3 view .LVU59
 202              		.loc 4 447 3 is_stmt 0 view .LVU60
 203              	.LBE128:
 204              	.LBE134:
 205              	.LBB135:
 206              	.LBI130:
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 207              		.loc 3 80 20 is_stmt 1 view .LVU61
 208              	.LBB132:
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 209              		.loc 3 82 3 view .LVU62
 210              	.LBE132:
 211              	.LBE135:
 212              	.LBE152:
 220:lib/chibios/os/rt/src/chvt.c **** 
 221:lib/chibios/os/rt/src/chvt.c ****       return;
 222:lib/chibios/os/rt/src/chvt.c ****     }
 223:lib/chibios/os/rt/src/chvt.c **** 
 224:lib/chibios/os/rt/src/chvt.c ****     /* Delay as delta from 'lasttime'. Note, it can overflow and the value
 225:lib/chibios/os/rt/src/chvt.c ****        becomes lower than 'deltanow'.*/
 226:lib/chibios/os/rt/src/chvt.c ****     deltanow = chTimeDiffX(vtlp->lasttime, now);
 227:lib/chibios/os/rt/src/chvt.c ****     delta    = deltanow + delay;
 228:lib/chibios/os/rt/src/chvt.c **** 
 229:lib/chibios/os/rt/src/chvt.c ****     /* Scenario where a very large delay exceeded the numeric range, it
 230:lib/chibios/os/rt/src/chvt.c ****        requires a special handling, the compression procedure.*/
 231:lib/chibios/os/rt/src/chvt.c ****     if (delta < deltanow) {
 232:lib/chibios/os/rt/src/chvt.c ****       vt_list_compress(vtlp, deltanow);
 233:lib/chibios/os/rt/src/chvt.c ****       delta -= deltanow;
 234:lib/chibios/os/rt/src/chvt.c ****     }
 235:lib/chibios/os/rt/src/chvt.c ****     else if (delta < vtlp->dlist.next->delta) {
 236:lib/chibios/os/rt/src/chvt.c ****       sysinterval_t deadline_delta;
 237:lib/chibios/os/rt/src/chvt.c **** 
 238:lib/chibios/os/rt/src/chvt.c ****       /* A small delay that will become the first element in the delta list
 239:lib/chibios/os/rt/src/chvt.c ****          and next deadline.*/
 240:lib/chibios/os/rt/src/chvt.c ****       deadline_delta = delta;
 241:lib/chibios/os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 242:lib/chibios/os/rt/src/chvt.c ****       /* The delta could be too large for the physical timer to handle.*/
 243:lib/chibios/os/rt/src/chvt.c ****       if (deadline_delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 244:lib/chibios/os/rt/src/chvt.c ****         deadline_delta = (sysinterval_t)TIME_MAX_SYSTIME;
 245:lib/chibios/os/rt/src/chvt.c ****       }
 246:lib/chibios/os/rt/src/chvt.c **** #endif
 247:lib/chibios/os/rt/src/chvt.c ****       port_timer_set_alarm(chTimeAddX(vtlp->lasttime, deadline_delta));
 248:lib/chibios/os/rt/src/chvt.c ****     }
 249:lib/chibios/os/rt/src/chvt.c ****   }
 250:lib/chibios/os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA == 0 */
 251:lib/chibios/os/rt/src/chvt.c ****   /* Delta is initially equal to the specified delay.*/
 252:lib/chibios/os/rt/src/chvt.c ****   delta = delay;
 253:lib/chibios/os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA == 0 */
 254:lib/chibios/os/rt/src/chvt.c **** 
 255:lib/chibios/os/rt/src/chvt.c ****   /* The delta list is scanned in order to find the correct position for
 256:lib/chibios/os/rt/src/chvt.c ****      this timer. */
 257:lib/chibios/os/rt/src/chvt.c ****   dlp = vtlp->dlist.next;
 258:lib/chibios/os/rt/src/chvt.c ****   while (dlp->delta < delta) {
 259:lib/chibios/os/rt/src/chvt.c ****     /* Debug assert if the timer is already in the list.*/
 260:lib/chibios/os/rt/src/chvt.c ****     chDbgAssert(dlp != &vtp->dlist, "timer already armed");
 261:lib/chibios/os/rt/src/chvt.c **** 
 262:lib/chibios/os/rt/src/chvt.c ****     delta -= dlp->delta;
 263:lib/chibios/os/rt/src/chvt.c ****     dlp = dlp->next;
 264:lib/chibios/os/rt/src/chvt.c ****   }
 265:lib/chibios/os/rt/src/chvt.c **** 
 266:lib/chibios/os/rt/src/chvt.c ****   /* The timer is inserted in the delta list.*/
 267:lib/chibios/os/rt/src/chvt.c ****   vtp->dlist.next       = dlp;
 268:lib/chibios/os/rt/src/chvt.c ****   vtp->dlist.prev       = vtp->dlist.next->prev;
 269:lib/chibios/os/rt/src/chvt.c ****   vtp->dlist.prev->next = &vtp->dlist;
 270:lib/chibios/os/rt/src/chvt.c ****   dlp->prev             = &vtp->dlist;
 271:lib/chibios/os/rt/src/chvt.c ****   vtp->dlist.delta      = delta;
 272:lib/chibios/os/rt/src/chvt.c **** 
 273:lib/chibios/os/rt/src/chvt.c ****   /* Calculate new delta for the following entry.*/
 274:lib/chibios/os/rt/src/chvt.c ****   dlp->delta -= delta;
 275:lib/chibios/os/rt/src/chvt.c **** 
 276:lib/chibios/os/rt/src/chvt.c ****   /* Special case when the timer is in last position in the list, the
 277:lib/chibios/os/rt/src/chvt.c ****      value in the header must be restored.*/
 278:lib/chibios/os/rt/src/chvt.c ****   vtlp->dlist.delta = (sysinterval_t)-1;
 279:lib/chibios/os/rt/src/chvt.c **** }
 213              		.loc 1 279 1 is_stmt 0 view .LVU63
 214 003e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 215              		.cfi_remember_state
 216              		.cfi_restore 14
 217              		.cfi_restore 8
 218              		.cfi_restore 7
 219              		.cfi_restore 6
 220              		.cfi_restore 5
 221              		.cfi_restore 4
 222              		.cfi_def_cfa_offset 0
 223              	.LVL7:
 224              	.LBB153:
 225              	.LBB136:
 226              	.LBB133:
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 227              		.loc 3 82 3 view .LVU64
 228 0042 FFF7FEBF 		b	stStartAlarm
 229              	.LVL8:
 230              	.L5:
 231              		.cfi_restore_state
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 232              		.loc 3 82 3 view .LVU65
 233              	.LBE133:
 234              	.LBE136:
 226:lib/chibios/os/rt/src/chvt.c ****     delta    = deltanow + delay;
 235              		.loc 1 226 5 is_stmt 1 view .LVU66
 226:lib/chibios/os/rt/src/chvt.c ****     delta    = deltanow + delay;
 236              		.loc 1 226 16 is_stmt 0 view .LVU67
 237 0046 2E8C     		ldrh	r6, [r5, #32]
 238              	.LVL9:
 239              	.LBB137:
 240              	.LBI137:
 448:./lib/chibios/os/rt/include/chtime.h **** }
 449:./lib/chibios/os/rt/include/chtime.h **** 
 450:./lib/chibios/os/rt/include/chtime.h **** /**
 451:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Subtracts two system times returning an interval.
 452:./lib/chibios/os/rt/include/chtime.h ****  *
 453:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] start     first system time
 454:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] end       second system time
 455:./lib/chibios/os/rt/include/chtime.h ****  * @return              The interval representing the time difference.
 456:./lib/chibios/os/rt/include/chtime.h ****  *
 457:./lib/chibios/os/rt/include/chtime.h ****  * @xclass
 458:./lib/chibios/os/rt/include/chtime.h ****  */
 459:./lib/chibios/os/rt/include/chtime.h **** static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 241              		.loc 4 459 29 is_stmt 1 view .LVU68
 242              	.LBB138:
 460:./lib/chibios/os/rt/include/chtime.h **** 
 461:./lib/chibios/os/rt/include/chtime.h ****   /*lint -save -e9033 [10.8] This cast is required by the operation, it is
 462:./lib/chibios/os/rt/include/chtime.h ****     known that the destination type can be wider.*/
 463:./lib/chibios/os/rt/include/chtime.h ****   return (sysinterval_t)((systime_t)(end - start));
 243              		.loc 4 463 3 view .LVU69
 244              		.loc 4 463 26 is_stmt 0 view .LVU70
 245 0048 831B     		subs	r3, r0, r6
 246              		.loc 4 463 10 view .LVU71
 247 004a 9BB2     		uxth	r3, r3
 248              	.LVL10:
 249              		.loc 4 463 10 view .LVU72
 250              	.LBE138:
 251              	.LBE137:
 227:lib/chibios/os/rt/src/chvt.c **** 
 252              		.loc 1 227 5 is_stmt 1 view .LVU73
 231:lib/chibios/os/rt/src/chvt.c ****       vt_list_compress(vtlp, deltanow);
 253              		.loc 1 231 5 view .LVU74
 231:lib/chibios/os/rt/src/chvt.c ****       vt_list_compress(vtlp, deltanow);
 254              		.loc 1 231 8 is_stmt 0 view .LVU75
 255 004c 11EB0308 		adds	r8, r1, r3
 256              	.LVL11:
 235:lib/chibios/os/rt/src/chvt.c ****       sysinterval_t deadline_delta;
 257              		.loc 1 235 38 view .LVU76
 258 0050 9068     		ldr	r0, [r2, #8]
 259              	.LVL12:
 231:lib/chibios/os/rt/src/chvt.c ****       vt_list_compress(vtlp, deltanow);
 260              		.loc 1 231 8 view .LVU77
 261 0052 21D3     		bcc	.L17
 262              	.LBB139:
 263              	.LBB140:
 119:lib/chibios/os/rt/src/chvt.c ****     dlp        = dlp->next;
 264              		.loc 1 119 16 view .LVU78
 265 0054 4FF0000C 		mov	ip, #0
 266              	.LVL13:
 267              	.L8:
 117:lib/chibios/os/rt/src/chvt.c ****     deltanow  -= dlp->delta;
 268              		.loc 1 117 21 is_stmt 1 view .LVU79
 117:lib/chibios/os/rt/src/chvt.c ****     deltanow  -= dlp->delta;
 269              		.loc 1 117 13 is_stmt 0 view .LVU80
 270 0058 9068     		ldr	r0, [r2, #8]
 117:lib/chibios/os/rt/src/chvt.c ****     deltanow  -= dlp->delta;
 271              		.loc 1 117 21 view .LVU81
 272 005a 8342     		cmp	r3, r0
 273 005c 17D8     		bhi	.L10
 123:lib/chibios/os/rt/src/chvt.c **** 
 274              		.loc 1 123 3 is_stmt 1 view .LVU82
 123:lib/chibios/os/rt/src/chvt.c **** 
 275              		.loc 1 123 35 is_stmt 0 view .LVU83
 276 005e 1E44     		add	r6, r6, r3
 126:lib/chibios/os/rt/src/chvt.c ****     dlp->delta -= deltanow;
 277              		.loc 1 126 6 view .LVU84
 278 0060 BA42     		cmp	r2, r7
 123:lib/chibios/os/rt/src/chvt.c **** 
 279              		.loc 1 123 18 view .LVU85
 280 0062 2E84     		strh	r6, [r5, #32]	@ movhi
 126:lib/chibios/os/rt/src/chvt.c ****     dlp->delta -= deltanow;
 281              		.loc 1 126 3 is_stmt 1 view .LVU86
 126:lib/chibios/os/rt/src/chvt.c ****     dlp->delta -= deltanow;
 282              		.loc 1 126 6 is_stmt 0 view .LVU87
 283 0064 01D0     		beq	.L12
 127:lib/chibios/os/rt/src/chvt.c ****   }
 284              		.loc 1 127 5 is_stmt 1 view .LVU88
 127:lib/chibios/os/rt/src/chvt.c ****   }
 285              		.loc 1 127 16 is_stmt 0 view .LVU89
 286 0066 C01A     		subs	r0, r0, r3
 287 0068 9060     		str	r0, [r2, #8]
 288              	.LVL14:
 289              	.L12:
 127:lib/chibios/os/rt/src/chvt.c ****   }
 290              		.loc 1 127 16 view .LVU90
 291              	.LBE140:
 292              	.LBE139:
 293              	.LBE153:
 257:lib/chibios/os/rt/src/chvt.c ****   while (dlp->delta < delta) {
 294              		.loc 1 257 3 is_stmt 1 view .LVU91
 257:lib/chibios/os/rt/src/chvt.c ****   while (dlp->delta < delta) {
 295              		.loc 1 257 7 is_stmt 0 view .LVU92
 296 006a 6B69     		ldr	r3, [r5, #20]
 297              	.LVL15:
 258:lib/chibios/os/rt/src/chvt.c ****     /* Debug assert if the timer is already in the list.*/
 298              		.loc 1 258 3 is_stmt 1 view .LVU93
 299              	.L14:
 258:lib/chibios/os/rt/src/chvt.c ****     /* Debug assert if the timer is already in the list.*/
 300              		.loc 1 258 21 view .LVU94
 258:lib/chibios/os/rt/src/chvt.c ****     /* Debug assert if the timer is already in the list.*/
 301              		.loc 1 258 13 is_stmt 0 view .LVU95
 302 006c 9A68     		ldr	r2, [r3, #8]
 258:lib/chibios/os/rt/src/chvt.c ****     /* Debug assert if the timer is already in the list.*/
 303              		.loc 1 258 21 view .LVU96
 304 006e 8A42     		cmp	r2, r1
 305 0070 1FD3     		bcc	.L15
 267:lib/chibios/os/rt/src/chvt.c ****   vtp->dlist.prev       = vtp->dlist.next->prev;
 306              		.loc 1 267 3 is_stmt 1 view .LVU97
 268:lib/chibios/os/rt/src/chvt.c ****   vtp->dlist.prev->next = &vtp->dlist;
 307              		.loc 1 268 42 is_stmt 0 view .LVU98
 308 0072 5A68     		ldr	r2, [r3, #4]
 267:lib/chibios/os/rt/src/chvt.c ****   vtp->dlist.prev       = vtp->dlist.next->prev;
 309              		.loc 1 267 25 view .LVU99
 310 0074 2360     		str	r3, [r4]
 268:lib/chibios/os/rt/src/chvt.c ****   vtp->dlist.prev->next = &vtp->dlist;
 311              		.loc 1 268 3 is_stmt 1 view .LVU100
 268:lib/chibios/os/rt/src/chvt.c ****   vtp->dlist.prev->next = &vtp->dlist;
 312              		.loc 1 268 25 is_stmt 0 view .LVU101
 313 0076 6260     		str	r2, [r4, #4]
 269:lib/chibios/os/rt/src/chvt.c ****   dlp->prev             = &vtp->dlist;
 314              		.loc 1 269 3 is_stmt 1 view .LVU102
 269:lib/chibios/os/rt/src/chvt.c ****   dlp->prev             = &vtp->dlist;
 315              		.loc 1 269 25 is_stmt 0 view .LVU103
 316 0078 1460     		str	r4, [r2]
 270:lib/chibios/os/rt/src/chvt.c ****   vtp->dlist.delta      = delta;
 317              		.loc 1 270 3 is_stmt 1 view .LVU104
 270:lib/chibios/os/rt/src/chvt.c ****   vtp->dlist.delta      = delta;
 318              		.loc 1 270 25 is_stmt 0 view .LVU105
 319 007a 5C60     		str	r4, [r3, #4]
 271:lib/chibios/os/rt/src/chvt.c **** 
 320              		.loc 1 271 3 is_stmt 1 view .LVU106
 271:lib/chibios/os/rt/src/chvt.c **** 
 321              		.loc 1 271 25 is_stmt 0 view .LVU107
 322 007c A160     		str	r1, [r4, #8]
 274:lib/chibios/os/rt/src/chvt.c **** 
 323              		.loc 1 274 3 is_stmt 1 view .LVU108
 274:lib/chibios/os/rt/src/chvt.c **** 
 324              		.loc 1 274 14 is_stmt 0 view .LVU109
 325 007e 9A68     		ldr	r2, [r3, #8]
 326 0080 521A     		subs	r2, r2, r1
 327 0082 9A60     		str	r2, [r3, #8]
 278:lib/chibios/os/rt/src/chvt.c **** }
 328              		.loc 1 278 3 is_stmt 1 view .LVU110
 278:lib/chibios/os/rt/src/chvt.c **** }
 329              		.loc 1 278 21 is_stmt 0 view .LVU111
 330 0084 4FF0FF33 		mov	r3, #-1
 331              	.LVL16:
 278:lib/chibios/os/rt/src/chvt.c **** }
 332              		.loc 1 278 21 view .LVU112
 333 0088 EB61     		str	r3, [r5, #28]
 334              		.loc 1 279 1 view .LVU113
 335 008a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 336              	.LVL17:
 337              	.L10:
 338              	.LBB154:
 339              	.LBB142:
 340              	.LBB141:
 118:lib/chibios/os/rt/src/chvt.c ****     dlp->delta = (sysinterval_t)0;
 341              		.loc 1 118 5 is_stmt 1 view .LVU114
 119:lib/chibios/os/rt/src/chvt.c ****     dlp        = dlp->next;
 342              		.loc 1 119 16 is_stmt 0 view .LVU115
 343 008e C2F808C0 		str	ip, [r2, #8]
 118:lib/chibios/os/rt/src/chvt.c ****     dlp->delta = (sysinterval_t)0;
 344              		.loc 1 118 15 view .LVU116
 345 0092 1B1A     		subs	r3, r3, r0
 346              	.LVL18:
 119:lib/chibios/os/rt/src/chvt.c ****     dlp        = dlp->next;
 347              		.loc 1 119 5 is_stmt 1 view .LVU117
 120:lib/chibios/os/rt/src/chvt.c ****   }
 348              		.loc 1 120 5 view .LVU118
 120:lib/chibios/os/rt/src/chvt.c ****   }
 349              		.loc 1 120 16 is_stmt 0 view .LVU119
 350 0094 1268     		ldr	r2, [r2]
 351              	.LVL19:
 120:lib/chibios/os/rt/src/chvt.c ****   }
 352              		.loc 1 120 16 view .LVU120
 353 0096 DFE7     		b	.L8
 354              	.LVL20:
 355              	.L17:
 120:lib/chibios/os/rt/src/chvt.c ****   }
 356              		.loc 1 120 16 view .LVU121
 357              	.LBE141:
 358              	.LBE142:
 235:lib/chibios/os/rt/src/chvt.c ****       sysinterval_t deadline_delta;
 359              		.loc 1 235 10 is_stmt 1 view .LVU122
 235:lib/chibios/os/rt/src/chvt.c ****       sysinterval_t deadline_delta;
 360              		.loc 1 235 13 is_stmt 0 view .LVU123
 361 0098 8045     		cmp	r8, r0
 362 009a 08D2     		bcs	.L13
 363              	.LBB143:
 236:lib/chibios/os/rt/src/chvt.c **** 
 364              		.loc 1 236 7 is_stmt 1 view .LVU124
 240:lib/chibios/os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 365              		.loc 1 240 7 view .LVU125
 366              	.LVL21:
 243:lib/chibios/os/rt/src/chvt.c ****         deadline_delta = (sysinterval_t)TIME_MAX_SYSTIME;
 367              		.loc 1 243 7 view .LVU126
 247:lib/chibios/os/rt/src/chvt.c ****     }
 368              		.loc 1 247 7 view .LVU127
 369              	.LBB144:
 370              	.LBI144:
 440:./lib/chibios/os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 371              		.loc 4 440 25 view .LVU128
 372              	.LBB145:
 444:./lib/chibios/os/rt/include/chtime.h **** #endif
 373              		.loc 4 444 3 view .LVU129
 444:./lib/chibios/os/rt/include/chtime.h **** #endif
 374              		.loc 4 444 3 view .LVU130
 444:./lib/chibios/os/rt/include/chtime.h **** #endif
 375              		.loc 4 444 3 view .LVU131
 447:./lib/chibios/os/rt/include/chtime.h **** }
 376              		.loc 4 447 3 view .LVU132
 447:./lib/chibios/os/rt/include/chtime.h **** }
 377              		.loc 4 447 3 is_stmt 0 view .LVU133
 378              	.LBE145:
 379              	.LBE144:
 380              	.LBB147:
 381              	.LBI147:
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 382              		.loc 3 102 20 is_stmt 1 view .LVU134
 383              	.LBB148:
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 384              		.loc 3 104 3 view .LVU135
 385              	.LBE148:
 386              	.LBE147:
 387              	.LBB150:
 388              	.LBB146:
 447:./lib/chibios/os/rt/include/chtime.h **** }
 389              		.loc 4 447 18 is_stmt 0 view .LVU136
 390 009c 4FF6FF73 		movw	r3, #65535
 391              	.LVL22:
 447:./lib/chibios/os/rt/include/chtime.h **** }
 392              		.loc 4 447 18 view .LVU137
 393 00a0 9845     		cmp	r8, r3
 394 00a2 94BF     		ite	ls
 395 00a4 4644     		addls	r6, r6, r8
 396 00a6 F618     		addhi	r6, r6, r3
 397              	.LVL23:
 447:./lib/chibios/os/rt/include/chtime.h **** }
 398              		.loc 4 447 18 view .LVU138
 399              	.LBE146:
 400              	.LBE150:
 401              	.LBB151:
 402              	.LBB149:
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 403              		.loc 3 104 3 view .LVU139
 404 00a8 B0B2     		uxth	r0, r6
 405 00aa FFF7FEFF 		bl	stSetAlarm
 406              	.LVL24:
 407              	.L13:
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 408              		.loc 3 104 3 view .LVU140
 409              	.LBE149:
 410              	.LBE151:
 411              	.LBE143:
 412              	.LBE154:
 177:lib/chibios/os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &ch.vtlist;
 413              		.loc 1 177 45 view .LVU141
 414 00ae 4146     		mov	r1, r8
 415 00b0 DBE7     		b	.L12
 416              	.LVL25:
 417              	.L15:
 260:lib/chibios/os/rt/src/chvt.c **** 
 418              		.loc 1 260 5 is_stmt 1 discriminator 5 view .LVU142
 260:lib/chibios/os/rt/src/chvt.c **** 
 419              		.loc 1 260 5 discriminator 5 view .LVU143
 260:lib/chibios/os/rt/src/chvt.c **** 
 420              		.loc 1 260 5 discriminator 5 view .LVU144
 262:lib/chibios/os/rt/src/chvt.c ****     dlp = dlp->next;
 421              		.loc 1 262 5 discriminator 5 view .LVU145
 263:lib/chibios/os/rt/src/chvt.c ****   }
 422              		.loc 1 263 9 is_stmt 0 discriminator 5 view .LVU146
 423 00b2 1B68     		ldr	r3, [r3]
 424              	.LVL26:
 262:lib/chibios/os/rt/src/chvt.c ****     dlp = dlp->next;
 425              		.loc 1 262 11 discriminator 5 view .LVU147
 426 00b4 891A     		subs	r1, r1, r2
 427              	.LVL27:
 263:lib/chibios/os/rt/src/chvt.c ****   }
 428              		.loc 1 263 5 is_stmt 1 discriminator 5 view .LVU148
 263:lib/chibios/os/rt/src/chvt.c ****   }
 429              		.loc 1 263 5 is_stmt 0 discriminator 5 view .LVU149
 430 00b6 D9E7     		b	.L14
 431              	.L19:
 432              		.align	2
 433              	.L18:
 434 00b8 00000000 		.word	ch
 435              		.cfi_endproc
 436              	.LFE249:
 438              		.section	.text.chVTDoResetI,"ax",%progbits
 439              		.align	1
 440              		.global	chVTDoResetI
 441              		.syntax unified
 442              		.thumb
 443              		.thumb_func
 445              	chVTDoResetI:
 446              	.LVL28:
 447              	.LFB250:
 280:lib/chibios/os/rt/src/chvt.c **** 
 281:lib/chibios/os/rt/src/chvt.c **** /**
 282:lib/chibios/os/rt/src/chvt.c ****  * @brief   Disables a Virtual Timer.
 283:lib/chibios/os/rt/src/chvt.c ****  * @pre     The timer must be in armed state before calling this function.
 284:lib/chibios/os/rt/src/chvt.c ****  *
 285:lib/chibios/os/rt/src/chvt.c ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 286:lib/chibios/os/rt/src/chvt.c ****  *
 287:lib/chibios/os/rt/src/chvt.c ****  * @iclass
 288:lib/chibios/os/rt/src/chvt.c ****  */
 289:lib/chibios/os/rt/src/chvt.c **** void chVTDoResetI(virtual_timer_t *vtp) {
 448              		.loc 1 289 41 is_stmt 1 view -0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 290:lib/chibios/os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &ch.vtlist;
 452              		.loc 1 290 3 view .LVU151
 291:lib/chibios/os/rt/src/chvt.c **** 
 292:lib/chibios/os/rt/src/chvt.c ****   chDbgCheckClassI();
 453              		.loc 1 292 21 view .LVU152
 293:lib/chibios/os/rt/src/chvt.c ****   chDbgCheck(vtp != NULL);
 454              		.loc 1 293 3 view .LVU153
 455              		.loc 1 293 3 view .LVU154
 456              		.loc 1 293 3 view .LVU155
 294:lib/chibios/os/rt/src/chvt.c ****   chDbgAssert(vtp->func != NULL, "timer not set or already triggered");
 457              		.loc 1 294 3 view .LVU156
 458              		.loc 1 294 3 view .LVU157
 459              		.loc 1 294 3 view .LVU158
 295:lib/chibios/os/rt/src/chvt.c **** 
 296:lib/chibios/os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA == 0
 297:lib/chibios/os/rt/src/chvt.c **** 
 298:lib/chibios/os/rt/src/chvt.c ****   /* The delta of the timer is added to the next timer.*/
 299:lib/chibios/os/rt/src/chvt.c ****   vtp->dlist.next->delta += vtp->dlist.delta;
 300:lib/chibios/os/rt/src/chvt.c **** 
 301:lib/chibios/os/rt/src/chvt.c ****  /* Removing the element from the delta list.*/
 302:lib/chibios/os/rt/src/chvt.c ****   vtp->dlist.prev->next = vtp->dlist.next;
 303:lib/chibios/os/rt/src/chvt.c ****   vtp->dlist.next->prev = vtp->dlist.prev;
 304:lib/chibios/os/rt/src/chvt.c ****   vtp->func = NULL;
 305:lib/chibios/os/rt/src/chvt.c **** 
 306:lib/chibios/os/rt/src/chvt.c ****   /* The above code changes the value in the header when the removed element
 307:lib/chibios/os/rt/src/chvt.c ****      is the last of the list, restoring it.*/
 308:lib/chibios/os/rt/src/chvt.c ****   vtlp->dlist.delta = (sysinterval_t)-1;
 309:lib/chibios/os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 310:lib/chibios/os/rt/src/chvt.c ****   sysinterval_t nowdelta, delta;
 460              		.loc 1 310 3 view .LVU159
 311:lib/chibios/os/rt/src/chvt.c **** 
 312:lib/chibios/os/rt/src/chvt.c ****   /* If the timer is not the first of the list then it is simply unlinked
 313:lib/chibios/os/rt/src/chvt.c ****      else the operation is more complex.*/
 314:lib/chibios/os/rt/src/chvt.c ****   if (!is_first_timer(&vtlp->dlist, &vtp->dlist)) {
 461              		.loc 1 314 3 view .LVU160
 462              	.LBB155:
 463              	.LBI155:
  85:lib/chibios/os/rt/src/chvt.c **** 
 464              		.loc 1 85 20 view .LVU161
 465              	.LBB156:
  87:lib/chibios/os/rt/src/chvt.c **** }
 466              		.loc 1 87 3 view .LVU162
  87:lib/chibios/os/rt/src/chvt.c **** }
 467              		.loc 1 87 3 is_stmt 0 view .LVU163
 468              	.LBE156:
 469              	.LBE155:
 289:lib/chibios/os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &ch.vtlist;
 470              		.loc 1 289 41 view .LVU164
 471 0000 38B5     		push	{r3, r4, r5, lr}
 472              		.cfi_def_cfa_offset 16
 473              		.cfi_offset 3, -16
 474              		.cfi_offset 4, -12
 475              		.cfi_offset 5, -8
 476              		.cfi_offset 14, -4
 477              	.LBB158:
 478              	.LBB157:
  87:lib/chibios/os/rt/src/chvt.c **** }
 479              		.loc 1 87 21 view .LVU165
 480 0002 1D4C     		ldr	r4, .L28
 481              	.LBE157:
 482              	.LBE158:
 315:lib/chibios/os/rt/src/chvt.c ****     /* Removing the element from the delta list.*/
 316:lib/chibios/os/rt/src/chvt.c ****     vtp->dlist.prev->next = vtp->dlist.next;
 483              		.loc 1 316 39 view .LVU166
 484 0004 0368     		ldr	r3, [r0]
 314:lib/chibios/os/rt/src/chvt.c ****     /* Removing the element from the delta list.*/
 485              		.loc 1 314 6 view .LVU167
 486 0006 2246     		mov	r2, r4
 487 0008 52F8141F 		ldr	r1, [r2, #20]!
 488 000c 8842     		cmp	r0, r1
 489 000e 4FF00001 		mov	r1, #0
 490 0012 0AD0     		beq	.L21
 491              		.loc 1 316 5 is_stmt 1 view .LVU168
 492              		.loc 1 316 15 is_stmt 0 view .LVU169
 493 0014 4468     		ldr	r4, [r0, #4]
 317:lib/chibios/os/rt/src/chvt.c ****     vtp->dlist.next->prev = vtp->dlist.prev;
 318:lib/chibios/os/rt/src/chvt.c ****     vtp->func = NULL;
 319:lib/chibios/os/rt/src/chvt.c **** 
 320:lib/chibios/os/rt/src/chvt.c ****     /* Adding delta to the next element, if it is not the last one.*/
 321:lib/chibios/os/rt/src/chvt.c ****     if (is_timer(&vtlp->dlist, vtp->dlist.next))
 494              		.loc 1 321 8 view .LVU170
 495 0016 9342     		cmp	r3, r2
 316:lib/chibios/os/rt/src/chvt.c ****     vtp->dlist.next->prev = vtp->dlist.prev;
 496              		.loc 1 316 27 view .LVU171
 497 0018 2360     		str	r3, [r4]
 317:lib/chibios/os/rt/src/chvt.c ****     vtp->dlist.next->prev = vtp->dlist.prev;
 498              		.loc 1 317 5 is_stmt 1 view .LVU172
 317:lib/chibios/os/rt/src/chvt.c ****     vtp->dlist.next->prev = vtp->dlist.prev;
 499              		.loc 1 317 27 is_stmt 0 view .LVU173
 500 001a 5C60     		str	r4, [r3, #4]
 318:lib/chibios/os/rt/src/chvt.c **** 
 501              		.loc 1 318 5 is_stmt 1 view .LVU174
 318:lib/chibios/os/rt/src/chvt.c **** 
 502              		.loc 1 318 15 is_stmt 0 view .LVU175
 503 001c C160     		str	r1, [r0, #12]
 504              		.loc 1 321 5 is_stmt 1 view .LVU176
 505              		.loc 1 321 8 is_stmt 0 view .LVU177
 506 001e 03D0     		beq	.L20
 322:lib/chibios/os/rt/src/chvt.c ****       vtp->dlist.next->delta += vtp->dlist.delta;
 507              		.loc 1 322 7 is_stmt 1 view .LVU178
 508              		.loc 1 322 30 is_stmt 0 view .LVU179
 509 0020 9A68     		ldr	r2, [r3, #8]
 510 0022 8168     		ldr	r1, [r0, #8]
 511 0024 0A44     		add	r2, r2, r1
 512 0026 9A60     		str	r2, [r3, #8]
 513              	.LVL29:
 514              	.L20:
 323:lib/chibios/os/rt/src/chvt.c **** 
 324:lib/chibios/os/rt/src/chvt.c ****     return;
 325:lib/chibios/os/rt/src/chvt.c ****   }
 326:lib/chibios/os/rt/src/chvt.c **** 
 327:lib/chibios/os/rt/src/chvt.c ****   /* Removing the first timer from the list.*/
 328:lib/chibios/os/rt/src/chvt.c ****   vtlp->dlist.next = vtp->dlist.next;
 329:lib/chibios/os/rt/src/chvt.c ****   vtlp->dlist.next->prev = &vtlp->dlist;
 330:lib/chibios/os/rt/src/chvt.c ****   vtp->func = NULL;
 331:lib/chibios/os/rt/src/chvt.c **** 
 332:lib/chibios/os/rt/src/chvt.c ****   /* If the list become empty then the alarm timer is stopped and done.*/
 333:lib/chibios/os/rt/src/chvt.c ****   if (is_vtlist_empty(&vtlp->dlist)) {
 334:lib/chibios/os/rt/src/chvt.c ****     port_timer_stop_alarm();
 335:lib/chibios/os/rt/src/chvt.c **** 
 336:lib/chibios/os/rt/src/chvt.c ****     return;
 337:lib/chibios/os/rt/src/chvt.c ****   }
 338:lib/chibios/os/rt/src/chvt.c **** 
 339:lib/chibios/os/rt/src/chvt.c ****   /* The delta of the removed timer is added to the new first timer.*/
 340:lib/chibios/os/rt/src/chvt.c ****   vtlp->dlist.next->delta += vtp->dlist.delta;
 341:lib/chibios/os/rt/src/chvt.c **** 
 342:lib/chibios/os/rt/src/chvt.c ****   /* If the new first timer has a delta of zero then the alarm is not
 343:lib/chibios/os/rt/src/chvt.c ****      modified, the already programmed alarm will serve it.*/
 344:lib/chibios/os/rt/src/chvt.c **** /*  if (vtlp->dlist.next->delta == 0) {
 345:lib/chibios/os/rt/src/chvt.c ****     return;
 346:lib/chibios/os/rt/src/chvt.c ****   }*/
 347:lib/chibios/os/rt/src/chvt.c **** 
 348:lib/chibios/os/rt/src/chvt.c ****   /* Distance in ticks between the last alarm event and current time.*/
 349:lib/chibios/os/rt/src/chvt.c ****   nowdelta = chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 350:lib/chibios/os/rt/src/chvt.c **** 
 351:lib/chibios/os/rt/src/chvt.c ****   /* If the current time surpassed the time of the next element in list
 352:lib/chibios/os/rt/src/chvt.c ****      then the event interrupt is already pending, just return.*/
 353:lib/chibios/os/rt/src/chvt.c ****   if (nowdelta >= vtlp->dlist.next->delta) {
 354:lib/chibios/os/rt/src/chvt.c ****     return;
 355:lib/chibios/os/rt/src/chvt.c ****   }
 356:lib/chibios/os/rt/src/chvt.c **** 
 357:lib/chibios/os/rt/src/chvt.c ****   /* Distance from the next scheduled event and now.*/
 358:lib/chibios/os/rt/src/chvt.c ****   delta = vtlp->dlist.next->delta - nowdelta;
 359:lib/chibios/os/rt/src/chvt.c **** 
 360:lib/chibios/os/rt/src/chvt.c ****   /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
 361:lib/chibios/os/rt/src/chvt.c ****      ticks from now.*/
 362:lib/chibios/os/rt/src/chvt.c ****   if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 363:lib/chibios/os/rt/src/chvt.c ****     delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 364:lib/chibios/os/rt/src/chvt.c ****   }
 365:lib/chibios/os/rt/src/chvt.c ****   else {
 366:lib/chibios/os/rt/src/chvt.c ****     delta = nowdelta + delta;
 367:lib/chibios/os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 368:lib/chibios/os/rt/src/chvt.c ****     /* The delta could be too large for the physical timer to handle.*/
 369:lib/chibios/os/rt/src/chvt.c ****     if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 370:lib/chibios/os/rt/src/chvt.c ****       delta = (sysinterval_t)TIME_MAX_SYSTIME;
 371:lib/chibios/os/rt/src/chvt.c ****     }
 372:lib/chibios/os/rt/src/chvt.c **** #endif
 373:lib/chibios/os/rt/src/chvt.c ****   }
 374:lib/chibios/os/rt/src/chvt.c ****   port_timer_set_alarm(chTimeAddX(vtlp->lasttime, delta));
 375:lib/chibios/os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 376:lib/chibios/os/rt/src/chvt.c **** }
 515              		.loc 1 376 1 view .LVU180
 516 0028 38BD     		pop	{r3, r4, r5, pc}
 517              	.LVL30:
 518              	.L21:
 328:lib/chibios/os/rt/src/chvt.c ****   vtlp->dlist.next->prev = &vtlp->dlist;
 519              		.loc 1 328 3 is_stmt 1 view .LVU181
 333:lib/chibios/os/rt/src/chvt.c ****     port_timer_stop_alarm();
 520              		.loc 1 333 6 is_stmt 0 view .LVU182
 521 002a 9342     		cmp	r3, r2
 328:lib/chibios/os/rt/src/chvt.c ****   vtlp->dlist.next->prev = &vtlp->dlist;
 522              		.loc 1 328 20 view .LVU183
 523 002c 6361     		str	r3, [r4, #20]
 329:lib/chibios/os/rt/src/chvt.c ****   vtp->func = NULL;
 524              		.loc 1 329 3 is_stmt 1 view .LVU184
 329:lib/chibios/os/rt/src/chvt.c ****   vtp->func = NULL;
 525              		.loc 1 329 26 is_stmt 0 view .LVU185
 526 002e 5A60     		str	r2, [r3, #4]
 330:lib/chibios/os/rt/src/chvt.c **** 
 527              		.loc 1 330 3 is_stmt 1 view .LVU186
 330:lib/chibios/os/rt/src/chvt.c **** 
 528              		.loc 1 330 13 is_stmt 0 view .LVU187
 529 0030 C160     		str	r1, [r0, #12]
 333:lib/chibios/os/rt/src/chvt.c ****     port_timer_stop_alarm();
 530              		.loc 1 333 3 is_stmt 1 view .LVU188
 333:lib/chibios/os/rt/src/chvt.c ****     port_timer_stop_alarm();
 531              		.loc 1 333 6 is_stmt 0 view .LVU189
 532 0032 03D1     		bne	.L24
 334:lib/chibios/os/rt/src/chvt.c **** 
 533              		.loc 1 334 5 is_stmt 1 view .LVU190
 534              	.LBB159:
 535              	.LBI159:
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 536              		.loc 3 90 20 view .LVU191
 537              	.LBB160:
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 538              		.loc 3 92 3 view .LVU192
 539              	.LBE160:
 540              	.LBE159:
 541              		.loc 1 376 1 is_stmt 0 view .LVU193
 542 0034 BDE83840 		pop	{r3, r4, r5, lr}
 543              		.cfi_remember_state
 544              		.cfi_restore 14
 545              		.cfi_restore 5
 546              		.cfi_restore 4
 547              		.cfi_restore 3
 548              		.cfi_def_cfa_offset 0
 549              	.LBB162:
 550              	.LBB161:
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 551              		.loc 3 92 3 view .LVU194
 552 0038 FFF7FEBF 		b	stStopAlarm
 553              	.LVL31:
 554              	.L24:
 555              		.cfi_restore_state
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 556              		.loc 3 92 3 view .LVU195
 557              	.LBE161:
 558              	.LBE162:
 340:lib/chibios/os/rt/src/chvt.c **** 
 559              		.loc 1 340 3 is_stmt 1 view .LVU196
 340:lib/chibios/os/rt/src/chvt.c **** 
 560              		.loc 1 340 27 is_stmt 0 view .LVU197
 561 003c 9A68     		ldr	r2, [r3, #8]
 562 003e 8168     		ldr	r1, [r0, #8]
 349:lib/chibios/os/rt/src/chvt.c **** 
 563              		.loc 1 349 14 view .LVU198
 564 0040 258C     		ldrh	r5, [r4, #32]
 340:lib/chibios/os/rt/src/chvt.c **** 
 565              		.loc 1 340 27 view .LVU199
 566 0042 0A44     		add	r2, r2, r1
 567 0044 9A60     		str	r2, [r3, #8]
 349:lib/chibios/os/rt/src/chvt.c **** 
 568              		.loc 1 349 3 is_stmt 1 view .LVU200
 569              	.LBB163:
 570              	.LBI163:
 116:./lib/chibios/os/rt/include/chvt.h **** 
 571              		.loc 2 116 25 view .LVU201
 572              		.loc 2 121 3 view .LVU202
 573              	.LBB164:
 574              	.LBI164:
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 575              		.loc 3 114 25 view .LVU203
 576              	.LBB165:
 577              		.loc 3 116 3 view .LVU204
 578              		.loc 3 116 10 is_stmt 0 view .LVU205
 579 0046 FFF7FEFF 		bl	stGetCounter
 580              	.LVL32:
 581              		.loc 3 116 10 view .LVU206
 582              	.LBE165:
 583              	.LBE164:
 584              	.LBE163:
 585              	.LBB166:
 586              	.LBI166:
 459:./lib/chibios/os/rt/include/chtime.h **** 
 587              		.loc 4 459 29 is_stmt 1 view .LVU207
 588              	.LBB167:
 589              		.loc 4 463 3 view .LVU208
 590              	.LBE167:
 591              	.LBE166:
 353:lib/chibios/os/rt/src/chvt.c ****     return;
 592              		.loc 1 353 35 is_stmt 0 view .LVU209
 593 004a 6369     		ldr	r3, [r4, #20]
 594              	.LBB170:
 595              	.LBB168:
 596              		.loc 4 463 26 view .LVU210
 597 004c 401B     		subs	r0, r0, r5
 598              	.LVL33:
 599              		.loc 4 463 26 view .LVU211
 600              	.LBE168:
 601              	.LBE170:
 353:lib/chibios/os/rt/src/chvt.c ****     return;
 602              		.loc 1 353 35 view .LVU212
 603 004e 9B68     		ldr	r3, [r3, #8]
 604              	.LBB171:
 605              	.LBB169:
 606              		.loc 4 463 10 view .LVU213
 607 0050 80B2     		uxth	r0, r0
 608              	.LVL34:
 609              		.loc 4 463 10 view .LVU214
 610              	.LBE169:
 611              	.LBE171:
 353:lib/chibios/os/rt/src/chvt.c ****     return;
 612              		.loc 1 353 3 is_stmt 1 view .LVU215
 353:lib/chibios/os/rt/src/chvt.c ****     return;
 613              		.loc 1 353 6 is_stmt 0 view .LVU216
 614 0052 8342     		cmp	r3, r0
 615 0054 E8D9     		bls	.L20
 358:lib/chibios/os/rt/src/chvt.c **** 
 616              		.loc 1 358 3 is_stmt 1 view .LVU217
 617              	.LVL35:
 362:lib/chibios/os/rt/src/chvt.c ****     delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 618              		.loc 1 362 3 view .LVU218
 358:lib/chibios/os/rt/src/chvt.c **** 
 619              		.loc 1 358 9 is_stmt 0 view .LVU219
 620 0056 1A1A     		subs	r2, r3, r0
 621              	.LVL36:
 362:lib/chibios/os/rt/src/chvt.c ****     delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 622              		.loc 1 362 6 view .LVU220
 623 0058 012A     		cmp	r2, #1
 624 005a 07D1     		bne	.L26
 363:lib/chibios/os/rt/src/chvt.c ****   }
 625              		.loc 1 363 5 is_stmt 1 view .LVU221
 363:lib/chibios/os/rt/src/chvt.c ****   }
 626              		.loc 1 363 11 is_stmt 0 view .LVU222
 627 005c 0230     		adds	r0, r0, #2
 628              	.LVL37:
 629              	.L27:
 374:lib/chibios/os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 630              		.loc 1 374 3 is_stmt 1 view .LVU223
 631              	.LBB172:
 632              	.LBI172:
 440:./lib/chibios/os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 633              		.loc 4 440 25 view .LVU224
 634              	.LBB173:
 444:./lib/chibios/os/rt/include/chtime.h **** #endif
 635              		.loc 4 444 3 view .LVU225
 444:./lib/chibios/os/rt/include/chtime.h **** #endif
 636              		.loc 4 444 3 view .LVU226
 444:./lib/chibios/os/rt/include/chtime.h **** #endif
 637              		.loc 4 444 3 view .LVU227
 447:./lib/chibios/os/rt/include/chtime.h **** }
 638              		.loc 4 447 3 view .LVU228
 447:./lib/chibios/os/rt/include/chtime.h **** }
 639              		.loc 4 447 3 is_stmt 0 view .LVU229
 640              	.LBE173:
 641              	.LBE172:
 642              	.LBB175:
 643              	.LBI175:
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 644              		.loc 3 102 20 is_stmt 1 view .LVU230
 645              	.LBB176:
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 646              		.loc 3 104 3 view .LVU231
 647              	.LBE176:
 648              	.LBE175:
 649              	.LBB179:
 650              	.LBB174:
 447:./lib/chibios/os/rt/include/chtime.h **** }
 651              		.loc 4 447 18 is_stmt 0 view .LVU232
 652 005e 238C     		ldrh	r3, [r4, #32]
 653 0060 1844     		add	r0, r0, r3
 654              	.LVL38:
 447:./lib/chibios/os/rt/include/chtime.h **** }
 655              		.loc 4 447 18 view .LVU233
 656              	.LBE174:
 657              	.LBE179:
 658              	.LBB180:
 659              	.LBB177:
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 660              		.loc 3 104 3 view .LVU234
 661 0062 80B2     		uxth	r0, r0
 662              	.LBE177:
 663              	.LBE180:
 664              		.loc 1 376 1 view .LVU235
 665 0064 BDE83840 		pop	{r3, r4, r5, lr}
 666              		.cfi_remember_state
 667              		.cfi_restore 14
 668              		.cfi_restore 5
 669              		.cfi_restore 4
 670              		.cfi_restore 3
 671              		.cfi_def_cfa_offset 0
 672              	.LBB181:
 673              	.LBB178:
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 674              		.loc 3 104 3 view .LVU236
 675 0068 FFF7FEBF 		b	stSetAlarm
 676              	.LVL39:
 677              	.L26:
 678              		.cfi_restore_state
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 679              		.loc 3 104 3 view .LVU237
 680              	.LBE178:
 681              	.LBE181:
 366:lib/chibios/os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 682              		.loc 1 366 5 is_stmt 1 view .LVU238
 369:lib/chibios/os/rt/src/chvt.c ****       delta = (sysinterval_t)TIME_MAX_SYSTIME;
 683              		.loc 1 369 5 view .LVU239
 369:lib/chibios/os/rt/src/chvt.c ****       delta = (sysinterval_t)TIME_MAX_SYSTIME;
 684              		.loc 1 369 8 is_stmt 0 view .LVU240
 685 006c 4FF6FF70 		movw	r0, #65535
 686              	.LVL40:
 369:lib/chibios/os/rt/src/chvt.c ****       delta = (sysinterval_t)TIME_MAX_SYSTIME;
 687              		.loc 1 369 8 view .LVU241
 688 0070 9842     		cmp	r0, r3
 689 0072 28BF     		it	cs
 690 0074 1846     		movcs	r0, r3
 691 0076 F2E7     		b	.L27
 692              	.L29:
 693              		.align	2
 694              	.L28:
 695 0078 00000000 		.word	ch
 696              		.cfi_endproc
 697              	.LFE250:
 699              		.section	.text.chVTDoTickI,"ax",%progbits
 700              		.align	1
 701              		.global	chVTDoTickI
 702              		.syntax unified
 703              		.thumb
 704              		.thumb_func
 706              	chVTDoTickI:
 707              	.LFB251:
 377:lib/chibios/os/rt/src/chvt.c **** 
 378:lib/chibios/os/rt/src/chvt.c **** /**
 379:lib/chibios/os/rt/src/chvt.c ****  * @brief   Virtual timers ticker.
 380:lib/chibios/os/rt/src/chvt.c ****  * @note    The system lock is released before entering the callback and
 381:lib/chibios/os/rt/src/chvt.c ****  *          re-acquired immediately after. It is callback's responsibility
 382:lib/chibios/os/rt/src/chvt.c ****  *          to acquire the lock if needed. This is done in order to reduce
 383:lib/chibios/os/rt/src/chvt.c ****  *          interrupts jitter when many timers are in use.
 384:lib/chibios/os/rt/src/chvt.c ****  *
 385:lib/chibios/os/rt/src/chvt.c ****  * @iclass
 386:lib/chibios/os/rt/src/chvt.c ****  */
 387:lib/chibios/os/rt/src/chvt.c **** void chVTDoTickI(void) {
 708              		.loc 1 387 24 is_stmt 1 view -0
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 0
 711              		@ frame_needed = 0, uses_anonymous_args = 0
 388:lib/chibios/os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &ch.vtlist;
 712              		.loc 1 388 3 view .LVU243
 713              	.LVL41:
 389:lib/chibios/os/rt/src/chvt.c **** 
 390:lib/chibios/os/rt/src/chvt.c ****   chDbgCheckClassI();
 714              		.loc 1 390 21 view .LVU244
 391:lib/chibios/os/rt/src/chvt.c **** 
 392:lib/chibios/os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA == 0
 393:lib/chibios/os/rt/src/chvt.c ****   vtlp->systime++;
 394:lib/chibios/os/rt/src/chvt.c ****   if (!is_vtlist_empty(&vtlp->dlist)) {
 395:lib/chibios/os/rt/src/chvt.c ****     /* The list is not empty, processing elements on top.*/
 396:lib/chibios/os/rt/src/chvt.c ****     --vtlp->dlist.next->delta;
 397:lib/chibios/os/rt/src/chvt.c ****     while (vtlp->dlist.next->delta == (sysinterval_t)0) {
 398:lib/chibios/os/rt/src/chvt.c ****       virtual_timer_t *vtp;
 399:lib/chibios/os/rt/src/chvt.c ****       vtfunc_t fn;
 400:lib/chibios/os/rt/src/chvt.c **** 
 401:lib/chibios/os/rt/src/chvt.c ****       vtp = (virtual_timer_t *)vtlp->dlist.next;
 402:lib/chibios/os/rt/src/chvt.c ****       fn = vtp->func;
 403:lib/chibios/os/rt/src/chvt.c ****       vtp->func = NULL;
 404:lib/chibios/os/rt/src/chvt.c ****       vtp->dlist.next->prev = &vtlp->dlist;
 405:lib/chibios/os/rt/src/chvt.c ****       vtlp->dlist.next = vtp->dlist.next;
 406:lib/chibios/os/rt/src/chvt.c ****       chSysUnlockFromISR();
 407:lib/chibios/os/rt/src/chvt.c ****       fn(vtp->par);
 408:lib/chibios/os/rt/src/chvt.c ****       chSysLockFromISR();
 409:lib/chibios/os/rt/src/chvt.c ****     }
 410:lib/chibios/os/rt/src/chvt.c ****   }
 411:lib/chibios/os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 412:lib/chibios/os/rt/src/chvt.c ****   delta_list_t *dlp;
 715              		.loc 1 412 3 view .LVU245
 413:lib/chibios/os/rt/src/chvt.c ****   systime_t now;
 716              		.loc 1 413 3 view .LVU246
 414:lib/chibios/os/rt/src/chvt.c ****   sysinterval_t delta, nowdelta;
 717              		.loc 1 414 3 view .LVU247
 415:lib/chibios/os/rt/src/chvt.c **** 
 416:lib/chibios/os/rt/src/chvt.c ****   /* Looping through timers.*/
 417:lib/chibios/os/rt/src/chvt.c ****   dlp = vtlp->dlist.next;
 718              		.loc 1 417 3 view .LVU248
 387:lib/chibios/os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &ch.vtlist;
 719              		.loc 1 387 24 is_stmt 0 view .LVU249
 720 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 721              		.cfi_def_cfa_offset 40
 722              		.cfi_offset 3, -40
 723              		.cfi_offset 4, -36
 724              		.cfi_offset 5, -32
 725              		.cfi_offset 6, -28
 726              		.cfi_offset 7, -24
 727              		.cfi_offset 8, -20
 728              		.cfi_offset 9, -16
 729              		.cfi_offset 10, -12
 730              		.cfi_offset 11, -8
 731              		.cfi_offset 14, -4
 732              		.loc 1 417 7 view .LVU250
 733 0004 224E     		ldr	r6, .L37
 734 0006 3746     		mov	r7, r6
 735              	.LBB182:
 418:lib/chibios/os/rt/src/chvt.c ****   while (true) {
 419:lib/chibios/os/rt/src/chvt.c **** 
 420:lib/chibios/os/rt/src/chvt.c ****     /* Getting the system time as reference.*/
 421:lib/chibios/os/rt/src/chvt.c ****     now = chVTGetSystemTimeX();
 422:lib/chibios/os/rt/src/chvt.c ****     nowdelta = chTimeDiffX(vtlp->lasttime, now);
 423:lib/chibios/os/rt/src/chvt.c **** 
 424:lib/chibios/os/rt/src/chvt.c ****     /* The list scan is limited by the timers header having
 425:lib/chibios/os/rt/src/chvt.c ****        "vtlp->dlist.delta == (sysinterval_t)-1" which is
 426:lib/chibios/os/rt/src/chvt.c ****        greater than all deltas.*/
 427:lib/chibios/os/rt/src/chvt.c ****     if (nowdelta < dlp->delta) {
 428:lib/chibios/os/rt/src/chvt.c ****       break;
 429:lib/chibios/os/rt/src/chvt.c ****     }
 430:lib/chibios/os/rt/src/chvt.c **** 
 431:lib/chibios/os/rt/src/chvt.c ****     /* Consuming all timers between "vtp->lasttime" and now.*/
 432:lib/chibios/os/rt/src/chvt.c ****     do {
 433:lib/chibios/os/rt/src/chvt.c ****       vtfunc_t fn;
 434:lib/chibios/os/rt/src/chvt.c ****       virtual_timer_t *vtp = (virtual_timer_t *)dlp;
 435:lib/chibios/os/rt/src/chvt.c **** 
 436:lib/chibios/os/rt/src/chvt.c ****       /* The "last time" becomes this timer's expiration time.*/
 437:lib/chibios/os/rt/src/chvt.c ****       vtlp->lasttime += dlp->delta;
 438:lib/chibios/os/rt/src/chvt.c ****       nowdelta -= dlp->delta;
 439:lib/chibios/os/rt/src/chvt.c **** 
 440:lib/chibios/os/rt/src/chvt.c ****       /* Removing the timer from the list.*/
 441:lib/chibios/os/rt/src/chvt.c ****       dlp->next->prev = &vtlp->dlist;
 442:lib/chibios/os/rt/src/chvt.c ****       vtlp->dlist.next = dlp->next;
 443:lib/chibios/os/rt/src/chvt.c **** 
 444:lib/chibios/os/rt/src/chvt.c ****       /* Calling the associated function and then marking the timer as
 445:lib/chibios/os/rt/src/chvt.c ****          non active.*/
 446:lib/chibios/os/rt/src/chvt.c ****       fn = vtp->func;
 447:lib/chibios/os/rt/src/chvt.c ****       vtp->func = NULL;
 736              		.loc 1 447 17 view .LVU251
 737 0008 4FF00008 		mov	r8, #0
 738              	.LBE182:
 417:lib/chibios/os/rt/src/chvt.c ****   while (true) {
 739              		.loc 1 417 7 view .LVU252
 740 000c 57F8144F 		ldr	r4, [r7, #20]!
 741              	.LVL42:
 417:lib/chibios/os/rt/src/chvt.c ****   while (true) {
 742              		.loc 1 417 7 view .LVU253
 743 0010 C146     		mov	r9, r8
 744              	.L34:
 418:lib/chibios/os/rt/src/chvt.c ****   while (true) {
 745              		.loc 1 418 3 is_stmt 1 view .LVU254
 421:lib/chibios/os/rt/src/chvt.c ****     nowdelta = chTimeDiffX(vtlp->lasttime, now);
 746              		.loc 1 421 5 view .LVU255
 747              	.LBB200:
 748              	.LBI200:
 116:./lib/chibios/os/rt/include/chvt.h **** 
 749              		.loc 2 116 25 view .LVU256
 750              		.loc 2 121 3 view .LVU257
 751              	.LBB201:
 752              	.LBI201:
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 753              		.loc 3 114 25 view .LVU258
 754              	.LBB202:
 755              		.loc 3 116 3 view .LVU259
 756              		.loc 3 116 10 is_stmt 0 view .LVU260
 757 0012 FFF7FEFF 		bl	stGetCounter
 758              	.LVL43:
 759              		.loc 3 116 10 view .LVU261
 760              	.LBE202:
 761              	.LBE201:
 762              	.LBE200:
 422:lib/chibios/os/rt/src/chvt.c **** 
 763              		.loc 1 422 5 is_stmt 1 view .LVU262
 764              	.LBB203:
 765              	.LBI203:
 459:./lib/chibios/os/rt/include/chtime.h **** 
 766              		.loc 4 459 29 view .LVU263
 767              	.LBB204:
 768              		.loc 4 463 3 view .LVU264
 769              		.loc 4 463 26 is_stmt 0 view .LVU265
 770 0016 358C     		ldrh	r5, [r6, #32]
 771              	.LBE204:
 772              	.LBE203:
 427:lib/chibios/os/rt/src/chvt.c ****       break;
 773              		.loc 1 427 8 view .LVU266
 774 0018 A368     		ldr	r3, [r4, #8]
 775              	.LBB206:
 776              	.LBB205:
 777              		.loc 4 463 26 view .LVU267
 778 001a 451B     		subs	r5, r0, r5
 779              		.loc 4 463 10 view .LVU268
 780 001c ADB2     		uxth	r5, r5
 781              	.LVL44:
 782              		.loc 4 463 10 view .LVU269
 783              	.LBE205:
 784              	.LBE206:
 427:lib/chibios/os/rt/src/chvt.c ****       break;
 785              		.loc 1 427 5 is_stmt 1 view .LVU270
 427:lib/chibios/os/rt/src/chvt.c ****       break;
 786              		.loc 1 427 8 is_stmt 0 view .LVU271
 787 001e AB42     		cmp	r3, r5
 788 0020 1DD8     		bhi	.L31
 789              	.LBB207:
 790              	.LBB183:
 791              	.LBB184:
 792              	.LBB185:
 793              	.LBB186:
 794              	.LBB187:
 795              		.file 5 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 144:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 145:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 146:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 147:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 150:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 151:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 153:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 154:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 155:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 157:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 158:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 159:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 160:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 162:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 166:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 168:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 169:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 170:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 172:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 173:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 174:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 175:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 176:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 177:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 181:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 183:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 185:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 187:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 189:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 193:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 195:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 197:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 198:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 199:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 200:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 201:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 208:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 211:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 212:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 214:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 215:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 219:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 221:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 222:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 223:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 225:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 226:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 228:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 241:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 243:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 247:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 249:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 250:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 251:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 253:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 254:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 255:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 265:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 268:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 269:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 270:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 271:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 272:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 273:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 277:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 279:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 281:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 282:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 283:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 285:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 289:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 291:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 294:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 296:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 297:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 301:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 303:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 304:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 305:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 307:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 308:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 310:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 312:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 316:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 318:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 319:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 320:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 322:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 323:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 324:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 325:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 326:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 327:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 331:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 333:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 335:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 336:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 337:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 339:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 343:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 345:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 347:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 348:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 355:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 359:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 360:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 362:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 363:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 364:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 365:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 366:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 370:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 372:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 374:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 375:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 378:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 382:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 384:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 385:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 386:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 388:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 389:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 390:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 391:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 393:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 397:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 399:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 400:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 401:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 403:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 404:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 405:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 406:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 407:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 408:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 412:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 414:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 416:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 418:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 420:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 424:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 426:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 428:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 429:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 430:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 435:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 439:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 441:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 443:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 445:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 446:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 450:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 452:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 454:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 455:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 456:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 457:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 461:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 463:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 464:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 465:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 467:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 468:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 469:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 470:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 472:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 476:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 478:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 479:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 480:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 482:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 484:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 486:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 796              		.loc 5 493 3 view .LVU272
 797 0022 4FF0200A 		mov	r10, #32
 798              	.LVL45:
 799              	.L33:
 800              		.loc 5 493 3 view .LVU273
 801              	.LBE187:
 802              	.LBE186:
 803              	.LBE185:
 804              	.LBE184:
 805              	.LBE183:
 806              	.LBE207:
 432:lib/chibios/os/rt/src/chvt.c ****       vtfunc_t fn;
 807              		.loc 1 432 5 is_stmt 1 view .LVU274
 808              	.LBB208:
 433:lib/chibios/os/rt/src/chvt.c ****       virtual_timer_t *vtp = (virtual_timer_t *)dlp;
 809              		.loc 1 433 7 view .LVU275
 434:lib/chibios/os/rt/src/chvt.c **** 
 810              		.loc 1 434 7 view .LVU276
 437:lib/chibios/os/rt/src/chvt.c ****       nowdelta -= dlp->delta;
 811              		.loc 1 437 7 view .LVU277
 437:lib/chibios/os/rt/src/chvt.c ****       nowdelta -= dlp->delta;
 812              		.loc 1 437 28 is_stmt 0 view .LVU278
 813 0026 A268     		ldr	r2, [r4, #8]
 437:lib/chibios/os/rt/src/chvt.c ****       nowdelta -= dlp->delta;
 814              		.loc 1 437 22 view .LVU279
 815 0028 338C     		ldrh	r3, [r6, #32]
 446:lib/chibios/os/rt/src/chvt.c ****       vtp->func = NULL;
 816              		.loc 1 446 10 view .LVU280
 817 002a D4F80CB0 		ldr	fp, [r4, #12]
 437:lib/chibios/os/rt/src/chvt.c ****       nowdelta -= dlp->delta;
 818              		.loc 1 437 22 view .LVU281
 819 002e 1344     		add	r3, r3, r2
 820 0030 3384     		strh	r3, [r6, #32]	@ movhi
 438:lib/chibios/os/rt/src/chvt.c **** 
 821              		.loc 1 438 7 is_stmt 1 view .LVU282
 441:lib/chibios/os/rt/src/chvt.c ****       vtlp->dlist.next = dlp->next;
 822              		.loc 1 441 10 is_stmt 0 view .LVU283
 823 0032 2368     		ldr	r3, [r4]
 448:lib/chibios/os/rt/src/chvt.c **** 
 449:lib/chibios/os/rt/src/chvt.c ****       /* If the list becomes empty then the timer is stopped.*/
 450:lib/chibios/os/rt/src/chvt.c ****       if (is_vtlist_empty(&vtlp->dlist)) {
 824              		.loc 1 450 10 view .LVU284
 825 0034 BB42     		cmp	r3, r7
 441:lib/chibios/os/rt/src/chvt.c ****       vtlp->dlist.next = dlp->next;
 826              		.loc 1 441 23 view .LVU285
 827 0036 5F60     		str	r7, [r3, #4]
 438:lib/chibios/os/rt/src/chvt.c **** 
 828              		.loc 1 438 16 view .LVU286
 829 0038 A5EB0205 		sub	r5, r5, r2
 830              	.LVL46:
 441:lib/chibios/os/rt/src/chvt.c ****       vtlp->dlist.next = dlp->next;
 831              		.loc 1 441 7 is_stmt 1 view .LVU287
 442:lib/chibios/os/rt/src/chvt.c **** 
 832              		.loc 1 442 7 view .LVU288
 442:lib/chibios/os/rt/src/chvt.c **** 
 833              		.loc 1 442 24 is_stmt 0 view .LVU289
 834 003c 7361     		str	r3, [r6, #20]
 446:lib/chibios/os/rt/src/chvt.c ****       vtp->func = NULL;
 835              		.loc 1 446 7 is_stmt 1 view .LVU290
 836              	.LVL47:
 447:lib/chibios/os/rt/src/chvt.c **** 
 837              		.loc 1 447 7 view .LVU291
 447:lib/chibios/os/rt/src/chvt.c **** 
 838              		.loc 1 447 17 is_stmt 0 view .LVU292
 839 003e C4F80C80 		str	r8, [r4, #12]
 840              		.loc 1 450 7 is_stmt 1 view .LVU293
 841              		.loc 1 450 10 is_stmt 0 view .LVU294
 842 0042 01D1     		bne	.L32
 451:lib/chibios/os/rt/src/chvt.c ****         port_timer_stop_alarm();
 843              		.loc 1 451 9 is_stmt 1 view .LVU295
 844              	.LBB192:
 845              	.LBI192:
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 846              		.loc 3 90 20 view .LVU296
 847              	.LBB193:
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 848              		.loc 3 92 3 view .LVU297
 849 0044 FFF7FEFF 		bl	stStopAlarm
 850              	.LVL48:
 851              	.L32:
 852              	.LBE193:
 853              	.LBE192:
 452:lib/chibios/os/rt/src/chvt.c ****       }
 453:lib/chibios/os/rt/src/chvt.c **** 
 454:lib/chibios/os/rt/src/chvt.c ****       /* The callback is invoked outside the kernel critical zone.*/
 455:lib/chibios/os/rt/src/chvt.c ****       chSysUnlockFromISR();
 854              		.loc 1 455 7 view .LVU298
 855              	.LBB194:
 856              	.LBI194:
 857              		.file 6 "./lib/chibios/os/rt/include/chsys.h"
   1:./lib/chibios/os/rt/include/chsys.h **** /*
   2:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsys.h **** 
   4:./lib/chibios/os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsys.h **** 
   6:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsys.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsys.h **** 
  11:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsys.h **** 
  16:./lib/chibios/os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsys.h **** */
  19:./lib/chibios/os/rt/include/chsys.h **** 
  20:./lib/chibios/os/rt/include/chsys.h **** /**
  21:./lib/chibios/os/rt/include/chsys.h ****  * @file    rt/include/chsys.h
  22:./lib/chibios/os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:./lib/chibios/os/rt/include/chsys.h ****  *
  24:./lib/chibios/os/rt/include/chsys.h ****  * @addtogroup system
  25:./lib/chibios/os/rt/include/chsys.h ****  * @{
  26:./lib/chibios/os/rt/include/chsys.h ****  */
  27:./lib/chibios/os/rt/include/chsys.h **** 
  28:./lib/chibios/os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:./lib/chibios/os/rt/include/chsys.h **** #define CHSYS_H
  30:./lib/chibios/os/rt/include/chsys.h **** 
  31:./lib/chibios/os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:./lib/chibios/os/rt/include/chsys.h **** 
  33:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsys.h **** 
  37:./lib/chibios/os/rt/include/chsys.h **** /**
  38:./lib/chibios/os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:./lib/chibios/os/rt/include/chsys.h ****  * @{
  40:./lib/chibios/os/rt/include/chsys.h ****  */
  41:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:./lib/chibios/os/rt/include/chsys.h **** /** @} */
  46:./lib/chibios/os/rt/include/chsys.h **** 
  47:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  50:./lib/chibios/os/rt/include/chsys.h **** 
  51:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  52:./lib/chibios/os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  54:./lib/chibios/os/rt/include/chsys.h **** 
  55:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  56:./lib/chibios/os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  58:./lib/chibios/os/rt/include/chsys.h **** 
  59:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  60:./lib/chibios/os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  62:./lib/chibios/os/rt/include/chsys.h **** 
  63:./lib/chibios/os/rt/include/chsys.h **** /**
  64:./lib/chibios/os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:./lib/chibios/os/rt/include/chsys.h ****  * @{
  66:./lib/chibios/os/rt/include/chsys.h ****  */
  67:./lib/chibios/os/rt/include/chsys.h **** /**
  68:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  69:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  70:./lib/chibios/os/rt/include/chsys.h ****  *          level for the underlying architecture.
  71:./lib/chibios/os/rt/include/chsys.h ****  *
  72:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  73:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  74:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  75:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  76:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  77:./lib/chibios/os/rt/include/chsys.h ****  */
  78:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  79:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  80:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  81:./lib/chibios/os/rt/include/chsys.h **** #else
  82:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  83:./lib/chibios/os/rt/include/chsys.h **** #endif
  84:./lib/chibios/os/rt/include/chsys.h **** 
  85:./lib/chibios/os/rt/include/chsys.h **** /**
  86:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  87:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  88:./lib/chibios/os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  89:./lib/chibios/os/rt/include/chsys.h ****  *
  90:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  91:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  92:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  93:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  94:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  95:./lib/chibios/os/rt/include/chsys.h ****  */
  96:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  97:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  98:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  99:./lib/chibios/os/rt/include/chsys.h **** #else
 100:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 101:./lib/chibios/os/rt/include/chsys.h **** #endif
 102:./lib/chibios/os/rt/include/chsys.h **** 
 103:./lib/chibios/os/rt/include/chsys.h **** /**
 104:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 105:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 106:./lib/chibios/os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 107:./lib/chibios/os/rt/include/chsys.h ****  *
 108:./lib/chibios/os/rt/include/chsys.h ****  * @special
 109:./lib/chibios/os/rt/include/chsys.h ****  */
 110:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 111:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 112:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 113:./lib/chibios/os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 114:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 115:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 116:./lib/chibios/os/rt/include/chsys.h **** 
 117:./lib/chibios/os/rt/include/chsys.h **** /**
 118:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 119:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 120:./lib/chibios/os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 121:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 122:./lib/chibios/os/rt/include/chsys.h ****  *
 123:./lib/chibios/os/rt/include/chsys.h ****  * @special
 124:./lib/chibios/os/rt/include/chsys.h ****  */
 125:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 126:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 127:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 128:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 129:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 130:./lib/chibios/os/rt/include/chsys.h **** 
 131:./lib/chibios/os/rt/include/chsys.h **** /**
 132:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 133:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 134:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 135:./lib/chibios/os/rt/include/chsys.h ****  *
 136:./lib/chibios/os/rt/include/chsys.h ****  * @special
 137:./lib/chibios/os/rt/include/chsys.h ****  */
 138:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 139:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 140:./lib/chibios/os/rt/include/chsys.h **** 
 141:./lib/chibios/os/rt/include/chsys.h **** /**
 142:./lib/chibios/os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 143:./lib/chibios/os/rt/include/chsys.h ****  * @{
 144:./lib/chibios/os/rt/include/chsys.h ****  */
 145:./lib/chibios/os/rt/include/chsys.h **** /**
 146:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 147:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 148:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 149:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 150:./lib/chibios/os/rt/include/chsys.h ****  *
 151:./lib/chibios/os/rt/include/chsys.h ****  * @special
 152:./lib/chibios/os/rt/include/chsys.h ****  */
 153:./lib/chibios/os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 154:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 155:./lib/chibios/os/rt/include/chsys.h **** 
 156:./lib/chibios/os/rt/include/chsys.h **** /**
 157:./lib/chibios/os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 158:./lib/chibios/os/rt/include/chsys.h ****  * @{
 159:./lib/chibios/os/rt/include/chsys.h ****  */
 160:./lib/chibios/os/rt/include/chsys.h **** /**
 161:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 162:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 163:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 164:./lib/chibios/os/rt/include/chsys.h ****  *
 165:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 166:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 167:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 168:./lib/chibios/os/rt/include/chsys.h ****  *
 169:./lib/chibios/os/rt/include/chsys.h ****  * @api
 170:./lib/chibios/os/rt/include/chsys.h ****  */
 171:./lib/chibios/os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 172:./lib/chibios/os/rt/include/chsys.h **** 
 173:./lib/chibios/os/rt/include/chsys.h **** /**
 174:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 175:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 176:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 177:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 178:./lib/chibios/os/rt/include/chsys.h ****  *
 179:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 180:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 181:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 182:./lib/chibios/os/rt/include/chsys.h ****  *
 183:./lib/chibios/os/rt/include/chsys.h ****  * @api
 184:./lib/chibios/os/rt/include/chsys.h ****  */
 185:./lib/chibios/os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 186:./lib/chibios/os/rt/include/chsys.h **** 
 187:./lib/chibios/os/rt/include/chsys.h **** /**
 188:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 189:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 190:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 191:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 192:./lib/chibios/os/rt/include/chsys.h ****  *
 193:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 194:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 195:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 196:./lib/chibios/os/rt/include/chsys.h ****  *
 197:./lib/chibios/os/rt/include/chsys.h ****  * @api
 198:./lib/chibios/os/rt/include/chsys.h ****  */
 199:./lib/chibios/os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 200:./lib/chibios/os/rt/include/chsys.h **** 
 201:./lib/chibios/os/rt/include/chsys.h **** /**
 202:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 203:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 204:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 205:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 206:./lib/chibios/os/rt/include/chsys.h ****  *
 207:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 208:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 209:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of seconds.
 210:./lib/chibios/os/rt/include/chsys.h ****  *
 211:./lib/chibios/os/rt/include/chsys.h ****  * @api
 212:./lib/chibios/os/rt/include/chsys.h ****  */
 213:./lib/chibios/os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 214:./lib/chibios/os/rt/include/chsys.h **** 
 215:./lib/chibios/os/rt/include/chsys.h **** /**
 216:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 217:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 218:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 219:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 220:./lib/chibios/os/rt/include/chsys.h ****  *
 221:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 222:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 223:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 224:./lib/chibios/os/rt/include/chsys.h ****  *
 225:./lib/chibios/os/rt/include/chsys.h ****  * @api
 226:./lib/chibios/os/rt/include/chsys.h ****  */
 227:./lib/chibios/os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 228:./lib/chibios/os/rt/include/chsys.h **** 
 229:./lib/chibios/os/rt/include/chsys.h **** /**
 230:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 231:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 232:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 233:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 234:./lib/chibios/os/rt/include/chsys.h ****  *
 235:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 236:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 237:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of microseconds.
 238:./lib/chibios/os/rt/include/chsys.h ****  *
 239:./lib/chibios/os/rt/include/chsys.h ****  * @api
 240:./lib/chibios/os/rt/include/chsys.h ****  */
 241:./lib/chibios/os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 242:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 243:./lib/chibios/os/rt/include/chsys.h **** 
 244:./lib/chibios/os/rt/include/chsys.h **** /**
 245:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 246:./lib/chibios/os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 247:./lib/chibios/os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 248:./lib/chibios/os/rt/include/chsys.h ****  *
 249:./lib/chibios/os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 250:./lib/chibios/os/rt/include/chsys.h ****  *                      type rtcnt_t.
 251:./lib/chibios/os/rt/include/chsys.h ****  *
 252:./lib/chibios/os/rt/include/chsys.h ****  * @xclass
 253:./lib/chibios/os/rt/include/chsys.h ****  */
 254:./lib/chibios/os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 255:./lib/chibios/os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 256:./lib/chibios/os/rt/include/chsys.h **** #endif
 257:./lib/chibios/os/rt/include/chsys.h **** 
 258:./lib/chibios/os/rt/include/chsys.h **** /**
 259:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 260:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 261:./lib/chibios/os/rt/include/chsys.h ****  *          itself or from within the port layer.
 262:./lib/chibios/os/rt/include/chsys.h ****  *
 263:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 264:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 265:./lib/chibios/os/rt/include/chsys.h ****  *
 266:./lib/chibios/os/rt/include/chsys.h ****  * @special
 267:./lib/chibios/os/rt/include/chsys.h ****  */
 268:./lib/chibios/os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 269:./lib/chibios/os/rt/include/chsys.h ****                                                                             \
 270:./lib/chibios/os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 271:./lib/chibios/os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 272:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 273:./lib/chibios/os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 274:./lib/chibios/os/rt/include/chsys.h **** }
 275:./lib/chibios/os/rt/include/chsys.h **** 
 276:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chsys.h **** /* External declarations.                                                    */
 278:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 279:./lib/chibios/os/rt/include/chsys.h **** 
 280:./lib/chibios/os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 281:./lib/chibios/os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 282:./lib/chibios/os/rt/include/chsys.h **** #endif
 283:./lib/chibios/os/rt/include/chsys.h **** 
 284:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 285:./lib/chibios/os/rt/include/chsys.h **** extern "C" {
 286:./lib/chibios/os/rt/include/chsys.h **** #endif
 287:./lib/chibios/os/rt/include/chsys.h ****   void chSysInit(void);
 288:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 289:./lib/chibios/os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 290:./lib/chibios/os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 291:./lib/chibios/os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 292:./lib/chibios/os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 293:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 294:./lib/chibios/os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 295:./lib/chibios/os/rt/include/chsys.h **** #endif
 296:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 297:./lib/chibios/os/rt/include/chsys.h **** }
 298:./lib/chibios/os/rt/include/chsys.h **** #endif
 299:./lib/chibios/os/rt/include/chsys.h **** 
 300:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 301:./lib/chibios/os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 302:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 303:./lib/chibios/os/rt/include/chsys.h **** 
 304:./lib/chibios/os/rt/include/chsys.h **** /**
 305:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 306:./lib/chibios/os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 307:./lib/chibios/os/rt/include/chsys.h ****  *          hardware priority.
 308:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 309:./lib/chibios/os/rt/include/chsys.h ****  *
 310:./lib/chibios/os/rt/include/chsys.h ****  * @special
 311:./lib/chibios/os/rt/include/chsys.h ****  */
 312:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 313:./lib/chibios/os/rt/include/chsys.h **** 
 314:./lib/chibios/os/rt/include/chsys.h ****   port_disable();
 315:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_disable();
 316:./lib/chibios/os/rt/include/chsys.h **** }
 317:./lib/chibios/os/rt/include/chsys.h **** 
 318:./lib/chibios/os/rt/include/chsys.h **** /**
 319:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 320:./lib/chibios/os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 321:./lib/chibios/os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 322:./lib/chibios/os/rt/include/chsys.h ****  *          enabled.
 323:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 324:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 325:./lib/chibios/os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 326:./lib/chibios/os/rt/include/chsys.h ****  *
 327:./lib/chibios/os/rt/include/chsys.h ****  * @special
 328:./lib/chibios/os/rt/include/chsys.h ****  */
 329:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 330:./lib/chibios/os/rt/include/chsys.h **** 
 331:./lib/chibios/os/rt/include/chsys.h ****   port_suspend();
 332:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_suspend();
 333:./lib/chibios/os/rt/include/chsys.h **** }
 334:./lib/chibios/os/rt/include/chsys.h **** 
 335:./lib/chibios/os/rt/include/chsys.h **** /**
 336:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 337:./lib/chibios/os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 338:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 339:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 340:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 341:./lib/chibios/os/rt/include/chsys.h ****  *
 342:./lib/chibios/os/rt/include/chsys.h ****  * @special
 343:./lib/chibios/os/rt/include/chsys.h ****  */
 344:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 345:./lib/chibios/os/rt/include/chsys.h **** 
 346:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enable();
 347:./lib/chibios/os/rt/include/chsys.h ****   port_enable();
 348:./lib/chibios/os/rt/include/chsys.h **** }
 349:./lib/chibios/os/rt/include/chsys.h **** 
 350:./lib/chibios/os/rt/include/chsys.h **** /**
 351:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 352:./lib/chibios/os/rt/include/chsys.h ****  *
 353:./lib/chibios/os/rt/include/chsys.h ****  * @special
 354:./lib/chibios/os/rt/include/chsys.h ****  */
 355:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLock(void) {
 356:./lib/chibios/os/rt/include/chsys.h **** 
 357:./lib/chibios/os/rt/include/chsys.h ****   port_lock();
 358:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 359:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 360:./lib/chibios/os/rt/include/chsys.h **** }
 361:./lib/chibios/os/rt/include/chsys.h **** 
 362:./lib/chibios/os/rt/include/chsys.h **** /**
 363:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 364:./lib/chibios/os/rt/include/chsys.h ****  *
 365:./lib/chibios/os/rt/include/chsys.h ****  * @special
 366:./lib/chibios/os/rt/include/chsys.h ****  */
 367:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 368:./lib/chibios/os/rt/include/chsys.h **** 
 369:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock();
 370:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 371:./lib/chibios/os/rt/include/chsys.h **** 
 372:./lib/chibios/os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 373:./lib/chibios/os/rt/include/chsys.h ****      in a critical section not followed by a chSchRescheduleS(), this means
 374:./lib/chibios/os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 375:./lib/chibios/os/rt/include/chsys.h ****      the ready list.*/
 376:./lib/chibios/os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 377:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 378:./lib/chibios/os/rt/include/chsys.h ****               "priority order violation");
 379:./lib/chibios/os/rt/include/chsys.h **** 
 380:./lib/chibios/os/rt/include/chsys.h ****   port_unlock();
 381:./lib/chibios/os/rt/include/chsys.h **** }
 382:./lib/chibios/os/rt/include/chsys.h **** 
 383:./lib/chibios/os/rt/include/chsys.h **** /**
 384:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state from within an interrupt handler.
 385:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 386:./lib/chibios/os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 387:./lib/chibios/os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 388:./lib/chibios/os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 389:./lib/chibios/os/rt/include/chsys.h ****  *          It is good practice to invoke this API before invoking any I-class
 390:./lib/chibios/os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 391:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 392:./lib/chibios/os/rt/include/chsys.h ****  *
 393:./lib/chibios/os/rt/include/chsys.h ****  * @special
 394:./lib/chibios/os/rt/include/chsys.h ****  */
 395:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLockFromISR(void) {
 396:./lib/chibios/os/rt/include/chsys.h **** 
 397:./lib/chibios/os/rt/include/chsys.h ****   port_lock_from_isr();
 398:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_isr();
 399:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock_from_isr();
 400:./lib/chibios/os/rt/include/chsys.h **** }
 401:./lib/chibios/os/rt/include/chsys.h **** 
 402:./lib/chibios/os/rt/include/chsys.h **** /**
 403:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state from within an interrupt handler.
 404:./lib/chibios/os/rt/include/chsys.h ****  *
 405:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 406:./lib/chibios/os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 407:./lib/chibios/os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 408:./lib/chibios/os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 409:./lib/chibios/os/rt/include/chsys.h ****  *          It is good practice to invoke this API after invoking any I-class
 410:./lib/chibios/os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 411:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 412:./lib/chibios/os/rt/include/chsys.h ****  *
 413:./lib/chibios/os/rt/include/chsys.h ****  * @special
 414:./lib/chibios/os/rt/include/chsys.h ****  */
 415:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlockFromISR(void) {
 858              		.loc 6 415 20 view .LVU299
 416:./lib/chibios/os/rt/include/chsys.h **** 
 417:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock_from_isr();
 859              		.loc 6 417 31 view .LVU300
 418:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_isr();
 860              		.loc 6 418 33 view .LVU301
 419:./lib/chibios/os/rt/include/chsys.h ****   port_unlock_from_isr();
 861              		.loc 6 419 3 view .LVU302
 862              	.LBB195:
 863              	.LBI195:
 864              		.file 7 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @file    chcore_v7m.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   ARMv7-M architecture port macros and structures.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @addtogroup ARMCMx_V7M_CORE
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifndef CHCORE_V7M_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CHCORE_V7M_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Port Capabilities and Constants
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   This port supports a realtime counter.
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SUPPORTS_RT                TRUE
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Natural alignment constant.
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the minimum alignment for pointer-size variables.
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_NATURAL_ALIGN              sizeof (void *)
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack alignment constant.
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment required for the stack pointer.
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_STACK_ALIGN                sizeof (stkalign_t)
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Working Areas alignment constant.
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment to be enforced for thread working areas.
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA_ALIGN         ((PORT_ENABLE_GUARD_PAGES == TRUE) ?\
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                          32U : PORT_STACK_ALIGN)
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Disabled value for BASEPRI register.
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_DISABLED         0U
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module pre-compile time settings.                                         */
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Implements a syscall interface on SVC.
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_SYSCALL) || defined(__DOXYGEN__)
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_SYSCALL                FALSE
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Number of MPU regions to be saved/restored during context switch.
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The first region is always region zero.
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 8 bytes for each
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          region for each thread.
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Allowed values are 0..4, zero means none.
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_SWITCHED_REGIONS_NUMBER) || defined(__DOXYGEN__)
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SWITCHED_REGIONS_NUMBER    0
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables stack overflow guard pages using MPU.
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This option can only be enabled if also option
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CH_DBG_ENABLE_STACK_CHECK is enabled.
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 32 bytes for each
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          thread.
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_ENABLE_GUARD_PAGES) || defined(__DOXYGEN__)
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ENABLE_GUARD_PAGES         FALSE
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU region to be used to stack guards.
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Make sure this region is not included in the
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p PORT_SWITCHED_REGIONS_NUMBER regions range.
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_GUARD_MPU_REGION) || defined(__DOXYGEN__)
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_GUARD_MPU_REGION       MPU_REGION_7
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack size for the system idle thread.
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This size depends on the idle thread implementation, usually
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          the idle thread should take no more space than those reserved
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it is set to 16 because the idle thread does have
 117:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          a stack frame when compiling without optimizations. You may
 118:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          reduce this value to zero when compiling with optimizations.
 119:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 120:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 121:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IDLE_THREAD_STACK_SIZE     16
 122:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 123:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 124:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 125:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 126:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This constant is used in the calculation of the correct working
 127:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          area size.
 128:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port this value is conservatively set to 64 because the
 129:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          function @p chSchDoReschedule() can have a stack frame, especially
 130:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          with compiler optimizations disabled. The value can be reduced
 131:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          when compiler optimizations are enabled.
 132:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 133:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 134:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INT_REQUIRED_STACK         64
 135:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 136:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 137:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 138:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables the use of the WFI instruction in the idle thread loop.
 139:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 140:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_ENABLE_WFI_IDLE)
 141:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_ENABLE_WFI_IDLE          FALSE
 142:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 143:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 144:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 145:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   FPU support in context switch.
 146:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option activates the FPU support in the kernel.
 147:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 148:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_USE_FPU)
 149:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_USE_FPU                  CORTEX_HAS_FPU
 150:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_USE_FPU == TRUE) && (CORTEX_HAS_FPU == FALSE)
 151:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* This setting requires an FPU presence check in case it is externally
 152:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    redefined.*/
 153:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "the selected core does not have an FPU"
 154:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 155:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 156:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 157:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Simplified priority handling flag.
 158:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option makes the Kernel work in compact mode.
 159:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          In compact mode interrupts are disabled globally instead of
 160:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          raising the priority mask to some intermediate level.
 161:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 162:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_SIMPLIFIED_PRIORITY)
 163:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_SIMPLIFIED_PRIORITY      FALSE
 164:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 165:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 166:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 167:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   SVCALL handler priority.
 168:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The default SVCALL handler priority is defaulted to
 169:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY+1, this reserves the
 170:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY priority level as fast interrupts
 171:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority level.
 172:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 173:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIORITY_SVCALL)
 174:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_SVCALL          (CORTEX_MAXIMUM_PRIORITY + 1U)
 175:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif !PORT_IRQ_IS_VALID_PRIORITY(CORTEX_PRIORITY_SVCALL)
 176:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* If it is externally redefined then better perform a validity check on it.*/
 177:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid priority level specified for CORTEX_PRIORITY_SVCALL"
 178:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 179:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 180:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 181:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   NVIC PRIGROUP initialization expression.
 182:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details The default assigns all available priority bits as preemption
 183:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority with no sub-priority.
 184:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 185:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIGROUP_INIT) || defined(__DOXYGEN__)
 186:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIGROUP_INIT            (7 - CORTEX_PRIORITY_BITS)
 187:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 188:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 189:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 190:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Derived constants and error checks.                                       */
 191:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 192:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 193:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER < 0) || (PORT_SWITCHED_REGIONS_NUMBER > 4)
 194:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid PORT_SWITCHED_REGIONS_NUMBER value"
 195:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 196:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 197:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 198:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 199:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU guard page size.
 200:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 201:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == TRUE) || defined(__DOXYGEN__)
 202:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_DBG_ENABLE_STACK_CHECK == FALSE
 203:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "PORT_ENABLE_GUARD_PAGES requires CH_DBG_ENABLE_STACK_CHECK"
 204:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 205:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if __MPU_PRESENT == 0
 206:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "MPU not present in current device"
 207:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 208:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          32U
 209:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 210:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          0U
 211:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 212:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(_FROM_ASM_) */
 213:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 214:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 215:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Architecture and Compiler
 216:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
 217:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 218:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_MODEL == 3) || defined(__DOXYGEN__)
 219:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 220:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM3)
 221:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM3 not defined"
 222:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 223:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 224:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM3 == FALSE
 225:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M3 port not licensed"
 226:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 227:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 228:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 229:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Macro defining the specific ARM architecture.
 230:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 231:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7M
 232:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 233:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 234:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the implemented architecture.
 235:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 236:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv7-M"
 237:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 238:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 239:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the architecture variant.
 240:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 241:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 242:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3"
 243:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 244:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3 (MPU)"
 245:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 246:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 247:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 4)
 248:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 249:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM4)
 250:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM4 not defined"
 251:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 252:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 253:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM4 == FALSE
 254:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #error "ChibiOS Cortex-M4 port not licensed"
 255:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 256:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 257:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_ARM_v7ME
 258:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 259:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 260:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 261:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F"
 262:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 263:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F (MPU)"
 264:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 265:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 266:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 267:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4"
 268:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 269:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4 (MPU)"
 270:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 271:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 272:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 273:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 7)
 274:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 275:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM7)
 276:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM7 not defined"
 277:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 278:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 279:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM7 == FALSE
 280:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M7 port not licensed"
 281:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 282:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 283:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7ME
 284:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 285:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 286:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 287:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F"
 288:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 289:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F (MPU)"
 290:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 291:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 292:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 293:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7"
 294:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 295:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7 (MPU)"
 296:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 297:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 298:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 299:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 300:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 301:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Port-specific information string.
 302:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 303:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 304:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Advanced kernel mode"
 305:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 306:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Compact kernel mode"
 307:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 308:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
 309:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 310:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 311:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 312:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Maximum usable priority for normal ISRs.
 313:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 314:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      (CORTEX_PRIORITY_SVCALL + 1U)
 315:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 316:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 317:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   BASEPRI level within kernel lock.
 318:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 319:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_KERNEL                                               \
 320:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   CORTEX_PRIO_MASK(CORTEX_MAX_KERNEL_PRIORITY)
 321:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 322:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 323:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      0U
 324:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 325:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 326:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 327:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   PendSV priority level.
 328:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This priority is enforced to be equal to
 329:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAX_KERNEL_PRIORITY, this handler always have the
 330:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          highest priority that cannot preempt the kernel.
 331:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 332:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_PENDSV          CORTEX_MAX_KERNEL_PRIORITY
 333:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 334:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 335:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module data structures and types.                                         */
 336:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 337:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 338:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The following code is not processed when the file is included from an
 339:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    asm module.*/
 340:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 341:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 342:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The documentation of the following declarations is in chconf.h in order
 343:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    to not have duplicated structure names into the documentation.*/
 344:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(__DOXYGEN__)
 345:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_extctx {
 346:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r0;
 347:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r1;
 348:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r2;
 349:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r3;
 350:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r12;
 351:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr_thd;
 352:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      pc;
 353:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      xpsr;
 354:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 355:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s0;
 356:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s1;
 357:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s2;
 358:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s3;
 359:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s4;
 360:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s5;
 361:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s6;
 362:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s7;
 363:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s8;
 364:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s9;
 365:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s10;
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s11;
 367:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s12;
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s13;
 369:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s14;
 370:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s15;
 371:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      fpscr;
 372:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      reserved;
 373:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 374:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 375:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 376:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 377:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Link context structure.
 379:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This structure is used when there is the need to save extra
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          context information that is not part of the registers stacked
 381:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          in HW.
 382:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 383:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_linkctx {
 384:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t              control;
 385:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_extctx    *ectxp;
 386:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 388:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_intctx {
 390:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER > 0) || defined(__DOXYGEN__)
 391:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 392:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rbar;
 393:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rasr;
 394:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } regions[PORT_SWITCHED_REGIONS_NUMBER];
 395:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 397:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s16;
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s17;
 399:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s18;
 400:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s19;
 401:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s20;
 402:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s21;
 403:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s22;
 404:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s23;
 405:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s24;
 406:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s25;
 407:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s26;
 408:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s27;
 409:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s28;
 410:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s29;
 411:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s30;
 412:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s31;
 413:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 414:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r4;
 415:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r5;
 416:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r6;
 417:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r7;
 418:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r8;
 419:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r9;
 420:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r10;
 421:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r11;
 422:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr;
 423:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 424:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 425:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_context {
 426:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx    *sp;
 427:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 428:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 429:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t            psp;
 430:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     const void          *p;
 431:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } syscall;
 432:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 433:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 434:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(__DOXYGEN__) */
 435:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 436:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 437:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module macros.                                                            */
 438:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 439:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 440:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have no syscall context information.*/
 441:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 442:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)                              \
 443:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.psp = (uint32_t)(wtop);                                 \
 444:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.p   = NULL;
 445:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 446:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)
 447:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 448:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 449:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have all regions disabled.*/
 450:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER == 0) || defined(__DOXYGEN__)
 451:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)
 452:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 1) || defined(__DOXYGEN__)
 453:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 454:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 455:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U
 456:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 2) || defined(__DOXYGEN__)
 457:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 458:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 459:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 460:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 461:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U
 462:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 3) || defined(__DOXYGEN__)
 463:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 464:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 465:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 466:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 467:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 468:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 469:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U
 470:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 4) || defined(__DOXYGEN__)
 471:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 472:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 473:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 474:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 475:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 476:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 477:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U;                                      \
 478:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rbar  = 0U;                                      \
 479:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rasr  = 0U
 480:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 481:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 482:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 483:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 484:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 485:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This code usually setup the context switching frame represented
 486:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by an @p port_intctx structure.
 487:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 488:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 489:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                 \
 490:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                         sizeof (struct port_intctx));       \
 491:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r4 = (uint32_t)(pf);                                        \
 492:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r5 = (uint32_t)(arg);                                       \
 493:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->lr = (uint32_t)_port_thread_start;                          \
 494:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_MPU(tp);                                             \
 495:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop);                                   \
 496:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 497:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 498:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** //  __PORT_SETUP_CONTEXT_MPU(tp)
 499:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 500:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 501:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Computes the thread working area global size.
 502:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    There is no need to perform alignments in this macro.
 503:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 504:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WA_SIZE(n) ((size_t)PORT_GUARD_PAGE_SIZE +                     \
 505:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_intctx) +                      \
 506:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_extctx) +                      \
 507:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)(n) +                                      \
 508:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)PORT_INT_REQUIRED_STACK)
 509:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 510:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 511:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Static working area allocation.
 512:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro is used to allocate a static thread working area
 513:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          aligned as both position and size.
 514:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 515:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] s         the name to be assigned to the stack array
 516:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] n         the stack size to be assigned to the thread
 517:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 518:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 519:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 520:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 521:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 522:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 523:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   ALIGNED_VAR(32) stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 524:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 525:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 526:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 527:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ prologue code.
 528:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 529:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 530:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 531:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_PROLOGUE()
 532:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 533:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 534:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ epilogue code.
 535:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 536:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 537:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 538:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_EPILOGUE() _port_irq_epilogue()
 539:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 540:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 541:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ handler function declaration.
 542:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 543:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 544:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 545:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 546:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) extern "C" void id(void)
 547:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 548:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) void id(void)
 549:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 550:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 551:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 552:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Fast IRQ handler function declaration.
 553:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 554:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 555:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 556:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 557:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) extern "C" void id(void)
 558:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 559:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) void id(void)
 560:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 561:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 562:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 563:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Performs a context switch between two threads.
 564:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This is the most critical code in any port, this function
 565:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          is responsible for the context switch between 2 threads.
 566:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 567:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          switch performance so optimize here as much as you can.
 568:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 569:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] ntp       the thread to be switched in
 570:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] otp       the thread to be switched out
 571:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 572:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CH_DBG_ENABLE_STACK_CHECK == FALSE) || defined(__DOXYGEN__)
 573:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 574:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 575:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_ENABLE_GUARD_PAGES == FALSE
 576:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 577:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx *r13 = (struct port_intctx *)__get_PSP();              \
 578:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   if ((stkalign_t *)(r13 - 1) < (otp)->wabase) {                            \
 579:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     chSysHalt("stack overflow");                                            \
 580:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   }                                                                         \
 581:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 582:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 583:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 584:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 585:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 586:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                                                             \
 587:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   /* Setting up the guard page for the switched-in thread.*/                \
 588:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   mpuSetRegionAddress(PORT_USE_GUARD_MPU_REGION,                            \
 589:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                       chThdGetSelfX()->wabase);                             \
 590:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 591:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 592:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 593:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 594:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 595:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* External declarations.                                                    */
 596:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 597:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 598:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 599:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** extern "C" {
 600:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 601:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_init(void);
 602:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_irq_epilogue(void);
 603:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 604:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_thread_start(void);
 605:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch_from_isr(void);
 606:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_exit_from_isr(void);
 607:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_USE_SYSCALL == TRUE
 608:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_unprivileged_jump(uint32_t pc, uint32_t psp);
 609:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 610:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 611:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 612:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 613:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 614:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 615:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module inline functions.                                                  */
 616:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 617:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 618:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 619:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Returns a word encoding the current interrupts status.
 620:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 621:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupts status.
 622:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 623:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE syssts_t port_get_irq_status(void) {
 624:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   syssts_t sts;
 625:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 626:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 627:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_BASEPRI();
 628:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 629:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_PRIMASK();
 630:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 631:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts;
 632:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 633:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 634:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 635:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Checks the interrupt status.
 636:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 637:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] sts       the interrupt status word
 638:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 639:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupt status.
 640:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        the word specified a disabled interrupts status.
 641:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         the word specified an enabled interrupts status.
 642:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 643:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_irq_enabled(syssts_t sts) {
 644:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 645:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 646:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 647:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 648:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (sts & (syssts_t)1) == (syssts_t)0;
 649:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 650:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 651:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 652:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 653:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Determines the current execution context.
 654:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 655:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The execution context.
 656:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        not running in ISR mode.
 657:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         running in ISR mode.
 658:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 659:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_is_isr_context(void) {
 660:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 661:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 662:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 663:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 664:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 665:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action.
 666:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 667:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 668:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock(void) {
 670:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 671:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 672:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 673:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 674:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 675:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 676:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
 678:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 679:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 680:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 681:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 682:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 683:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 684:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 685:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 686:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 687:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 688:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 689:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action.
 690:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 691:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 692:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock(void) {
 694:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 695:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
 697:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 698:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 699:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 700:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 701:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 702:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 703:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action from an interrupt handler.
 704:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 705:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 706:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Same as @p port_lock() in this port.
 707:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 708:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock_from_isr(void) {
 709:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 710:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   port_lock();
 711:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 712:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 713:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 714:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action from an interrupt handler.
 715:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 716:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 717:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Same as @p port_unlock() in this port.
 718:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 719:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock_from_isr(void) {
 865              		.loc 7 719 27 view .LVU303
 720:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 721:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   port_unlock();
 866              		.loc 7 721 3 view .LVU304
 867              	.LBB196:
 868              	.LBI196:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 869              		.loc 7 693 27 view .LVU305
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 870              		.loc 7 696 3 view .LVU306
 871              	.LBB197:
 872              	.LBI197:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 873              		.loc 5 491 27 view .LVU307
 874              	.LBB198:
 875              		.loc 5 493 3 view .LVU308
 876              		.syntax unified
 877              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 878 0048 89F31188 		MSR basepri, r9
 879              	@ 0 "" 2
 880              	.LVL49:
 881              		.loc 5 493 3 is_stmt 0 view .LVU309
 882              		.thumb
 883              		.syntax unified
 884              	.LBE198:
 885              	.LBE197:
 886              	.LBE196:
 887              	.LBE195:
 888              	.LBE194:
 456:lib/chibios/os/rt/src/chvt.c ****       fn(vtp->par);
 889              		.loc 1 456 7 is_stmt 1 view .LVU310
 890 004c 2069     		ldr	r0, [r4, #16]
 891 004e D847     		blx	fp
 892              	.LVL50:
 457:lib/chibios/os/rt/src/chvt.c ****       chSysLockFromISR();
 893              		.loc 1 457 7 view .LVU311
 894              	.LBB199:
 895              	.LBI183:
 395:./lib/chibios/os/rt/include/chsys.h **** 
 896              		.loc 6 395 20 view .LVU312
 397:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_isr();
 897              		.loc 6 397 3 view .LVU313
 898              	.LBB191:
 899              	.LBI184:
 708:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 900              		.loc 7 708 27 view .LVU314
 710:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 901              		.loc 7 710 3 view .LVU315
 902              	.LBB190:
 903              	.LBI185:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 904              		.loc 7 669 27 view .LVU316
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 905              		.loc 7 677 3 view .LVU317
 906              	.LBB189:
 907              	.LBI186:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 908              		.loc 5 491 27 view .LVU318
 909              	.LBB188:
 910              		.loc 5 493 3 view .LVU319
 911              		.syntax unified
 912              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 913 0050 8AF31188 		MSR basepri, r10
 914              	@ 0 "" 2
 915              	.LVL51:
 916              		.loc 5 493 3 is_stmt 0 view .LVU320
 917              		.thumb
 918              		.syntax unified
 919              	.LBE188:
 920              	.LBE189:
 921              	.LBE190:
 922              	.LBE191:
 398:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock_from_isr();
 923              		.loc 6 398 34 is_stmt 1 view .LVU321
 399:./lib/chibios/os/rt/include/chsys.h **** }
 924              		.loc 6 399 29 view .LVU322
 925              	.LBE199:
 458:lib/chibios/os/rt/src/chvt.c **** 
 459:lib/chibios/os/rt/src/chvt.c ****       /* Next element in the list.*/
 460:lib/chibios/os/rt/src/chvt.c ****       dlp = vtlp->dlist.next;
 926              		.loc 1 460 7 view .LVU323
 927              		.loc 1 460 11 is_stmt 0 view .LVU324
 928 0054 7469     		ldr	r4, [r6, #20]
 929              	.LVL52:
 930              		.loc 1 460 11 view .LVU325
 931              	.LBE208:
 461:lib/chibios/os/rt/src/chvt.c ****     }
 462:lib/chibios/os/rt/src/chvt.c ****     while (dlp->delta <= nowdelta);
 932              		.loc 1 462 23 is_stmt 1 view .LVU326
 933 0056 A368     		ldr	r3, [r4, #8]
 934 0058 AB42     		cmp	r3, r5
 935 005a E4D9     		bls	.L33
 936 005c D9E7     		b	.L34
 937              	.LVL53:
 938              	.L31:
 463:lib/chibios/os/rt/src/chvt.c ****   }
 464:lib/chibios/os/rt/src/chvt.c **** 
 465:lib/chibios/os/rt/src/chvt.c ****   /* If the list is empty, nothing else to do.*/
 466:lib/chibios/os/rt/src/chvt.c ****   if (is_vtlist_empty(&vtlp->dlist)) {
 939              		.loc 1 466 3 view .LVU327
 940              	.LBB209:
 941              	.LBI209:
  58:lib/chibios/os/rt/src/chvt.c **** 
 942              		.loc 1 58 20 view .LVU328
 943              	.LBB210:
  60:lib/chibios/os/rt/src/chvt.c **** }
 944              		.loc 1 60 3 view .LVU329
  60:lib/chibios/os/rt/src/chvt.c **** }
 945              		.loc 1 60 29 is_stmt 0 view .LVU330
 946 005e 7369     		ldr	r3, [r6, #20]
 947              	.LVL54:
  60:lib/chibios/os/rt/src/chvt.c **** }
 948              		.loc 1 60 29 view .LVU331
 949              	.LBE210:
 950              	.LBE209:
 951              		.loc 1 466 6 view .LVU332
 952 0060 BB42     		cmp	r3, r7
 953 0062 12D0     		beq	.L30
 467:lib/chibios/os/rt/src/chvt.c ****     return;
 468:lib/chibios/os/rt/src/chvt.c ****   }
 469:lib/chibios/os/rt/src/chvt.c **** 
 470:lib/chibios/os/rt/src/chvt.c ****   /* The "unprocessed nowdelta" time slice is added to "last time"
 471:lib/chibios/os/rt/src/chvt.c ****      and subtracted to next timer's delta.*/
 472:lib/chibios/os/rt/src/chvt.c ****   vtlp->lasttime += nowdelta;
 954              		.loc 1 472 3 is_stmt 1 view .LVU333
 473:lib/chibios/os/rt/src/chvt.c ****   vtlp->dlist.next->delta -= nowdelta;
 955              		.loc 1 473 27 is_stmt 0 view .LVU334
 956 0064 9A68     		ldr	r2, [r3, #8]
 472:lib/chibios/os/rt/src/chvt.c ****   vtlp->dlist.next->delta -= nowdelta;
 957              		.loc 1 472 18 view .LVU335
 958 0066 3084     		strh	r0, [r6, #32]	@ movhi
 959              		.loc 1 473 3 is_stmt 1 view .LVU336
 960              		.loc 1 473 27 is_stmt 0 view .LVU337
 961 0068 521B     		subs	r2, r2, r5
 962 006a 9A60     		str	r2, [r3, #8]
 474:lib/chibios/os/rt/src/chvt.c **** 
 475:lib/chibios/os/rt/src/chvt.c ****   /* Recalculating the next alarm time.*/
 476:lib/chibios/os/rt/src/chvt.c ****   delta = dlp->delta - chTimeDiffX(vtlp->lasttime, now);
 963              		.loc 1 476 3 is_stmt 1 view .LVU338
 964              	.LVL55:
 477:lib/chibios/os/rt/src/chvt.c ****   if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 965              		.loc 1 477 3 view .LVU339
 478:lib/chibios/os/rt/src/chvt.c ****     delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 479:lib/chibios/os/rt/src/chvt.c ****   }
 480:lib/chibios/os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 481:lib/chibios/os/rt/src/chvt.c ****   /* The delta could be too large for the physical timer to handle.*/
 482:lib/chibios/os/rt/src/chvt.c ****   else if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 483:lib/chibios/os/rt/src/chvt.c ****     delta = (sysinterval_t)TIME_MAX_SYSTIME;
 484:lib/chibios/os/rt/src/chvt.c ****   }
 485:lib/chibios/os/rt/src/chvt.c **** #endif
 486:lib/chibios/os/rt/src/chvt.c ****   port_timer_set_alarm(chTimeAddX(now, delta));
 966              		.loc 1 486 3 view .LVU340
 967              	.LBB211:
 968              	.LBI211:
 440:./lib/chibios/os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 969              		.loc 4 440 25 view .LVU341
 970              	.LBB212:
 444:./lib/chibios/os/rt/include/chtime.h **** #endif
 971              		.loc 4 444 3 view .LVU342
 444:./lib/chibios/os/rt/include/chtime.h **** #endif
 972              		.loc 4 444 3 view .LVU343
 444:./lib/chibios/os/rt/include/chtime.h **** #endif
 973              		.loc 4 444 3 view .LVU344
 447:./lib/chibios/os/rt/include/chtime.h **** }
 974              		.loc 4 447 3 view .LVU345
 447:./lib/chibios/os/rt/include/chtime.h **** }
 975              		.loc 4 447 3 is_stmt 0 view .LVU346
 976              	.LBE212:
 977              	.LBE211:
 978              	.LBB214:
 979              	.LBI214:
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 980              		.loc 3 102 20 is_stmt 1 view .LVU347
 981              	.LBB215:
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 982              		.loc 3 104 3 view .LVU348
 983              	.LBE215:
 984              	.LBE214:
 482:lib/chibios/os/rt/src/chvt.c ****     delta = (sysinterval_t)TIME_MAX_SYSTIME;
 985              		.loc 1 482 11 is_stmt 0 view .LVU349
 986 006c A268     		ldr	r2, [r4, #8]
 987 006e 4FF6FF73 		movw	r3, #65535
 988 0072 9342     		cmp	r3, r2
 989 0074 28BF     		it	cs
 990 0076 1346     		movcs	r3, r2
 991              	.LBB218:
 992              	.LBB213:
 447:./lib/chibios/os/rt/include/chtime.h **** }
 993              		.loc 4 447 18 view .LVU350
 994 0078 022B     		cmp	r3, #2
 995 007a 2CBF     		ite	cs
 996 007c C018     		addcs	r0, r0, r3
 997 007e 0230     		addcc	r0, r0, #2
 998              	.LVL56:
 447:./lib/chibios/os/rt/include/chtime.h **** }
 999              		.loc 4 447 18 view .LVU351
 1000              	.LBE213:
 1001              	.LBE218:
 1002              	.LBB219:
 1003              	.LBB216:
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 1004              		.loc 3 104 3 view .LVU352
 1005 0080 80B2     		uxth	r0, r0
 1006              	.LBE216:
 1007              	.LBE219:
 487:lib/chibios/os/rt/src/chvt.c **** 
 488:lib/chibios/os/rt/src/chvt.c ****   chDbgAssert(chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX()) <=
 489:lib/chibios/os/rt/src/chvt.c ****               chTimeDiffX(vtlp->lasttime, chTimeAddX(now, delta)),
 490:lib/chibios/os/rt/src/chvt.c ****               "exceeding delta");
 491:lib/chibios/os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 492:lib/chibios/os/rt/src/chvt.c **** }
 1008              		.loc 1 492 1 view .LVU353
 1009 0082 BDE8F84F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1010              		.cfi_remember_state
 1011              		.cfi_restore 14
 1012              		.cfi_restore 11
 1013              		.cfi_restore 10
 1014              		.cfi_restore 9
 1015              		.cfi_restore 8
 1016              		.cfi_restore 7
 1017              		.cfi_restore 6
 1018              		.cfi_restore 5
 1019              		.cfi_restore 4
 1020              		.cfi_restore 3
 1021              		.cfi_def_cfa_offset 0
 1022              	.LVL57:
 1023              	.LBB220:
 1024              	.LBB217:
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 1025              		.loc 3 104 3 view .LVU354
 1026 0086 FFF7FEBF 		b	stSetAlarm
 1027              	.LVL58:
 1028              	.L30:
 1029              		.cfi_restore_state
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 1030              		.loc 3 104 3 view .LVU355
 1031              	.LBE217:
 1032              	.LBE220:
 1033              		.loc 1 492 1 view .LVU356
 1034 008a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1035              	.LVL59:
 1036              	.L38:
 1037              		.loc 1 492 1 view .LVU357
 1038 008e 00BF     		.align	2
 1039              	.L37:
 1040 0090 00000000 		.word	ch
 1041              		.cfi_endproc
 1042              	.LFE251:
 1044              		.text
 1045              	.Letext0:
 1046              		.file 8 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1047              		.file 9 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1048              		.file 10 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 1049              		.file 11 "./lib/chibios/os/rt/include/chsystypes.h"
 1050              		.file 12 "./lib/chibios/os/rt/include/chschd.h"
 1051              		.file 13 "./lib/chibios/os/rt/include/chlists.h"
 1052              		.file 14 "./lib/chibios/os/rt/include/chsem.h"
 1053              		.file 15 "./lib/chibios/os/rt/include/chmtx.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chvt.c
     /tmp/ccTjkb0H.s:21     .text._vt_init:0000000000000000 $t
     /tmp/ccTjkb0H.s:27     .text._vt_init:0000000000000000 _vt_init
     /tmp/ccTjkb0H.s:53     .text._vt_init:0000000000000018 $d
     /tmp/ccTjkb0H.s:58     .text.chVTDoSetI:0000000000000000 $t
     /tmp/ccTjkb0H.s:64     .text.chVTDoSetI:0000000000000000 chVTDoSetI
     /tmp/ccTjkb0H.s:434    .text.chVTDoSetI:00000000000000b8 $d
     /tmp/ccTjkb0H.s:439    .text.chVTDoResetI:0000000000000000 $t
     /tmp/ccTjkb0H.s:445    .text.chVTDoResetI:0000000000000000 chVTDoResetI
     /tmp/ccTjkb0H.s:695    .text.chVTDoResetI:0000000000000078 $d
     /tmp/ccTjkb0H.s:700    .text.chVTDoTickI:0000000000000000 $t
     /tmp/ccTjkb0H.s:706    .text.chVTDoTickI:0000000000000000 chVTDoTickI
     /tmp/ccTjkb0H.s:1040   .text.chVTDoTickI:0000000000000090 $d

UNDEFINED SYMBOLS
ch
stGetCounter
stStartAlarm
stSetAlarm
stStopAlarm
