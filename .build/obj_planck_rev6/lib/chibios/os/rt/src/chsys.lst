   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 2
  15              		.file	"chsys.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "lib/chibios/os/rt/src/chsys.c"
  20              		.section	.text._idle_thread,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_idle_thread:
  27              	.LFB289:
   1:lib/chibios/os/rt/src/chsys.c **** /*
   2:lib/chibios/os/rt/src/chsys.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chsys.c **** 
   4:lib/chibios/os/rt/src/chsys.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chsys.c **** 
   6:lib/chibios/os/rt/src/chsys.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chsys.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chsys.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chsys.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chsys.c **** 
  11:lib/chibios/os/rt/src/chsys.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chsys.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chsys.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chsys.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chsys.c **** 
  16:lib/chibios/os/rt/src/chsys.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chsys.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chsys.c **** */
  19:lib/chibios/os/rt/src/chsys.c **** 
  20:lib/chibios/os/rt/src/chsys.c **** /**
  21:lib/chibios/os/rt/src/chsys.c ****  * @file    rt/src/chsys.c
  22:lib/chibios/os/rt/src/chsys.c ****  * @brief   System related code.
  23:lib/chibios/os/rt/src/chsys.c ****  *
  24:lib/chibios/os/rt/src/chsys.c ****  * @addtogroup system
  25:lib/chibios/os/rt/src/chsys.c ****  * @details System related APIs and services:
  26:lib/chibios/os/rt/src/chsys.c ****  *          - Initialization.
  27:lib/chibios/os/rt/src/chsys.c ****  *          - Locks.
  28:lib/chibios/os/rt/src/chsys.c ****  *          - Interrupt Handling.
  29:lib/chibios/os/rt/src/chsys.c ****  *          - Power Management.
  30:lib/chibios/os/rt/src/chsys.c ****  *          - Abnormal Termination.
  31:lib/chibios/os/rt/src/chsys.c ****  *          - Realtime counter.
  32:lib/chibios/os/rt/src/chsys.c ****  *          .
  33:lib/chibios/os/rt/src/chsys.c ****  * @{
  34:lib/chibios/os/rt/src/chsys.c ****  */
  35:lib/chibios/os/rt/src/chsys.c **** 
  36:lib/chibios/os/rt/src/chsys.c **** #include "ch.h"
  37:lib/chibios/os/rt/src/chsys.c **** 
  38:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  39:lib/chibios/os/rt/src/chsys.c **** /* Module exported variables.                                                */
  40:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  41:lib/chibios/os/rt/src/chsys.c **** 
  42:lib/chibios/os/rt/src/chsys.c **** #if (CH_CFG_NO_IDLE_THREAD == FALSE) || defined(__DOXYGEN__)
  43:lib/chibios/os/rt/src/chsys.c **** /**
  44:lib/chibios/os/rt/src/chsys.c ****  * @brief   Idle thread working area.
  45:lib/chibios/os/rt/src/chsys.c ****  */
  46:lib/chibios/os/rt/src/chsys.c **** THD_WORKING_AREA(ch_idle_thread_wa, PORT_IDLE_THREAD_STACK_SIZE);
  47:lib/chibios/os/rt/src/chsys.c **** #endif
  48:lib/chibios/os/rt/src/chsys.c **** 
  49:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  50:lib/chibios/os/rt/src/chsys.c **** /* Module local types.                                                       */
  51:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  52:lib/chibios/os/rt/src/chsys.c **** 
  53:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  54:lib/chibios/os/rt/src/chsys.c **** /* Module local variables.                                                   */
  55:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  56:lib/chibios/os/rt/src/chsys.c **** 
  57:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  58:lib/chibios/os/rt/src/chsys.c **** /* Module local functions.                                                   */
  59:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  60:lib/chibios/os/rt/src/chsys.c **** 
  61:lib/chibios/os/rt/src/chsys.c **** #if (CH_CFG_NO_IDLE_THREAD == FALSE) || defined(__DOXYGEN__)
  62:lib/chibios/os/rt/src/chsys.c **** /**
  63:lib/chibios/os/rt/src/chsys.c ****  * @brief   This function implements the idle thread infinite loop.
  64:lib/chibios/os/rt/src/chsys.c ****  * @details The function puts the processor in the lowest power mode capable
  65:lib/chibios/os/rt/src/chsys.c ****  *          to serve interrupts.<br>
  66:lib/chibios/os/rt/src/chsys.c ****  *          The priority is internally set to the minimum system value so
  67:lib/chibios/os/rt/src/chsys.c ****  *          that this thread is executed only if there are no other ready
  68:lib/chibios/os/rt/src/chsys.c ****  *          threads in the system.
  69:lib/chibios/os/rt/src/chsys.c ****  *
  70:lib/chibios/os/rt/src/chsys.c ****  * @param[in] p         the thread parameter, unused in this scenario
  71:lib/chibios/os/rt/src/chsys.c ****  */
  72:lib/chibios/os/rt/src/chsys.c **** static void _idle_thread(void *p) {
  28              		.loc 1 72 35 view -0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35              	.L2:
  73:lib/chibios/os/rt/src/chsys.c **** 
  74:lib/chibios/os/rt/src/chsys.c ****   (void)p;
  36              		.loc 1 74 3 discriminator 1 view .LVU1
  75:lib/chibios/os/rt/src/chsys.c **** 
  76:lib/chibios/os/rt/src/chsys.c ****   while (true) {
  37              		.loc 1 76 3 discriminator 1 view .LVU2
  77:lib/chibios/os/rt/src/chsys.c ****     /*lint -save -e522 [2.2] Apparently no side effects because it contains
  78:lib/chibios/os/rt/src/chsys.c ****       an asm instruction.*/
  79:lib/chibios/os/rt/src/chsys.c ****     port_wait_for_interrupt();
  38              		.loc 1 79 5 discriminator 1 view .LVU3
  39 0000 FEE7     		b	.L2
  40              		.cfi_endproc
  41              	.LFE289:
  43              		.section	.text.chSysInit,"ax",%progbits
  44              		.align	1
  45              		.global	chSysInit
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  50              	chSysInit:
  51              	.LFB290:
  80:lib/chibios/os/rt/src/chsys.c ****     /*lint -restore*/
  81:lib/chibios/os/rt/src/chsys.c ****     CH_CFG_IDLE_LOOP_HOOK();
  82:lib/chibios/os/rt/src/chsys.c ****   }
  83:lib/chibios/os/rt/src/chsys.c **** }
  84:lib/chibios/os/rt/src/chsys.c **** #endif /* CH_CFG_NO_IDLE_THREAD == FALSE */
  85:lib/chibios/os/rt/src/chsys.c **** 
  86:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  87:lib/chibios/os/rt/src/chsys.c **** /* Module exported functions.                                                */
  88:lib/chibios/os/rt/src/chsys.c **** /*===========================================================================*/
  89:lib/chibios/os/rt/src/chsys.c **** 
  90:lib/chibios/os/rt/src/chsys.c **** /**
  91:lib/chibios/os/rt/src/chsys.c ****  * @brief   ChibiOS/RT initialization.
  92:lib/chibios/os/rt/src/chsys.c ****  * @details After executing this function the current instructions stream
  93:lib/chibios/os/rt/src/chsys.c ****  *          becomes the main thread.
  94:lib/chibios/os/rt/src/chsys.c ****  * @pre     Interrupts must disabled before invoking this function.
  95:lib/chibios/os/rt/src/chsys.c ****  * @post    The main thread is created with priority @p NORMALPRIO and
  96:lib/chibios/os/rt/src/chsys.c ****  *          interrupts are enabled.
  97:lib/chibios/os/rt/src/chsys.c ****  *
  98:lib/chibios/os/rt/src/chsys.c ****  * @special
  99:lib/chibios/os/rt/src/chsys.c ****  */
 100:lib/chibios/os/rt/src/chsys.c **** void chSysInit(void) {
  52              		.loc 1 100 22 view -0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
 101:lib/chibios/os/rt/src/chsys.c **** 
 102:lib/chibios/os/rt/src/chsys.c ****   _scheduler_init();
  56              		.loc 1 102 3 view .LVU5
 100:lib/chibios/os/rt/src/chsys.c **** 
  57              		.loc 1 100 22 is_stmt 0 view .LVU6
  58 0000 10B5     		push	{r4, lr}
  59              		.cfi_def_cfa_offset 8
  60              		.cfi_offset 4, -8
  61              		.cfi_offset 14, -4
 103:lib/chibios/os/rt/src/chsys.c ****   _vt_init();
 104:lib/chibios/os/rt/src/chsys.c ****   _trace_init();
 105:lib/chibios/os/rt/src/chsys.c ****   _oslib_init();
 106:lib/chibios/os/rt/src/chsys.c **** 
 107:lib/chibios/os/rt/src/chsys.c **** #if CH_DBG_SYSTEM_STATE_CHECK == TRUE
 108:lib/chibios/os/rt/src/chsys.c ****   ch.dbg.isr_cnt  = (cnt_t)0;
 109:lib/chibios/os/rt/src/chsys.c ****   ch.dbg.lock_cnt = (cnt_t)0;
 110:lib/chibios/os/rt/src/chsys.c **** #endif
 111:lib/chibios/os/rt/src/chsys.c **** #if CH_CFG_USE_TM == TRUE
 112:lib/chibios/os/rt/src/chsys.c ****   _tm_init();
 113:lib/chibios/os/rt/src/chsys.c **** #endif
 114:lib/chibios/os/rt/src/chsys.c **** #if CH_DBG_STATISTICS == TRUE
 115:lib/chibios/os/rt/src/chsys.c ****   _stats_init();
 116:lib/chibios/os/rt/src/chsys.c **** #endif
 117:lib/chibios/os/rt/src/chsys.c **** 
 118:lib/chibios/os/rt/src/chsys.c **** #if CH_CFG_NO_IDLE_THREAD == FALSE
 119:lib/chibios/os/rt/src/chsys.c ****   /* Now this instructions flow becomes the main thread.*/
 120:lib/chibios/os/rt/src/chsys.c **** #if CH_CFG_USE_REGISTRY == TRUE
 121:lib/chibios/os/rt/src/chsys.c ****   currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  62              		.loc 1 121 11 view .LVU7
  63 0002 114C     		ldr	r4, .L4
 102:lib/chibios/os/rt/src/chsys.c ****   _vt_init();
  64              		.loc 1 102 3 view .LVU8
  65 0004 FFF7FEFF 		bl	_scheduler_init
  66              	.LVL1:
 103:lib/chibios/os/rt/src/chsys.c ****   _vt_init();
  67              		.loc 1 103 3 is_stmt 1 view .LVU9
  68 0008 FFF7FEFF 		bl	_vt_init
  69              	.LVL2:
 104:lib/chibios/os/rt/src/chsys.c ****   _oslib_init();
  70              		.loc 1 104 16 view .LVU10
 105:lib/chibios/os/rt/src/chsys.c **** 
  71              		.loc 1 105 3 view .LVU11
  72              	.LBB129:
  73              	.LBI129:
  74              		.file 2 "./lib/chibios/os/oslib/include/chlib.h"
   1:./lib/chibios/os/oslib/include/chlib.h **** /*
   2:./lib/chibios/os/oslib/include/chlib.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/oslib/include/chlib.h **** 
   4:./lib/chibios/os/oslib/include/chlib.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/oslib/include/chlib.h **** 
   6:./lib/chibios/os/oslib/include/chlib.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/oslib/include/chlib.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/oslib/include/chlib.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/oslib/include/chlib.h ****     (at your option) any later version.
  10:./lib/chibios/os/oslib/include/chlib.h **** 
  11:./lib/chibios/os/oslib/include/chlib.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/oslib/include/chlib.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/oslib/include/chlib.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/oslib/include/chlib.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/oslib/include/chlib.h **** 
  16:./lib/chibios/os/oslib/include/chlib.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/oslib/include/chlib.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/oslib/include/chlib.h **** */
  19:./lib/chibios/os/oslib/include/chlib.h **** 
  20:./lib/chibios/os/oslib/include/chlib.h **** /**
  21:./lib/chibios/os/oslib/include/chlib.h ****  * @file    oslib/include/chlib.h
  22:./lib/chibios/os/oslib/include/chlib.h ****  * @brief   ChibiOS/LIB main include file.
  23:./lib/chibios/os/oslib/include/chlib.h ****  * @details This header includes all the required library headers. This file
  24:./lib/chibios/os/oslib/include/chlib.h ****  *          is meant do be included by @p ch.h not directly by user.
  25:./lib/chibios/os/oslib/include/chlib.h ****  *
  26:./lib/chibios/os/oslib/include/chlib.h ****  * @addtogroup oslib_info
  27:./lib/chibios/os/oslib/include/chlib.h ****  * @details OS Library related info.
  28:./lib/chibios/os/oslib/include/chlib.h ****  * @{
  29:./lib/chibios/os/oslib/include/chlib.h ****  */
  30:./lib/chibios/os/oslib/include/chlib.h **** 
  31:./lib/chibios/os/oslib/include/chlib.h **** #ifndef CHLIB_H
  32:./lib/chibios/os/oslib/include/chlib.h **** #define CHLIB_H
  33:./lib/chibios/os/oslib/include/chlib.h **** 
  34:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
  35:./lib/chibios/os/oslib/include/chlib.h **** /* Module constants.                                                         */
  36:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
  37:./lib/chibios/os/oslib/include/chlib.h **** 
  38:./lib/chibios/os/oslib/include/chlib.h **** /**
  39:./lib/chibios/os/oslib/include/chlib.h ****  * @brief   ChibiOS/LIB identification macro.
  40:./lib/chibios/os/oslib/include/chlib.h ****  */
  41:./lib/chibios/os/oslib/include/chlib.h **** #define _CHIBIOS_OSLIB_
  42:./lib/chibios/os/oslib/include/chlib.h **** 
  43:./lib/chibios/os/oslib/include/chlib.h **** /**
  44:./lib/chibios/os/oslib/include/chlib.h ****  * @brief   Stable release flag.
  45:./lib/chibios/os/oslib/include/chlib.h ****  */
  46:./lib/chibios/os/oslib/include/chlib.h **** #define CH_OSLIB_STABLE         1
  47:./lib/chibios/os/oslib/include/chlib.h **** 
  48:./lib/chibios/os/oslib/include/chlib.h **** /**
  49:./lib/chibios/os/oslib/include/chlib.h ****  * @name    ChibiOS/LIB version identification
  50:./lib/chibios/os/oslib/include/chlib.h ****  * @{
  51:./lib/chibios/os/oslib/include/chlib.h ****  */
  52:./lib/chibios/os/oslib/include/chlib.h **** /**
  53:./lib/chibios/os/oslib/include/chlib.h ****  * @brief   OS Library version string.
  54:./lib/chibios/os/oslib/include/chlib.h ****  */
  55:./lib/chibios/os/oslib/include/chlib.h **** #define CH_OSLIB_VERSION        "1.2.1"
  56:./lib/chibios/os/oslib/include/chlib.h **** 
  57:./lib/chibios/os/oslib/include/chlib.h **** /**
  58:./lib/chibios/os/oslib/include/chlib.h ****  * @brief   OS Library version major number.
  59:./lib/chibios/os/oslib/include/chlib.h ****  */
  60:./lib/chibios/os/oslib/include/chlib.h **** #define CH_OSLIB_MAJOR          1
  61:./lib/chibios/os/oslib/include/chlib.h **** 
  62:./lib/chibios/os/oslib/include/chlib.h **** /**
  63:./lib/chibios/os/oslib/include/chlib.h ****  * @brief   OS Library version minor number.
  64:./lib/chibios/os/oslib/include/chlib.h ****  */
  65:./lib/chibios/os/oslib/include/chlib.h **** #define CH_OSLIB_MINOR          2
  66:./lib/chibios/os/oslib/include/chlib.h **** 
  67:./lib/chibios/os/oslib/include/chlib.h **** /**
  68:./lib/chibios/os/oslib/include/chlib.h ****  * @brief   OS Library version patch number.
  69:./lib/chibios/os/oslib/include/chlib.h ****  */
  70:./lib/chibios/os/oslib/include/chlib.h **** #define CH_OSLIB_PATCH          1
  71:./lib/chibios/os/oslib/include/chlib.h **** /** @} */
  72:./lib/chibios/os/oslib/include/chlib.h **** 
  73:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
  74:./lib/chibios/os/oslib/include/chlib.h **** /* Module pre-compile time settings.                                         */
  75:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
  76:./lib/chibios/os/oslib/include/chlib.h **** 
  77:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
  78:./lib/chibios/os/oslib/include/chlib.h **** /* Derived constants and error checks.                                       */
  79:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
  80:./lib/chibios/os/oslib/include/chlib.h **** 
  81:./lib/chibios/os/oslib/include/chlib.h **** /* Host OS checks.*/
  82:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(_CHIBIOS_RT_) && !defined(_CHIBIOS_NIL_)
  83:./lib/chibios/os/oslib/include/chlib.h **** #error "OS check failed, must be included after ch.h"
  84:./lib/chibios/os/oslib/include/chlib.h **** #endif
  85:./lib/chibios/os/oslib/include/chlib.h **** 
  86:./lib/chibios/os/oslib/include/chlib.h **** /* Configuration file checks.*/
  87:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_MAILBOXES)
  88:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_USE_MAILBOXES not defined in chconf.h"
  89:./lib/chibios/os/oslib/include/chlib.h **** #endif
  90:./lib/chibios/os/oslib/include/chlib.h **** 
  91:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_MEMCORE)
  92:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_USE_MEMCORE not defined in chconf.h"
  93:./lib/chibios/os/oslib/include/chlib.h **** #endif
  94:./lib/chibios/os/oslib/include/chlib.h **** 
  95:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_HEAP)
  96:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_USE_HEAP not defined in chconf.h"
  97:./lib/chibios/os/oslib/include/chlib.h **** #endif
  98:./lib/chibios/os/oslib/include/chlib.h **** 
  99:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_MEMPOOLS)
 100:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_USE_MEMPOOLS not defined in chconf.h"
 101:./lib/chibios/os/oslib/include/chlib.h **** #endif
 102:./lib/chibios/os/oslib/include/chlib.h **** 
 103:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_OBJ_FIFOS)
 104:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_USE_OBJ_FIFOS not defined in chconf.h"
 105:./lib/chibios/os/oslib/include/chlib.h **** #endif
 106:./lib/chibios/os/oslib/include/chlib.h **** 
 107:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_PIPES)
 108:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_USE_PIPES not defined in chconf.h"
 109:./lib/chibios/os/oslib/include/chlib.h **** #endif
 110:./lib/chibios/os/oslib/include/chlib.h **** 
 111:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_OBJ_CACHES)
 112:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_USE_OBJ_CACHES not defined in chconf.h"
 113:./lib/chibios/os/oslib/include/chlib.h **** #endif
 114:./lib/chibios/os/oslib/include/chlib.h **** 
 115:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_DELEGATES)
 116:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_USE_DELEGATES not defined in chconf.h"
 117:./lib/chibios/os/oslib/include/chlib.h **** #endif
 118:./lib/chibios/os/oslib/include/chlib.h **** 
 119:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_JOBS)
 120:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_USE_JOBS not defined in chconf.h"
 121:./lib/chibios/os/oslib/include/chlib.h **** #endif
 122:./lib/chibios/os/oslib/include/chlib.h **** 
 123:./lib/chibios/os/oslib/include/chlib.h **** /* Objects factory options checks.*/
 124:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_FACTORY)
 125:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_USE_FACTORY not defined in chconf.h"
 126:./lib/chibios/os/oslib/include/chlib.h **** #endif
 127:./lib/chibios/os/oslib/include/chlib.h **** 
 128:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_FACTORY_MAX_NAMES_LENGTH)
 129:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_FACTORY_MAX_NAMES_LENGTH not defined in chconf.h"
 130:./lib/chibios/os/oslib/include/chlib.h **** #endif
 131:./lib/chibios/os/oslib/include/chlib.h **** 
 132:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_FACTORY_OBJECTS_REGISTRY)
 133:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_FACTORY_OBJECTS_REGISTRY not defined in chconf.h"
 134:./lib/chibios/os/oslib/include/chlib.h **** #endif
 135:./lib/chibios/os/oslib/include/chlib.h **** 
 136:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_FACTORY_GENERIC_BUFFERS)
 137:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_FACTORY_GENERIC_BUFFERS not defined in chconf.h"
 138:./lib/chibios/os/oslib/include/chlib.h **** #endif
 139:./lib/chibios/os/oslib/include/chlib.h **** 
 140:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_FACTORY_SEMAPHORES)
 141:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_FACTORY_SEMAPHORES not defined in chconf.h"
 142:./lib/chibios/os/oslib/include/chlib.h **** #endif
 143:./lib/chibios/os/oslib/include/chlib.h **** 
 144:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_FACTORY_MAILBOXES)
 145:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_FACTORY_MAILBOXES not defined in chconf.h"
 146:./lib/chibios/os/oslib/include/chlib.h **** #endif
 147:./lib/chibios/os/oslib/include/chlib.h **** 
 148:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CFG_FACTORY_OBJ_FIFOS)
 149:./lib/chibios/os/oslib/include/chlib.h **** #error "CH_CFG_FACTORY_OBJ_FIFOS not defined in chconf.h"
 150:./lib/chibios/os/oslib/include/chlib.h **** #endif
 151:./lib/chibios/os/oslib/include/chlib.h **** 
 152:./lib/chibios/os/oslib/include/chlib.h **** /* License checks.*/
 153:./lib/chibios/os/oslib/include/chlib.h **** #if !defined(CH_CUSTOMER_LIC_OSLIB) || !defined(CH_LICENSE_FEATURES)
 154:./lib/chibios/os/oslib/include/chlib.h **** #error "malformed chlicense.h"
 155:./lib/chibios/os/oslib/include/chlib.h **** #endif
 156:./lib/chibios/os/oslib/include/chlib.h **** 
 157:./lib/chibios/os/oslib/include/chlib.h **** #if (CH_LICENSE_FEATURES != CH_FEATURES_FULL) &&                            \
 158:./lib/chibios/os/oslib/include/chlib.h ****     (CH_LICENSE_FEATURES != CH_FEATURES_INTERMEDIATE) &&                    \
 159:./lib/chibios/os/oslib/include/chlib.h ****     (CH_LICENSE_FEATURES != CH_FEATURES_BASIC)
 160:./lib/chibios/os/oslib/include/chlib.h **** #error "invalid CH_LICENSE_FEATURES setting"
 161:./lib/chibios/os/oslib/include/chlib.h **** #endif
 162:./lib/chibios/os/oslib/include/chlib.h **** 
 163:./lib/chibios/os/oslib/include/chlib.h **** /* Restrictions in basic and intermediate modes.*/
 164:./lib/chibios/os/oslib/include/chlib.h **** #if (CH_CUSTOMER_LIC_OSLIB == FALSE) ||                                     \
 165:./lib/chibios/os/oslib/include/chlib.h ****     (CH_LICENSE_FEATURES == CH_FEATURES_INTERMEDIATE) ||                    \
 166:./lib/chibios/os/oslib/include/chlib.h ****     (CH_LICENSE_FEATURES == CH_FEATURES_BASIC)
 167:./lib/chibios/os/oslib/include/chlib.h **** 
 168:./lib/chibios/os/oslib/include/chlib.h **** /* Restricted subsystems.*/
 169:./lib/chibios/os/oslib/include/chlib.h **** #undef CH_CFG_USE_FACTORY
 170:./lib/chibios/os/oslib/include/chlib.h **** 
 171:./lib/chibios/os/oslib/include/chlib.h **** #define CH_CFG_USE_FACTORY                  FALSE
 172:./lib/chibios/os/oslib/include/chlib.h **** 
 173:./lib/chibios/os/oslib/include/chlib.h **** #endif /* (CH_CUSTOMER_LIC_OSLIB == FALSE) ||
 174:./lib/chibios/os/oslib/include/chlib.h ****           (CH_LICENSE_FEATURES == CH_FEATURES_INTERMEDIATE) ||
 175:./lib/chibios/os/oslib/include/chlib.h ****           (CH_LICENSE_FEATURES == CH_FEATURES_BASIC) */
 176:./lib/chibios/os/oslib/include/chlib.h **** 
 177:./lib/chibios/os/oslib/include/chlib.h **** /* Restrictions in basic mode.*/
 178:./lib/chibios/os/oslib/include/chlib.h **** #if (CH_CUSTOMER_LIC_OSLIB == FALSE) ||                                     \
 179:./lib/chibios/os/oslib/include/chlib.h ****     (CH_LICENSE_FEATURES == CH_FEATURES_BASIC)
 180:./lib/chibios/os/oslib/include/chlib.h **** 
 181:./lib/chibios/os/oslib/include/chlib.h **** /* Restricted subsystems.*/
 182:./lib/chibios/os/oslib/include/chlib.h **** #undef CH_CFG_USE_HEAP
 183:./lib/chibios/os/oslib/include/chlib.h **** #undef CH_CFG_USE_MEMPOOLS
 184:./lib/chibios/os/oslib/include/chlib.h **** #undef CH_CFG_USE_OBJ_FIFOS
 185:./lib/chibios/os/oslib/include/chlib.h **** #undef CH_CFG_USE_PIPES
 186:./lib/chibios/os/oslib/include/chlib.h **** #undef CH_CFG_USE_OBJ_CACHES
 187:./lib/chibios/os/oslib/include/chlib.h **** #undef CH_CFG_USE_DELEGATES
 188:./lib/chibios/os/oslib/include/chlib.h **** #undef CH_CFG_USE_JOBS
 189:./lib/chibios/os/oslib/include/chlib.h **** 
 190:./lib/chibios/os/oslib/include/chlib.h **** #define CH_CFG_USE_HEAP                     FALSE
 191:./lib/chibios/os/oslib/include/chlib.h **** #define CH_CFG_USE_MEMPOOLS                 FALSE
 192:./lib/chibios/os/oslib/include/chlib.h **** #define CH_CFG_USE_OBJ_FIFOS                FALSE
 193:./lib/chibios/os/oslib/include/chlib.h **** #define CH_CFG_USE_PIPES                    FALSE
 194:./lib/chibios/os/oslib/include/chlib.h **** #define CH_CFG_USE_OBJ_CACHES               FALSE
 195:./lib/chibios/os/oslib/include/chlib.h **** #define CH_CFG_USE_DELEGATES                FALSE
 196:./lib/chibios/os/oslib/include/chlib.h **** #define CH_CFG_USE_JOBS                     FALSE
 197:./lib/chibios/os/oslib/include/chlib.h **** 
 198:./lib/chibios/os/oslib/include/chlib.h **** #endif /* (CH_CUSTOMER_LIC_OSLIB == FALSE) ||
 199:./lib/chibios/os/oslib/include/chlib.h ****           (CH_LICENSE_FEATURES == CH_FEATURES_BASIC) */
 200:./lib/chibios/os/oslib/include/chlib.h **** 
 201:./lib/chibios/os/oslib/include/chlib.h **** /* Restrictions in unlicensed mode.*/
 202:./lib/chibios/os/oslib/include/chlib.h **** #if (CH_CUSTOMER_LIC_OSLIB == FALSE)
 203:./lib/chibios/os/oslib/include/chlib.h **** 
 204:./lib/chibios/os/oslib/include/chlib.h **** /* Restricted subsystems.*/
 205:./lib/chibios/os/oslib/include/chlib.h **** #undef CH_CFG_USE_MAILBOXES
 206:./lib/chibios/os/oslib/include/chlib.h **** 
 207:./lib/chibios/os/oslib/include/chlib.h **** #define CH_CFG_USE_MAILBOXES                FALSE
 208:./lib/chibios/os/oslib/include/chlib.h **** 
 209:./lib/chibios/os/oslib/include/chlib.h **** #endif /* CH_CUSTOMER_LIC_OSLIB == FALSE */
 210:./lib/chibios/os/oslib/include/chlib.h **** 
 211:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
 212:./lib/chibios/os/oslib/include/chlib.h **** /* Module data structures and types.                                         */
 213:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
 214:./lib/chibios/os/oslib/include/chlib.h **** 
 215:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
 216:./lib/chibios/os/oslib/include/chlib.h **** /* Module macros.                                                            */
 217:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
 218:./lib/chibios/os/oslib/include/chlib.h **** 
 219:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
 220:./lib/chibios/os/oslib/include/chlib.h **** /* External declarations.                                                    */
 221:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
 222:./lib/chibios/os/oslib/include/chlib.h **** 
 223:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
 224:./lib/chibios/os/oslib/include/chlib.h **** /* Late inclusions.                                                          */
 225:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
 226:./lib/chibios/os/oslib/include/chlib.h **** 
 227:./lib/chibios/os/oslib/include/chlib.h **** /* OS Library headers.*/
 228:./lib/chibios/os/oslib/include/chlib.h **** #include "chbsem.h"
 229:./lib/chibios/os/oslib/include/chlib.h **** #include "chmboxes.h"
 230:./lib/chibios/os/oslib/include/chlib.h **** #include "chmemcore.h"
 231:./lib/chibios/os/oslib/include/chlib.h **** #include "chmemheaps.h"
 232:./lib/chibios/os/oslib/include/chlib.h **** #include "chmempools.h"
 233:./lib/chibios/os/oslib/include/chlib.h **** #include "chobjfifos.h"
 234:./lib/chibios/os/oslib/include/chlib.h **** #include "chpipes.h"
 235:./lib/chibios/os/oslib/include/chlib.h **** #include "chobjcaches.h"
 236:./lib/chibios/os/oslib/include/chlib.h **** #include "chdelegates.h"
 237:./lib/chibios/os/oslib/include/chlib.h **** #include "chjobs.h"
 238:./lib/chibios/os/oslib/include/chlib.h **** #include "chfactory.h"
 239:./lib/chibios/os/oslib/include/chlib.h **** 
 240:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
 241:./lib/chibios/os/oslib/include/chlib.h **** /* Module inline functions.                                                  */
 242:./lib/chibios/os/oslib/include/chlib.h **** /*===========================================================================*/
 243:./lib/chibios/os/oslib/include/chlib.h **** 
 244:./lib/chibios/os/oslib/include/chlib.h **** /**
 245:./lib/chibios/os/oslib/include/chlib.h ****  * @brief   Initialization of all library modules.
 246:./lib/chibios/os/oslib/include/chlib.h ****  *
 247:./lib/chibios/os/oslib/include/chlib.h ****  * @notapi
 248:./lib/chibios/os/oslib/include/chlib.h ****  */
 249:./lib/chibios/os/oslib/include/chlib.h **** static inline void _oslib_init(void) {
  75              		.loc 2 249 20 view .LVU12
  76              	.LBB130:
 250:./lib/chibios/os/oslib/include/chlib.h **** 
 251:./lib/chibios/os/oslib/include/chlib.h **** #if CH_CFG_USE_MEMCORE == TRUE
 252:./lib/chibios/os/oslib/include/chlib.h ****   _core_init();
  77              		.loc 2 252 3 view .LVU13
  78 000c FFF7FEFF 		bl	_core_init
  79              	.LVL3:
 253:./lib/chibios/os/oslib/include/chlib.h **** #endif
 254:./lib/chibios/os/oslib/include/chlib.h **** #if CH_CFG_USE_HEAP == TRUE
 255:./lib/chibios/os/oslib/include/chlib.h ****   _heap_init();
  80              		.loc 2 255 3 view .LVU14
  81 0010 FFF7FEFF 		bl	_heap_init
  82              	.LVL4:
  83              	.LBE130:
  84              	.LBE129:
 112:lib/chibios/os/rt/src/chsys.c **** #endif
  85              		.loc 1 112 3 view .LVU15
  86 0014 FFF7FEFF 		bl	_tm_init
  87              	.LVL5:
  88              		.loc 1 121 3 view .LVU16
  89              		.loc 1 121 11 is_stmt 0 view .LVU17
  90 0018 0C49     		ldr	r1, .L4+4
  91 001a 8022     		movs	r2, #128
  92 001c 2046     		mov	r0, r4
  93 001e FFF7FEFF 		bl	_thread_init
  94              	.LVL6:
  95              	.LBB131:
 122:lib/chibios/os/rt/src/chsys.c **** #else
 123:lib/chibios/os/rt/src/chsys.c ****   currp = _thread_init(&ch.mainthread, "main", NORMALPRIO);
 124:lib/chibios/os/rt/src/chsys.c **** #endif
 125:lib/chibios/os/rt/src/chsys.c **** #else
 126:lib/chibios/os/rt/src/chsys.c ****   /* Now this instructions flow becomes the idle thread.*/
 127:lib/chibios/os/rt/src/chsys.c ****   currp = _thread_init(&ch.mainthread, "idle", IDLEPRIO);
 128:lib/chibios/os/rt/src/chsys.c **** #endif
 129:lib/chibios/os/rt/src/chsys.c **** 
 130:lib/chibios/os/rt/src/chsys.c **** #if CH_DBG_ENABLE_STACK_CHECK == TRUE
 131:lib/chibios/os/rt/src/chsys.c ****   {
 132:lib/chibios/os/rt/src/chsys.c ****     /* Setting up the base address of the static main thread stack, the
 133:lib/chibios/os/rt/src/chsys.c ****        symbol must be provided externally.*/
 134:lib/chibios/os/rt/src/chsys.c ****     extern stkalign_t __main_thread_stack_base__;
 135:lib/chibios/os/rt/src/chsys.c ****     currp->wabase = &__main_thread_stack_base__;
  96              		.loc 1 135 19 view .LVU18
  97 0022 0B4B     		ldr	r3, .L4+8
  98 0024 C361     		str	r3, [r0, #28]
  99              	.LBE131:
 136:lib/chibios/os/rt/src/chsys.c ****   }
 137:lib/chibios/os/rt/src/chsys.c **** #elif CH_CFG_USE_DYNAMIC == TRUE
 138:lib/chibios/os/rt/src/chsys.c ****   currp->wabase = NULL;
 139:lib/chibios/os/rt/src/chsys.c **** #endif
 140:lib/chibios/os/rt/src/chsys.c **** 
 141:lib/chibios/os/rt/src/chsys.c ****   /* Setting up the caller as current thread.*/
 142:lib/chibios/os/rt/src/chsys.c ****   currp->state = CH_STATE_CURRENT;
 100              		.loc 1 142 16 view .LVU19
 101 0026 0123     		movs	r3, #1
 102 0028 80F82030 		strb	r3, [r0, #32]
 121:lib/chibios/os/rt/src/chsys.c **** #else
 103              		.loc 1 121 9 view .LVU20
 104 002c 44F8180C 		str	r0, [r4, #-24]
 105              	.LBB132:
 134:lib/chibios/os/rt/src/chsys.c ****     currp->wabase = &__main_thread_stack_base__;
 106              		.loc 1 134 5 is_stmt 1 view .LVU21
 135:lib/chibios/os/rt/src/chsys.c ****   }
 107              		.loc 1 135 5 view .LVU22
 108              	.LBE132:
 109              		.loc 1 142 3 view .LVU23
 143:lib/chibios/os/rt/src/chsys.c **** 
 144:lib/chibios/os/rt/src/chsys.c ****   /* Port layer initialization last because it depend on some of the
 145:lib/chibios/os/rt/src/chsys.c ****      initializations performed before.*/
 146:lib/chibios/os/rt/src/chsys.c ****   port_init();
 110              		.loc 1 146 3 view .LVU24
 111 0030 FFF7FEFF 		bl	port_init
 112              	.LVL7:
 147:lib/chibios/os/rt/src/chsys.c **** 
 148:lib/chibios/os/rt/src/chsys.c **** #if CH_DBG_STATISTICS == TRUE
 149:lib/chibios/os/rt/src/chsys.c ****   /* Starting measurement for this thread.*/
 150:lib/chibios/os/rt/src/chsys.c ****   chTMStartMeasurementX(&currp->stats);
 151:lib/chibios/os/rt/src/chsys.c **** #endif
 152:lib/chibios/os/rt/src/chsys.c **** 
 153:lib/chibios/os/rt/src/chsys.c ****   /* Initialization hook.*/
 154:lib/chibios/os/rt/src/chsys.c ****   CH_CFG_SYSTEM_INIT_HOOK();
 113              		.loc 1 154 3 view .LVU25
 114              		.loc 1 154 28 view .LVU26
 155:lib/chibios/os/rt/src/chsys.c **** 
 156:lib/chibios/os/rt/src/chsys.c ****   /* It is alive now.*/
 157:lib/chibios/os/rt/src/chsys.c ****   chSysEnable();
 115              		.loc 1 157 3 view .LVU27
 116              	.LBB133:
 117              	.LBI133:
 118              		.file 3 "./lib/chibios/os/rt/include/chsys.h"
   1:./lib/chibios/os/rt/include/chsys.h **** /*
   2:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsys.h **** 
   4:./lib/chibios/os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsys.h **** 
   6:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsys.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsys.h **** 
  11:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsys.h **** 
  16:./lib/chibios/os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsys.h **** */
  19:./lib/chibios/os/rt/include/chsys.h **** 
  20:./lib/chibios/os/rt/include/chsys.h **** /**
  21:./lib/chibios/os/rt/include/chsys.h ****  * @file    rt/include/chsys.h
  22:./lib/chibios/os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:./lib/chibios/os/rt/include/chsys.h ****  *
  24:./lib/chibios/os/rt/include/chsys.h ****  * @addtogroup system
  25:./lib/chibios/os/rt/include/chsys.h ****  * @{
  26:./lib/chibios/os/rt/include/chsys.h ****  */
  27:./lib/chibios/os/rt/include/chsys.h **** 
  28:./lib/chibios/os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:./lib/chibios/os/rt/include/chsys.h **** #define CHSYS_H
  30:./lib/chibios/os/rt/include/chsys.h **** 
  31:./lib/chibios/os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:./lib/chibios/os/rt/include/chsys.h **** 
  33:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsys.h **** 
  37:./lib/chibios/os/rt/include/chsys.h **** /**
  38:./lib/chibios/os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:./lib/chibios/os/rt/include/chsys.h ****  * @{
  40:./lib/chibios/os/rt/include/chsys.h ****  */
  41:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:./lib/chibios/os/rt/include/chsys.h **** /** @} */
  46:./lib/chibios/os/rt/include/chsys.h **** 
  47:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  50:./lib/chibios/os/rt/include/chsys.h **** 
  51:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  52:./lib/chibios/os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  54:./lib/chibios/os/rt/include/chsys.h **** 
  55:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  56:./lib/chibios/os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  58:./lib/chibios/os/rt/include/chsys.h **** 
  59:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  60:./lib/chibios/os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  62:./lib/chibios/os/rt/include/chsys.h **** 
  63:./lib/chibios/os/rt/include/chsys.h **** /**
  64:./lib/chibios/os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:./lib/chibios/os/rt/include/chsys.h ****  * @{
  66:./lib/chibios/os/rt/include/chsys.h ****  */
  67:./lib/chibios/os/rt/include/chsys.h **** /**
  68:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  69:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  70:./lib/chibios/os/rt/include/chsys.h ****  *          level for the underlying architecture.
  71:./lib/chibios/os/rt/include/chsys.h ****  *
  72:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  73:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  74:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  75:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  76:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  77:./lib/chibios/os/rt/include/chsys.h ****  */
  78:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  79:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  80:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  81:./lib/chibios/os/rt/include/chsys.h **** #else
  82:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  83:./lib/chibios/os/rt/include/chsys.h **** #endif
  84:./lib/chibios/os/rt/include/chsys.h **** 
  85:./lib/chibios/os/rt/include/chsys.h **** /**
  86:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  87:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  88:./lib/chibios/os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  89:./lib/chibios/os/rt/include/chsys.h ****  *
  90:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  91:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  92:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  93:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  94:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  95:./lib/chibios/os/rt/include/chsys.h ****  */
  96:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  97:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  98:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  99:./lib/chibios/os/rt/include/chsys.h **** #else
 100:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 101:./lib/chibios/os/rt/include/chsys.h **** #endif
 102:./lib/chibios/os/rt/include/chsys.h **** 
 103:./lib/chibios/os/rt/include/chsys.h **** /**
 104:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 105:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 106:./lib/chibios/os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 107:./lib/chibios/os/rt/include/chsys.h ****  *
 108:./lib/chibios/os/rt/include/chsys.h ****  * @special
 109:./lib/chibios/os/rt/include/chsys.h ****  */
 110:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 111:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 112:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 113:./lib/chibios/os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 114:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 115:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 116:./lib/chibios/os/rt/include/chsys.h **** 
 117:./lib/chibios/os/rt/include/chsys.h **** /**
 118:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 119:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 120:./lib/chibios/os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 121:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 122:./lib/chibios/os/rt/include/chsys.h ****  *
 123:./lib/chibios/os/rt/include/chsys.h ****  * @special
 124:./lib/chibios/os/rt/include/chsys.h ****  */
 125:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 126:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 127:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 128:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 129:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 130:./lib/chibios/os/rt/include/chsys.h **** 
 131:./lib/chibios/os/rt/include/chsys.h **** /**
 132:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 133:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 134:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 135:./lib/chibios/os/rt/include/chsys.h ****  *
 136:./lib/chibios/os/rt/include/chsys.h ****  * @special
 137:./lib/chibios/os/rt/include/chsys.h ****  */
 138:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 139:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 140:./lib/chibios/os/rt/include/chsys.h **** 
 141:./lib/chibios/os/rt/include/chsys.h **** /**
 142:./lib/chibios/os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 143:./lib/chibios/os/rt/include/chsys.h ****  * @{
 144:./lib/chibios/os/rt/include/chsys.h ****  */
 145:./lib/chibios/os/rt/include/chsys.h **** /**
 146:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 147:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 148:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 149:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 150:./lib/chibios/os/rt/include/chsys.h ****  *
 151:./lib/chibios/os/rt/include/chsys.h ****  * @special
 152:./lib/chibios/os/rt/include/chsys.h ****  */
 153:./lib/chibios/os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 154:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 155:./lib/chibios/os/rt/include/chsys.h **** 
 156:./lib/chibios/os/rt/include/chsys.h **** /**
 157:./lib/chibios/os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 158:./lib/chibios/os/rt/include/chsys.h ****  * @{
 159:./lib/chibios/os/rt/include/chsys.h ****  */
 160:./lib/chibios/os/rt/include/chsys.h **** /**
 161:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 162:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 163:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 164:./lib/chibios/os/rt/include/chsys.h ****  *
 165:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 166:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 167:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 168:./lib/chibios/os/rt/include/chsys.h ****  *
 169:./lib/chibios/os/rt/include/chsys.h ****  * @api
 170:./lib/chibios/os/rt/include/chsys.h ****  */
 171:./lib/chibios/os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 172:./lib/chibios/os/rt/include/chsys.h **** 
 173:./lib/chibios/os/rt/include/chsys.h **** /**
 174:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 175:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 176:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 177:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 178:./lib/chibios/os/rt/include/chsys.h ****  *
 179:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 180:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 181:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 182:./lib/chibios/os/rt/include/chsys.h ****  *
 183:./lib/chibios/os/rt/include/chsys.h ****  * @api
 184:./lib/chibios/os/rt/include/chsys.h ****  */
 185:./lib/chibios/os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 186:./lib/chibios/os/rt/include/chsys.h **** 
 187:./lib/chibios/os/rt/include/chsys.h **** /**
 188:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 189:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 190:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 191:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 192:./lib/chibios/os/rt/include/chsys.h ****  *
 193:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 194:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 195:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 196:./lib/chibios/os/rt/include/chsys.h ****  *
 197:./lib/chibios/os/rt/include/chsys.h ****  * @api
 198:./lib/chibios/os/rt/include/chsys.h ****  */
 199:./lib/chibios/os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 200:./lib/chibios/os/rt/include/chsys.h **** 
 201:./lib/chibios/os/rt/include/chsys.h **** /**
 202:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 203:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 204:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 205:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 206:./lib/chibios/os/rt/include/chsys.h ****  *
 207:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 208:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 209:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of seconds.
 210:./lib/chibios/os/rt/include/chsys.h ****  *
 211:./lib/chibios/os/rt/include/chsys.h ****  * @api
 212:./lib/chibios/os/rt/include/chsys.h ****  */
 213:./lib/chibios/os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 214:./lib/chibios/os/rt/include/chsys.h **** 
 215:./lib/chibios/os/rt/include/chsys.h **** /**
 216:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 217:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 218:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 219:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 220:./lib/chibios/os/rt/include/chsys.h ****  *
 221:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 222:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 223:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 224:./lib/chibios/os/rt/include/chsys.h ****  *
 225:./lib/chibios/os/rt/include/chsys.h ****  * @api
 226:./lib/chibios/os/rt/include/chsys.h ****  */
 227:./lib/chibios/os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 228:./lib/chibios/os/rt/include/chsys.h **** 
 229:./lib/chibios/os/rt/include/chsys.h **** /**
 230:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 231:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 232:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 233:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 234:./lib/chibios/os/rt/include/chsys.h ****  *
 235:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 236:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 237:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of microseconds.
 238:./lib/chibios/os/rt/include/chsys.h ****  *
 239:./lib/chibios/os/rt/include/chsys.h ****  * @api
 240:./lib/chibios/os/rt/include/chsys.h ****  */
 241:./lib/chibios/os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 242:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 243:./lib/chibios/os/rt/include/chsys.h **** 
 244:./lib/chibios/os/rt/include/chsys.h **** /**
 245:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 246:./lib/chibios/os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 247:./lib/chibios/os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 248:./lib/chibios/os/rt/include/chsys.h ****  *
 249:./lib/chibios/os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 250:./lib/chibios/os/rt/include/chsys.h ****  *                      type rtcnt_t.
 251:./lib/chibios/os/rt/include/chsys.h ****  *
 252:./lib/chibios/os/rt/include/chsys.h ****  * @xclass
 253:./lib/chibios/os/rt/include/chsys.h ****  */
 254:./lib/chibios/os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 255:./lib/chibios/os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 256:./lib/chibios/os/rt/include/chsys.h **** #endif
 257:./lib/chibios/os/rt/include/chsys.h **** 
 258:./lib/chibios/os/rt/include/chsys.h **** /**
 259:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 260:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 261:./lib/chibios/os/rt/include/chsys.h ****  *          itself or from within the port layer.
 262:./lib/chibios/os/rt/include/chsys.h ****  *
 263:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 264:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 265:./lib/chibios/os/rt/include/chsys.h ****  *
 266:./lib/chibios/os/rt/include/chsys.h ****  * @special
 267:./lib/chibios/os/rt/include/chsys.h ****  */
 268:./lib/chibios/os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 269:./lib/chibios/os/rt/include/chsys.h ****                                                                             \
 270:./lib/chibios/os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 271:./lib/chibios/os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 272:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 273:./lib/chibios/os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 274:./lib/chibios/os/rt/include/chsys.h **** }
 275:./lib/chibios/os/rt/include/chsys.h **** 
 276:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chsys.h **** /* External declarations.                                                    */
 278:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 279:./lib/chibios/os/rt/include/chsys.h **** 
 280:./lib/chibios/os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 281:./lib/chibios/os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 282:./lib/chibios/os/rt/include/chsys.h **** #endif
 283:./lib/chibios/os/rt/include/chsys.h **** 
 284:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 285:./lib/chibios/os/rt/include/chsys.h **** extern "C" {
 286:./lib/chibios/os/rt/include/chsys.h **** #endif
 287:./lib/chibios/os/rt/include/chsys.h ****   void chSysInit(void);
 288:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 289:./lib/chibios/os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 290:./lib/chibios/os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 291:./lib/chibios/os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 292:./lib/chibios/os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 293:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 294:./lib/chibios/os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 295:./lib/chibios/os/rt/include/chsys.h **** #endif
 296:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 297:./lib/chibios/os/rt/include/chsys.h **** }
 298:./lib/chibios/os/rt/include/chsys.h **** #endif
 299:./lib/chibios/os/rt/include/chsys.h **** 
 300:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 301:./lib/chibios/os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 302:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 303:./lib/chibios/os/rt/include/chsys.h **** 
 304:./lib/chibios/os/rt/include/chsys.h **** /**
 305:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 306:./lib/chibios/os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 307:./lib/chibios/os/rt/include/chsys.h ****  *          hardware priority.
 308:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 309:./lib/chibios/os/rt/include/chsys.h ****  *
 310:./lib/chibios/os/rt/include/chsys.h ****  * @special
 311:./lib/chibios/os/rt/include/chsys.h ****  */
 312:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 313:./lib/chibios/os/rt/include/chsys.h **** 
 314:./lib/chibios/os/rt/include/chsys.h ****   port_disable();
 315:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_disable();
 316:./lib/chibios/os/rt/include/chsys.h **** }
 317:./lib/chibios/os/rt/include/chsys.h **** 
 318:./lib/chibios/os/rt/include/chsys.h **** /**
 319:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 320:./lib/chibios/os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 321:./lib/chibios/os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 322:./lib/chibios/os/rt/include/chsys.h ****  *          enabled.
 323:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 324:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 325:./lib/chibios/os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 326:./lib/chibios/os/rt/include/chsys.h ****  *
 327:./lib/chibios/os/rt/include/chsys.h ****  * @special
 328:./lib/chibios/os/rt/include/chsys.h ****  */
 329:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 330:./lib/chibios/os/rt/include/chsys.h **** 
 331:./lib/chibios/os/rt/include/chsys.h ****   port_suspend();
 332:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_suspend();
 333:./lib/chibios/os/rt/include/chsys.h **** }
 334:./lib/chibios/os/rt/include/chsys.h **** 
 335:./lib/chibios/os/rt/include/chsys.h **** /**
 336:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 337:./lib/chibios/os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 338:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 339:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 340:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 341:./lib/chibios/os/rt/include/chsys.h ****  *
 342:./lib/chibios/os/rt/include/chsys.h ****  * @special
 343:./lib/chibios/os/rt/include/chsys.h ****  */
 344:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 119              		.loc 3 344 20 view .LVU28
 345:./lib/chibios/os/rt/include/chsys.h **** 
 346:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enable();
 120              		.loc 3 346 22 view .LVU29
 347:./lib/chibios/os/rt/include/chsys.h ****   port_enable();
 121              		.loc 3 347 3 view .LVU30
 122              	.LBB134:
 123              	.LBI134:
 124              		.file 4 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @file    chcore_v7m.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   ARMv7-M architecture port macros and structures.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @addtogroup ARMCMx_V7M_CORE
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifndef CHCORE_V7M_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CHCORE_V7M_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Port Capabilities and Constants
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   This port supports a realtime counter.
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SUPPORTS_RT                TRUE
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Natural alignment constant.
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the minimum alignment for pointer-size variables.
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_NATURAL_ALIGN              sizeof (void *)
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack alignment constant.
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment required for the stack pointer.
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_STACK_ALIGN                sizeof (stkalign_t)
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Working Areas alignment constant.
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment to be enforced for thread working areas.
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA_ALIGN         ((PORT_ENABLE_GUARD_PAGES == TRUE) ?\
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                          32U : PORT_STACK_ALIGN)
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Disabled value for BASEPRI register.
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_DISABLED         0U
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module pre-compile time settings.                                         */
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Implements a syscall interface on SVC.
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_SYSCALL) || defined(__DOXYGEN__)
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_SYSCALL                FALSE
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Number of MPU regions to be saved/restored during context switch.
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The first region is always region zero.
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 8 bytes for each
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          region for each thread.
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Allowed values are 0..4, zero means none.
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_SWITCHED_REGIONS_NUMBER) || defined(__DOXYGEN__)
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SWITCHED_REGIONS_NUMBER    0
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables stack overflow guard pages using MPU.
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This option can only be enabled if also option
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CH_DBG_ENABLE_STACK_CHECK is enabled.
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 32 bytes for each
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          thread.
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_ENABLE_GUARD_PAGES) || defined(__DOXYGEN__)
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ENABLE_GUARD_PAGES         FALSE
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU region to be used to stack guards.
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Make sure this region is not included in the
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p PORT_SWITCHED_REGIONS_NUMBER regions range.
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_GUARD_MPU_REGION) || defined(__DOXYGEN__)
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_GUARD_MPU_REGION       MPU_REGION_7
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack size for the system idle thread.
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This size depends on the idle thread implementation, usually
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          the idle thread should take no more space than those reserved
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it is set to 16 because the idle thread does have
 117:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          a stack frame when compiling without optimizations. You may
 118:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          reduce this value to zero when compiling with optimizations.
 119:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 120:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 121:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IDLE_THREAD_STACK_SIZE     16
 122:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 123:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 124:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 125:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 126:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This constant is used in the calculation of the correct working
 127:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          area size.
 128:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port this value is conservatively set to 64 because the
 129:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          function @p chSchDoReschedule() can have a stack frame, especially
 130:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          with compiler optimizations disabled. The value can be reduced
 131:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          when compiler optimizations are enabled.
 132:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 133:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 134:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INT_REQUIRED_STACK         64
 135:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 136:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 137:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 138:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables the use of the WFI instruction in the idle thread loop.
 139:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 140:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_ENABLE_WFI_IDLE)
 141:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_ENABLE_WFI_IDLE          FALSE
 142:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 143:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 144:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 145:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   FPU support in context switch.
 146:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option activates the FPU support in the kernel.
 147:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 148:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_USE_FPU)
 149:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_USE_FPU                  CORTEX_HAS_FPU
 150:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_USE_FPU == TRUE) && (CORTEX_HAS_FPU == FALSE)
 151:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* This setting requires an FPU presence check in case it is externally
 152:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    redefined.*/
 153:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "the selected core does not have an FPU"
 154:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 155:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 156:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 157:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Simplified priority handling flag.
 158:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option makes the Kernel work in compact mode.
 159:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          In compact mode interrupts are disabled globally instead of
 160:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          raising the priority mask to some intermediate level.
 161:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 162:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_SIMPLIFIED_PRIORITY)
 163:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_SIMPLIFIED_PRIORITY      FALSE
 164:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 165:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 166:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 167:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   SVCALL handler priority.
 168:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The default SVCALL handler priority is defaulted to
 169:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY+1, this reserves the
 170:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY priority level as fast interrupts
 171:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority level.
 172:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 173:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIORITY_SVCALL)
 174:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_SVCALL          (CORTEX_MAXIMUM_PRIORITY + 1U)
 175:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif !PORT_IRQ_IS_VALID_PRIORITY(CORTEX_PRIORITY_SVCALL)
 176:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* If it is externally redefined then better perform a validity check on it.*/
 177:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid priority level specified for CORTEX_PRIORITY_SVCALL"
 178:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 179:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 180:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 181:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   NVIC PRIGROUP initialization expression.
 182:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details The default assigns all available priority bits as preemption
 183:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority with no sub-priority.
 184:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 185:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIGROUP_INIT) || defined(__DOXYGEN__)
 186:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIGROUP_INIT            (7 - CORTEX_PRIORITY_BITS)
 187:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 188:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 189:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 190:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Derived constants and error checks.                                       */
 191:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 192:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 193:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER < 0) || (PORT_SWITCHED_REGIONS_NUMBER > 4)
 194:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid PORT_SWITCHED_REGIONS_NUMBER value"
 195:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 196:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 197:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 198:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 199:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU guard page size.
 200:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 201:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == TRUE) || defined(__DOXYGEN__)
 202:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_DBG_ENABLE_STACK_CHECK == FALSE
 203:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "PORT_ENABLE_GUARD_PAGES requires CH_DBG_ENABLE_STACK_CHECK"
 204:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 205:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if __MPU_PRESENT == 0
 206:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "MPU not present in current device"
 207:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 208:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          32U
 209:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 210:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          0U
 211:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 212:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(_FROM_ASM_) */
 213:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 214:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 215:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Architecture and Compiler
 216:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
 217:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 218:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_MODEL == 3) || defined(__DOXYGEN__)
 219:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 220:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM3)
 221:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM3 not defined"
 222:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 223:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 224:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM3 == FALSE
 225:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M3 port not licensed"
 226:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 227:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 228:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 229:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Macro defining the specific ARM architecture.
 230:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 231:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7M
 232:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 233:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 234:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the implemented architecture.
 235:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 236:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv7-M"
 237:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 238:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 239:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the architecture variant.
 240:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 241:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 242:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3"
 243:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 244:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3 (MPU)"
 245:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 246:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 247:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 4)
 248:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 249:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM4)
 250:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM4 not defined"
 251:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 252:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 253:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM4 == FALSE
 254:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #error "ChibiOS Cortex-M4 port not licensed"
 255:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 256:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 257:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_ARM_v7ME
 258:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 259:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 260:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 261:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F"
 262:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 263:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F (MPU)"
 264:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 265:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 266:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 267:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4"
 268:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 269:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4 (MPU)"
 270:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 271:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 272:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 273:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 7)
 274:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 275:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM7)
 276:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM7 not defined"
 277:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 278:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 279:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM7 == FALSE
 280:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M7 port not licensed"
 281:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 282:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 283:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7ME
 284:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 285:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 286:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 287:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F"
 288:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 289:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F (MPU)"
 290:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 291:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 292:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 293:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7"
 294:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 295:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7 (MPU)"
 296:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 297:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 298:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 299:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 300:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 301:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Port-specific information string.
 302:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 303:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 304:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Advanced kernel mode"
 305:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 306:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Compact kernel mode"
 307:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 308:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
 309:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 310:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 311:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 312:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Maximum usable priority for normal ISRs.
 313:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 314:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      (CORTEX_PRIORITY_SVCALL + 1U)
 315:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 316:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 317:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   BASEPRI level within kernel lock.
 318:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 319:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_KERNEL                                               \
 320:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   CORTEX_PRIO_MASK(CORTEX_MAX_KERNEL_PRIORITY)
 321:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 322:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 323:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      0U
 324:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 325:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 326:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 327:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   PendSV priority level.
 328:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This priority is enforced to be equal to
 329:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAX_KERNEL_PRIORITY, this handler always have the
 330:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          highest priority that cannot preempt the kernel.
 331:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 332:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_PENDSV          CORTEX_MAX_KERNEL_PRIORITY
 333:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 334:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 335:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module data structures and types.                                         */
 336:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 337:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 338:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The following code is not processed when the file is included from an
 339:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    asm module.*/
 340:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 341:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 342:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The documentation of the following declarations is in chconf.h in order
 343:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    to not have duplicated structure names into the documentation.*/
 344:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(__DOXYGEN__)
 345:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_extctx {
 346:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r0;
 347:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r1;
 348:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r2;
 349:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r3;
 350:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r12;
 351:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr_thd;
 352:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      pc;
 353:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      xpsr;
 354:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 355:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s0;
 356:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s1;
 357:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s2;
 358:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s3;
 359:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s4;
 360:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s5;
 361:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s6;
 362:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s7;
 363:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s8;
 364:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s9;
 365:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s10;
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s11;
 367:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s12;
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s13;
 369:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s14;
 370:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s15;
 371:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      fpscr;
 372:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      reserved;
 373:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 374:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 375:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 376:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 377:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Link context structure.
 379:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This structure is used when there is the need to save extra
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          context information that is not part of the registers stacked
 381:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          in HW.
 382:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 383:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_linkctx {
 384:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t              control;
 385:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_extctx    *ectxp;
 386:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 388:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_intctx {
 390:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER > 0) || defined(__DOXYGEN__)
 391:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 392:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rbar;
 393:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rasr;
 394:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } regions[PORT_SWITCHED_REGIONS_NUMBER];
 395:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 397:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s16;
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s17;
 399:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s18;
 400:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s19;
 401:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s20;
 402:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s21;
 403:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s22;
 404:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s23;
 405:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s24;
 406:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s25;
 407:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s26;
 408:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s27;
 409:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s28;
 410:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s29;
 411:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s30;
 412:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s31;
 413:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 414:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r4;
 415:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r5;
 416:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r6;
 417:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r7;
 418:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r8;
 419:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r9;
 420:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r10;
 421:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r11;
 422:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr;
 423:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 424:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 425:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_context {
 426:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx    *sp;
 427:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 428:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 429:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t            psp;
 430:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     const void          *p;
 431:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } syscall;
 432:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 433:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 434:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(__DOXYGEN__) */
 435:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 436:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 437:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module macros.                                                            */
 438:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 439:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 440:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have no syscall context information.*/
 441:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 442:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)                              \
 443:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.psp = (uint32_t)(wtop);                                 \
 444:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.p   = NULL;
 445:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 446:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)
 447:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 448:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 449:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have all regions disabled.*/
 450:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER == 0) || defined(__DOXYGEN__)
 451:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)
 452:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 1) || defined(__DOXYGEN__)
 453:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 454:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 455:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U
 456:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 2) || defined(__DOXYGEN__)
 457:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 458:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 459:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 460:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 461:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U
 462:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 3) || defined(__DOXYGEN__)
 463:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 464:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 465:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 466:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 467:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 468:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 469:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U
 470:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 4) || defined(__DOXYGEN__)
 471:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 472:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 473:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 474:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 475:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 476:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 477:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U;                                      \
 478:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rbar  = 0U;                                      \
 479:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rasr  = 0U
 480:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 481:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 482:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 483:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 484:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 485:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This code usually setup the context switching frame represented
 486:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by an @p port_intctx structure.
 487:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 488:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 489:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                 \
 490:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                         sizeof (struct port_intctx));       \
 491:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r4 = (uint32_t)(pf);                                        \
 492:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r5 = (uint32_t)(arg);                                       \
 493:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->lr = (uint32_t)_port_thread_start;                          \
 494:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_MPU(tp);                                             \
 495:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop);                                   \
 496:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 497:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 498:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** //  __PORT_SETUP_CONTEXT_MPU(tp)
 499:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 500:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 501:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Computes the thread working area global size.
 502:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    There is no need to perform alignments in this macro.
 503:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 504:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WA_SIZE(n) ((size_t)PORT_GUARD_PAGE_SIZE +                     \
 505:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_intctx) +                      \
 506:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_extctx) +                      \
 507:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)(n) +                                      \
 508:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)PORT_INT_REQUIRED_STACK)
 509:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 510:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 511:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Static working area allocation.
 512:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro is used to allocate a static thread working area
 513:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          aligned as both position and size.
 514:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 515:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] s         the name to be assigned to the stack array
 516:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] n         the stack size to be assigned to the thread
 517:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 518:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 519:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 520:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 521:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 522:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 523:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   ALIGNED_VAR(32) stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 524:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 525:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 526:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 527:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ prologue code.
 528:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 529:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 530:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 531:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_PROLOGUE()
 532:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 533:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 534:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ epilogue code.
 535:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 536:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 537:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 538:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_EPILOGUE() _port_irq_epilogue()
 539:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 540:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 541:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ handler function declaration.
 542:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 543:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 544:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 545:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 546:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) extern "C" void id(void)
 547:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 548:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) void id(void)
 549:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 550:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 551:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 552:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Fast IRQ handler function declaration.
 553:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 554:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 555:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 556:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 557:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) extern "C" void id(void)
 558:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 559:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) void id(void)
 560:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 561:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 562:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 563:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Performs a context switch between two threads.
 564:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This is the most critical code in any port, this function
 565:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          is responsible for the context switch between 2 threads.
 566:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 567:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          switch performance so optimize here as much as you can.
 568:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 569:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] ntp       the thread to be switched in
 570:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] otp       the thread to be switched out
 571:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 572:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CH_DBG_ENABLE_STACK_CHECK == FALSE) || defined(__DOXYGEN__)
 573:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 574:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 575:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_ENABLE_GUARD_PAGES == FALSE
 576:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 577:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx *r13 = (struct port_intctx *)__get_PSP();              \
 578:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   if ((stkalign_t *)(r13 - 1) < (otp)->wabase) {                            \
 579:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     chSysHalt("stack overflow");                                            \
 580:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   }                                                                         \
 581:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 582:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 583:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 584:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 585:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 586:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                                                             \
 587:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   /* Setting up the guard page for the switched-in thread.*/                \
 588:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   mpuSetRegionAddress(PORT_USE_GUARD_MPU_REGION,                            \
 589:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                       chThdGetSelfX()->wabase);                             \
 590:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 591:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 592:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 593:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 594:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 595:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* External declarations.                                                    */
 596:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 597:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 598:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 599:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** extern "C" {
 600:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 601:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_init(void);
 602:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_irq_epilogue(void);
 603:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 604:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_thread_start(void);
 605:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch_from_isr(void);
 606:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_exit_from_isr(void);
 607:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_USE_SYSCALL == TRUE
 608:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_unprivileged_jump(uint32_t pc, uint32_t psp);
 609:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 610:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 611:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 612:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 613:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 614:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 615:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module inline functions.                                                  */
 616:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 617:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 618:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 619:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Returns a word encoding the current interrupts status.
 620:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 621:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupts status.
 622:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 623:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE syssts_t port_get_irq_status(void) {
 624:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   syssts_t sts;
 625:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 626:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 627:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_BASEPRI();
 628:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 629:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_PRIMASK();
 630:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 631:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts;
 632:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 633:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 634:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 635:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Checks the interrupt status.
 636:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 637:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] sts       the interrupt status word
 638:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 639:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupt status.
 640:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        the word specified a disabled interrupts status.
 641:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         the word specified an enabled interrupts status.
 642:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 643:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_irq_enabled(syssts_t sts) {
 644:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 645:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 646:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 647:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 648:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (sts & (syssts_t)1) == (syssts_t)0;
 649:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 650:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 651:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 652:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 653:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Determines the current execution context.
 654:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 655:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The execution context.
 656:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        not running in ISR mode.
 657:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         running in ISR mode.
 658:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 659:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_is_isr_context(void) {
 660:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 661:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 662:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 663:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 664:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 665:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action.
 666:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 667:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 668:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock(void) {
 670:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 671:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 672:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 673:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 674:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 675:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 676:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
 678:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 679:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 680:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 681:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 682:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 683:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 684:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 685:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 686:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 687:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 688:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 689:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action.
 690:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 691:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 692:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock(void) {
 694:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 695:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
 697:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 698:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 699:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 700:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 701:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 702:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 703:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action from an interrupt handler.
 704:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 705:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 706:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Same as @p port_lock() in this port.
 707:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 708:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock_from_isr(void) {
 709:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 710:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   port_lock();
 711:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 712:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 713:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 714:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action from an interrupt handler.
 715:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 716:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 717:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Same as @p port_unlock() in this port.
 718:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 719:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock_from_isr(void) {
 720:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 721:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   port_unlock();
 722:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 723:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 724:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 725:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Disables all the interrupt sources.
 726:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it disables all the interrupt sources by raising
 727:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          the priority mask to level 0.
 728:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 729:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_disable(void) {
 730:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 731:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 732:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 733:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 734:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 735:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Disables the interrupt sources below kernel-level priority.
 736:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Interrupt sources above kernel level remains enabled.
 737:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it raises/lowers the base priority to kernel level.
 738:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 739:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_suspend(void) {
 740:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 741:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 742:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
 743:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 744:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 745:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 746:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 747:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 748:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 749:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 750:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables all the interrupt sources.
 751:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it lowers the base priority to user level.
 752:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 753:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_enable(void) {
 125              		.loc 4 753 27 view .LVU31
 754:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 755:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 756:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
 126              		.loc 4 756 3 view .LVU32
 127              	.LBB135:
 128              	.LBI135:
 129              		.file 5 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 144:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 145:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 146:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 147:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 150:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 151:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 153:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 154:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 155:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 157:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 158:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 159:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 160:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 162:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 166:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 168:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 169:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 170:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 172:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 173:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 174:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 175:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 176:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 177:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 181:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 183:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 185:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 187:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 189:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 193:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 195:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 197:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 198:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 199:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 200:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 201:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 208:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 211:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 212:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 214:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 215:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 219:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 221:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 222:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 223:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 225:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 226:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 228:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 241:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 243:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 247:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 249:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 250:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 251:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 253:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 254:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 255:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 265:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 268:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 269:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 270:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 271:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 272:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 273:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 277:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 279:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 281:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 282:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 283:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 285:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 289:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 291:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 294:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 296:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 297:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 301:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 303:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 304:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 305:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 307:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 308:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 310:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 312:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 316:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 318:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 319:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 320:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 322:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 323:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 324:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 325:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 326:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 327:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 331:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 333:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 335:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 336:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 337:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 339:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 343:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 345:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 347:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 348:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 355:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 359:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 360:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 362:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 363:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 364:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 365:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 366:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 370:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 372:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 374:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 375:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 378:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 382:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 384:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 385:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 386:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 388:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 389:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 390:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 391:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 393:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 397:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 399:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 400:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 401:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 403:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 404:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 405:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 406:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 407:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 408:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 412:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 414:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 416:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 418:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 420:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 424:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 426:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 428:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 429:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 430:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 435:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 439:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 441:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 443:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 445:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 446:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 450:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 452:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 454:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 455:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 456:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 457:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 461:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 463:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 464:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 465:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 467:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 468:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 469:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 470:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 472:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 476:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 478:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 479:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 480:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 482:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 484:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 486:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 130              		.loc 5 491 27 view .LVU33
 131              	.LBB136:
 492:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 132              		.loc 5 493 3 view .LVU34
 133 0034 0023     		movs	r3, #0
 134              		.syntax unified
 135              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 136 0036 83F31188 		MSR basepri, r3
 137              	@ 0 "" 2
 138              	.LVL8:
 139              		.loc 5 493 3 is_stmt 0 view .LVU35
 140              		.thumb
 141              		.syntax unified
 142              	.LBE136:
 143              	.LBE135:
 757:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 758:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 144              		.loc 4 758 3 is_stmt 1 view .LVU36
 145              	.LBB137:
 146              	.LBI137:
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 147              		.loc 5 129 27 view .LVU37
 148              	.LBB138:
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 149              		.loc 5 131 3 view .LVU38
 150              		.syntax unified
 151              	@ 131 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 152 003a 62B6     		cpsie i
 153              	@ 0 "" 2
 154              		.thumb
 155              		.syntax unified
 156              	.LBE138:
 157              	.LBE137:
 158              	.LBE134:
 159              	.LBE133:
 160              	.LBB139:
 158:lib/chibios/os/rt/src/chsys.c **** 
 159:lib/chibios/os/rt/src/chsys.c **** #if CH_CFG_NO_IDLE_THREAD == FALSE
 160:lib/chibios/os/rt/src/chsys.c ****   {
 161:lib/chibios/os/rt/src/chsys.c ****     static const thread_descriptor_t idle_descriptor = {
 161              		.loc 1 161 5 view .LVU39
 162:lib/chibios/os/rt/src/chsys.c ****       "idle",
 163:lib/chibios/os/rt/src/chsys.c ****       THD_WORKING_AREA_BASE(ch_idle_thread_wa),
 164:lib/chibios/os/rt/src/chsys.c ****       THD_WORKING_AREA_END(ch_idle_thread_wa),
 165:lib/chibios/os/rt/src/chsys.c ****       IDLEPRIO,
 166:lib/chibios/os/rt/src/chsys.c ****       _idle_thread,
 167:lib/chibios/os/rt/src/chsys.c ****       NULL
 168:lib/chibios/os/rt/src/chsys.c ****     };
 169:lib/chibios/os/rt/src/chsys.c **** 
 170:lib/chibios/os/rt/src/chsys.c ****     /* This thread has the lowest priority in the system, its role is just to
 171:lib/chibios/os/rt/src/chsys.c ****        serve interrupts in its context while keeping the lowest energy saving
 172:lib/chibios/os/rt/src/chsys.c ****        mode compatible with the system status.*/
 173:lib/chibios/os/rt/src/chsys.c ****     (void) chThdCreate(&idle_descriptor);
 162              		.loc 1 173 5 view .LVU40
 163              		.loc 1 173 12 is_stmt 0 view .LVU41
 164 003c 0548     		ldr	r0, .L4+12
 165              	.LBE139:
 174:lib/chibios/os/rt/src/chsys.c ****   }
 175:lib/chibios/os/rt/src/chsys.c **** #endif
 176:lib/chibios/os/rt/src/chsys.c **** }
 166              		.loc 1 176 1 view .LVU42
 167 003e BDE81040 		pop	{r4, lr}
 168              		.cfi_restore 14
 169              		.cfi_restore 4
 170              		.cfi_def_cfa_offset 0
 171              	.LBB140:
 173:lib/chibios/os/rt/src/chsys.c ****   }
 172              		.loc 1 173 12 view .LVU43
 173 0042 FFF7FEBF 		b	chThdCreate
 174              	.LVL9:
 175              	.L5:
 176 0046 00BF     		.align	2
 177              	.L4:
 178 0048 30000000 		.word	ch+48
 179 004c 00000000 		.word	ch_debug
 180 0050 00000000 		.word	__main_thread_stack_base__
 181 0054 00000000 		.word	idle_descriptor.0
 182              	.LBE140:
 183              		.cfi_endproc
 184              	.LFE290:
 186              		.section	.text.chSysHalt,"ax",%progbits
 187              		.align	1
 188              		.global	chSysHalt
 189              		.syntax unified
 190              		.thumb
 191              		.thumb_func
 193              	chSysHalt:
 194              	.LVL10:
 195              	.LFB291:
 177:lib/chibios/os/rt/src/chsys.c **** 
 178:lib/chibios/os/rt/src/chsys.c **** /**
 179:lib/chibios/os/rt/src/chsys.c ****  * @brief   Halts the system.
 180:lib/chibios/os/rt/src/chsys.c ****  * @details This function is invoked by the operating system when an
 181:lib/chibios/os/rt/src/chsys.c ****  *          unrecoverable error is detected, for example because a programming
 182:lib/chibios/os/rt/src/chsys.c ****  *          error in the application code that triggers an assertion while
 183:lib/chibios/os/rt/src/chsys.c ****  *          in debug mode.
 184:lib/chibios/os/rt/src/chsys.c ****  * @note    Can be invoked from any system state.
 185:lib/chibios/os/rt/src/chsys.c ****  *
 186:lib/chibios/os/rt/src/chsys.c ****  * @param[in] reason        pointer to an error string
 187:lib/chibios/os/rt/src/chsys.c ****  *
 188:lib/chibios/os/rt/src/chsys.c ****  * @special
 189:lib/chibios/os/rt/src/chsys.c ****  */
 190:lib/chibios/os/rt/src/chsys.c **** void chSysHalt(const char *reason) {
 196              		.loc 1 190 36 is_stmt 1 view -0
 197              		.cfi_startproc
 198              		@ Volatile: function does not return.
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 191:lib/chibios/os/rt/src/chsys.c **** 
 192:lib/chibios/os/rt/src/chsys.c ****   port_disable();
 202              		.loc 1 192 3 view .LVU45
 203              	.LBB141:
 204              	.LBI141:
 729:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 205              		.loc 4 729 27 view .LVU46
 731:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 206              		.loc 4 731 3 view .LVU47
 207              	.LBB142:
 208              	.LBI142:
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 209              		.loc 5 140 27 view .LVU48
 210              	.LBB143:
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 211              		.loc 5 142 3 view .LVU49
 212              		.syntax unified
 213              	@ 142 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 214 0000 72B6     		cpsid i
 215              	@ 0 "" 2
 216              		.thumb
 217              		.syntax unified
 218              	.LBE143:
 219              	.LBE142:
 220              	.LBE141:
 193:lib/chibios/os/rt/src/chsys.c **** 
 194:lib/chibios/os/rt/src/chsys.c ****   /* Logging the event.*/
 195:lib/chibios/os/rt/src/chsys.c ****   _trace_halt(reason);
 221              		.loc 1 195 22 view .LVU50
 196:lib/chibios/os/rt/src/chsys.c **** 
 197:lib/chibios/os/rt/src/chsys.c ****   /* Pointing to the passed message.*/
 198:lib/chibios/os/rt/src/chsys.c ****   ch.dbg.panic_msg = reason;
 222              		.loc 1 198 3 view .LVU51
 223              		.loc 1 198 20 is_stmt 0 view .LVU52
 224 0002 014B     		ldr	r3, .L8
 225 0004 D862     		str	r0, [r3, #44]
 226              	.L7:
 199:lib/chibios/os/rt/src/chsys.c **** 
 200:lib/chibios/os/rt/src/chsys.c ****   /* Halt hook code, usually empty.*/
 201:lib/chibios/os/rt/src/chsys.c ****   CH_CFG_SYSTEM_HALT_HOOK(reason);
 227              		.loc 1 201 3 is_stmt 1 discriminator 1 view .LVU53
 228              		.loc 1 201 34 discriminator 1 view .LVU54
 202:lib/chibios/os/rt/src/chsys.c **** 
 203:lib/chibios/os/rt/src/chsys.c ****   /* Harmless infinite loop.*/
 204:lib/chibios/os/rt/src/chsys.c ****   while (true) {
 229              		.loc 1 204 3 discriminator 1 view .LVU55
 205:lib/chibios/os/rt/src/chsys.c ****   }
 230              		.loc 1 205 3 discriminator 1 view .LVU56
 204:lib/chibios/os/rt/src/chsys.c ****   }
 231              		.loc 1 204 9 discriminator 1 view .LVU57
 232 0006 FEE7     		b	.L7
 233              	.L9:
 234              		.align	2
 235              	.L8:
 236 0008 00000000 		.word	ch
 237              		.cfi_endproc
 238              	.LFE291:
 240              		.section	.text.chSysIntegrityCheckI,"ax",%progbits
 241              		.align	1
 242              		.global	chSysIntegrityCheckI
 243              		.syntax unified
 244              		.thumb
 245              		.thumb_func
 247              	chSysIntegrityCheckI:
 248              	.LVL11:
 249              	.LFB292:
 206:lib/chibios/os/rt/src/chsys.c **** }
 207:lib/chibios/os/rt/src/chsys.c **** 
 208:lib/chibios/os/rt/src/chsys.c **** /**
 209:lib/chibios/os/rt/src/chsys.c ****  * @brief   System integrity check.
 210:lib/chibios/os/rt/src/chsys.c ****  * @details Performs an integrity check of the important ChibiOS/RT data
 211:lib/chibios/os/rt/src/chsys.c ****  *          structures.
 212:lib/chibios/os/rt/src/chsys.c ****  * @note    The appropriate action in case of failure is to halt the system
 213:lib/chibios/os/rt/src/chsys.c ****  *          before releasing the critical zone.
 214:lib/chibios/os/rt/src/chsys.c ****  * @note    If the system is corrupted then one possible outcome of this
 215:lib/chibios/os/rt/src/chsys.c ****  *          function is an exception caused by @p NULL or corrupted pointers
 216:lib/chibios/os/rt/src/chsys.c ****  *          in list elements. Exception vectors must be monitored as well.
 217:lib/chibios/os/rt/src/chsys.c ****  * @note    This function is not used internally, it is up to the
 218:lib/chibios/os/rt/src/chsys.c ****  *          application to define if and where to perform system
 219:lib/chibios/os/rt/src/chsys.c ****  *          checking.
 220:lib/chibios/os/rt/src/chsys.c ****  * @note    Performing all tests at once can be a slow operation and can
 221:lib/chibios/os/rt/src/chsys.c ****  *          degrade the system response time. It is suggested to execute
 222:lib/chibios/os/rt/src/chsys.c ****  *          one test at time and release the critical zone in between tests.
 223:lib/chibios/os/rt/src/chsys.c ****  *
 224:lib/chibios/os/rt/src/chsys.c ****  * @param[in] testmask  Each bit in this mask is associated to a test to be
 225:lib/chibios/os/rt/src/chsys.c ****  *                      performed.
 226:lib/chibios/os/rt/src/chsys.c ****  * @return              The test result.
 227:lib/chibios/os/rt/src/chsys.c ****  * @retval false        The test succeeded.
 228:lib/chibios/os/rt/src/chsys.c ****  * @retval true         Test failed.
 229:lib/chibios/os/rt/src/chsys.c ****  *
 230:lib/chibios/os/rt/src/chsys.c ****  * @iclass
 231:lib/chibios/os/rt/src/chsys.c ****  */
 232:lib/chibios/os/rt/src/chsys.c **** bool chSysIntegrityCheckI(unsigned testmask) {
 250              		.loc 1 232 46 view -0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 0
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 233:lib/chibios/os/rt/src/chsys.c ****   cnt_t n;
 254              		.loc 1 233 3 view .LVU59
 234:lib/chibios/os/rt/src/chsys.c **** 
 235:lib/chibios/os/rt/src/chsys.c ****   chDbgCheckClassI();
 255              		.loc 1 235 21 view .LVU60
 236:lib/chibios/os/rt/src/chsys.c **** 
 237:lib/chibios/os/rt/src/chsys.c ****   /* Ready List integrity check.*/
 238:lib/chibios/os/rt/src/chsys.c ****   if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 256              		.loc 1 238 3 view .LVU61
 257              		.loc 1 238 6 is_stmt 0 view .LVU62
 258 0000 C207     		lsls	r2, r0, #31
 232:lib/chibios/os/rt/src/chsys.c ****   cnt_t n;
 259              		.loc 1 232 46 view .LVU63
 260 0002 10B5     		push	{r4, lr}
 261              		.cfi_def_cfa_offset 8
 262              		.cfi_offset 4, -8
 263              		.cfi_offset 14, -4
 264              		.loc 1 238 6 view .LVU64
 265 0004 08D5     		bpl	.L11
 266              	.LBB144:
 239:lib/chibios/os/rt/src/chsys.c ****     ch_priority_queue_t *pqp;
 267              		.loc 1 239 5 is_stmt 1 view .LVU65
 240:lib/chibios/os/rt/src/chsys.c **** 
 241:lib/chibios/os/rt/src/chsys.c ****     /* Scanning the ready list forward.*/
 242:lib/chibios/os/rt/src/chsys.c ****     n = (cnt_t)0;
 268              		.loc 1 242 5 view .LVU66
 269              	.LVL12:
 243:lib/chibios/os/rt/src/chsys.c ****     pqp = ch.rlist.pqueue.next;
 270              		.loc 1 243 5 view .LVU67
 271              		.loc 1 243 9 is_stmt 0 view .LVU68
 272 0006 1C4A     		ldr	r2, .L35
 273 0008 1168     		ldr	r1, [r2]
 274              	.LVL13:
 244:lib/chibios/os/rt/src/chsys.c ****     while (pqp != &ch.rlist.pqueue) {
 275              		.loc 1 244 5 is_stmt 1 view .LVU69
 242:lib/chibios/os/rt/src/chsys.c ****     pqp = ch.rlist.pqueue.next;
 276              		.loc 1 242 7 is_stmt 0 view .LVU70
 277 000a 0023     		movs	r3, #0
 278              	.LVL14:
 279              	.L12:
 280              		.loc 1 244 16 is_stmt 1 view .LVU71
 281 000c 9142     		cmp	r1, r2
 282 000e 1FD1     		bne	.L13
 245:lib/chibios/os/rt/src/chsys.c ****       n++;
 246:lib/chibios/os/rt/src/chsys.c ****       pqp = pqp->next;
 247:lib/chibios/os/rt/src/chsys.c ****     }
 248:lib/chibios/os/rt/src/chsys.c **** 
 249:lib/chibios/os/rt/src/chsys.c ****     /* Scanning the ready list backward.*/
 250:lib/chibios/os/rt/src/chsys.c ****     pqp = ch.rlist.pqueue.prev;
 283              		.loc 1 250 5 view .LVU72
 284              		.loc 1 250 9 is_stmt 0 view .LVU73
 285 0010 5168     		ldr	r1, [r2, #4]
 286              	.LVL15:
 251:lib/chibios/os/rt/src/chsys.c ****     while (pqp != &ch.rlist.pqueue) {
 287              		.loc 1 251 5 is_stmt 1 view .LVU74
 288              	.L14:
 289              		.loc 1 251 16 view .LVU75
 290 0012 9142     		cmp	r1, r2
 291 0014 1FD1     		bne	.L15
 252:lib/chibios/os/rt/src/chsys.c ****       n--;
 253:lib/chibios/os/rt/src/chsys.c ****       pqp = pqp->prev;
 254:lib/chibios/os/rt/src/chsys.c ****     }
 255:lib/chibios/os/rt/src/chsys.c **** 
 256:lib/chibios/os/rt/src/chsys.c ****     /* The number of elements must match.*/
 257:lib/chibios/os/rt/src/chsys.c ****     if (n != (cnt_t)0) {
 292              		.loc 1 257 5 view .LVU76
 293              		.loc 1 257 8 is_stmt 0 view .LVU77
 294 0016 6BBB     		cbnz	r3, .L27
 295              	.LVL16:
 296              	.L11:
 297              		.loc 1 257 8 view .LVU78
 298              	.LBE144:
 258:lib/chibios/os/rt/src/chsys.c ****       return true;
 259:lib/chibios/os/rt/src/chsys.c ****     }
 260:lib/chibios/os/rt/src/chsys.c ****   }
 261:lib/chibios/os/rt/src/chsys.c **** 
 262:lib/chibios/os/rt/src/chsys.c ****   /* Timers list integrity check.*/
 263:lib/chibios/os/rt/src/chsys.c ****   if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 299              		.loc 1 263 3 is_stmt 1 view .LVU79
 300              		.loc 1 263 6 is_stmt 0 view .LVU80
 301 0018 8307     		lsls	r3, r0, #30
 302 001a 0AD5     		bpl	.L17
 303              	.LBB145:
 264:lib/chibios/os/rt/src/chsys.c ****     delta_list_t *dlp;
 304              		.loc 1 264 5 is_stmt 1 view .LVU81
 265:lib/chibios/os/rt/src/chsys.c **** 
 266:lib/chibios/os/rt/src/chsys.c ****     /* Scanning the timers list forward.*/
 267:lib/chibios/os/rt/src/chsys.c ****     n = (cnt_t)0;
 305              		.loc 1 267 5 view .LVU82
 306              	.LVL17:
 268:lib/chibios/os/rt/src/chsys.c ****     dlp = ch.vtlist.dlist.next;
 307              		.loc 1 268 5 view .LVU83
 308              		.loc 1 268 9 is_stmt 0 view .LVU84
 309 001c 164C     		ldr	r4, .L35
 310 001e 2246     		mov	r2, r4
 267:lib/chibios/os/rt/src/chsys.c ****     dlp = ch.vtlist.dlist.next;
 311              		.loc 1 267 7 view .LVU85
 312 0020 0023     		movs	r3, #0
 313              		.loc 1 268 9 view .LVU86
 314 0022 52F81C1F 		ldr	r1, [r2, #28]!
 315              	.LVL18:
 269:lib/chibios/os/rt/src/chsys.c ****     while (dlp != &ch.vtlist.dlist) {
 316              		.loc 1 269 5 is_stmt 1 view .LVU87
 317              	.L18:
 318              		.loc 1 269 16 view .LVU88
 319 0026 9142     		cmp	r1, r2
 320 0028 18D1     		bne	.L19
 270:lib/chibios/os/rt/src/chsys.c ****       n++;
 271:lib/chibios/os/rt/src/chsys.c ****       dlp = dlp->next;
 272:lib/chibios/os/rt/src/chsys.c ****     }
 273:lib/chibios/os/rt/src/chsys.c **** 
 274:lib/chibios/os/rt/src/chsys.c ****     /* Scanning the timers list backward.*/
 275:lib/chibios/os/rt/src/chsys.c ****     dlp = ch.vtlist.dlist.prev;
 321              		.loc 1 275 5 view .LVU89
 322              		.loc 1 275 9 is_stmt 0 view .LVU90
 323 002a 216A     		ldr	r1, [r4, #32]
 324              	.LVL19:
 276:lib/chibios/os/rt/src/chsys.c ****     while (dlp != &ch.vtlist.dlist) {
 325              		.loc 1 276 5 is_stmt 1 view .LVU91
 326              	.L20:
 327              		.loc 1 276 16 view .LVU92
 328 002c 9142     		cmp	r1, r2
 329 002e 18D1     		bne	.L21
 277:lib/chibios/os/rt/src/chsys.c ****       n--;
 278:lib/chibios/os/rt/src/chsys.c ****       dlp = dlp->prev;
 279:lib/chibios/os/rt/src/chsys.c ****     }
 280:lib/chibios/os/rt/src/chsys.c **** 
 281:lib/chibios/os/rt/src/chsys.c ****     /* The number of elements must match.*/
 282:lib/chibios/os/rt/src/chsys.c ****     if (n != (cnt_t)0) {
 330              		.loc 1 282 5 view .LVU93
 331              		.loc 1 282 8 is_stmt 0 view .LVU94
 332 0030 03BB     		cbnz	r3, .L27
 333              	.LVL20:
 334              	.L17:
 335              		.loc 1 282 8 view .LVU95
 336              	.LBE145:
 283:lib/chibios/os/rt/src/chsys.c ****       return true;
 284:lib/chibios/os/rt/src/chsys.c ****     }
 285:lib/chibios/os/rt/src/chsys.c ****   }
 286:lib/chibios/os/rt/src/chsys.c **** 
 287:lib/chibios/os/rt/src/chsys.c **** #if CH_CFG_USE_REGISTRY == TRUE
 288:lib/chibios/os/rt/src/chsys.c ****   if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 337              		.loc 1 288 3 is_stmt 1 view .LVU96
 338              		.loc 1 288 6 is_stmt 0 view .LVU97
 339 0032 10F00400 		ands	r0, r0, #4
 340              	.LVL21:
 341              		.loc 1 288 6 view .LVU98
 342 0036 0AD0     		beq	.L16
 343              	.LBB146:
 289:lib/chibios/os/rt/src/chsys.c ****     thread_t *tp;
 344              		.loc 1 289 5 is_stmt 1 view .LVU99
 290:lib/chibios/os/rt/src/chsys.c **** 
 291:lib/chibios/os/rt/src/chsys.c ****     /* Scanning the ready list forward.*/
 292:lib/chibios/os/rt/src/chsys.c ****     n = (cnt_t)0;
 345              		.loc 1 292 5 view .LVU100
 346              	.LVL22:
 293:lib/chibios/os/rt/src/chsys.c ****     tp = ch.rlist.newer;
 347              		.loc 1 293 5 view .LVU101
 348              		.loc 1 293 8 is_stmt 0 view .LVU102
 349 0038 0F4B     		ldr	r3, .L35
 350 003a 1A69     		ldr	r2, [r3, #16]
 351              	.LVL23:
 294:lib/chibios/os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist) {
 352              		.loc 1 294 5 is_stmt 1 view .LVU103
 292:lib/chibios/os/rt/src/chsys.c ****     tp = ch.rlist.newer;
 353              		.loc 1 292 7 is_stmt 0 view .LVU104
 354 003c 0020     		movs	r0, #0
 355              	.LVL24:
 356              	.L22:
 357              		.loc 1 294 15 is_stmt 1 view .LVU105
 358 003e 9A42     		cmp	r2, r3
 359 0040 12D1     		bne	.L23
 295:lib/chibios/os/rt/src/chsys.c ****       n++;
 296:lib/chibios/os/rt/src/chsys.c ****       tp = tp->newer;
 297:lib/chibios/os/rt/src/chsys.c ****     }
 298:lib/chibios/os/rt/src/chsys.c **** 
 299:lib/chibios/os/rt/src/chsys.c ****     /* Scanning the ready list backward.*/
 300:lib/chibios/os/rt/src/chsys.c ****     tp = ch.rlist.older;
 360              		.loc 1 300 5 view .LVU106
 361              		.loc 1 300 8 is_stmt 0 view .LVU107
 362 0042 5A69     		ldr	r2, [r3, #20]
 363              	.LVL25:
 301:lib/chibios/os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist) {
 364              		.loc 1 301 5 is_stmt 1 view .LVU108
 365              	.L24:
 366              		.loc 1 301 15 view .LVU109
 367 0044 9A42     		cmp	r2, r3
 368 0046 12D1     		bne	.L25
 302:lib/chibios/os/rt/src/chsys.c ****       n--;
 303:lib/chibios/os/rt/src/chsys.c ****       tp = tp->older;
 304:lib/chibios/os/rt/src/chsys.c ****     }
 305:lib/chibios/os/rt/src/chsys.c **** 
 306:lib/chibios/os/rt/src/chsys.c ****     /* The number of elements must match.*/
 307:lib/chibios/os/rt/src/chsys.c ****     if (n != (cnt_t)0) {
 369              		.loc 1 307 5 view .LVU110
 370              		.loc 1 307 8 is_stmt 0 view .LVU111
 371 0048 0038     		subs	r0, r0, #0
 372              		.loc 1 307 8 view .LVU112
 373 004a 18BF     		it	ne
 374 004c 0120     		movne	r0, #1
 375              	.LVL26:
 376              	.L16:
 377              		.loc 1 307 8 view .LVU113
 378              	.LBE146:
 308:lib/chibios/os/rt/src/chsys.c ****       return true;
 309:lib/chibios/os/rt/src/chsys.c ****     }
 310:lib/chibios/os/rt/src/chsys.c ****   }
 311:lib/chibios/os/rt/src/chsys.c **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 312:lib/chibios/os/rt/src/chsys.c **** 
 313:lib/chibios/os/rt/src/chsys.c **** #if defined(PORT_INTEGRITY_CHECK)
 314:lib/chibios/os/rt/src/chsys.c ****   if ((testmask & CH_INTEGRITY_PORT) != 0U) {
 315:lib/chibios/os/rt/src/chsys.c ****     PORT_INTEGRITY_CHECK();
 316:lib/chibios/os/rt/src/chsys.c ****   }
 317:lib/chibios/os/rt/src/chsys.c **** #endif
 318:lib/chibios/os/rt/src/chsys.c **** 
 319:lib/chibios/os/rt/src/chsys.c ****   return false;
 320:lib/chibios/os/rt/src/chsys.c **** }
 379              		.loc 1 320 1 view .LVU114
 380 004e 10BD     		pop	{r4, pc}
 381              	.LVL27:
 382              	.L13:
 383              	.LBB147:
 245:lib/chibios/os/rt/src/chsys.c ****       pqp = pqp->next;
 384              		.loc 1 245 7 is_stmt 1 view .LVU115
 246:lib/chibios/os/rt/src/chsys.c ****     }
 385              		.loc 1 246 11 is_stmt 0 view .LVU116
 386 0050 0968     		ldr	r1, [r1]
 387              	.LVL28:
 245:lib/chibios/os/rt/src/chsys.c ****       pqp = pqp->next;
 388              		.loc 1 245 8 view .LVU117
 389 0052 0133     		adds	r3, r3, #1
 390              	.LVL29:
 246:lib/chibios/os/rt/src/chsys.c ****     }
 391              		.loc 1 246 7 is_stmt 1 view .LVU118
 246:lib/chibios/os/rt/src/chsys.c ****     }
 392              		.loc 1 246 7 is_stmt 0 view .LVU119
 393 0054 DAE7     		b	.L12
 394              	.L15:
 252:lib/chibios/os/rt/src/chsys.c ****       pqp = pqp->prev;
 395              		.loc 1 252 7 is_stmt 1 view .LVU120
 253:lib/chibios/os/rt/src/chsys.c ****     }
 396              		.loc 1 253 11 is_stmt 0 view .LVU121
 397 0056 4968     		ldr	r1, [r1, #4]
 398              	.LVL30:
 252:lib/chibios/os/rt/src/chsys.c ****       pqp = pqp->prev;
 399              		.loc 1 252 8 view .LVU122
 400 0058 013B     		subs	r3, r3, #1
 401              	.LVL31:
 253:lib/chibios/os/rt/src/chsys.c ****     }
 402              		.loc 1 253 7 is_stmt 1 view .LVU123
 253:lib/chibios/os/rt/src/chsys.c ****     }
 403              		.loc 1 253 7 is_stmt 0 view .LVU124
 404 005a DAE7     		b	.L14
 405              	.LVL32:
 406              	.L19:
 253:lib/chibios/os/rt/src/chsys.c ****     }
 407              		.loc 1 253 7 view .LVU125
 408              	.LBE147:
 409              	.LBB148:
 270:lib/chibios/os/rt/src/chsys.c ****       dlp = dlp->next;
 410              		.loc 1 270 7 is_stmt 1 view .LVU126
 271:lib/chibios/os/rt/src/chsys.c ****     }
 411              		.loc 1 271 11 is_stmt 0 view .LVU127
 412 005c 0968     		ldr	r1, [r1]
 413              	.LVL33:
 270:lib/chibios/os/rt/src/chsys.c ****       dlp = dlp->next;
 414              		.loc 1 270 8 view .LVU128
 415 005e 0133     		adds	r3, r3, #1
 416              	.LVL34:
 271:lib/chibios/os/rt/src/chsys.c ****     }
 417              		.loc 1 271 7 is_stmt 1 view .LVU129
 271:lib/chibios/os/rt/src/chsys.c ****     }
 418              		.loc 1 271 7 is_stmt 0 view .LVU130
 419 0060 E1E7     		b	.L18
 420              	.L21:
 277:lib/chibios/os/rt/src/chsys.c ****       dlp = dlp->prev;
 421              		.loc 1 277 7 is_stmt 1 view .LVU131
 278:lib/chibios/os/rt/src/chsys.c ****     }
 422              		.loc 1 278 11 is_stmt 0 view .LVU132
 423 0062 4968     		ldr	r1, [r1, #4]
 424              	.LVL35:
 277:lib/chibios/os/rt/src/chsys.c ****       dlp = dlp->prev;
 425              		.loc 1 277 8 view .LVU133
 426 0064 013B     		subs	r3, r3, #1
 427              	.LVL36:
 278:lib/chibios/os/rt/src/chsys.c ****     }
 428              		.loc 1 278 7 is_stmt 1 view .LVU134
 278:lib/chibios/os/rt/src/chsys.c ****     }
 429              		.loc 1 278 7 is_stmt 0 view .LVU135
 430 0066 E1E7     		b	.L20
 431              	.LVL37:
 432              	.L23:
 278:lib/chibios/os/rt/src/chsys.c ****     }
 433              		.loc 1 278 7 view .LVU136
 434              	.LBE148:
 435              	.LBB149:
 295:lib/chibios/os/rt/src/chsys.c ****       tp = tp->newer;
 436              		.loc 1 295 7 is_stmt 1 view .LVU137
 296:lib/chibios/os/rt/src/chsys.c ****     }
 437              		.loc 1 296 10 is_stmt 0 view .LVU138
 438 0068 1269     		ldr	r2, [r2, #16]
 439              	.LVL38:
 295:lib/chibios/os/rt/src/chsys.c ****       tp = tp->newer;
 440              		.loc 1 295 8 view .LVU139
 441 006a 0130     		adds	r0, r0, #1
 442              	.LVL39:
 296:lib/chibios/os/rt/src/chsys.c ****     }
 443              		.loc 1 296 7 is_stmt 1 view .LVU140
 296:lib/chibios/os/rt/src/chsys.c ****     }
 444              		.loc 1 296 7 is_stmt 0 view .LVU141
 445 006c E7E7     		b	.L22
 446              	.L25:
 302:lib/chibios/os/rt/src/chsys.c ****       tp = tp->older;
 447              		.loc 1 302 7 is_stmt 1 view .LVU142
 303:lib/chibios/os/rt/src/chsys.c ****     }
 448              		.loc 1 303 10 is_stmt 0 view .LVU143
 449 006e 5269     		ldr	r2, [r2, #20]
 450              	.LVL40:
 302:lib/chibios/os/rt/src/chsys.c ****       tp = tp->older;
 451              		.loc 1 302 8 view .LVU144
 452 0070 0138     		subs	r0, r0, #1
 453              	.LVL41:
 303:lib/chibios/os/rt/src/chsys.c ****     }
 454              		.loc 1 303 7 is_stmt 1 view .LVU145
 303:lib/chibios/os/rt/src/chsys.c ****     }
 455              		.loc 1 303 7 is_stmt 0 view .LVU146
 456 0072 E7E7     		b	.L24
 457              	.LVL42:
 458              	.L27:
 303:lib/chibios/os/rt/src/chsys.c ****     }
 459              		.loc 1 303 7 view .LVU147
 460              	.LBE149:
 461              	.LBB150:
 258:lib/chibios/os/rt/src/chsys.c ****     }
 462              		.loc 1 258 14 view .LVU148
 463 0074 0120     		movs	r0, #1
 464              	.LVL43:
 258:lib/chibios/os/rt/src/chsys.c ****     }
 465              		.loc 1 258 14 view .LVU149
 466 0076 EAE7     		b	.L16
 467              	.L36:
 468              		.align	2
 469              	.L35:
 470 0078 00000000 		.word	ch
 471              	.LBE150:
 472              		.cfi_endproc
 473              	.LFE292:
 475              		.section	.text.chSysTimerHandlerI,"ax",%progbits
 476              		.align	1
 477              		.global	chSysTimerHandlerI
 478              		.syntax unified
 479              		.thumb
 480              		.thumb_func
 482              	chSysTimerHandlerI:
 483              	.LFB293:
 321:lib/chibios/os/rt/src/chsys.c **** 
 322:lib/chibios/os/rt/src/chsys.c **** /**
 323:lib/chibios/os/rt/src/chsys.c ****  * @brief   Handles time ticks for round robin preemption and timer increments.
 324:lib/chibios/os/rt/src/chsys.c ****  * @details Decrements the remaining time quantum of the running thread
 325:lib/chibios/os/rt/src/chsys.c ****  *          and preempts it when the quantum is used up. Increments system
 326:lib/chibios/os/rt/src/chsys.c ****  *          time and manages the timers.
 327:lib/chibios/os/rt/src/chsys.c ****  * @note    The frequency of the timer determines the system tick granularity
 328:lib/chibios/os/rt/src/chsys.c ****  *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 329:lib/chibios/os/rt/src/chsys.c ****  *          interval.
 330:lib/chibios/os/rt/src/chsys.c ****  *
 331:lib/chibios/os/rt/src/chsys.c ****  * @iclass
 332:lib/chibios/os/rt/src/chsys.c ****  */
 333:lib/chibios/os/rt/src/chsys.c **** void chSysTimerHandlerI(void) {
 484              		.loc 1 333 31 is_stmt 1 view -0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488              		@ link register save eliminated.
 334:lib/chibios/os/rt/src/chsys.c **** 
 335:lib/chibios/os/rt/src/chsys.c ****   chDbgCheckClassI();
 489              		.loc 1 335 21 view .LVU151
 336:lib/chibios/os/rt/src/chsys.c **** 
 337:lib/chibios/os/rt/src/chsys.c **** #if CH_CFG_TIME_QUANTUM > 0
 338:lib/chibios/os/rt/src/chsys.c ****   /* Running thread has not used up quantum yet? */
 339:lib/chibios/os/rt/src/chsys.c ****   if (currp->ticks > (tslices_t)0) {
 340:lib/chibios/os/rt/src/chsys.c ****     /* Decrement remaining quantum.*/
 341:lib/chibios/os/rt/src/chsys.c ****     currp->ticks--;
 342:lib/chibios/os/rt/src/chsys.c ****   }
 343:lib/chibios/os/rt/src/chsys.c **** #endif
 344:lib/chibios/os/rt/src/chsys.c **** #if CH_DBG_THREADS_PROFILING == TRUE
 345:lib/chibios/os/rt/src/chsys.c ****   currp->time++;
 346:lib/chibios/os/rt/src/chsys.c **** #endif
 347:lib/chibios/os/rt/src/chsys.c ****   chVTDoTickI();
 490              		.loc 1 347 3 view .LVU152
 491 0000 FFF7FEBF 		b	chVTDoTickI
 492              	.LVL44:
 493              		.cfi_endproc
 494              	.LFE293:
 496              		.section	.text.chSysGetStatusAndLockX,"ax",%progbits
 497              		.align	1
 498              		.global	chSysGetStatusAndLockX
 499              		.syntax unified
 500              		.thumb
 501              		.thumb_func
 503              	chSysGetStatusAndLockX:
 504              	.LFB294:
 348:lib/chibios/os/rt/src/chsys.c ****   CH_CFG_SYSTEM_TICK_HOOK();
 349:lib/chibios/os/rt/src/chsys.c **** }
 350:lib/chibios/os/rt/src/chsys.c **** 
 351:lib/chibios/os/rt/src/chsys.c **** /**
 352:lib/chibios/os/rt/src/chsys.c ****  * @brief   Returns the execution status and enters a critical zone.
 353:lib/chibios/os/rt/src/chsys.c ****  * @details This functions enters into a critical zone and can be called
 354:lib/chibios/os/rt/src/chsys.c ****  *          from any context. Because its flexibility it is less efficient
 355:lib/chibios/os/rt/src/chsys.c ****  *          than @p chSysLock() which is preferable when the calling context
 356:lib/chibios/os/rt/src/chsys.c ****  *          is known.
 357:lib/chibios/os/rt/src/chsys.c ****  * @post    The system is in a critical zone.
 358:lib/chibios/os/rt/src/chsys.c ****  *
 359:lib/chibios/os/rt/src/chsys.c ****  * @return              The previous system status, the encoding of this
 360:lib/chibios/os/rt/src/chsys.c ****  *                      status word is architecture-dependent and opaque.
 361:lib/chibios/os/rt/src/chsys.c ****  *
 362:lib/chibios/os/rt/src/chsys.c ****  * @xclass
 363:lib/chibios/os/rt/src/chsys.c ****  */
 364:lib/chibios/os/rt/src/chsys.c **** syssts_t chSysGetStatusAndLockX(void) {
 505              		.loc 1 364 39 view -0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 509              		@ link register save eliminated.
 365:lib/chibios/os/rt/src/chsys.c **** 
 366:lib/chibios/os/rt/src/chsys.c ****   syssts_t sts = port_get_irq_status();
 510              		.loc 1 366 3 view .LVU154
 511              	.LBB151:
 512              	.LBI151:
 623:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   syssts_t sts;
 513              		.loc 4 623 31 view .LVU155
 514              	.LBB152:
 624:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 515              		.loc 4 624 3 view .LVU156
 627:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 516              		.loc 4 627 3 view .LVU157
 517              	.LBB153:
 518              	.LBI153:
 461:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 519              		.loc 5 461 31 view .LVU158
 520              	.LBB154:
 463:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 521              		.loc 5 463 3 view .LVU159
 465:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 522              		.loc 5 465 3 view .LVU160
 523              		.syntax unified
 524              	@ 465 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 525 0000 EFF31180 		MRS r0, basepri
 526              	@ 0 "" 2
 527              	.LVL45:
 466:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 528              		.loc 5 466 3 view .LVU161
 466:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 529              		.loc 5 466 3 is_stmt 0 view .LVU162
 530              		.thumb
 531              		.syntax unified
 532              	.LBE154:
 533              	.LBE153:
 631:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 534              		.loc 4 631 3 is_stmt 1 view .LVU163
 631:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 535              		.loc 4 631 3 is_stmt 0 view .LVU164
 536              	.LBE152:
 537              	.LBE151:
 367:lib/chibios/os/rt/src/chsys.c ****   if (port_irq_enabled(sts)) {
 538              		.loc 1 367 3 is_stmt 1 view .LVU165
 539              		.loc 1 367 6 is_stmt 0 view .LVU166
 540 0004 20B9     		cbnz	r0, .L38
 368:lib/chibios/os/rt/src/chsys.c ****     if (port_is_isr_context()) {
 541              		.loc 1 368 5 is_stmt 1 view .LVU167
 542              	.LBB155:
 543              	.LBI155:
 659:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 544              		.loc 4 659 27 view .LVU168
 545              	.LBB156:
 661:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 546              		.loc 4 661 3 view .LVU169
 547              	.LBB157:
 548              	.LBI157:
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 549              		.loc 5 205 31 view .LVU170
 550              	.LBB158:
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 551              		.loc 5 207 3 view .LVU171
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 552              		.loc 5 209 3 view .LVU172
 553              		.syntax unified
 554              	@ 209 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 555 0006 EFF30583 		MRS r3, ipsr
 556              	@ 0 "" 2
 557              	.LVL46:
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 558              		.loc 5 210 3 view .LVU173
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 559              		.loc 5 210 3 is_stmt 0 view .LVU174
 560              		.thumb
 561              		.syntax unified
 562 000a 2022     		movs	r2, #32
 563              	.LBE158:
 564              	.LBE157:
 565              	.LBE156:
 566              	.LBE155:
 369:lib/chibios/os/rt/src/chsys.c ****       chSysLockFromISR();
 370:lib/chibios/os/rt/src/chsys.c ****     }
 371:lib/chibios/os/rt/src/chsys.c ****     else {
 372:lib/chibios/os/rt/src/chsys.c ****       chSysLock();
 567              		.loc 1 372 7 is_stmt 1 view .LVU175
 568              	.LBB159:
 569              	.LBI159:
 348:./lib/chibios/os/rt/include/chsys.h **** }
 349:./lib/chibios/os/rt/include/chsys.h **** 
 350:./lib/chibios/os/rt/include/chsys.h **** /**
 351:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 352:./lib/chibios/os/rt/include/chsys.h ****  *
 353:./lib/chibios/os/rt/include/chsys.h ****  * @special
 354:./lib/chibios/os/rt/include/chsys.h ****  */
 355:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLock(void) {
 570              		.loc 3 355 20 view .LVU176
 571              	.LBB160:
 356:./lib/chibios/os/rt/include/chsys.h **** 
 357:./lib/chibios/os/rt/include/chsys.h ****   port_lock();
 572              		.loc 3 357 3 view .LVU177
 573              	.LBB161:
 574              	.LBI161:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 575              		.loc 4 669 27 view .LVU178
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 576              		.loc 4 677 3 view .LVU179
 577              	.LVL47:
 578              	.LBB162:
 579              	.LBI162:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 580              		.loc 5 491 27 view .LVU180
 581              	.LBB163:
 582              		.loc 5 493 3 view .LVU181
 583              		.syntax unified
 584              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 585 000c 82F31188 		MSR basepri, r2
 586              	@ 0 "" 2
 587              	.LVL48:
 588              		.loc 5 493 3 is_stmt 0 view .LVU182
 589              		.thumb
 590              		.syntax unified
 591              	.LBE163:
 592              	.LBE162:
 593              	.LBE161:
 358:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 594              		.loc 3 358 34 is_stmt 1 view .LVU183
 359:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 595              		.loc 3 359 20 view .LVU184
 596              	.LBE160:
 597              	.LBE159:
 373:lib/chibios/os/rt/src/chsys.c ****     }
 374:lib/chibios/os/rt/src/chsys.c ****   }
 375:lib/chibios/os/rt/src/chsys.c ****   return sts;
 598              		.loc 1 375 3 view .LVU185
 599              	.L38:
 376:lib/chibios/os/rt/src/chsys.c **** }
 600              		.loc 1 376 1 is_stmt 0 view .LVU186
 601 0010 7047     		bx	lr
 602              		.cfi_endproc
 603              	.LFE294:
 605              		.section	.text.chSysRestoreStatusX,"ax",%progbits
 606              		.align	1
 607              		.global	chSysRestoreStatusX
 608              		.syntax unified
 609              		.thumb
 610              		.thumb_func
 612              	chSysRestoreStatusX:
 613              	.LVL49:
 614              	.LFB295:
 377:lib/chibios/os/rt/src/chsys.c **** 
 378:lib/chibios/os/rt/src/chsys.c **** /**
 379:lib/chibios/os/rt/src/chsys.c ****  * @brief   Restores the specified execution status and leaves a critical zone.
 380:lib/chibios/os/rt/src/chsys.c ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 381:lib/chibios/os/rt/src/chsys.c ****  *          if exiting the critical zone and if not in ISR context.
 382:lib/chibios/os/rt/src/chsys.c ****  *
 383:lib/chibios/os/rt/src/chsys.c ****  * @param[in] sts       the system status to be restored.
 384:lib/chibios/os/rt/src/chsys.c ****  *
 385:lib/chibios/os/rt/src/chsys.c ****  * @xclass
 386:lib/chibios/os/rt/src/chsys.c ****  */
 387:lib/chibios/os/rt/src/chsys.c **** void chSysRestoreStatusX(syssts_t sts) {
 615              		.loc 1 387 40 is_stmt 1 view -0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 0
 618              		@ frame_needed = 0, uses_anonymous_args = 0
 388:lib/chibios/os/rt/src/chsys.c **** 
 389:lib/chibios/os/rt/src/chsys.c ****   if (port_irq_enabled(sts)) {
 619              		.loc 1 389 3 view .LVU188
 387:lib/chibios/os/rt/src/chsys.c **** 
 620              		.loc 1 387 40 is_stmt 0 view .LVU189
 621 0000 10B5     		push	{r4, lr}
 622              		.cfi_def_cfa_offset 8
 623              		.cfi_offset 4, -8
 624              		.cfi_offset 14, -4
 625              		.loc 1 389 6 view .LVU190
 626 0002 30B9     		cbnz	r0, .L41
 390:lib/chibios/os/rt/src/chsys.c ****     if (port_is_isr_context()) {
 627              		.loc 1 390 5 is_stmt 1 view .LVU191
 628              	.LBB164:
 629              	.LBI164:
 659:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 630              		.loc 4 659 27 view .LVU192
 631              	.LBB165:
 661:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 632              		.loc 4 661 3 view .LVU193
 633              	.LBB166:
 634              	.LBI166:
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 635              		.loc 5 205 31 view .LVU194
 636              	.LBB167:
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 637              		.loc 5 207 3 view .LVU195
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 638              		.loc 5 209 3 view .LVU196
 639              		.syntax unified
 640              	@ 209 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 641 0004 EFF30584 		MRS r4, ipsr
 642              	@ 0 "" 2
 643              	.LVL50:
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 644              		.loc 5 210 3 view .LVU197
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 645              		.loc 5 210 3 is_stmt 0 view .LVU198
 646              		.thumb
 647              		.syntax unified
 648              	.LBE167:
 649              	.LBE166:
 661:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 650              		.loc 4 661 31 view .LVU199
 651 0008 C4F30804 		ubfx	r4, r4, #0, #9
 652              	.LBE165:
 653              	.LBE164:
 654              		.loc 1 390 8 view .LVU200
 655 000c 14B1     		cbz	r4, .L43
 391:lib/chibios/os/rt/src/chsys.c ****       chSysUnlockFromISR();
 656              		.loc 1 391 7 is_stmt 1 view .LVU201
 657              	.LBB168:
 658              	.LBI168:
 360:./lib/chibios/os/rt/include/chsys.h **** }
 361:./lib/chibios/os/rt/include/chsys.h **** 
 362:./lib/chibios/os/rt/include/chsys.h **** /**
 363:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 364:./lib/chibios/os/rt/include/chsys.h ****  *
 365:./lib/chibios/os/rt/include/chsys.h ****  * @special
 366:./lib/chibios/os/rt/include/chsys.h ****  */
 367:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 368:./lib/chibios/os/rt/include/chsys.h **** 
 369:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock();
 370:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 371:./lib/chibios/os/rt/include/chsys.h **** 
 372:./lib/chibios/os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 373:./lib/chibios/os/rt/include/chsys.h ****      in a critical section not followed by a chSchRescheduleS(), this means
 374:./lib/chibios/os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 375:./lib/chibios/os/rt/include/chsys.h ****      the ready list.*/
 376:./lib/chibios/os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 377:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 378:./lib/chibios/os/rt/include/chsys.h ****               "priority order violation");
 379:./lib/chibios/os/rt/include/chsys.h **** 
 380:./lib/chibios/os/rt/include/chsys.h ****   port_unlock();
 381:./lib/chibios/os/rt/include/chsys.h **** }
 382:./lib/chibios/os/rt/include/chsys.h **** 
 383:./lib/chibios/os/rt/include/chsys.h **** /**
 384:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state from within an interrupt handler.
 385:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 386:./lib/chibios/os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 387:./lib/chibios/os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 388:./lib/chibios/os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 389:./lib/chibios/os/rt/include/chsys.h ****  *          It is good practice to invoke this API before invoking any I-class
 390:./lib/chibios/os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 391:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 392:./lib/chibios/os/rt/include/chsys.h ****  *
 393:./lib/chibios/os/rt/include/chsys.h ****  * @special
 394:./lib/chibios/os/rt/include/chsys.h ****  */
 395:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLockFromISR(void) {
 396:./lib/chibios/os/rt/include/chsys.h **** 
 397:./lib/chibios/os/rt/include/chsys.h ****   port_lock_from_isr();
 398:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_isr();
 399:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock_from_isr();
 400:./lib/chibios/os/rt/include/chsys.h **** }
 401:./lib/chibios/os/rt/include/chsys.h **** 
 402:./lib/chibios/os/rt/include/chsys.h **** /**
 403:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state from within an interrupt handler.
 404:./lib/chibios/os/rt/include/chsys.h ****  *
 405:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 406:./lib/chibios/os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 407:./lib/chibios/os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 408:./lib/chibios/os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 409:./lib/chibios/os/rt/include/chsys.h ****  *          It is good practice to invoke this API after invoking any I-class
 410:./lib/chibios/os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 411:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 412:./lib/chibios/os/rt/include/chsys.h ****  *
 413:./lib/chibios/os/rt/include/chsys.h ****  * @special
 414:./lib/chibios/os/rt/include/chsys.h ****  */
 415:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlockFromISR(void) {
 659              		.loc 3 415 20 view .LVU202
 660              	.LBB169:
 416:./lib/chibios/os/rt/include/chsys.h **** 
 417:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock_from_isr();
 661              		.loc 3 417 31 view .LVU203
 418:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_isr();
 662              		.loc 3 418 33 view .LVU204
 419:./lib/chibios/os/rt/include/chsys.h ****   port_unlock_from_isr();
 663              		.loc 3 419 3 view .LVU205
 664              	.LBB170:
 665              	.LBI170:
 719:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 666              		.loc 4 719 27 view .LVU206
 721:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 667              		.loc 4 721 3 view .LVU207
 668              	.LBB171:
 669              	.LBI171:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 670              		.loc 4 693 27 view .LVU208
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 671              		.loc 4 696 3 view .LVU209
 672              	.LVL51:
 673              	.LBB172:
 674              	.LBI172:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 675              		.loc 5 491 27 view .LVU210
 676              	.LBB173:
 677              		.loc 5 493 3 view .LVU211
 678              		.syntax unified
 679              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 680 000e 80F31188 		MSR basepri, r0
 681              	@ 0 "" 2
 682              	.LVL52:
 683              		.thumb
 684              		.syntax unified
 685              	.L41:
 686              		.loc 5 493 3 is_stmt 0 view .LVU212
 687              	.LBE173:
 688              	.LBE172:
 689              	.LBE171:
 690              	.LBE170:
 691              	.LBE169:
 692              	.LBE168:
 392:lib/chibios/os/rt/src/chsys.c ****     }
 393:lib/chibios/os/rt/src/chsys.c ****     else {
 394:lib/chibios/os/rt/src/chsys.c ****       chSchRescheduleS();
 395:lib/chibios/os/rt/src/chsys.c ****       chSysUnlock();
 396:lib/chibios/os/rt/src/chsys.c ****     }
 397:lib/chibios/os/rt/src/chsys.c ****   }
 398:lib/chibios/os/rt/src/chsys.c **** }
 693              		.loc 1 398 1 view .LVU213
 694 0012 10BD     		pop	{r4, pc}
 695              	.LVL53:
 696              	.L43:
 394:lib/chibios/os/rt/src/chsys.c ****       chSysUnlock();
 697              		.loc 1 394 7 is_stmt 1 view .LVU214
 698 0014 FFF7FEFF 		bl	chSchRescheduleS
 699              	.LVL54:
 395:lib/chibios/os/rt/src/chsys.c ****     }
 700              		.loc 1 395 7 view .LVU215
 701              	.LBB174:
 702              	.LBI174:
 367:./lib/chibios/os/rt/include/chsys.h **** 
 703              		.loc 3 367 20 view .LVU216
 704              	.LBB175:
 369:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 705              		.loc 3 369 22 view .LVU217
 370:./lib/chibios/os/rt/include/chsys.h **** 
 706              		.loc 3 370 33 view .LVU218
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 707              		.loc 3 376 3 view .LVU219
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 708              		.loc 3 376 3 view .LVU220
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 709              		.loc 3 376 3 view .LVU221
 380:./lib/chibios/os/rt/include/chsys.h **** }
 710              		.loc 3 380 3 view .LVU222
 711              	.LBB176:
 712              	.LBI176:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 713              		.loc 4 693 27 view .LVU223
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 714              		.loc 4 696 3 view .LVU224
 715              	.LBB177:
 716              	.LBI177:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 717              		.loc 5 491 27 view .LVU225
 718              	.LBB178:
 719              		.loc 5 493 3 view .LVU226
 720              		.syntax unified
 721              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 722 0018 84F31188 		MSR basepri, r4
 723              	@ 0 "" 2
 724              	.LVL55:
 725              		.loc 5 493 3 is_stmt 0 view .LVU227
 726              		.thumb
 727              		.syntax unified
 728              	.LBE178:
 729              	.LBE177:
 730              	.LBE176:
 731              	.LBE175:
 732              	.LBE174:
 733              		.loc 1 398 1 view .LVU228
 734 001c F9E7     		b	.L41
 735              		.cfi_endproc
 736              	.LFE295:
 738              		.section	.text.chSysIsCounterWithinX,"ax",%progbits
 739              		.align	1
 740              		.global	chSysIsCounterWithinX
 741              		.syntax unified
 742              		.thumb
 743              		.thumb_func
 745              	chSysIsCounterWithinX:
 746              	.LVL56:
 747              	.LFB296:
 399:lib/chibios/os/rt/src/chsys.c **** 
 400:lib/chibios/os/rt/src/chsys.c **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 401:lib/chibios/os/rt/src/chsys.c **** /**
 402:lib/chibios/os/rt/src/chsys.c ****  * @brief   Realtime window test.
 403:lib/chibios/os/rt/src/chsys.c ****  * @details This function verifies if the current realtime counter value
 404:lib/chibios/os/rt/src/chsys.c ****  *          lies within the specified range or not. The test takes care
 405:lib/chibios/os/rt/src/chsys.c ****  *          of the realtime counter wrapping to zero on overflow.
 406:lib/chibios/os/rt/src/chsys.c ****  * @note    When start==end then the function returns always false because a
 407:lib/chibios/os/rt/src/chsys.c ****  *          null time range is specified.
 408:lib/chibios/os/rt/src/chsys.c ****  * @note    This function is only available if the port layer supports the
 409:lib/chibios/os/rt/src/chsys.c ****  *          option @p PORT_SUPPORTS_RT.
 410:lib/chibios/os/rt/src/chsys.c ****  *
 411:lib/chibios/os/rt/src/chsys.c ****  * @param[in] cnt       the counter value to be tested
 412:lib/chibios/os/rt/src/chsys.c ****  * @param[in] start     the start of the time window (inclusive)
 413:lib/chibios/os/rt/src/chsys.c ****  * @param[in] end       the end of the time window (non inclusive)
 414:lib/chibios/os/rt/src/chsys.c ****  * @retval true         current time within the specified time window.
 415:lib/chibios/os/rt/src/chsys.c ****  * @retval false        current time not within the specified time window.
 416:lib/chibios/os/rt/src/chsys.c ****  *
 417:lib/chibios/os/rt/src/chsys.c ****  * @xclass
 418:lib/chibios/os/rt/src/chsys.c ****  */
 419:lib/chibios/os/rt/src/chsys.c **** bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {
 748              		.loc 1 419 69 is_stmt 1 view -0
 749              		.cfi_startproc
 750              		@ args = 0, pretend = 0, frame = 0
 751              		@ frame_needed = 0, uses_anonymous_args = 0
 752              		@ link register save eliminated.
 420:lib/chibios/os/rt/src/chsys.c **** 
 421:lib/chibios/os/rt/src/chsys.c ****   return (bool)(((rtcnt_t)cnt - (rtcnt_t)start) <
 753              		.loc 1 421 3 view .LVU230
 754              		.loc 1 421 31 is_stmt 0 view .LVU231
 755 0000 401A     		subs	r0, r0, r1
 756              	.LVL57:
 422:lib/chibios/os/rt/src/chsys.c ****                 ((rtcnt_t)end - (rtcnt_t)start));
 757              		.loc 1 422 31 view .LVU232
 758 0002 521A     		subs	r2, r2, r1
 759              	.LVL58:
 423:lib/chibios/os/rt/src/chsys.c **** }
 760              		.loc 1 423 1 view .LVU233
 761 0004 9042     		cmp	r0, r2
 762 0006 2CBF     		ite	cs
 763 0008 0020     		movcs	r0, #0
 764 000a 0120     		movcc	r0, #1
 765 000c 7047     		bx	lr
 766              		.cfi_endproc
 767              	.LFE296:
 769              		.section	.text.chSysPolledDelayX,"ax",%progbits
 770              		.align	1
 771              		.global	chSysPolledDelayX
 772              		.syntax unified
 773              		.thumb
 774              		.thumb_func
 776              	chSysPolledDelayX:
 777              	.LVL59:
 778              	.LFB297:
 424:lib/chibios/os/rt/src/chsys.c **** 
 425:lib/chibios/os/rt/src/chsys.c **** /**
 426:lib/chibios/os/rt/src/chsys.c ****  * @brief   Polled delay.
 427:lib/chibios/os/rt/src/chsys.c ****  * @note    The real delay is always few cycles in excess of the specified
 428:lib/chibios/os/rt/src/chsys.c ****  *          value.
 429:lib/chibios/os/rt/src/chsys.c ****  * @note    This function is only available if the port layer supports the
 430:lib/chibios/os/rt/src/chsys.c ****  *          option @p PORT_SUPPORTS_RT.
 431:lib/chibios/os/rt/src/chsys.c ****  *
 432:lib/chibios/os/rt/src/chsys.c ****  * @param[in] cycles    number of cycles
 433:lib/chibios/os/rt/src/chsys.c ****  *
 434:lib/chibios/os/rt/src/chsys.c ****  * @xclass
 435:lib/chibios/os/rt/src/chsys.c ****  */
 436:lib/chibios/os/rt/src/chsys.c **** void chSysPolledDelayX(rtcnt_t cycles) {
 779              		.loc 1 436 40 is_stmt 1 view -0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 0
 782              		@ frame_needed = 0, uses_anonymous_args = 0
 783              		@ link register save eliminated.
 437:lib/chibios/os/rt/src/chsys.c ****   rtcnt_t start = chSysGetRealtimeCounterX();
 784              		.loc 1 437 3 view .LVU235
 785              	.LBB179:
 786              	.LBI179:
 759:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 760:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 761:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 762:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enters an architecture-dependent IRQ-waiting mode.
 763:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details The function is meant to return when an interrupt becomes pending.
 764:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          The simplest implementation is an empty function or macro but this
 765:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          would not take advantage of architecture-specific power saving
 766:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          modes.
 767:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Implemented as an inlined @p WFI instruction.
 768:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 769:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_wait_for_interrupt(void) {
 770:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 771:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_ENABLE_WFI_IDLE == TRUE
 772:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __WFI();
 773:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 774:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 775:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 776:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 777:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Returns the current value of the realtime counter.
 778:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 779:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The realtime counter value.
 780:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 781:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {
 787              		.loc 4 781 30 view .LVU236
 788              	.LBB180:
 782:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 783:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return DWT->CYCCNT;
 789              		.loc 4 783 3 view .LVU237
 790              		.loc 4 783 13 is_stmt 0 view .LVU238
 791 0000 034A     		ldr	r2, .L48
 792 0002 5168     		ldr	r1, [r2, #4]
 793              	.LVL60:
 794              		.loc 4 783 13 view .LVU239
 795              	.LBE180:
 796              	.LBE179:
 438:lib/chibios/os/rt/src/chsys.c ****   rtcnt_t end  = start + cycles;
 797              		.loc 1 438 3 is_stmt 1 view .LVU240
 439:lib/chibios/os/rt/src/chsys.c **** 
 440:lib/chibios/os/rt/src/chsys.c ****   while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 798              		.loc 1 440 3 view .LVU241
 799              	.L46:
 441:lib/chibios/os/rt/src/chsys.c ****   }
 800              		.loc 1 441 3 discriminator 1 view .LVU242
 440:lib/chibios/os/rt/src/chsys.c ****   }
 801              		.loc 1 440 10 discriminator 1 view .LVU243
 802              	.LBB181:
 803              	.LBI181:
 781:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 804              		.loc 4 781 30 discriminator 1 view .LVU244
 805              	.LBB182:
 806              		.loc 4 783 3 discriminator 1 view .LVU245
 807              		.loc 4 783 13 is_stmt 0 discriminator 1 view .LVU246
 808 0004 5368     		ldr	r3, [r2, #4]
 809              	.LVL61:
 810              		.loc 4 783 13 discriminator 1 view .LVU247
 811              	.LBE182:
 812              	.LBE181:
 813              	.LBB183:
 814              	.LBI183:
 419:lib/chibios/os/rt/src/chsys.c **** 
 815              		.loc 1 419 6 is_stmt 1 discriminator 1 view .LVU248
 816              	.LBB184:
 421:lib/chibios/os/rt/src/chsys.c ****                 ((rtcnt_t)end - (rtcnt_t)start));
 817              		.loc 1 421 3 discriminator 1 view .LVU249
 421:lib/chibios/os/rt/src/chsys.c ****                 ((rtcnt_t)end - (rtcnt_t)start));
 818              		.loc 1 421 31 is_stmt 0 discriminator 1 view .LVU250
 819 0006 5B1A     		subs	r3, r3, r1
 820              	.LBE184:
 821              	.LBE183:
 440:lib/chibios/os/rt/src/chsys.c ****   }
 822              		.loc 1 440 10 discriminator 1 view .LVU251
 823 0008 9842     		cmp	r0, r3
 824 000a FBD8     		bhi	.L46
 442:lib/chibios/os/rt/src/chsys.c **** }
 825              		.loc 1 442 1 view .LVU252
 826 000c 7047     		bx	lr
 827              	.L49:
 828 000e 00BF     		.align	2
 829              	.L48:
 830 0010 001000E0 		.word	-536866816
 831              		.cfi_endproc
 832              	.LFE297:
 834              		.section	.rodata.str1.1,"aMS",%progbits,1
 835              	.LC0:
 836 0000 69646C65 		.ascii	"idle\000"
 836      00
 837              		.section	.rodata.idle_descriptor.0,"a"
 838              		.align	2
 841              	idle_descriptor.0:
 842 0000 00000000 		.word	.LC0
 843 0004 00000000 		.word	ch_idle_thread_wa
 844 0008 60010000 		.word	ch_idle_thread_wa+352
 845 000c 01000000 		.word	1
 846 0010 00000000 		.word	_idle_thread
 847 0014 00000000 		.word	0
 848              		.comm	ch_idle_thread_wa,352,8
 849              		.text
 850              	.Letext0:
 851              		.file 6 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 852              		.file 7 "/usr/arm-none-eabi/include/machine/_default_types.h"
 853              		.file 8 "/usr/arm-none-eabi/include/sys/_stdint.h"
 854              		.file 9 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 855              		.file 10 "./lib/chibios/os/rt/include/chsystypes.h"
 856              		.file 11 "./lib/chibios/os/rt/include/chschd.h"
 857              		.file 12 "./lib/chibios/os/rt/include/chlists.h"
 858              		.file 13 "./lib/chibios/os/rt/include/chtime.h"
 859              		.file 14 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/core_cm4.h"
 860              		.file 15 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 861              		.file 16 "./lib/chibios/os/rt/include/chtm.h"
 862              		.file 17 "./lib/chibios/os/rt/include/chsem.h"
 863              		.file 18 "./lib/chibios/os/rt/include/chmtx.h"
 864              		.file 19 "./lib/chibios/os/rt/include/chthreads.h"
 865              		.file 20 "./lib/chibios/os/rt/include/chregistry.h"
 866              		.file 21 "./lib/chibios/os/rt/include/chvt.h"
 867              		.file 22 "./lib/chibios/os/oslib/include/chmemheaps.h"
 868              		.file 23 "./lib/chibios/os/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chsys.c
     /tmp/cc7ZOx56.s:21     .text._idle_thread:0000000000000000 $t
     /tmp/cc7ZOx56.s:26     .text._idle_thread:0000000000000000 _idle_thread
     /tmp/cc7ZOx56.s:44     .text.chSysInit:0000000000000000 $t
     /tmp/cc7ZOx56.s:50     .text.chSysInit:0000000000000000 chSysInit
     /tmp/cc7ZOx56.s:178    .text.chSysInit:0000000000000048 $d
     /tmp/cc7ZOx56.s:841    .rodata.idle_descriptor.0:0000000000000000 idle_descriptor.0
     /tmp/cc7ZOx56.s:187    .text.chSysHalt:0000000000000000 $t
     /tmp/cc7ZOx56.s:193    .text.chSysHalt:0000000000000000 chSysHalt
     /tmp/cc7ZOx56.s:236    .text.chSysHalt:0000000000000008 $d
     /tmp/cc7ZOx56.s:241    .text.chSysIntegrityCheckI:0000000000000000 $t
     /tmp/cc7ZOx56.s:247    .text.chSysIntegrityCheckI:0000000000000000 chSysIntegrityCheckI
     /tmp/cc7ZOx56.s:470    .text.chSysIntegrityCheckI:0000000000000078 $d
     /tmp/cc7ZOx56.s:476    .text.chSysTimerHandlerI:0000000000000000 $t
     /tmp/cc7ZOx56.s:482    .text.chSysTimerHandlerI:0000000000000000 chSysTimerHandlerI
     /tmp/cc7ZOx56.s:497    .text.chSysGetStatusAndLockX:0000000000000000 $t
     /tmp/cc7ZOx56.s:503    .text.chSysGetStatusAndLockX:0000000000000000 chSysGetStatusAndLockX
     /tmp/cc7ZOx56.s:606    .text.chSysRestoreStatusX:0000000000000000 $t
     /tmp/cc7ZOx56.s:612    .text.chSysRestoreStatusX:0000000000000000 chSysRestoreStatusX
     /tmp/cc7ZOx56.s:739    .text.chSysIsCounterWithinX:0000000000000000 $t
     /tmp/cc7ZOx56.s:745    .text.chSysIsCounterWithinX:0000000000000000 chSysIsCounterWithinX
     /tmp/cc7ZOx56.s:770    .text.chSysPolledDelayX:0000000000000000 $t
     /tmp/cc7ZOx56.s:776    .text.chSysPolledDelayX:0000000000000000 chSysPolledDelayX
     /tmp/cc7ZOx56.s:830    .text.chSysPolledDelayX:0000000000000010 $d
     /tmp/cc7ZOx56.s:838    .rodata.idle_descriptor.0:0000000000000000 $d
                            *COM*:0000000000000160 ch_idle_thread_wa

UNDEFINED SYMBOLS
_scheduler_init
_vt_init
_core_init
_heap_init
_tm_init
_thread_init
port_init
chThdCreate
ch
ch_debug
__main_thread_stack_base__
chVTDoTickI
chSchRescheduleS
