   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"chmempools.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.chPoolObjectInitAligned,"ax",%progbits
  18              		.align	1
  19              		.global	chPoolObjectInitAligned
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	chPoolObjectInitAligned:
  27              	.LVL0:
  28              	.LFB289:
  29              		.file 1 "lib/chibios/os/oslib/src/chmempools.c"
   1:lib/chibios/os/oslib/src/chmempools.c **** /*
   2:lib/chibios/os/oslib/src/chmempools.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:lib/chibios/os/oslib/src/chmempools.c **** 
   4:lib/chibios/os/oslib/src/chmempools.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/oslib/src/chmempools.c **** 
   6:lib/chibios/os/oslib/src/chmempools.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/oslib/src/chmempools.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/oslib/src/chmempools.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/oslib/src/chmempools.c ****     (at your option) any later version.
  10:lib/chibios/os/oslib/src/chmempools.c **** 
  11:lib/chibios/os/oslib/src/chmempools.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/oslib/src/chmempools.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/oslib/src/chmempools.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/oslib/src/chmempools.c ****     GNU General Public License for more details.
  15:lib/chibios/os/oslib/src/chmempools.c **** 
  16:lib/chibios/os/oslib/src/chmempools.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/oslib/src/chmempools.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/oslib/src/chmempools.c **** */
  19:lib/chibios/os/oslib/src/chmempools.c **** 
  20:lib/chibios/os/oslib/src/chmempools.c **** /**
  21:lib/chibios/os/oslib/src/chmempools.c ****  * @file    oslib/src/chmempools.c
  22:lib/chibios/os/oslib/src/chmempools.c ****  * @brief   Memory Pools code.
  23:lib/chibios/os/oslib/src/chmempools.c ****  *
  24:lib/chibios/os/oslib/src/chmempools.c ****  * @addtogroup oslib_mempools
  25:lib/chibios/os/oslib/src/chmempools.c ****  * @details Memory Pools related APIs and services.
  26:lib/chibios/os/oslib/src/chmempools.c ****  *          <h2>Operation mode</h2>
  27:lib/chibios/os/oslib/src/chmempools.c ****  *          The Memory Pools APIs allow to allocate/free fixed size objects in
  28:lib/chibios/os/oslib/src/chmempools.c ****  *          <b>constant time</b> and reliably without memory fragmentation
  29:lib/chibios/os/oslib/src/chmempools.c ****  *          problems.<br>
  30:lib/chibios/os/oslib/src/chmempools.c ****  *          Memory Pools do not enforce any alignment constraint on the
  31:lib/chibios/os/oslib/src/chmempools.c ****  *          contained object however the objects must be properly aligned
  32:lib/chibios/os/oslib/src/chmempools.c ****  *          to contain a pointer to void.
  33:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     In order to use the memory pools APIs the @p CH_CFG_USE_MEMPOOLS option
  34:lib/chibios/os/oslib/src/chmempools.c ****  *          must be enabled in @p chconf.h.
  35:lib/chibios/os/oslib/src/chmempools.c ****  * @note    Compatible with RT and NIL.
  36:lib/chibios/os/oslib/src/chmempools.c ****  * @{
  37:lib/chibios/os/oslib/src/chmempools.c ****  */
  38:lib/chibios/os/oslib/src/chmempools.c **** 
  39:lib/chibios/os/oslib/src/chmempools.c **** #include "ch.h"
  40:lib/chibios/os/oslib/src/chmempools.c **** 
  41:lib/chibios/os/oslib/src/chmempools.c **** #if (CH_CFG_USE_MEMPOOLS == TRUE) || defined(__DOXYGEN__)
  42:lib/chibios/os/oslib/src/chmempools.c **** 
  43:lib/chibios/os/oslib/src/chmempools.c **** /*===========================================================================*/
  44:lib/chibios/os/oslib/src/chmempools.c **** /* Module exported variables.                                                */
  45:lib/chibios/os/oslib/src/chmempools.c **** /*===========================================================================*/
  46:lib/chibios/os/oslib/src/chmempools.c **** 
  47:lib/chibios/os/oslib/src/chmempools.c **** /*===========================================================================*/
  48:lib/chibios/os/oslib/src/chmempools.c **** /* Module local types.                                                       */
  49:lib/chibios/os/oslib/src/chmempools.c **** /*===========================================================================*/
  50:lib/chibios/os/oslib/src/chmempools.c **** 
  51:lib/chibios/os/oslib/src/chmempools.c **** /*===========================================================================*/
  52:lib/chibios/os/oslib/src/chmempools.c **** /* Module local variables.                                                   */
  53:lib/chibios/os/oslib/src/chmempools.c **** /*===========================================================================*/
  54:lib/chibios/os/oslib/src/chmempools.c **** 
  55:lib/chibios/os/oslib/src/chmempools.c **** /*===========================================================================*/
  56:lib/chibios/os/oslib/src/chmempools.c **** /* Module local functions.                                                   */
  57:lib/chibios/os/oslib/src/chmempools.c **** /*===========================================================================*/
  58:lib/chibios/os/oslib/src/chmempools.c **** 
  59:lib/chibios/os/oslib/src/chmempools.c **** /*===========================================================================*/
  60:lib/chibios/os/oslib/src/chmempools.c **** /* Module exported functions.                                                */
  61:lib/chibios/os/oslib/src/chmempools.c **** /*===========================================================================*/
  62:lib/chibios/os/oslib/src/chmempools.c **** 
  63:lib/chibios/os/oslib/src/chmempools.c **** /**
  64:lib/chibios/os/oslib/src/chmempools.c ****  * @brief   Initializes an empty memory pool.
  65:lib/chibios/os/oslib/src/chmempools.c ****  *
  66:lib/chibios/os/oslib/src/chmempools.c ****  * @param[out] mp       pointer to a @p memory_pool_t structure
  67:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] size      the size of the objects contained in this memory pool,
  68:lib/chibios/os/oslib/src/chmempools.c ****  *                      the minimum accepted size is the size of a pointer to
  69:lib/chibios/os/oslib/src/chmempools.c ****  *                      void.
  70:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] align     required memory alignment
  71:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] provider  memory provider function for the memory pool or
  72:lib/chibios/os/oslib/src/chmempools.c ****  *                      @p NULL if the pool is not allowed to grow
  73:lib/chibios/os/oslib/src/chmempools.c ****  *                      automatically
  74:lib/chibios/os/oslib/src/chmempools.c ****  *
  75:lib/chibios/os/oslib/src/chmempools.c ****  * @init
  76:lib/chibios/os/oslib/src/chmempools.c ****  */
  77:lib/chibios/os/oslib/src/chmempools.c **** void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
  78:lib/chibios/os/oslib/src/chmempools.c ****                              unsigned align, memgetfunc_t provider) {
  30              		.loc 1 78 69 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  79:lib/chibios/os/oslib/src/chmempools.c **** 
  80:lib/chibios/os/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) &&
  34              		.loc 1 80 3 view .LVU1
  35              		.loc 1 80 3 view .LVU2
  36              		.loc 1 80 3 view .LVU3
  81:lib/chibios/os/oslib/src/chmempools.c ****              (size >= sizeof(void *)) &&
  82:lib/chibios/os/oslib/src/chmempools.c ****              (align >= PORT_NATURAL_ALIGN) &&
  83:lib/chibios/os/oslib/src/chmempools.c ****              MEM_IS_VALID_ALIGNMENT(align));
  84:lib/chibios/os/oslib/src/chmempools.c **** 
  85:lib/chibios/os/oslib/src/chmempools.c ****   mp->next = NULL;
  37              		.loc 1 85 3 view .LVU4
  78:lib/chibios/os/oslib/src/chmempools.c **** 
  38              		.loc 1 78 69 is_stmt 0 view .LVU5
  39 0000 10B5     		push	{r4, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 4, -8
  42              		.cfi_offset 14, -4
  43              		.loc 1 85 12 view .LVU6
  44 0002 0024     		movs	r4, #0
  86:lib/chibios/os/oslib/src/chmempools.c ****   mp->object_size = size;
  45              		.loc 1 86 19 view .LVU7
  46 0004 C0E90041 		strd	r4, r1, [r0]
  87:lib/chibios/os/oslib/src/chmempools.c ****   mp->align = align;
  47              		.loc 1 87 3 is_stmt 1 view .LVU8
  88:lib/chibios/os/oslib/src/chmempools.c ****   mp->provider = provider;
  48              		.loc 1 88 16 is_stmt 0 view .LVU9
  49 0008 C0E90223 		strd	r2, r3, [r0, #8]
  89:lib/chibios/os/oslib/src/chmempools.c **** }
  50              		.loc 1 89 1 view .LVU10
  51 000c 10BD     		pop	{r4, pc}
  52              		.cfi_endproc
  53              	.LFE289:
  55              		.section	.text.chPoolAllocI,"ax",%progbits
  56              		.align	1
  57              		.global	chPoolAllocI
  58              		.syntax unified
  59              		.thumb
  60              		.thumb_func
  61              		.fpu fpv4-sp-d16
  63              	chPoolAllocI:
  64              	.LVL1:
  65              	.LFB291:
  90:lib/chibios/os/oslib/src/chmempools.c **** 
  91:lib/chibios/os/oslib/src/chmempools.c **** /**
  92:lib/chibios/os/oslib/src/chmempools.c ****  * @brief   Loads a memory pool with an array of static objects.
  93:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The memory pool must already be initialized.
  94:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The array elements must be of the right size for the specified
  95:lib/chibios/os/oslib/src/chmempools.c ****  *          memory pool.
  96:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The array elements size must be a multiple of the alignment
  97:lib/chibios/os/oslib/src/chmempools.c ****  *          requirement for the pool.
  98:lib/chibios/os/oslib/src/chmempools.c ****  * @post    The memory pool contains the elements of the input array.
  99:lib/chibios/os/oslib/src/chmempools.c ****  *
 100:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 101:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] p         pointer to the array first element
 102:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] n         number of elements in the array
 103:lib/chibios/os/oslib/src/chmempools.c ****  *
 104:lib/chibios/os/oslib/src/chmempools.c ****  * @api
 105:lib/chibios/os/oslib/src/chmempools.c ****  */
 106:lib/chibios/os/oslib/src/chmempools.c **** void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {
 107:lib/chibios/os/oslib/src/chmempools.c **** 
 108:lib/chibios/os/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) && (n != 0U));
 109:lib/chibios/os/oslib/src/chmempools.c **** 
 110:lib/chibios/os/oslib/src/chmempools.c ****   while (n != 0U) {
 111:lib/chibios/os/oslib/src/chmempools.c ****     chPoolAdd(mp, p);
 112:lib/chibios/os/oslib/src/chmempools.c ****     /*lint -save -e9087 [11.3] Safe cast.*/
 113:lib/chibios/os/oslib/src/chmempools.c ****     p = (void *)(((uint8_t *)p) + mp->object_size);
 114:lib/chibios/os/oslib/src/chmempools.c ****     /*lint -restore*/
 115:lib/chibios/os/oslib/src/chmempools.c ****     n--;
 116:lib/chibios/os/oslib/src/chmempools.c ****   }
 117:lib/chibios/os/oslib/src/chmempools.c **** }
 118:lib/chibios/os/oslib/src/chmempools.c **** 
 119:lib/chibios/os/oslib/src/chmempools.c **** /**
 120:lib/chibios/os/oslib/src/chmempools.c ****  * @brief   Allocates an object from a memory pool.
 121:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The memory pool must already be initialized.
 122:lib/chibios/os/oslib/src/chmempools.c ****  *
 123:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 124:lib/chibios/os/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 125:lib/chibios/os/oslib/src/chmempools.c ****  * @retval NULL         if pool is empty.
 126:lib/chibios/os/oslib/src/chmempools.c ****  *
 127:lib/chibios/os/oslib/src/chmempools.c ****  * @iclass
 128:lib/chibios/os/oslib/src/chmempools.c ****  */
 129:lib/chibios/os/oslib/src/chmempools.c **** void *chPoolAllocI(memory_pool_t *mp) {
  66              		.loc 1 129 39 is_stmt 1 view -0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              		@ link register save eliminated.
 130:lib/chibios/os/oslib/src/chmempools.c ****   void *objp;
  71              		.loc 1 130 3 view .LVU12
 131:lib/chibios/os/oslib/src/chmempools.c **** 
 132:lib/chibios/os/oslib/src/chmempools.c ****   chDbgCheckClassI();
  72              		.loc 1 132 21 view .LVU13
 133:lib/chibios/os/oslib/src/chmempools.c ****   chDbgCheck(mp != NULL);
  73              		.loc 1 133 3 view .LVU14
  74              		.loc 1 133 3 view .LVU15
  75              		.loc 1 133 3 view .LVU16
 134:lib/chibios/os/oslib/src/chmempools.c **** 
 135:lib/chibios/os/oslib/src/chmempools.c ****   objp = mp->next;
  76              		.loc 1 135 3 view .LVU17
  77              		.loc 1 135 8 is_stmt 0 view .LVU18
  78 0000 0368     		ldr	r3, [r0]
  79              	.LVL2:
 136:lib/chibios/os/oslib/src/chmempools.c ****   /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
 137:lib/chibios/os/oslib/src/chmempools.c ****   if (objp != NULL) {
  80              		.loc 1 137 3 is_stmt 1 view .LVU19
  81              		.loc 1 137 6 is_stmt 0 view .LVU20
  82 0002 1BB1     		cbz	r3, .L3
 138:lib/chibios/os/oslib/src/chmempools.c ****     mp->next = mp->next->next;
  83              		.loc 1 138 5 is_stmt 1 view .LVU21
  84              		.loc 1 138 14 is_stmt 0 view .LVU22
  85 0004 1A68     		ldr	r2, [r3]
  86 0006 0260     		str	r2, [r0]
  87              	.L2:
 139:lib/chibios/os/oslib/src/chmempools.c ****   }
 140:lib/chibios/os/oslib/src/chmempools.c ****   else if (mp->provider != NULL) {
 141:lib/chibios/os/oslib/src/chmempools.c ****     objp = mp->provider(mp->object_size, mp->align);
 142:lib/chibios/os/oslib/src/chmempools.c **** 
 143:lib/chibios/os/oslib/src/chmempools.c ****     chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 144:lib/chibios/os/oslib/src/chmempools.c ****                 "returned object not aligned");
 145:lib/chibios/os/oslib/src/chmempools.c ****   }
 146:lib/chibios/os/oslib/src/chmempools.c ****   /*lint -restore*/
 147:lib/chibios/os/oslib/src/chmempools.c **** 
 148:lib/chibios/os/oslib/src/chmempools.c ****   return objp;
 149:lib/chibios/os/oslib/src/chmempools.c **** }
  88              		.loc 1 149 1 view .LVU23
  89 0008 1846     		mov	r0, r3
  90              	.LVL3:
  91              		.loc 1 149 1 view .LVU24
  92 000a 7047     		bx	lr
  93              	.LVL4:
  94              	.L3:
  95              	.LBB66:
  96              	.LBI66:
 129:lib/chibios/os/oslib/src/chmempools.c ****   void *objp;
  97              		.loc 1 129 7 is_stmt 1 view .LVU25
  98              	.LBB67:
 140:lib/chibios/os/oslib/src/chmempools.c ****     objp = mp->provider(mp->object_size, mp->align);
  99              		.loc 1 140 8 view .LVU26
 140:lib/chibios/os/oslib/src/chmempools.c ****     objp = mp->provider(mp->object_size, mp->align);
 100              		.loc 1 140 14 is_stmt 0 view .LVU27
 101 000c C268     		ldr	r2, [r0, #12]
 140:lib/chibios/os/oslib/src/chmempools.c ****     objp = mp->provider(mp->object_size, mp->align);
 102              		.loc 1 140 11 view .LVU28
 103 000e 002A     		cmp	r2, #0
 104 0010 FAD0     		beq	.L2
 141:lib/chibios/os/oslib/src/chmempools.c **** 
 105              		.loc 1 141 5 is_stmt 1 view .LVU29
 141:lib/chibios/os/oslib/src/chmempools.c **** 
 106              		.loc 1 141 12 is_stmt 0 view .LVU30
 107 0012 D0E90101 		ldrd	r0, r1, [r0, #4]
 108              	.LVL5:
 141:lib/chibios/os/oslib/src/chmempools.c **** 
 109              		.loc 1 141 12 view .LVU31
 110 0016 1047     		bx	r2
 111              	.LVL6:
 141:lib/chibios/os/oslib/src/chmempools.c **** 
 112              		.loc 1 141 12 view .LVU32
 113              	.LBE67:
 114              	.LBE66:
 115              		.cfi_endproc
 116              	.LFE291:
 118              		.section	.text.chPoolAlloc,"ax",%progbits
 119              		.align	1
 120              		.global	chPoolAlloc
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 124              		.fpu fpv4-sp-d16
 126              	chPoolAlloc:
 127              	.LVL7:
 128              	.LFB292:
 150:lib/chibios/os/oslib/src/chmempools.c **** 
 151:lib/chibios/os/oslib/src/chmempools.c **** /**
 152:lib/chibios/os/oslib/src/chmempools.c ****  * @brief   Allocates an object from a memory pool.
 153:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The memory pool must already be initialized.
 154:lib/chibios/os/oslib/src/chmempools.c ****  *
 155:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 156:lib/chibios/os/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 157:lib/chibios/os/oslib/src/chmempools.c ****  * @retval NULL         if pool is empty.
 158:lib/chibios/os/oslib/src/chmempools.c ****  *
 159:lib/chibios/os/oslib/src/chmempools.c ****  * @api
 160:lib/chibios/os/oslib/src/chmempools.c ****  */
 161:lib/chibios/os/oslib/src/chmempools.c **** void *chPoolAlloc(memory_pool_t *mp) {
 129              		.loc 1 161 38 is_stmt 1 view -0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 162:lib/chibios/os/oslib/src/chmempools.c ****   void *objp;
 133              		.loc 1 162 3 view .LVU34
 163:lib/chibios/os/oslib/src/chmempools.c **** 
 164:lib/chibios/os/oslib/src/chmempools.c ****   chSysLock();
 134              		.loc 1 164 3 view .LVU35
 135              	.LBB68:
 136              	.LBI68:
 137              		.file 2 "./lib/chibios/os/rt/include/chsys.h"
   1:./lib/chibios/os/rt/include/chsys.h **** /*
   2:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsys.h **** 
   4:./lib/chibios/os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsys.h **** 
   6:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsys.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsys.h **** 
  11:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsys.h **** 
  16:./lib/chibios/os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsys.h **** */
  19:./lib/chibios/os/rt/include/chsys.h **** 
  20:./lib/chibios/os/rt/include/chsys.h **** /**
  21:./lib/chibios/os/rt/include/chsys.h ****  * @file    rt/include/chsys.h
  22:./lib/chibios/os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:./lib/chibios/os/rt/include/chsys.h ****  *
  24:./lib/chibios/os/rt/include/chsys.h ****  * @addtogroup system
  25:./lib/chibios/os/rt/include/chsys.h ****  * @{
  26:./lib/chibios/os/rt/include/chsys.h ****  */
  27:./lib/chibios/os/rt/include/chsys.h **** 
  28:./lib/chibios/os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:./lib/chibios/os/rt/include/chsys.h **** #define CHSYS_H
  30:./lib/chibios/os/rt/include/chsys.h **** 
  31:./lib/chibios/os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:./lib/chibios/os/rt/include/chsys.h **** 
  33:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsys.h **** 
  37:./lib/chibios/os/rt/include/chsys.h **** /**
  38:./lib/chibios/os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:./lib/chibios/os/rt/include/chsys.h ****  * @{
  40:./lib/chibios/os/rt/include/chsys.h ****  */
  41:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:./lib/chibios/os/rt/include/chsys.h **** /** @} */
  46:./lib/chibios/os/rt/include/chsys.h **** 
  47:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  50:./lib/chibios/os/rt/include/chsys.h **** 
  51:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  52:./lib/chibios/os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  54:./lib/chibios/os/rt/include/chsys.h **** 
  55:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  56:./lib/chibios/os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  58:./lib/chibios/os/rt/include/chsys.h **** 
  59:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  60:./lib/chibios/os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  62:./lib/chibios/os/rt/include/chsys.h **** 
  63:./lib/chibios/os/rt/include/chsys.h **** /**
  64:./lib/chibios/os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:./lib/chibios/os/rt/include/chsys.h ****  * @{
  66:./lib/chibios/os/rt/include/chsys.h ****  */
  67:./lib/chibios/os/rt/include/chsys.h **** /**
  68:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  69:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  70:./lib/chibios/os/rt/include/chsys.h ****  *          level for the underlying architecture.
  71:./lib/chibios/os/rt/include/chsys.h ****  *
  72:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  73:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  74:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  75:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  76:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  77:./lib/chibios/os/rt/include/chsys.h ****  */
  78:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  79:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  80:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  81:./lib/chibios/os/rt/include/chsys.h **** #else
  82:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  83:./lib/chibios/os/rt/include/chsys.h **** #endif
  84:./lib/chibios/os/rt/include/chsys.h **** 
  85:./lib/chibios/os/rt/include/chsys.h **** /**
  86:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  87:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  88:./lib/chibios/os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  89:./lib/chibios/os/rt/include/chsys.h ****  *
  90:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  91:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  92:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  93:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  94:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  95:./lib/chibios/os/rt/include/chsys.h ****  */
  96:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  97:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  98:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  99:./lib/chibios/os/rt/include/chsys.h **** #else
 100:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 101:./lib/chibios/os/rt/include/chsys.h **** #endif
 102:./lib/chibios/os/rt/include/chsys.h **** 
 103:./lib/chibios/os/rt/include/chsys.h **** /**
 104:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 105:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 106:./lib/chibios/os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 107:./lib/chibios/os/rt/include/chsys.h ****  *
 108:./lib/chibios/os/rt/include/chsys.h ****  * @special
 109:./lib/chibios/os/rt/include/chsys.h ****  */
 110:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 111:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 112:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 113:./lib/chibios/os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 114:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 115:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 116:./lib/chibios/os/rt/include/chsys.h **** 
 117:./lib/chibios/os/rt/include/chsys.h **** /**
 118:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 119:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 120:./lib/chibios/os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 121:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 122:./lib/chibios/os/rt/include/chsys.h ****  *
 123:./lib/chibios/os/rt/include/chsys.h ****  * @special
 124:./lib/chibios/os/rt/include/chsys.h ****  */
 125:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 126:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 127:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 128:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 129:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 130:./lib/chibios/os/rt/include/chsys.h **** 
 131:./lib/chibios/os/rt/include/chsys.h **** /**
 132:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 133:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 134:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 135:./lib/chibios/os/rt/include/chsys.h ****  *
 136:./lib/chibios/os/rt/include/chsys.h ****  * @special
 137:./lib/chibios/os/rt/include/chsys.h ****  */
 138:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 139:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 140:./lib/chibios/os/rt/include/chsys.h **** 
 141:./lib/chibios/os/rt/include/chsys.h **** /**
 142:./lib/chibios/os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 143:./lib/chibios/os/rt/include/chsys.h ****  * @{
 144:./lib/chibios/os/rt/include/chsys.h ****  */
 145:./lib/chibios/os/rt/include/chsys.h **** /**
 146:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 147:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 148:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 149:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 150:./lib/chibios/os/rt/include/chsys.h ****  *
 151:./lib/chibios/os/rt/include/chsys.h ****  * @special
 152:./lib/chibios/os/rt/include/chsys.h ****  */
 153:./lib/chibios/os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 154:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 155:./lib/chibios/os/rt/include/chsys.h **** 
 156:./lib/chibios/os/rt/include/chsys.h **** /**
 157:./lib/chibios/os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 158:./lib/chibios/os/rt/include/chsys.h ****  * @{
 159:./lib/chibios/os/rt/include/chsys.h ****  */
 160:./lib/chibios/os/rt/include/chsys.h **** /**
 161:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 162:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 163:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 164:./lib/chibios/os/rt/include/chsys.h ****  *
 165:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 166:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 167:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 168:./lib/chibios/os/rt/include/chsys.h ****  *
 169:./lib/chibios/os/rt/include/chsys.h ****  * @api
 170:./lib/chibios/os/rt/include/chsys.h ****  */
 171:./lib/chibios/os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 172:./lib/chibios/os/rt/include/chsys.h **** 
 173:./lib/chibios/os/rt/include/chsys.h **** /**
 174:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 175:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 176:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 177:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 178:./lib/chibios/os/rt/include/chsys.h ****  *
 179:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 180:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 181:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 182:./lib/chibios/os/rt/include/chsys.h ****  *
 183:./lib/chibios/os/rt/include/chsys.h ****  * @api
 184:./lib/chibios/os/rt/include/chsys.h ****  */
 185:./lib/chibios/os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 186:./lib/chibios/os/rt/include/chsys.h **** 
 187:./lib/chibios/os/rt/include/chsys.h **** /**
 188:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 189:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 190:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 191:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 192:./lib/chibios/os/rt/include/chsys.h ****  *
 193:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 194:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 195:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 196:./lib/chibios/os/rt/include/chsys.h ****  *
 197:./lib/chibios/os/rt/include/chsys.h ****  * @api
 198:./lib/chibios/os/rt/include/chsys.h ****  */
 199:./lib/chibios/os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 200:./lib/chibios/os/rt/include/chsys.h **** 
 201:./lib/chibios/os/rt/include/chsys.h **** /**
 202:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 203:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 204:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 205:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 206:./lib/chibios/os/rt/include/chsys.h ****  *
 207:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 208:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 209:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of seconds.
 210:./lib/chibios/os/rt/include/chsys.h ****  *
 211:./lib/chibios/os/rt/include/chsys.h ****  * @api
 212:./lib/chibios/os/rt/include/chsys.h ****  */
 213:./lib/chibios/os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 214:./lib/chibios/os/rt/include/chsys.h **** 
 215:./lib/chibios/os/rt/include/chsys.h **** /**
 216:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 217:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 218:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 219:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 220:./lib/chibios/os/rt/include/chsys.h ****  *
 221:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 222:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 223:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 224:./lib/chibios/os/rt/include/chsys.h ****  *
 225:./lib/chibios/os/rt/include/chsys.h ****  * @api
 226:./lib/chibios/os/rt/include/chsys.h ****  */
 227:./lib/chibios/os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 228:./lib/chibios/os/rt/include/chsys.h **** 
 229:./lib/chibios/os/rt/include/chsys.h **** /**
 230:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 231:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 232:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 233:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 234:./lib/chibios/os/rt/include/chsys.h ****  *
 235:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 236:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 237:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of microseconds.
 238:./lib/chibios/os/rt/include/chsys.h ****  *
 239:./lib/chibios/os/rt/include/chsys.h ****  * @api
 240:./lib/chibios/os/rt/include/chsys.h ****  */
 241:./lib/chibios/os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 242:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 243:./lib/chibios/os/rt/include/chsys.h **** 
 244:./lib/chibios/os/rt/include/chsys.h **** /**
 245:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 246:./lib/chibios/os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 247:./lib/chibios/os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 248:./lib/chibios/os/rt/include/chsys.h ****  *
 249:./lib/chibios/os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 250:./lib/chibios/os/rt/include/chsys.h ****  *                      type rtcnt_t.
 251:./lib/chibios/os/rt/include/chsys.h ****  *
 252:./lib/chibios/os/rt/include/chsys.h ****  * @xclass
 253:./lib/chibios/os/rt/include/chsys.h ****  */
 254:./lib/chibios/os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 255:./lib/chibios/os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 256:./lib/chibios/os/rt/include/chsys.h **** #endif
 257:./lib/chibios/os/rt/include/chsys.h **** 
 258:./lib/chibios/os/rt/include/chsys.h **** /**
 259:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 260:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 261:./lib/chibios/os/rt/include/chsys.h ****  *          itself or from within the port layer.
 262:./lib/chibios/os/rt/include/chsys.h ****  *
 263:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 264:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 265:./lib/chibios/os/rt/include/chsys.h ****  *
 266:./lib/chibios/os/rt/include/chsys.h ****  * @special
 267:./lib/chibios/os/rt/include/chsys.h ****  */
 268:./lib/chibios/os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 269:./lib/chibios/os/rt/include/chsys.h ****                                                                             \
 270:./lib/chibios/os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 271:./lib/chibios/os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 272:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 273:./lib/chibios/os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 274:./lib/chibios/os/rt/include/chsys.h **** }
 275:./lib/chibios/os/rt/include/chsys.h **** 
 276:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chsys.h **** /* External declarations.                                                    */
 278:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 279:./lib/chibios/os/rt/include/chsys.h **** 
 280:./lib/chibios/os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 281:./lib/chibios/os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 282:./lib/chibios/os/rt/include/chsys.h **** #endif
 283:./lib/chibios/os/rt/include/chsys.h **** 
 284:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 285:./lib/chibios/os/rt/include/chsys.h **** extern "C" {
 286:./lib/chibios/os/rt/include/chsys.h **** #endif
 287:./lib/chibios/os/rt/include/chsys.h ****   void chSysInit(void);
 288:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 289:./lib/chibios/os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 290:./lib/chibios/os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 291:./lib/chibios/os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 292:./lib/chibios/os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 293:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 294:./lib/chibios/os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 295:./lib/chibios/os/rt/include/chsys.h **** #endif
 296:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 297:./lib/chibios/os/rt/include/chsys.h **** }
 298:./lib/chibios/os/rt/include/chsys.h **** #endif
 299:./lib/chibios/os/rt/include/chsys.h **** 
 300:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 301:./lib/chibios/os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 302:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 303:./lib/chibios/os/rt/include/chsys.h **** 
 304:./lib/chibios/os/rt/include/chsys.h **** /**
 305:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 306:./lib/chibios/os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 307:./lib/chibios/os/rt/include/chsys.h ****  *          hardware priority.
 308:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 309:./lib/chibios/os/rt/include/chsys.h ****  *
 310:./lib/chibios/os/rt/include/chsys.h ****  * @special
 311:./lib/chibios/os/rt/include/chsys.h ****  */
 312:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 313:./lib/chibios/os/rt/include/chsys.h **** 
 314:./lib/chibios/os/rt/include/chsys.h ****   port_disable();
 315:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_disable();
 316:./lib/chibios/os/rt/include/chsys.h **** }
 317:./lib/chibios/os/rt/include/chsys.h **** 
 318:./lib/chibios/os/rt/include/chsys.h **** /**
 319:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 320:./lib/chibios/os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 321:./lib/chibios/os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 322:./lib/chibios/os/rt/include/chsys.h ****  *          enabled.
 323:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 324:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 325:./lib/chibios/os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 326:./lib/chibios/os/rt/include/chsys.h ****  *
 327:./lib/chibios/os/rt/include/chsys.h ****  * @special
 328:./lib/chibios/os/rt/include/chsys.h ****  */
 329:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 330:./lib/chibios/os/rt/include/chsys.h **** 
 331:./lib/chibios/os/rt/include/chsys.h ****   port_suspend();
 332:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_suspend();
 333:./lib/chibios/os/rt/include/chsys.h **** }
 334:./lib/chibios/os/rt/include/chsys.h **** 
 335:./lib/chibios/os/rt/include/chsys.h **** /**
 336:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 337:./lib/chibios/os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 338:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 339:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 340:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 341:./lib/chibios/os/rt/include/chsys.h ****  *
 342:./lib/chibios/os/rt/include/chsys.h ****  * @special
 343:./lib/chibios/os/rt/include/chsys.h ****  */
 344:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 345:./lib/chibios/os/rt/include/chsys.h **** 
 346:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enable();
 347:./lib/chibios/os/rt/include/chsys.h ****   port_enable();
 348:./lib/chibios/os/rt/include/chsys.h **** }
 349:./lib/chibios/os/rt/include/chsys.h **** 
 350:./lib/chibios/os/rt/include/chsys.h **** /**
 351:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 352:./lib/chibios/os/rt/include/chsys.h ****  *
 353:./lib/chibios/os/rt/include/chsys.h ****  * @special
 354:./lib/chibios/os/rt/include/chsys.h ****  */
 355:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLock(void) {
 138              		.loc 2 355 20 view .LVU36
 356:./lib/chibios/os/rt/include/chsys.h **** 
 357:./lib/chibios/os/rt/include/chsys.h ****   port_lock();
 139              		.loc 2 357 3 view .LVU37
 140              	.LBB69:
 141              	.LBI69:
 142              		.file 3 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @file    chcore_v7m.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   ARMv7-M architecture port macros and structures.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @addtogroup ARMCMx_V7M_CORE
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifndef CHCORE_V7M_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CHCORE_V7M_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Port Capabilities and Constants
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   This port supports a realtime counter.
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SUPPORTS_RT                TRUE
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Natural alignment constant.
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the minimum alignment for pointer-size variables.
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_NATURAL_ALIGN              sizeof (void *)
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack alignment constant.
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment required for the stack pointer.
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_STACK_ALIGN                sizeof (stkalign_t)
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Working Areas alignment constant.
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment to be enforced for thread working areas.
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA_ALIGN         ((PORT_ENABLE_GUARD_PAGES == TRUE) ?\
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                          32U : PORT_STACK_ALIGN)
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Disabled value for BASEPRI register.
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_DISABLED         0U
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module pre-compile time settings.                                         */
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Implements a syscall interface on SVC.
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_SYSCALL) || defined(__DOXYGEN__)
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_SYSCALL                FALSE
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Number of MPU regions to be saved/restored during context switch.
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The first region is always region zero.
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 8 bytes for each
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          region for each thread.
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Allowed values are 0..4, zero means none.
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_SWITCHED_REGIONS_NUMBER) || defined(__DOXYGEN__)
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SWITCHED_REGIONS_NUMBER    0
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables stack overflow guard pages using MPU.
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This option can only be enabled if also option
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CH_DBG_ENABLE_STACK_CHECK is enabled.
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 32 bytes for each
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          thread.
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_ENABLE_GUARD_PAGES) || defined(__DOXYGEN__)
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ENABLE_GUARD_PAGES         FALSE
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU region to be used to stack guards.
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Make sure this region is not included in the
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p PORT_SWITCHED_REGIONS_NUMBER regions range.
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_GUARD_MPU_REGION) || defined(__DOXYGEN__)
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_GUARD_MPU_REGION       MPU_REGION_7
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack size for the system idle thread.
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This size depends on the idle thread implementation, usually
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          the idle thread should take no more space than those reserved
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it is set to 16 because the idle thread does have
 117:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          a stack frame when compiling without optimizations. You may
 118:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          reduce this value to zero when compiling with optimizations.
 119:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 120:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 121:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IDLE_THREAD_STACK_SIZE     16
 122:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 123:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 124:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 125:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 126:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This constant is used in the calculation of the correct working
 127:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          area size.
 128:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port this value is conservatively set to 64 because the
 129:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          function @p chSchDoReschedule() can have a stack frame, especially
 130:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          with compiler optimizations disabled. The value can be reduced
 131:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          when compiler optimizations are enabled.
 132:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 133:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 134:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INT_REQUIRED_STACK         64
 135:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 136:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 137:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 138:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables the use of the WFI instruction in the idle thread loop.
 139:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 140:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_ENABLE_WFI_IDLE)
 141:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_ENABLE_WFI_IDLE          FALSE
 142:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 143:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 144:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 145:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   FPU support in context switch.
 146:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option activates the FPU support in the kernel.
 147:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 148:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_USE_FPU)
 149:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_USE_FPU                  CORTEX_HAS_FPU
 150:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_USE_FPU == TRUE) && (CORTEX_HAS_FPU == FALSE)
 151:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* This setting requires an FPU presence check in case it is externally
 152:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    redefined.*/
 153:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "the selected core does not have an FPU"
 154:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 155:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 156:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 157:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Simplified priority handling flag.
 158:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option makes the Kernel work in compact mode.
 159:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          In compact mode interrupts are disabled globally instead of
 160:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          raising the priority mask to some intermediate level.
 161:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 162:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_SIMPLIFIED_PRIORITY)
 163:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_SIMPLIFIED_PRIORITY      FALSE
 164:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 165:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 166:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 167:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   SVCALL handler priority.
 168:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The default SVCALL handler priority is defaulted to
 169:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY+1, this reserves the
 170:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY priority level as fast interrupts
 171:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority level.
 172:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 173:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIORITY_SVCALL)
 174:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_SVCALL          (CORTEX_MAXIMUM_PRIORITY + 1U)
 175:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif !PORT_IRQ_IS_VALID_PRIORITY(CORTEX_PRIORITY_SVCALL)
 176:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* If it is externally redefined then better perform a validity check on it.*/
 177:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid priority level specified for CORTEX_PRIORITY_SVCALL"
 178:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 179:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 180:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 181:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   NVIC PRIGROUP initialization expression.
 182:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details The default assigns all available priority bits as preemption
 183:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority with no sub-priority.
 184:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 185:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIGROUP_INIT) || defined(__DOXYGEN__)
 186:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIGROUP_INIT            (7 - CORTEX_PRIORITY_BITS)
 187:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 188:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 189:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 190:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Derived constants and error checks.                                       */
 191:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 192:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 193:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER < 0) || (PORT_SWITCHED_REGIONS_NUMBER > 4)
 194:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid PORT_SWITCHED_REGIONS_NUMBER value"
 195:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 196:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 197:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 198:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 199:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU guard page size.
 200:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 201:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == TRUE) || defined(__DOXYGEN__)
 202:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_DBG_ENABLE_STACK_CHECK == FALSE
 203:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "PORT_ENABLE_GUARD_PAGES requires CH_DBG_ENABLE_STACK_CHECK"
 204:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 205:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if __MPU_PRESENT == 0
 206:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "MPU not present in current device"
 207:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 208:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          32U
 209:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 210:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          0U
 211:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 212:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(_FROM_ASM_) */
 213:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 214:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 215:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Architecture and Compiler
 216:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
 217:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 218:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_MODEL == 3) || defined(__DOXYGEN__)
 219:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 220:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM3)
 221:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM3 not defined"
 222:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 223:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 224:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM3 == FALSE
 225:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M3 port not licensed"
 226:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 227:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 228:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 229:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Macro defining the specific ARM architecture.
 230:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 231:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7M
 232:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 233:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 234:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the implemented architecture.
 235:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 236:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv7-M"
 237:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 238:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 239:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the architecture variant.
 240:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 241:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 242:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3"
 243:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 244:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3 (MPU)"
 245:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 246:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 247:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 4)
 248:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 249:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM4)
 250:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM4 not defined"
 251:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 252:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 253:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM4 == FALSE
 254:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #error "ChibiOS Cortex-M4 port not licensed"
 255:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 256:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 257:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_ARM_v7ME
 258:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 259:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 260:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 261:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F"
 262:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 263:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F (MPU)"
 264:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 265:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 266:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 267:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4"
 268:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 269:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4 (MPU)"
 270:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 271:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 272:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 273:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 7)
 274:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 275:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM7)
 276:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM7 not defined"
 277:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 278:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 279:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM7 == FALSE
 280:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M7 port not licensed"
 281:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 282:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 283:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7ME
 284:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 285:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 286:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 287:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F"
 288:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 289:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F (MPU)"
 290:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 291:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 292:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 293:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7"
 294:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 295:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7 (MPU)"
 296:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 297:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 298:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 299:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 300:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 301:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Port-specific information string.
 302:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 303:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 304:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Advanced kernel mode"
 305:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 306:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Compact kernel mode"
 307:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 308:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
 309:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 310:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 311:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 312:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Maximum usable priority for normal ISRs.
 313:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 314:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      (CORTEX_PRIORITY_SVCALL + 1U)
 315:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 316:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 317:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   BASEPRI level within kernel lock.
 318:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 319:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_KERNEL                                               \
 320:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   CORTEX_PRIO_MASK(CORTEX_MAX_KERNEL_PRIORITY)
 321:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 322:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 323:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      0U
 324:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 325:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 326:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 327:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   PendSV priority level.
 328:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This priority is enforced to be equal to
 329:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAX_KERNEL_PRIORITY, this handler always have the
 330:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          highest priority that cannot preempt the kernel.
 331:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 332:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_PENDSV          CORTEX_MAX_KERNEL_PRIORITY
 333:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 334:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 335:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module data structures and types.                                         */
 336:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 337:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 338:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The following code is not processed when the file is included from an
 339:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    asm module.*/
 340:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 341:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 342:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The documentation of the following declarations is in chconf.h in order
 343:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    to not have duplicated structure names into the documentation.*/
 344:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(__DOXYGEN__)
 345:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_extctx {
 346:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r0;
 347:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r1;
 348:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r2;
 349:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r3;
 350:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r12;
 351:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr_thd;
 352:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      pc;
 353:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      xpsr;
 354:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 355:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s0;
 356:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s1;
 357:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s2;
 358:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s3;
 359:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s4;
 360:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s5;
 361:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s6;
 362:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s7;
 363:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s8;
 364:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s9;
 365:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s10;
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s11;
 367:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s12;
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s13;
 369:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s14;
 370:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s15;
 371:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      fpscr;
 372:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      reserved;
 373:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 374:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 375:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 376:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 377:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Link context structure.
 379:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This structure is used when there is the need to save extra
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          context information that is not part of the registers stacked
 381:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          in HW.
 382:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 383:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_linkctx {
 384:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t              control;
 385:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_extctx    *ectxp;
 386:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 388:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_intctx {
 390:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER > 0) || defined(__DOXYGEN__)
 391:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 392:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rbar;
 393:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rasr;
 394:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } regions[PORT_SWITCHED_REGIONS_NUMBER];
 395:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 397:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s16;
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s17;
 399:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s18;
 400:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s19;
 401:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s20;
 402:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s21;
 403:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s22;
 404:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s23;
 405:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s24;
 406:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s25;
 407:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s26;
 408:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s27;
 409:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s28;
 410:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s29;
 411:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s30;
 412:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s31;
 413:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 414:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r4;
 415:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r5;
 416:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r6;
 417:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r7;
 418:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r8;
 419:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r9;
 420:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r10;
 421:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r11;
 422:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr;
 423:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 424:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 425:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_context {
 426:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx    *sp;
 427:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 428:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 429:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t            psp;
 430:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     const void          *p;
 431:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } syscall;
 432:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 433:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 434:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(__DOXYGEN__) */
 435:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 436:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 437:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module macros.                                                            */
 438:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 439:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 440:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have no syscall context information.*/
 441:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 442:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)                              \
 443:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.psp = (uint32_t)(wtop);                                 \
 444:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.p   = NULL;
 445:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 446:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)
 447:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 448:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 449:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have all regions disabled.*/
 450:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER == 0) || defined(__DOXYGEN__)
 451:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)
 452:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 1) || defined(__DOXYGEN__)
 453:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 454:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 455:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U
 456:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 2) || defined(__DOXYGEN__)
 457:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 458:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 459:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 460:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 461:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U
 462:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 3) || defined(__DOXYGEN__)
 463:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 464:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 465:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 466:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 467:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 468:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 469:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U
 470:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 4) || defined(__DOXYGEN__)
 471:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 472:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 473:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 474:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 475:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 476:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 477:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U;                                      \
 478:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rbar  = 0U;                                      \
 479:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rasr  = 0U
 480:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 481:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 482:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 483:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 484:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 485:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This code usually setup the context switching frame represented
 486:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by an @p port_intctx structure.
 487:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 488:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 489:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                 \
 490:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                         sizeof (struct port_intctx));       \
 491:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r4 = (uint32_t)(pf);                                        \
 492:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r5 = (uint32_t)(arg);                                       \
 493:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->lr = (uint32_t)_port_thread_start;                          \
 494:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_MPU(tp);                                             \
 495:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop);                                   \
 496:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 497:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 498:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** //  __PORT_SETUP_CONTEXT_MPU(tp)
 499:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 500:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 501:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Computes the thread working area global size.
 502:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    There is no need to perform alignments in this macro.
 503:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 504:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WA_SIZE(n) ((size_t)PORT_GUARD_PAGE_SIZE +                     \
 505:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_intctx) +                      \
 506:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_extctx) +                      \
 507:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)(n) +                                      \
 508:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)PORT_INT_REQUIRED_STACK)
 509:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 510:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 511:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Static working area allocation.
 512:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro is used to allocate a static thread working area
 513:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          aligned as both position and size.
 514:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 515:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] s         the name to be assigned to the stack array
 516:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] n         the stack size to be assigned to the thread
 517:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 518:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 519:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 520:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 521:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 522:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 523:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   ALIGNED_VAR(32) stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 524:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 525:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 526:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 527:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ prologue code.
 528:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 529:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 530:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 531:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_PROLOGUE()
 532:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 533:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 534:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ epilogue code.
 535:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 536:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 537:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 538:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_EPILOGUE() _port_irq_epilogue()
 539:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 540:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 541:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ handler function declaration.
 542:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 543:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 544:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 545:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 546:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) extern "C" void id(void)
 547:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 548:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) void id(void)
 549:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 550:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 551:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 552:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Fast IRQ handler function declaration.
 553:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 554:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 555:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 556:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 557:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) extern "C" void id(void)
 558:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 559:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) void id(void)
 560:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 561:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 562:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 563:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Performs a context switch between two threads.
 564:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This is the most critical code in any port, this function
 565:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          is responsible for the context switch between 2 threads.
 566:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 567:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          switch performance so optimize here as much as you can.
 568:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 569:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] ntp       the thread to be switched in
 570:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] otp       the thread to be switched out
 571:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 572:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CH_DBG_ENABLE_STACK_CHECK == FALSE) || defined(__DOXYGEN__)
 573:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 574:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 575:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_ENABLE_GUARD_PAGES == FALSE
 576:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 577:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx *r13 = (struct port_intctx *)__get_PSP();              \
 578:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   if ((stkalign_t *)(r13 - 1) < (otp)->wabase) {                            \
 579:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     chSysHalt("stack overflow");                                            \
 580:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   }                                                                         \
 581:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 582:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 583:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 584:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 585:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 586:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                                                             \
 587:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   /* Setting up the guard page for the switched-in thread.*/                \
 588:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   mpuSetRegionAddress(PORT_USE_GUARD_MPU_REGION,                            \
 589:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                       chThdGetSelfX()->wabase);                             \
 590:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 591:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 592:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 593:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 594:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 595:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* External declarations.                                                    */
 596:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 597:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 598:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 599:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** extern "C" {
 600:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 601:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_init(void);
 602:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_irq_epilogue(void);
 603:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 604:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_thread_start(void);
 605:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch_from_isr(void);
 606:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_exit_from_isr(void);
 607:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_USE_SYSCALL == TRUE
 608:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_unprivileged_jump(uint32_t pc, uint32_t psp);
 609:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 610:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 611:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 612:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 613:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 614:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 615:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module inline functions.                                                  */
 616:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 617:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 618:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 619:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Returns a word encoding the current interrupts status.
 620:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 621:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupts status.
 622:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 623:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE syssts_t port_get_irq_status(void) {
 624:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   syssts_t sts;
 625:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 626:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 627:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_BASEPRI();
 628:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 629:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_PRIMASK();
 630:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 631:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts;
 632:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 633:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 634:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 635:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Checks the interrupt status.
 636:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 637:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] sts       the interrupt status word
 638:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 639:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupt status.
 640:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        the word specified a disabled interrupts status.
 641:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         the word specified an enabled interrupts status.
 642:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 643:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_irq_enabled(syssts_t sts) {
 644:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 645:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 646:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 647:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 648:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (sts & (syssts_t)1) == (syssts_t)0;
 649:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 650:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 651:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 652:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 653:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Determines the current execution context.
 654:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 655:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The execution context.
 656:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        not running in ISR mode.
 657:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         running in ISR mode.
 658:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 659:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_is_isr_context(void) {
 660:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 661:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 662:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 663:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 664:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 665:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action.
 666:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 667:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 668:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock(void) {
 143              		.loc 3 669 27 view .LVU38
 670:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 671:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 672:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 673:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 674:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 675:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 676:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
 144              		.loc 3 677 3 view .LVU39
 145              	.LBB70:
 146              	.LBI70:
 147              		.file 4 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 144:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 145:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 146:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 147:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 150:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 151:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 153:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 154:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 155:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 157:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 158:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 159:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 160:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 162:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 166:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 168:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 169:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 170:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 172:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 173:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 174:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 175:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 176:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 177:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 181:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 183:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 185:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 187:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 189:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 193:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 195:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 197:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 198:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 199:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 200:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 201:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 208:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 211:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 212:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 214:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 215:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 219:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 221:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 222:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 223:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 225:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 226:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 228:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 241:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 243:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 247:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 249:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 250:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 251:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 253:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 254:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 255:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 265:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 268:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 269:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 270:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 271:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 272:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 273:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 277:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 279:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 281:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 282:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 283:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 285:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 289:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 291:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 294:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 296:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 297:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 301:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 303:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 304:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 305:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 307:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 308:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 310:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 312:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 316:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 318:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 319:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 320:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 322:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 323:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 324:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 325:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 326:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 327:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 331:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 333:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 335:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 336:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 337:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 339:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 343:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 345:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 347:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 348:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 355:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 359:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 360:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 362:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 363:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 364:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 365:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 366:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 370:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 372:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 374:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 375:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 378:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 382:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 384:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 385:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 386:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 388:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 389:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 390:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 391:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 393:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 397:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 399:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 400:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 401:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 403:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 404:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 405:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 406:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 407:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 408:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 412:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 414:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 416:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 418:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 420:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 424:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 426:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 428:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 429:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 430:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 435:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 439:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 441:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 443:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 445:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 446:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 450:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 452:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 454:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 455:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 456:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 457:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 461:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 463:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 464:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 465:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 467:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 468:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 469:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 470:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 472:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 476:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 478:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 479:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 480:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 482:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 484:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 486:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 148              		.loc 4 491 27 view .LVU40
 149              	.LBB71:
 492:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 150              		.loc 4 493 3 view .LVU41
 151              	.LBE71:
 152              	.LBE70:
 153              	.LBE69:
 154              	.LBE68:
 161:lib/chibios/os/oslib/src/chmempools.c ****   void *objp;
 155              		.loc 1 161 38 is_stmt 0 view .LVU42
 156 0000 08B5     		push	{r3, lr}
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 3, -8
 159              		.cfi_offset 14, -4
 160              	.LBB75:
 161              	.LBB74:
 162              	.LBB73:
 163              	.LBB72:
 164              		.loc 4 493 3 view .LVU43
 165 0002 2023     		movs	r3, #32
 166              		.syntax unified
 167              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 168 0004 83F31188 		MSR basepri, r3
 169              	@ 0 "" 2
 170              	.LVL8:
 171              		.loc 4 493 3 view .LVU44
 172              		.thumb
 173              		.syntax unified
 174              	.LBE72:
 175              	.LBE73:
 176              	.LBE74:
 358:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 177              		.loc 2 358 34 is_stmt 1 view .LVU45
 359:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 178              		.loc 2 359 20 view .LVU46
 179              	.LBE75:
 165:lib/chibios/os/oslib/src/chmempools.c ****   objp = chPoolAllocI(mp);
 180              		.loc 1 165 3 view .LVU47
 181              		.loc 1 165 10 is_stmt 0 view .LVU48
 182 0008 FFF7FEFF 		bl	chPoolAllocI
 183              	.LVL9:
 166:lib/chibios/os/oslib/src/chmempools.c ****   chSysUnlock();
 184              		.loc 1 166 3 is_stmt 1 view .LVU49
 185              	.LBB76:
 186              	.LBI76:
 360:./lib/chibios/os/rt/include/chsys.h **** }
 361:./lib/chibios/os/rt/include/chsys.h **** 
 362:./lib/chibios/os/rt/include/chsys.h **** /**
 363:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 364:./lib/chibios/os/rt/include/chsys.h ****  *
 365:./lib/chibios/os/rt/include/chsys.h ****  * @special
 366:./lib/chibios/os/rt/include/chsys.h ****  */
 367:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 187              		.loc 2 367 20 view .LVU50
 188              	.LBB77:
 368:./lib/chibios/os/rt/include/chsys.h **** 
 369:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock();
 189              		.loc 2 369 22 view .LVU51
 370:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 190              		.loc 2 370 33 view .LVU52
 371:./lib/chibios/os/rt/include/chsys.h **** 
 372:./lib/chibios/os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 373:./lib/chibios/os/rt/include/chsys.h ****      in a critical section not followed by a chSchRescheduleS(), this means
 374:./lib/chibios/os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 375:./lib/chibios/os/rt/include/chsys.h ****      the ready list.*/
 376:./lib/chibios/os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 191              		.loc 2 376 3 view .LVU53
 192              		.loc 2 376 3 view .LVU54
 193              		.loc 2 376 3 view .LVU55
 377:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 378:./lib/chibios/os/rt/include/chsys.h ****               "priority order violation");
 379:./lib/chibios/os/rt/include/chsys.h **** 
 380:./lib/chibios/os/rt/include/chsys.h ****   port_unlock();
 194              		.loc 2 380 3 view .LVU56
 195              	.LBB78:
 196              	.LBI78:
 678:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 679:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 680:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 681:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 682:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 683:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 684:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 685:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 686:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 687:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 688:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 689:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action.
 690:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 691:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 692:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock(void) {
 197              		.loc 3 693 27 view .LVU57
 694:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 695:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
 198              		.loc 3 696 3 view .LVU58
 199              	.LBB79:
 200              	.LBI79:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 201              		.loc 4 491 27 view .LVU59
 202              	.LBB80:
 203              		.loc 4 493 3 view .LVU60
 204 000c 0023     		movs	r3, #0
 205              		.syntax unified
 206              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 207 000e 83F31188 		MSR basepri, r3
 208              	@ 0 "" 2
 209              	.LVL10:
 210              		.loc 4 493 3 is_stmt 0 view .LVU61
 211              		.thumb
 212              		.syntax unified
 213              	.LBE80:
 214              	.LBE79:
 215              	.LBE78:
 216              	.LBE77:
 217              	.LBE76:
 167:lib/chibios/os/oslib/src/chmempools.c **** 
 168:lib/chibios/os/oslib/src/chmempools.c ****   return objp;
 218              		.loc 1 168 3 is_stmt 1 view .LVU62
 169:lib/chibios/os/oslib/src/chmempools.c **** }
 219              		.loc 1 169 1 is_stmt 0 view .LVU63
 220 0012 08BD     		pop	{r3, pc}
 221              		.cfi_endproc
 222              	.LFE292:
 224              		.section	.text.chPoolFreeI,"ax",%progbits
 225              		.align	1
 226              		.global	chPoolFreeI
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu fpv4-sp-d16
 232              	chPoolFreeI:
 233              	.LVL11:
 234              	.LFB293:
 170:lib/chibios/os/oslib/src/chmempools.c **** 
 171:lib/chibios/os/oslib/src/chmempools.c **** /**
 172:lib/chibios/os/oslib/src/chmempools.c ****  * @brief   Releases an object into a memory pool.
 173:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The memory pool must already be initialized.
 174:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The freed object must be of the right size for the specified
 175:lib/chibios/os/oslib/src/chmempools.c ****  *          memory pool.
 176:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The added object must be properly aligned.
 177:lib/chibios/os/oslib/src/chmempools.c ****  *
 178:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 179:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] objp      the pointer to the object to be released
 180:lib/chibios/os/oslib/src/chmempools.c ****  *
 181:lib/chibios/os/oslib/src/chmempools.c ****  * @iclass
 182:lib/chibios/os/oslib/src/chmempools.c ****  */
 183:lib/chibios/os/oslib/src/chmempools.c **** void chPoolFreeI(memory_pool_t *mp, void *objp) {
 235              		.loc 1 183 49 is_stmt 1 view -0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              		@ link register save eliminated.
 184:lib/chibios/os/oslib/src/chmempools.c ****   struct pool_header *php = objp;
 240              		.loc 1 184 3 view .LVU65
 185:lib/chibios/os/oslib/src/chmempools.c **** 
 186:lib/chibios/os/oslib/src/chmempools.c ****   chDbgCheckClassI();
 241              		.loc 1 186 21 view .LVU66
 187:lib/chibios/os/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) &&
 242              		.loc 1 187 3 view .LVU67
 243              		.loc 1 187 3 view .LVU68
 244              		.loc 1 187 3 view .LVU69
 188:lib/chibios/os/oslib/src/chmempools.c ****              (objp != NULL) &&
 189:lib/chibios/os/oslib/src/chmempools.c ****              MEM_IS_ALIGNED(objp, mp->align));
 190:lib/chibios/os/oslib/src/chmempools.c **** 
 191:lib/chibios/os/oslib/src/chmempools.c ****   php->next = mp->next;
 245              		.loc 1 191 3 view .LVU70
 246              		.loc 1 191 13 is_stmt 0 view .LVU71
 247 0000 0368     		ldr	r3, [r0]
 248 0002 0B60     		str	r3, [r1]
 192:lib/chibios/os/oslib/src/chmempools.c ****   mp->next = php;
 249              		.loc 1 192 3 is_stmt 1 view .LVU72
 250              		.loc 1 192 12 is_stmt 0 view .LVU73
 251 0004 0160     		str	r1, [r0]
 193:lib/chibios/os/oslib/src/chmempools.c **** }
 252              		.loc 1 193 1 view .LVU74
 253 0006 7047     		bx	lr
 254              		.cfi_endproc
 255              	.LFE293:
 257              		.section	.text.chPoolFree,"ax",%progbits
 258              		.align	1
 259              		.global	chPoolFree
 260              		.syntax unified
 261              		.thumb
 262              		.thumb_func
 263              		.fpu fpv4-sp-d16
 265              	chPoolFree:
 266              	.LVL12:
 267              	.LFB294:
 194:lib/chibios/os/oslib/src/chmempools.c **** 
 195:lib/chibios/os/oslib/src/chmempools.c **** /**
 196:lib/chibios/os/oslib/src/chmempools.c ****  * @brief   Releases an object into a memory pool.
 197:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The memory pool must already be initialized.
 198:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The freed object must be of the right size for the specified
 199:lib/chibios/os/oslib/src/chmempools.c ****  *          memory pool.
 200:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The added object must be properly aligned.
 201:lib/chibios/os/oslib/src/chmempools.c ****  *
 202:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 203:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] objp      the pointer to the object to be released
 204:lib/chibios/os/oslib/src/chmempools.c ****  *
 205:lib/chibios/os/oslib/src/chmempools.c ****  * @api
 206:lib/chibios/os/oslib/src/chmempools.c ****  */
 207:lib/chibios/os/oslib/src/chmempools.c **** void chPoolFree(memory_pool_t *mp, void *objp) {
 268              		.loc 1 207 48 is_stmt 1 view -0
 269              		.cfi_startproc
 270              		@ args = 0, pretend = 0, frame = 0
 271              		@ frame_needed = 0, uses_anonymous_args = 0
 272              		@ link register save eliminated.
 208:lib/chibios/os/oslib/src/chmempools.c **** 
 209:lib/chibios/os/oslib/src/chmempools.c ****   chSysLock();
 273              		.loc 1 209 3 view .LVU76
 274              	.LBB81:
 275              	.LBI81:
 355:./lib/chibios/os/rt/include/chsys.h **** 
 276              		.loc 2 355 20 view .LVU77
 357:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 277              		.loc 2 357 3 view .LVU78
 278              	.LBB82:
 279              	.LBI82:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 280              		.loc 3 669 27 view .LVU79
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 281              		.loc 3 677 3 view .LVU80
 282              	.LBB83:
 283              	.LBI83:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 284              		.loc 4 491 27 view .LVU81
 285              	.LBB84:
 286              		.loc 4 493 3 view .LVU82
 287 0000 2023     		movs	r3, #32
 288              		.syntax unified
 289              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 290 0002 83F31188 		MSR basepri, r3
 291              	@ 0 "" 2
 292              	.LVL13:
 293              		.loc 4 493 3 is_stmt 0 view .LVU83
 294              		.thumb
 295              		.syntax unified
 296              	.LBE84:
 297              	.LBE83:
 298              	.LBE82:
 358:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 299              		.loc 2 358 34 is_stmt 1 view .LVU84
 359:./lib/chibios/os/rt/include/chsys.h **** }
 300              		.loc 2 359 20 view .LVU85
 301              	.LBE81:
 210:lib/chibios/os/oslib/src/chmempools.c ****   chPoolFreeI(mp, objp);
 302              		.loc 1 210 3 view .LVU86
 303              	.LBB85:
 304              	.LBI85:
 183:lib/chibios/os/oslib/src/chmempools.c ****   struct pool_header *php = objp;
 305              		.loc 1 183 6 view .LVU87
 306              	.LBB86:
 184:lib/chibios/os/oslib/src/chmempools.c **** 
 307              		.loc 1 184 3 view .LVU88
 186:lib/chibios/os/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) &&
 308              		.loc 1 186 21 view .LVU89
 187:lib/chibios/os/oslib/src/chmempools.c ****              (objp != NULL) &&
 309              		.loc 1 187 3 view .LVU90
 187:lib/chibios/os/oslib/src/chmempools.c ****              (objp != NULL) &&
 310              		.loc 1 187 3 view .LVU91
 187:lib/chibios/os/oslib/src/chmempools.c ****              (objp != NULL) &&
 311              		.loc 1 187 3 view .LVU92
 191:lib/chibios/os/oslib/src/chmempools.c ****   mp->next = php;
 312              		.loc 1 191 3 view .LVU93
 191:lib/chibios/os/oslib/src/chmempools.c ****   mp->next = php;
 313              		.loc 1 191 13 is_stmt 0 view .LVU94
 314 0006 0368     		ldr	r3, [r0]
 315 0008 0B60     		str	r3, [r1]
 192:lib/chibios/os/oslib/src/chmempools.c **** }
 316              		.loc 1 192 3 is_stmt 1 view .LVU95
 192:lib/chibios/os/oslib/src/chmempools.c **** }
 317              		.loc 1 192 12 is_stmt 0 view .LVU96
 318 000a 0160     		str	r1, [r0]
 319              	.LVL14:
 192:lib/chibios/os/oslib/src/chmempools.c **** }
 320              		.loc 1 192 12 view .LVU97
 321              	.LBE86:
 322              	.LBE85:
 211:lib/chibios/os/oslib/src/chmempools.c ****   chSysUnlock();
 323              		.loc 1 211 3 is_stmt 1 view .LVU98
 324              	.LBB87:
 325              	.LBI87:
 367:./lib/chibios/os/rt/include/chsys.h **** 
 326              		.loc 2 367 20 view .LVU99
 327              	.LBB88:
 369:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 328              		.loc 2 369 22 view .LVU100
 370:./lib/chibios/os/rt/include/chsys.h **** 
 329              		.loc 2 370 33 view .LVU101
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 330              		.loc 2 376 3 view .LVU102
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 331              		.loc 2 376 3 view .LVU103
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 332              		.loc 2 376 3 view .LVU104
 333              		.loc 2 380 3 view .LVU105
 334              	.LBB89:
 335              	.LBI89:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 336              		.loc 3 693 27 view .LVU106
 337              		.loc 3 696 3 view .LVU107
 338              	.LBB90:
 339              	.LBI90:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 340              		.loc 4 491 27 view .LVU108
 341              	.LBB91:
 342              		.loc 4 493 3 view .LVU109
 343 000c 0023     		movs	r3, #0
 344              		.syntax unified
 345              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 346 000e 83F31188 		MSR basepri, r3
 347              	@ 0 "" 2
 348              	.LVL15:
 349              		.loc 4 493 3 is_stmt 0 view .LVU110
 350              		.thumb
 351              		.syntax unified
 352              	.LBE91:
 353              	.LBE90:
 354              	.LBE89:
 355              	.LBE88:
 356              	.LBE87:
 212:lib/chibios/os/oslib/src/chmempools.c **** }
 357              		.loc 1 212 1 view .LVU111
 358 0012 7047     		bx	lr
 359              		.cfi_endproc
 360              	.LFE294:
 362              		.section	.text.chPoolLoadArray,"ax",%progbits
 363              		.align	1
 364              		.global	chPoolLoadArray
 365              		.syntax unified
 366              		.thumb
 367              		.thumb_func
 368              		.fpu fpv4-sp-d16
 370              	chPoolLoadArray:
 371              	.LVL16:
 372              	.LFB290:
 106:lib/chibios/os/oslib/src/chmempools.c **** 
 373              		.loc 1 106 60 is_stmt 1 view -0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 106:lib/chibios/os/oslib/src/chmempools.c **** 
 377              		.loc 1 106 60 is_stmt 0 view .LVU113
 378 0000 08B5     		push	{r3, lr}
 379              		.cfi_def_cfa_offset 8
 380              		.cfi_offset 3, -8
 381              		.cfi_offset 14, -4
 108:lib/chibios/os/oslib/src/chmempools.c **** 
 382              		.loc 1 108 3 is_stmt 1 view .LVU114
 108:lib/chibios/os/oslib/src/chmempools.c **** 
 383              		.loc 1 108 3 view .LVU115
 108:lib/chibios/os/oslib/src/chmempools.c **** 
 384              		.loc 1 108 3 view .LVU116
 110:lib/chibios/os/oslib/src/chmempools.c ****     chPoolAdd(mp, p);
 385              		.loc 1 110 3 view .LVU117
 386              	.L12:
 110:lib/chibios/os/oslib/src/chmempools.c ****     chPoolAdd(mp, p);
 387              		.loc 1 110 12 view .LVU118
 388 0002 02B9     		cbnz	r2, .L13
 117:lib/chibios/os/oslib/src/chmempools.c **** 
 389              		.loc 1 117 1 is_stmt 0 view .LVU119
 390 0004 08BD     		pop	{r3, pc}
 391              	.L13:
 111:lib/chibios/os/oslib/src/chmempools.c ****     /*lint -save -e9087 [11.3] Safe cast.*/
 392              		.loc 1 111 5 is_stmt 1 view .LVU120
 393              	.LVL17:
 394              	.LBB92:
 395              	.LBI92:
 396              		.file 5 "./lib/chibios/os/oslib/include/chmempools.h"
   1:./lib/chibios/os/oslib/include/chmempools.h **** /*
   2:./lib/chibios/os/oslib/include/chmempools.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/oslib/include/chmempools.h **** 
   4:./lib/chibios/os/oslib/include/chmempools.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/oslib/include/chmempools.h **** 
   6:./lib/chibios/os/oslib/include/chmempools.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/oslib/include/chmempools.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/oslib/include/chmempools.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/oslib/include/chmempools.h ****     (at your option) any later version.
  10:./lib/chibios/os/oslib/include/chmempools.h **** 
  11:./lib/chibios/os/oslib/include/chmempools.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/oslib/include/chmempools.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/oslib/include/chmempools.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/oslib/include/chmempools.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/oslib/include/chmempools.h **** 
  16:./lib/chibios/os/oslib/include/chmempools.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/oslib/include/chmempools.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/oslib/include/chmempools.h **** */
  19:./lib/chibios/os/oslib/include/chmempools.h **** 
  20:./lib/chibios/os/oslib/include/chmempools.h **** /**
  21:./lib/chibios/os/oslib/include/chmempools.h ****  * @file    oslib/include/chmempools.h
  22:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Memory Pools macros and structures.
  23:./lib/chibios/os/oslib/include/chmempools.h ****  *
  24:./lib/chibios/os/oslib/include/chmempools.h ****  * @addtogroup oslib_mempools
  25:./lib/chibios/os/oslib/include/chmempools.h ****  * @{
  26:./lib/chibios/os/oslib/include/chmempools.h ****  */
  27:./lib/chibios/os/oslib/include/chmempools.h **** 
  28:./lib/chibios/os/oslib/include/chmempools.h **** #ifndef CHMEMPOOLS_H
  29:./lib/chibios/os/oslib/include/chmempools.h **** #define CHMEMPOOLS_H
  30:./lib/chibios/os/oslib/include/chmempools.h **** 
  31:./lib/chibios/os/oslib/include/chmempools.h **** #if (CH_CFG_USE_MEMPOOLS == TRUE) || defined(__DOXYGEN__)
  32:./lib/chibios/os/oslib/include/chmempools.h **** 
  33:./lib/chibios/os/oslib/include/chmempools.h **** /*===========================================================================*/
  34:./lib/chibios/os/oslib/include/chmempools.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/oslib/include/chmempools.h **** /*===========================================================================*/
  36:./lib/chibios/os/oslib/include/chmempools.h **** 
  37:./lib/chibios/os/oslib/include/chmempools.h **** /*===========================================================================*/
  38:./lib/chibios/os/oslib/include/chmempools.h **** /* Module pre-compile time settings.                                         */
  39:./lib/chibios/os/oslib/include/chmempools.h **** /*===========================================================================*/
  40:./lib/chibios/os/oslib/include/chmempools.h **** 
  41:./lib/chibios/os/oslib/include/chmempools.h **** /*===========================================================================*/
  42:./lib/chibios/os/oslib/include/chmempools.h **** /* Derived constants and error checks.                                       */
  43:./lib/chibios/os/oslib/include/chmempools.h **** /*===========================================================================*/
  44:./lib/chibios/os/oslib/include/chmempools.h **** 
  45:./lib/chibios/os/oslib/include/chmempools.h **** #if CH_CFG_USE_MEMCORE == FALSE
  46:./lib/chibios/os/oslib/include/chmempools.h **** #error "CH_CFG_USE_MEMPOOLS requires CH_CFG_USE_MEMCORE"
  47:./lib/chibios/os/oslib/include/chmempools.h **** #endif
  48:./lib/chibios/os/oslib/include/chmempools.h **** 
  49:./lib/chibios/os/oslib/include/chmempools.h **** /*===========================================================================*/
  50:./lib/chibios/os/oslib/include/chmempools.h **** /* Module data structures and types.                                         */
  51:./lib/chibios/os/oslib/include/chmempools.h **** /*===========================================================================*/
  52:./lib/chibios/os/oslib/include/chmempools.h **** 
  53:./lib/chibios/os/oslib/include/chmempools.h **** /**
  54:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Memory pool free object header.
  55:./lib/chibios/os/oslib/include/chmempools.h ****  */
  56:./lib/chibios/os/oslib/include/chmempools.h **** struct pool_header {
  57:./lib/chibios/os/oslib/include/chmempools.h ****   struct pool_header    *next;          /**< @brief Pointer to the next pool
  58:./lib/chibios/os/oslib/include/chmempools.h ****                                                     header in the list.     */
  59:./lib/chibios/os/oslib/include/chmempools.h **** };
  60:./lib/chibios/os/oslib/include/chmempools.h **** 
  61:./lib/chibios/os/oslib/include/chmempools.h **** /**
  62:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Memory pool descriptor.
  63:./lib/chibios/os/oslib/include/chmempools.h ****  */
  64:./lib/chibios/os/oslib/include/chmempools.h **** typedef struct {
  65:./lib/chibios/os/oslib/include/chmempools.h ****   struct pool_header    *next;          /**< @brief Pointer to the header.  */
  66:./lib/chibios/os/oslib/include/chmempools.h ****   size_t                object_size;    /**< @brief Memory pool objects
  67:./lib/chibios/os/oslib/include/chmempools.h ****                                                     size.                   */
  68:./lib/chibios/os/oslib/include/chmempools.h ****   unsigned              align;          /**< @brief Required alignment.     */
  69:./lib/chibios/os/oslib/include/chmempools.h ****   memgetfunc_t          provider;       /**< @brief Memory blocks provider
  70:./lib/chibios/os/oslib/include/chmempools.h ****                                                     for this pool.          */
  71:./lib/chibios/os/oslib/include/chmempools.h **** } memory_pool_t;
  72:./lib/chibios/os/oslib/include/chmempools.h **** 
  73:./lib/chibios/os/oslib/include/chmempools.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
  74:./lib/chibios/os/oslib/include/chmempools.h **** /**
  75:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Guarded memory pool descriptor.
  76:./lib/chibios/os/oslib/include/chmempools.h ****  */
  77:./lib/chibios/os/oslib/include/chmempools.h **** typedef struct {
  78:./lib/chibios/os/oslib/include/chmempools.h ****   semaphore_t           sem;            /**< @brief Counter semaphore guarding
  79:./lib/chibios/os/oslib/include/chmempools.h ****                                                     the memory pool.        */
  80:./lib/chibios/os/oslib/include/chmempools.h ****   memory_pool_t         pool;           /**< @brief The memory pool itself. */
  81:./lib/chibios/os/oslib/include/chmempools.h **** } guarded_memory_pool_t;
  82:./lib/chibios/os/oslib/include/chmempools.h **** #endif /* CH_CFG_USE_SEMAPHORES == TRUE */
  83:./lib/chibios/os/oslib/include/chmempools.h **** 
  84:./lib/chibios/os/oslib/include/chmempools.h **** /*===========================================================================*/
  85:./lib/chibios/os/oslib/include/chmempools.h **** /* Module macros.                                                            */
  86:./lib/chibios/os/oslib/include/chmempools.h **** /*===========================================================================*/
  87:./lib/chibios/os/oslib/include/chmempools.h **** 
  88:./lib/chibios/os/oslib/include/chmempools.h **** /**
  89:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Data part of a static memory pool initializer.
  90:./lib/chibios/os/oslib/include/chmempools.h ****  * @details This macro should be used when statically initializing a
  91:./lib/chibios/os/oslib/include/chmempools.h ****  *          memory pool that is part of a bigger structure.
  92:./lib/chibios/os/oslib/include/chmempools.h ****  *
  93:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] name      the name of the memory pool variable
  94:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
  95:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] align     required memory alignment
  96:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] provider  memory provider function for the memory pool
  97:./lib/chibios/os/oslib/include/chmempools.h ****  */
  98:./lib/chibios/os/oslib/include/chmempools.h **** #define _MEMORYPOOL_DATA(name, size, align, provider)                       \
  99:./lib/chibios/os/oslib/include/chmempools.h ****   {NULL, size, align, provider}
 100:./lib/chibios/os/oslib/include/chmempools.h **** 
 101:./lib/chibios/os/oslib/include/chmempools.h **** /**
 102:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Static memory pool initializer.
 103:./lib/chibios/os/oslib/include/chmempools.h ****  * @details Statically initialized memory pools require no explicit
 104:./lib/chibios/os/oslib/include/chmempools.h ****  *          initialization using @p chPoolInit().
 105:./lib/chibios/os/oslib/include/chmempools.h ****  *
 106:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] name      the name of the memory pool variable
 107:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
 108:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] align     required memory alignment
 109:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] provider  memory provider function for the memory pool or @p NULL
 110:./lib/chibios/os/oslib/include/chmempools.h ****  *                      if the pool is not allowed to grow automatically
 111:./lib/chibios/os/oslib/include/chmempools.h ****  */
 112:./lib/chibios/os/oslib/include/chmempools.h **** #define MEMORYPOOL_DECL(name, size, align, provider)                        \
 113:./lib/chibios/os/oslib/include/chmempools.h ****   memory_pool_t name = _MEMORYPOOL_DATA(name, size, align, provider)
 114:./lib/chibios/os/oslib/include/chmempools.h **** 
 115:./lib/chibios/os/oslib/include/chmempools.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 116:./lib/chibios/os/oslib/include/chmempools.h **** /**
 117:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Data part of a static guarded memory pool initializer.
 118:./lib/chibios/os/oslib/include/chmempools.h ****  * @details This macro should be used when statically initializing a
 119:./lib/chibios/os/oslib/include/chmempools.h ****  *          memory pool that is part of a bigger structure.
 120:./lib/chibios/os/oslib/include/chmempools.h ****  *
 121:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] name      the name of the memory pool variable
 122:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
 123:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] align     required memory alignment
 124:./lib/chibios/os/oslib/include/chmempools.h ****  */
 125:./lib/chibios/os/oslib/include/chmempools.h **** #define _GUARDEDMEMORYPOOL_DATA(name, size, align) {                        \
 126:./lib/chibios/os/oslib/include/chmempools.h ****   _SEMAPHORE_DATA(name.sem, (cnt_t)0),                                      \
 127:./lib/chibios/os/oslib/include/chmempools.h ****   _MEMORYPOOL_DATA(NULL, size, align, NULL)                                 \
 128:./lib/chibios/os/oslib/include/chmempools.h **** }
 129:./lib/chibios/os/oslib/include/chmempools.h **** 
 130:./lib/chibios/os/oslib/include/chmempools.h **** /**
 131:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Static guarded memory pool initializer.
 132:./lib/chibios/os/oslib/include/chmempools.h ****  * @details Statically initialized guarded memory pools require no explicit
 133:./lib/chibios/os/oslib/include/chmempools.h ****  *          initialization using @p chGuardedPoolInit().
 134:./lib/chibios/os/oslib/include/chmempools.h ****  *
 135:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] name      the name of the guarded memory pool variable
 136:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
 137:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] align     required memory alignment
 138:./lib/chibios/os/oslib/include/chmempools.h ****  */
 139:./lib/chibios/os/oslib/include/chmempools.h **** #define GUARDEDMEMORYPOOL_DECL(name, size, align)                           \
 140:./lib/chibios/os/oslib/include/chmempools.h ****   guarded_memory_pool_t name = _GUARDEDMEMORYPOOL_DATA(name, size, align)
 141:./lib/chibios/os/oslib/include/chmempools.h **** #endif /* CH_CFG_USE_SEMAPHORES == TRUE */
 142:./lib/chibios/os/oslib/include/chmempools.h **** 
 143:./lib/chibios/os/oslib/include/chmempools.h **** /*===========================================================================*/
 144:./lib/chibios/os/oslib/include/chmempools.h **** /* External declarations.                                                    */
 145:./lib/chibios/os/oslib/include/chmempools.h **** /*===========================================================================*/
 146:./lib/chibios/os/oslib/include/chmempools.h **** 
 147:./lib/chibios/os/oslib/include/chmempools.h **** #ifdef __cplusplus
 148:./lib/chibios/os/oslib/include/chmempools.h **** extern "C" {
 149:./lib/chibios/os/oslib/include/chmempools.h **** #endif
 150:./lib/chibios/os/oslib/include/chmempools.h ****   void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
 151:./lib/chibios/os/oslib/include/chmempools.h ****                                unsigned align, memgetfunc_t provider);
 152:./lib/chibios/os/oslib/include/chmempools.h ****   void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n);
 153:./lib/chibios/os/oslib/include/chmempools.h ****   void *chPoolAllocI(memory_pool_t *mp);
 154:./lib/chibios/os/oslib/include/chmempools.h ****   void *chPoolAlloc(memory_pool_t *mp);
 155:./lib/chibios/os/oslib/include/chmempools.h ****   void chPoolFreeI(memory_pool_t *mp, void *objp);
 156:./lib/chibios/os/oslib/include/chmempools.h ****   void chPoolFree(memory_pool_t *mp, void *objp);
 157:./lib/chibios/os/oslib/include/chmempools.h **** #if CH_CFG_USE_SEMAPHORES == TRUE
 158:./lib/chibios/os/oslib/include/chmempools.h ****   void chGuardedPoolObjectInitAligned(guarded_memory_pool_t *gmp,
 159:./lib/chibios/os/oslib/include/chmempools.h ****                                       size_t size,
 160:./lib/chibios/os/oslib/include/chmempools.h ****                                       unsigned align);
 161:./lib/chibios/os/oslib/include/chmempools.h ****   void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n);
 162:./lib/chibios/os/oslib/include/chmempools.h ****   void *chGuardedPoolAllocTimeoutS(guarded_memory_pool_t *gmp,
 163:./lib/chibios/os/oslib/include/chmempools.h ****                                    sysinterval_t timeout);
 164:./lib/chibios/os/oslib/include/chmempools.h ****   void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 165:./lib/chibios/os/oslib/include/chmempools.h ****                                   sysinterval_t timeout);
 166:./lib/chibios/os/oslib/include/chmempools.h ****   void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp);
 167:./lib/chibios/os/oslib/include/chmempools.h **** #endif
 168:./lib/chibios/os/oslib/include/chmempools.h **** #ifdef __cplusplus
 169:./lib/chibios/os/oslib/include/chmempools.h **** }
 170:./lib/chibios/os/oslib/include/chmempools.h **** #endif
 171:./lib/chibios/os/oslib/include/chmempools.h **** 
 172:./lib/chibios/os/oslib/include/chmempools.h **** /*===========================================================================*/
 173:./lib/chibios/os/oslib/include/chmempools.h **** /* Module inline functions.                                                  */
 174:./lib/chibios/os/oslib/include/chmempools.h **** /*===========================================================================*/
 175:./lib/chibios/os/oslib/include/chmempools.h **** 
 176:./lib/chibios/os/oslib/include/chmempools.h **** /**
 177:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Initializes an empty memory pool.
 178:./lib/chibios/os/oslib/include/chmempools.h ****  *
 179:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[out] mp       pointer to a @p memory_pool_t structure
 180:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] size      the size of the objects contained in this memory pool,
 181:./lib/chibios/os/oslib/include/chmempools.h ****  *                      the minimum accepted size is the size of a pointer to
 182:./lib/chibios/os/oslib/include/chmempools.h ****  *                      void.
 183:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] provider  memory provider function for the memory pool or
 184:./lib/chibios/os/oslib/include/chmempools.h ****  *                      @p NULL if the pool is not allowed to grow
 185:./lib/chibios/os/oslib/include/chmempools.h ****  *                      automatically
 186:./lib/chibios/os/oslib/include/chmempools.h ****  *
 187:./lib/chibios/os/oslib/include/chmempools.h ****  * @init
 188:./lib/chibios/os/oslib/include/chmempools.h ****  */
 189:./lib/chibios/os/oslib/include/chmempools.h **** static inline void chPoolObjectInit(memory_pool_t *mp,
 190:./lib/chibios/os/oslib/include/chmempools.h ****                                     size_t size,
 191:./lib/chibios/os/oslib/include/chmempools.h ****                                     memgetfunc_t provider) {
 192:./lib/chibios/os/oslib/include/chmempools.h **** 
 193:./lib/chibios/os/oslib/include/chmempools.h ****   chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 194:./lib/chibios/os/oslib/include/chmempools.h **** }
 195:./lib/chibios/os/oslib/include/chmempools.h **** 
 196:./lib/chibios/os/oslib/include/chmempools.h **** /**
 197:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Adds an object to a memory pool.
 198:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The memory pool must be already been initialized.
 199:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The added object must be of the right size for the specified
 200:./lib/chibios/os/oslib/include/chmempools.h ****  *          memory pool.
 201:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The added object must be properly aligned.
 202:./lib/chibios/os/oslib/include/chmempools.h ****  * @note    This function is just an alias for @p chPoolFree() and has been
 203:./lib/chibios/os/oslib/include/chmempools.h ****  *          added for clarity.
 204:./lib/chibios/os/oslib/include/chmempools.h ****  *
 205:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 206:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] objp      the pointer to the object to be added
 207:./lib/chibios/os/oslib/include/chmempools.h ****  *
 208:./lib/chibios/os/oslib/include/chmempools.h ****  * @api
 209:./lib/chibios/os/oslib/include/chmempools.h ****  */
 210:./lib/chibios/os/oslib/include/chmempools.h **** static inline void chPoolAdd(memory_pool_t *mp, void *objp) {
 397              		.loc 5 210 20 view .LVU121
 398              	.LBB93:
 211:./lib/chibios/os/oslib/include/chmempools.h **** 
 212:./lib/chibios/os/oslib/include/chmempools.h ****   chPoolFree(mp, objp);
 399              		.loc 5 212 3 view .LVU122
 400 0006 FFF7FEFF 		bl	chPoolFree
 401              	.LVL18:
 402              		.loc 5 212 3 is_stmt 0 view .LVU123
 403              	.LBE93:
 404              	.LBE92:
 113:lib/chibios/os/oslib/src/chmempools.c ****     /*lint -restore*/
 405              		.loc 1 113 5 is_stmt 1 view .LVU124
 113:lib/chibios/os/oslib/src/chmempools.c ****     /*lint -restore*/
 406              		.loc 1 113 7 is_stmt 0 view .LVU125
 407 000a 4368     		ldr	r3, [r0, #4]
 115:lib/chibios/os/oslib/src/chmempools.c ****   }
 408              		.loc 1 115 6 view .LVU126
 409 000c 013A     		subs	r2, r2, #1
 410              	.LVL19:
 113:lib/chibios/os/oslib/src/chmempools.c ****     /*lint -restore*/
 411              		.loc 1 113 7 view .LVU127
 412 000e 1944     		add	r1, r1, r3
 413              	.LVL20:
 115:lib/chibios/os/oslib/src/chmempools.c ****   }
 414              		.loc 1 115 5 is_stmt 1 view .LVU128
 115:lib/chibios/os/oslib/src/chmempools.c ****   }
 415              		.loc 1 115 5 is_stmt 0 view .LVU129
 416 0010 F7E7     		b	.L12
 417              		.cfi_endproc
 418              	.LFE290:
 420              		.section	.text.chGuardedPoolObjectInitAligned,"ax",%progbits
 421              		.align	1
 422              		.global	chGuardedPoolObjectInitAligned
 423              		.syntax unified
 424              		.thumb
 425              		.thumb_func
 426              		.fpu fpv4-sp-d16
 428              	chGuardedPoolObjectInitAligned:
 429              	.LVL21:
 430              	.LFB295:
 213:lib/chibios/os/oslib/src/chmempools.c **** 
 214:lib/chibios/os/oslib/src/chmempools.c **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 215:lib/chibios/os/oslib/src/chmempools.c **** /**
 216:lib/chibios/os/oslib/src/chmempools.c ****  * @brief   Initializes an empty guarded memory pool.
 217:lib/chibios/os/oslib/src/chmempools.c ****  *
 218:lib/chibios/os/oslib/src/chmempools.c ****  * @param[out] gmp      pointer to a @p guarded_memory_pool_t structure
 219:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] size      the size of the objects contained in this guarded
 220:lib/chibios/os/oslib/src/chmempools.c ****  *                      memory pool, the minimum accepted size is the size
 221:lib/chibios/os/oslib/src/chmempools.c ****  *                      of a pointer to void.
 222:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] align     required memory alignment
 223:lib/chibios/os/oslib/src/chmempools.c ****  *
 224:lib/chibios/os/oslib/src/chmempools.c ****  * @init
 225:lib/chibios/os/oslib/src/chmempools.c ****  */
 226:lib/chibios/os/oslib/src/chmempools.c **** void chGuardedPoolObjectInitAligned(guarded_memory_pool_t *gmp,
 227:lib/chibios/os/oslib/src/chmempools.c ****                                     size_t size,
 228:lib/chibios/os/oslib/src/chmempools.c ****                                     unsigned align) {
 431              		.loc 1 228 53 is_stmt 1 view -0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435              		@ link register save eliminated.
 229:lib/chibios/os/oslib/src/chmempools.c **** 
 230:lib/chibios/os/oslib/src/chmempools.c ****   chPoolObjectInitAligned(&gmp->pool, size, align, NULL);
 436              		.loc 1 230 3 view .LVU131
 437              	.LBB94:
 438              	.LBI94:
  77:lib/chibios/os/oslib/src/chmempools.c ****                              unsigned align, memgetfunc_t provider) {
 439              		.loc 1 77 6 view .LVU132
 440              	.LBB95:
  80:lib/chibios/os/oslib/src/chmempools.c ****              (size >= sizeof(void *)) &&
 441              		.loc 1 80 3 view .LVU133
  80:lib/chibios/os/oslib/src/chmempools.c ****              (size >= sizeof(void *)) &&
 442              		.loc 1 80 3 view .LVU134
  80:lib/chibios/os/oslib/src/chmempools.c ****              (size >= sizeof(void *)) &&
 443              		.loc 1 80 3 view .LVU135
  85:lib/chibios/os/oslib/src/chmempools.c ****   mp->object_size = size;
 444              		.loc 1 85 3 view .LVU136
 445              	.LBE95:
 446              	.LBE94:
 228:lib/chibios/os/oslib/src/chmempools.c **** 
 447              		.loc 1 228 53 is_stmt 0 view .LVU137
 448 0000 10B4     		push	{r4}
 449              		.cfi_def_cfa_offset 4
 450              		.cfi_offset 4, -4
 451              	.LBB97:
 452              	.LBB96:
  85:lib/chibios/os/oslib/src/chmempools.c ****   mp->object_size = size;
 453              		.loc 1 85 12 view .LVU138
 454 0002 0024     		movs	r4, #0
  86:lib/chibios/os/oslib/src/chmempools.c ****   mp->align = align;
 455              		.loc 1 86 19 view .LVU139
 456 0004 C0E90341 		strd	r4, r1, [r0, #12]
  87:lib/chibios/os/oslib/src/chmempools.c ****   mp->provider = provider;
 457              		.loc 1 87 3 is_stmt 1 view .LVU140
  88:lib/chibios/os/oslib/src/chmempools.c **** }
 458              		.loc 1 88 16 is_stmt 0 view .LVU141
 459 0008 C0E90524 		strd	r2, r4, [r0, #20]
 460              	.LVL22:
  88:lib/chibios/os/oslib/src/chmempools.c **** }
 461              		.loc 1 88 16 view .LVU142
 462              	.LBE96:
 463              	.LBE97:
 231:lib/chibios/os/oslib/src/chmempools.c ****   chSemObjectInit(&gmp->sem, (cnt_t)0);
 464              		.loc 1 231 3 is_stmt 1 view .LVU143
 465 000c 2146     		mov	r1, r4
 466              	.LVL23:
 232:lib/chibios/os/oslib/src/chmempools.c **** }
 467              		.loc 1 232 1 is_stmt 0 view .LVU144
 468 000e 5DF8044B 		ldr	r4, [sp], #4
 469              		.cfi_restore 4
 470              		.cfi_def_cfa_offset 0
 231:lib/chibios/os/oslib/src/chmempools.c ****   chSemObjectInit(&gmp->sem, (cnt_t)0);
 471              		.loc 1 231 3 view .LVU145
 472 0012 FFF7FEBF 		b	chSemObjectInit
 473              	.LVL24:
 231:lib/chibios/os/oslib/src/chmempools.c ****   chSemObjectInit(&gmp->sem, (cnt_t)0);
 474              		.loc 1 231 3 view .LVU146
 475              		.cfi_endproc
 476              	.LFE295:
 478              		.section	.text.chGuardedPoolAllocTimeoutS,"ax",%progbits
 479              		.align	1
 480              		.global	chGuardedPoolAllocTimeoutS
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu fpv4-sp-d16
 486              	chGuardedPoolAllocTimeoutS:
 487              	.LVL25:
 488              	.LFB297:
 233:lib/chibios/os/oslib/src/chmempools.c **** 
 234:lib/chibios/os/oslib/src/chmempools.c **** /**
 235:lib/chibios/os/oslib/src/chmempools.c ****  * @brief   Loads a guarded memory pool with an array of static objects.
 236:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must already be initialized.
 237:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The array elements must be of the right size for the specified
 238:lib/chibios/os/oslib/src/chmempools.c ****  *          guarded memory pool.
 239:lib/chibios/os/oslib/src/chmempools.c ****  * @post    The guarded memory pool contains the elements of the input array.
 240:lib/chibios/os/oslib/src/chmempools.c ****  *
 241:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 242:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] p         pointer to the array first element
 243:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] n         number of elements in the array
 244:lib/chibios/os/oslib/src/chmempools.c ****  *
 245:lib/chibios/os/oslib/src/chmempools.c ****  * @api
 246:lib/chibios/os/oslib/src/chmempools.c ****  */
 247:lib/chibios/os/oslib/src/chmempools.c **** void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {
 248:lib/chibios/os/oslib/src/chmempools.c **** 
 249:lib/chibios/os/oslib/src/chmempools.c ****   chDbgCheck((gmp != NULL) && (n != 0U));
 250:lib/chibios/os/oslib/src/chmempools.c **** 
 251:lib/chibios/os/oslib/src/chmempools.c ****   while (n != 0U) {
 252:lib/chibios/os/oslib/src/chmempools.c ****     chGuardedPoolAdd(gmp, p);
 253:lib/chibios/os/oslib/src/chmempools.c ****     /*lint -save -e9087 [11.3] Safe cast.*/
 254:lib/chibios/os/oslib/src/chmempools.c ****     p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 255:lib/chibios/os/oslib/src/chmempools.c ****     /*lint -restore*/
 256:lib/chibios/os/oslib/src/chmempools.c ****     n--;
 257:lib/chibios/os/oslib/src/chmempools.c ****   }
 258:lib/chibios/os/oslib/src/chmempools.c **** }
 259:lib/chibios/os/oslib/src/chmempools.c **** 
 260:lib/chibios/os/oslib/src/chmempools.c **** /**
 261:lib/chibios/os/oslib/src/chmempools.c ****  * @brief   Allocates an object from a guarded memory pool.
 262:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must already be initialized.
 263:lib/chibios/os/oslib/src/chmempools.c ****  *
 264:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 265:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 266:lib/chibios/os/oslib/src/chmempools.c ****  *                      the following special values are allowed:
 267:lib/chibios/os/oslib/src/chmempools.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 268:lib/chibios/os/oslib/src/chmempools.c ****  *                      - @a TIME_INFINITE no timeout.
 269:lib/chibios/os/oslib/src/chmempools.c ****  *                      .
 270:lib/chibios/os/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 271:lib/chibios/os/oslib/src/chmempools.c ****  * @retval NULL         if the operation timed out.
 272:lib/chibios/os/oslib/src/chmempools.c ****  *
 273:lib/chibios/os/oslib/src/chmempools.c ****  * @sclass
 274:lib/chibios/os/oslib/src/chmempools.c ****  */
 275:lib/chibios/os/oslib/src/chmempools.c **** void *chGuardedPoolAllocTimeoutS(guarded_memory_pool_t *gmp,
 276:lib/chibios/os/oslib/src/chmempools.c ****                                  sysinterval_t timeout) {
 489              		.loc 1 276 57 is_stmt 1 view -0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 277:lib/chibios/os/oslib/src/chmempools.c ****   msg_t msg;
 493              		.loc 1 277 3 view .LVU148
 278:lib/chibios/os/oslib/src/chmempools.c **** 
 279:lib/chibios/os/oslib/src/chmempools.c ****   msg = chSemWaitTimeoutS(&gmp->sem, timeout);
 494              		.loc 1 279 3 view .LVU149
 276:lib/chibios/os/oslib/src/chmempools.c ****   msg_t msg;
 495              		.loc 1 276 57 is_stmt 0 view .LVU150
 496 0000 10B5     		push	{r4, lr}
 497              		.cfi_def_cfa_offset 8
 498              		.cfi_offset 4, -8
 499              		.cfi_offset 14, -4
 276:lib/chibios/os/oslib/src/chmempools.c ****   msg_t msg;
 500              		.loc 1 276 57 view .LVU151
 501 0002 0446     		mov	r4, r0
 502              		.loc 1 279 9 view .LVU152
 503 0004 FFF7FEFF 		bl	chSemWaitTimeoutS
 504              	.LVL26:
 280:lib/chibios/os/oslib/src/chmempools.c ****   if (msg != MSG_OK) {
 505              		.loc 1 280 3 is_stmt 1 view .LVU153
 506              		.loc 1 280 6 is_stmt 0 view .LVU154
 507 0008 28B9     		cbnz	r0, .L16
 281:lib/chibios/os/oslib/src/chmempools.c ****     return NULL;
 282:lib/chibios/os/oslib/src/chmempools.c ****   }
 283:lib/chibios/os/oslib/src/chmempools.c **** 
 284:lib/chibios/os/oslib/src/chmempools.c ****   return chPoolAllocI(&gmp->pool);
 508              		.loc 1 284 3 is_stmt 1 view .LVU155
 509              		.loc 1 284 10 is_stmt 0 view .LVU156
 510 000a 04F10C00 		add	r0, r4, #12
 511              	.LVL27:
 285:lib/chibios/os/oslib/src/chmempools.c **** }
 512              		.loc 1 285 1 view .LVU157
 513 000e BDE81040 		pop	{r4, lr}
 514              		.cfi_remember_state
 515              		.cfi_restore 14
 516              		.cfi_restore 4
 517              		.cfi_def_cfa_offset 0
 518              	.LVL28:
 284:lib/chibios/os/oslib/src/chmempools.c **** }
 519              		.loc 1 284 10 view .LVU158
 520 0012 FFF7FEBF 		b	chPoolAllocI
 521              	.LVL29:
 522              	.L16:
 523              		.cfi_restore_state
 524              		.loc 1 285 1 view .LVU159
 525 0016 0020     		movs	r0, #0
 526              	.LVL30:
 527              		.loc 1 285 1 view .LVU160
 528 0018 10BD     		pop	{r4, pc}
 529              		.loc 1 285 1 view .LVU161
 530              		.cfi_endproc
 531              	.LFE297:
 533              		.section	.text.chGuardedPoolAllocTimeout,"ax",%progbits
 534              		.align	1
 535              		.global	chGuardedPoolAllocTimeout
 536              		.syntax unified
 537              		.thumb
 538              		.thumb_func
 539              		.fpu fpv4-sp-d16
 541              	chGuardedPoolAllocTimeout:
 542              	.LVL31:
 543              	.LFB298:
 286:lib/chibios/os/oslib/src/chmempools.c **** 
 287:lib/chibios/os/oslib/src/chmempools.c **** /**
 288:lib/chibios/os/oslib/src/chmempools.c ****  * @brief   Allocates an object from a guarded memory pool.
 289:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must already be initialized.
 290:lib/chibios/os/oslib/src/chmempools.c ****  *
 291:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 292:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 293:lib/chibios/os/oslib/src/chmempools.c ****  *                      the following special values are allowed:
 294:lib/chibios/os/oslib/src/chmempools.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 295:lib/chibios/os/oslib/src/chmempools.c ****  *                      - @a TIME_INFINITE no timeout.
 296:lib/chibios/os/oslib/src/chmempools.c ****  *                      .
 297:lib/chibios/os/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 298:lib/chibios/os/oslib/src/chmempools.c ****  * @retval NULL         if the operation timed out.
 299:lib/chibios/os/oslib/src/chmempools.c ****  *
 300:lib/chibios/os/oslib/src/chmempools.c ****  * @api
 301:lib/chibios/os/oslib/src/chmempools.c ****  */
 302:lib/chibios/os/oslib/src/chmempools.c **** void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 303:lib/chibios/os/oslib/src/chmempools.c ****                                 sysinterval_t timeout) {
 544              		.loc 1 303 56 is_stmt 1 view -0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 304:lib/chibios/os/oslib/src/chmempools.c ****   void *p;
 548              		.loc 1 304 3 view .LVU163
 305:lib/chibios/os/oslib/src/chmempools.c **** 
 306:lib/chibios/os/oslib/src/chmempools.c ****   chSysLock();
 549              		.loc 1 306 3 view .LVU164
 550              	.LBB98:
 551              	.LBI98:
 355:./lib/chibios/os/rt/include/chsys.h **** 
 552              		.loc 2 355 20 view .LVU165
 357:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 553              		.loc 2 357 3 view .LVU166
 554              	.LBB99:
 555              	.LBI99:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 556              		.loc 3 669 27 view .LVU167
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 557              		.loc 3 677 3 view .LVU168
 558              	.LBB100:
 559              	.LBI100:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 560              		.loc 4 491 27 view .LVU169
 561              	.LBB101:
 562              		.loc 4 493 3 view .LVU170
 563              	.LBE101:
 564              	.LBE100:
 565              	.LBE99:
 566              	.LBE98:
 303:lib/chibios/os/oslib/src/chmempools.c ****   void *p;
 567              		.loc 1 303 56 is_stmt 0 view .LVU171
 568 0000 08B5     		push	{r3, lr}
 569              		.cfi_def_cfa_offset 8
 570              		.cfi_offset 3, -8
 571              		.cfi_offset 14, -4
 572              	.LBB105:
 573              	.LBB104:
 574              	.LBB103:
 575              	.LBB102:
 576              		.loc 4 493 3 view .LVU172
 577 0002 2023     		movs	r3, #32
 578              		.syntax unified
 579              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 580 0004 83F31188 		MSR basepri, r3
 581              	@ 0 "" 2
 582              	.LVL32:
 583              		.loc 4 493 3 view .LVU173
 584              		.thumb
 585              		.syntax unified
 586              	.LBE102:
 587              	.LBE103:
 588              	.LBE104:
 358:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 589              		.loc 2 358 34 is_stmt 1 view .LVU174
 359:./lib/chibios/os/rt/include/chsys.h **** }
 590              		.loc 2 359 20 view .LVU175
 591              	.LBE105:
 307:lib/chibios/os/oslib/src/chmempools.c ****   p = chGuardedPoolAllocTimeoutS(gmp, timeout);
 592              		.loc 1 307 3 view .LVU176
 593              		.loc 1 307 7 is_stmt 0 view .LVU177
 594 0008 FFF7FEFF 		bl	chGuardedPoolAllocTimeoutS
 595              	.LVL33:
 308:lib/chibios/os/oslib/src/chmempools.c ****   chSysUnlock();
 596              		.loc 1 308 3 is_stmt 1 view .LVU178
 597              	.LBB106:
 598              	.LBI106:
 367:./lib/chibios/os/rt/include/chsys.h **** 
 599              		.loc 2 367 20 view .LVU179
 600              	.LBB107:
 369:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 601              		.loc 2 369 22 view .LVU180
 370:./lib/chibios/os/rt/include/chsys.h **** 
 602              		.loc 2 370 33 view .LVU181
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 603              		.loc 2 376 3 view .LVU182
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 604              		.loc 2 376 3 view .LVU183
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 605              		.loc 2 376 3 view .LVU184
 606              		.loc 2 380 3 view .LVU185
 607              	.LBB108:
 608              	.LBI108:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 609              		.loc 3 693 27 view .LVU186
 610              		.loc 3 696 3 view .LVU187
 611              	.LBB109:
 612              	.LBI109:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 613              		.loc 4 491 27 view .LVU188
 614              	.LBB110:
 615              		.loc 4 493 3 view .LVU189
 616 000c 0023     		movs	r3, #0
 617              		.syntax unified
 618              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 619 000e 83F31188 		MSR basepri, r3
 620              	@ 0 "" 2
 621              	.LVL34:
 622              		.loc 4 493 3 is_stmt 0 view .LVU190
 623              		.thumb
 624              		.syntax unified
 625              	.LBE110:
 626              	.LBE109:
 627              	.LBE108:
 628              	.LBE107:
 629              	.LBE106:
 309:lib/chibios/os/oslib/src/chmempools.c **** 
 310:lib/chibios/os/oslib/src/chmempools.c ****   return p;
 630              		.loc 1 310 3 is_stmt 1 view .LVU191
 311:lib/chibios/os/oslib/src/chmempools.c **** }
 631              		.loc 1 311 1 is_stmt 0 view .LVU192
 632 0012 08BD     		pop	{r3, pc}
 633              		.cfi_endproc
 634              	.LFE298:
 636              		.section	.text.chGuardedPoolFree,"ax",%progbits
 637              		.align	1
 638              		.global	chGuardedPoolFree
 639              		.syntax unified
 640              		.thumb
 641              		.thumb_func
 642              		.fpu fpv4-sp-d16
 644              	chGuardedPoolFree:
 645              	.LVL35:
 646              	.LFB299:
 312:lib/chibios/os/oslib/src/chmempools.c **** 
 313:lib/chibios/os/oslib/src/chmempools.c **** /**
 314:lib/chibios/os/oslib/src/chmempools.c ****  * @brief   Releases an object into a guarded memory pool.
 315:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must already be initialized.
 316:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The freed object must be of the right size for the specified
 317:lib/chibios/os/oslib/src/chmempools.c ****  *          guarded memory pool.
 318:lib/chibios/os/oslib/src/chmempools.c ****  * @pre     The added object must be properly aligned.
 319:lib/chibios/os/oslib/src/chmempools.c ****  *
 320:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 321:lib/chibios/os/oslib/src/chmempools.c ****  * @param[in] objp      the pointer to the object to be released
 322:lib/chibios/os/oslib/src/chmempools.c ****  *
 323:lib/chibios/os/oslib/src/chmempools.c ****  * @api
 324:lib/chibios/os/oslib/src/chmempools.c ****  */
 325:lib/chibios/os/oslib/src/chmempools.c **** void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {
 647              		.loc 1 325 64 is_stmt 1 view -0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 326:lib/chibios/os/oslib/src/chmempools.c **** 
 327:lib/chibios/os/oslib/src/chmempools.c ****   chSysLock();
 651              		.loc 1 327 3 view .LVU194
 652              	.LBB124:
 653              	.LBI124:
 355:./lib/chibios/os/rt/include/chsys.h **** 
 654              		.loc 2 355 20 view .LVU195
 357:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 655              		.loc 2 357 3 view .LVU196
 656              	.LBB125:
 657              	.LBI125:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 658              		.loc 3 669 27 view .LVU197
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 659              		.loc 3 677 3 view .LVU198
 660              	.LBB126:
 661              	.LBI126:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 662              		.loc 4 491 27 view .LVU199
 663              	.LBB127:
 664              		.loc 4 493 3 view .LVU200
 665              	.LBE127:
 666              	.LBE126:
 667              	.LBE125:
 668              	.LBE124:
 325:lib/chibios/os/oslib/src/chmempools.c **** 
 669              		.loc 1 325 64 is_stmt 0 view .LVU201
 670 0000 08B5     		push	{r3, lr}
 671              		.cfi_def_cfa_offset 8
 672              		.cfi_offset 3, -8
 673              		.cfi_offset 14, -4
 674              	.LBB131:
 675              	.LBB130:
 676              	.LBB129:
 677              	.LBB128:
 678              		.loc 4 493 3 view .LVU202
 679 0002 2022     		movs	r2, #32
 680              		.syntax unified
 681              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 682 0004 82F31188 		MSR basepri, r2
 683              	@ 0 "" 2
 684              	.LVL36:
 685              		.loc 4 493 3 view .LVU203
 686              		.thumb
 687              		.syntax unified
 688              	.LBE128:
 689              	.LBE129:
 690              	.LBE130:
 358:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 691              		.loc 2 358 34 is_stmt 1 view .LVU204
 359:./lib/chibios/os/rt/include/chsys.h **** }
 692              		.loc 2 359 20 view .LVU205
 693              	.LBE131:
 328:lib/chibios/os/oslib/src/chmempools.c ****   chGuardedPoolFreeI(gmp, objp);
 694              		.loc 1 328 3 view .LVU206
 695              	.LBB132:
 696              	.LBI132:
 213:./lib/chibios/os/oslib/include/chmempools.h **** }
 214:./lib/chibios/os/oslib/include/chmempools.h **** 
 215:./lib/chibios/os/oslib/include/chmempools.h **** /**
 216:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Adds an object to a memory pool.
 217:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The memory pool must be already been initialized.
 218:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The added object must be of the right size for the specified
 219:./lib/chibios/os/oslib/include/chmempools.h ****  *          memory pool.
 220:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The added object must be properly aligned.
 221:./lib/chibios/os/oslib/include/chmempools.h ****  * @note    This function is just an alias for @p chPoolFreeI() and has been
 222:./lib/chibios/os/oslib/include/chmempools.h ****  *          added for clarity.
 223:./lib/chibios/os/oslib/include/chmempools.h ****  *
 224:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 225:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] objp      the pointer to the object to be added
 226:./lib/chibios/os/oslib/include/chmempools.h ****  *
 227:./lib/chibios/os/oslib/include/chmempools.h ****  * @iclass
 228:./lib/chibios/os/oslib/include/chmempools.h ****  */
 229:./lib/chibios/os/oslib/include/chmempools.h **** static inline void chPoolAddI(memory_pool_t *mp, void *objp) {
 230:./lib/chibios/os/oslib/include/chmempools.h **** 
 231:./lib/chibios/os/oslib/include/chmempools.h ****   chPoolFreeI(mp, objp);
 232:./lib/chibios/os/oslib/include/chmempools.h **** }
 233:./lib/chibios/os/oslib/include/chmempools.h **** 
 234:./lib/chibios/os/oslib/include/chmempools.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 235:./lib/chibios/os/oslib/include/chmempools.h **** /**
 236:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Initializes an empty guarded memory pool.
 237:./lib/chibios/os/oslib/include/chmempools.h ****  *
 238:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[out] gmp      pointer to a @p guarded_memory_pool_t structure
 239:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] size      the size of the objects contained in this guarded
 240:./lib/chibios/os/oslib/include/chmempools.h ****  *                      memory pool, the minimum accepted size is the size
 241:./lib/chibios/os/oslib/include/chmempools.h ****  *                      of a pointer to void.
 242:./lib/chibios/os/oslib/include/chmempools.h ****  *
 243:./lib/chibios/os/oslib/include/chmempools.h ****  * @init
 244:./lib/chibios/os/oslib/include/chmempools.h ****  */
 245:./lib/chibios/os/oslib/include/chmempools.h **** static inline void chGuardedPoolObjectInit(guarded_memory_pool_t *gmp,
 246:./lib/chibios/os/oslib/include/chmempools.h ****                                            size_t size) {
 247:./lib/chibios/os/oslib/include/chmempools.h **** 
 248:./lib/chibios/os/oslib/include/chmempools.h ****   chGuardedPoolObjectInitAligned(gmp, size, PORT_NATURAL_ALIGN);
 249:./lib/chibios/os/oslib/include/chmempools.h **** }
 250:./lib/chibios/os/oslib/include/chmempools.h **** 
 251:./lib/chibios/os/oslib/include/chmempools.h **** /**
 252:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Gets the count of objects in a guarded memory pool.
 253:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The guarded memory pool must be already been initialized.
 254:./lib/chibios/os/oslib/include/chmempools.h ****  *
 255:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 256:./lib/chibios/os/oslib/include/chmempools.h ****  * @return              The counter of the guard semaphore.
 257:./lib/chibios/os/oslib/include/chmempools.h ****  *
 258:./lib/chibios/os/oslib/include/chmempools.h ****  * @iclass
 259:./lib/chibios/os/oslib/include/chmempools.h ****  */
 260:./lib/chibios/os/oslib/include/chmempools.h **** static inline cnt_t chGuardedPoolGetCounterI(guarded_memory_pool_t *gmp) {
 261:./lib/chibios/os/oslib/include/chmempools.h **** 
 262:./lib/chibios/os/oslib/include/chmempools.h ****   return chSemGetCounterI(&gmp->sem);
 263:./lib/chibios/os/oslib/include/chmempools.h **** }
 264:./lib/chibios/os/oslib/include/chmempools.h **** 
 265:./lib/chibios/os/oslib/include/chmempools.h **** /**
 266:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Allocates an object from a guarded memory pool.
 267:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The guarded memory pool must be already been initialized.
 268:./lib/chibios/os/oslib/include/chmempools.h ****  *
 269:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 270:./lib/chibios/os/oslib/include/chmempools.h ****  * @return              The pointer to the allocated object.
 271:./lib/chibios/os/oslib/include/chmempools.h ****  * @retval NULL         if the pool is empty.
 272:./lib/chibios/os/oslib/include/chmempools.h ****  *
 273:./lib/chibios/os/oslib/include/chmempools.h ****  * @iclass
 274:./lib/chibios/os/oslib/include/chmempools.h ****  */
 275:./lib/chibios/os/oslib/include/chmempools.h **** static inline void *chGuardedPoolAllocI(guarded_memory_pool_t *gmp) {
 276:./lib/chibios/os/oslib/include/chmempools.h ****   void *p;
 277:./lib/chibios/os/oslib/include/chmempools.h **** 
 278:./lib/chibios/os/oslib/include/chmempools.h ****   p = chPoolAllocI(&gmp->pool);
 279:./lib/chibios/os/oslib/include/chmempools.h ****   if (p != NULL) {
 280:./lib/chibios/os/oslib/include/chmempools.h ****     chSemFastWaitI(&gmp->sem);
 281:./lib/chibios/os/oslib/include/chmempools.h ****     chDbgAssert(chSemGetCounterI(&gmp->sem) >= (cnt_t)0,
 282:./lib/chibios/os/oslib/include/chmempools.h ****                 "semaphore out of sync");
 283:./lib/chibios/os/oslib/include/chmempools.h ****   }
 284:./lib/chibios/os/oslib/include/chmempools.h ****   return p;
 285:./lib/chibios/os/oslib/include/chmempools.h **** }
 286:./lib/chibios/os/oslib/include/chmempools.h **** 
 287:./lib/chibios/os/oslib/include/chmempools.h **** /**
 288:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Releases an object into a guarded memory pool.
 289:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The guarded memory pool must already be initialized.
 290:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The freed object must be of the right size for the specified
 291:./lib/chibios/os/oslib/include/chmempools.h ****  *          guarded memory pool.
 292:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The added object must be properly aligned.
 293:./lib/chibios/os/oslib/include/chmempools.h ****  *
 294:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 295:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] objp      the pointer to the object to be released
 296:./lib/chibios/os/oslib/include/chmempools.h ****  *
 297:./lib/chibios/os/oslib/include/chmempools.h ****  * @iclass
 298:./lib/chibios/os/oslib/include/chmempools.h ****  */
 299:./lib/chibios/os/oslib/include/chmempools.h **** static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {
 697              		.loc 5 299 20 view .LVU207
 698              	.LBB133:
 300:./lib/chibios/os/oslib/include/chmempools.h **** 
 301:./lib/chibios/os/oslib/include/chmempools.h ****   chPoolFreeI(&gmp->pool, objp);
 699              		.loc 5 301 3 view .LVU208
 700              	.LBB134:
 701              	.LBI134:
 183:lib/chibios/os/oslib/src/chmempools.c ****   struct pool_header *php = objp;
 702              		.loc 1 183 6 view .LVU209
 703              	.LBB135:
 184:lib/chibios/os/oslib/src/chmempools.c **** 
 704              		.loc 1 184 3 view .LVU210
 186:lib/chibios/os/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) &&
 705              		.loc 1 186 21 view .LVU211
 187:lib/chibios/os/oslib/src/chmempools.c ****              (objp != NULL) &&
 706              		.loc 1 187 3 view .LVU212
 187:lib/chibios/os/oslib/src/chmempools.c ****              (objp != NULL) &&
 707              		.loc 1 187 3 view .LVU213
 187:lib/chibios/os/oslib/src/chmempools.c ****              (objp != NULL) &&
 708              		.loc 1 187 3 view .LVU214
 191:lib/chibios/os/oslib/src/chmempools.c ****   mp->next = php;
 709              		.loc 1 191 3 view .LVU215
 191:lib/chibios/os/oslib/src/chmempools.c ****   mp->next = php;
 710              		.loc 1 191 13 is_stmt 0 view .LVU216
 711 0008 C268     		ldr	r2, [r0, #12]
 712 000a 0A60     		str	r2, [r1]
 192:lib/chibios/os/oslib/src/chmempools.c **** }
 713              		.loc 1 192 3 is_stmt 1 view .LVU217
 192:lib/chibios/os/oslib/src/chmempools.c **** }
 714              		.loc 1 192 12 is_stmt 0 view .LVU218
 715 000c C160     		str	r1, [r0, #12]
 716              	.LVL37:
 192:lib/chibios/os/oslib/src/chmempools.c **** }
 717              		.loc 1 192 12 view .LVU219
 718              	.LBE135:
 719              	.LBE134:
 302:./lib/chibios/os/oslib/include/chmempools.h ****   chSemSignalI(&gmp->sem);
 720              		.loc 5 302 3 is_stmt 1 view .LVU220
 721 000e FFF7FEFF 		bl	chSemSignalI
 722              	.LVL38:
 723              		.loc 5 302 3 is_stmt 0 view .LVU221
 724              	.LBE133:
 725              	.LBE132:
 329:lib/chibios/os/oslib/src/chmempools.c ****   chSchRescheduleS();
 726              		.loc 1 329 3 is_stmt 1 view .LVU222
 727 0012 FFF7FEFF 		bl	chSchRescheduleS
 728              	.LVL39:
 330:lib/chibios/os/oslib/src/chmempools.c ****   chSysUnlock();
 729              		.loc 1 330 3 view .LVU223
 730              	.LBB136:
 731              	.LBI136:
 367:./lib/chibios/os/rt/include/chsys.h **** 
 732              		.loc 2 367 20 view .LVU224
 733              	.LBB137:
 369:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 734              		.loc 2 369 22 view .LVU225
 370:./lib/chibios/os/rt/include/chsys.h **** 
 735              		.loc 2 370 33 view .LVU226
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 736              		.loc 2 376 3 view .LVU227
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 737              		.loc 2 376 3 view .LVU228
 376:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
 738              		.loc 2 376 3 view .LVU229
 739              		.loc 2 380 3 view .LVU230
 740              	.LBB138:
 741              	.LBI138:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 742              		.loc 3 693 27 view .LVU231
 743              		.loc 3 696 3 view .LVU232
 744              	.LBB139:
 745              	.LBI139:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 746              		.loc 4 491 27 view .LVU233
 747              	.LBB140:
 748              		.loc 4 493 3 view .LVU234
 749 0016 0023     		movs	r3, #0
 750              		.syntax unified
 751              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 752 0018 83F31188 		MSR basepri, r3
 753              	@ 0 "" 2
 754              	.LVL40:
 755              		.loc 4 493 3 is_stmt 0 view .LVU235
 756              		.thumb
 757              		.syntax unified
 758              	.LBE140:
 759              	.LBE139:
 760              	.LBE138:
 761              	.LBE137:
 762              	.LBE136:
 331:lib/chibios/os/oslib/src/chmempools.c **** }
 763              		.loc 1 331 1 view .LVU236
 764 001c 08BD     		pop	{r3, pc}
 765              		.cfi_endproc
 766              	.LFE299:
 768              		.section	.text.chGuardedPoolLoadArray,"ax",%progbits
 769              		.align	1
 770              		.global	chGuardedPoolLoadArray
 771              		.syntax unified
 772              		.thumb
 773              		.thumb_func
 774              		.fpu fpv4-sp-d16
 776              	chGuardedPoolLoadArray:
 777              	.LVL41:
 778              	.LFB296:
 247:lib/chibios/os/oslib/src/chmempools.c **** 
 779              		.loc 1 247 76 is_stmt 1 view -0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 0
 782              		@ frame_needed = 0, uses_anonymous_args = 0
 247:lib/chibios/os/oslib/src/chmempools.c **** 
 783              		.loc 1 247 76 is_stmt 0 view .LVU238
 784 0000 70B5     		push	{r4, r5, r6, lr}
 785              		.cfi_def_cfa_offset 16
 786              		.cfi_offset 4, -16
 787              		.cfi_offset 5, -12
 788              		.cfi_offset 6, -8
 789              		.cfi_offset 14, -4
 790 0002 0646     		mov	r6, r0
 791 0004 0D46     		mov	r5, r1
 792 0006 1446     		mov	r4, r2
 249:lib/chibios/os/oslib/src/chmempools.c **** 
 793              		.loc 1 249 3 is_stmt 1 view .LVU239
 249:lib/chibios/os/oslib/src/chmempools.c **** 
 794              		.loc 1 249 3 view .LVU240
 249:lib/chibios/os/oslib/src/chmempools.c **** 
 795              		.loc 1 249 3 view .LVU241
 251:lib/chibios/os/oslib/src/chmempools.c ****     chGuardedPoolAdd(gmp, p);
 796              		.loc 1 251 3 view .LVU242
 797              	.LVL42:
 798              	.L20:
 251:lib/chibios/os/oslib/src/chmempools.c ****     chGuardedPoolAdd(gmp, p);
 799              		.loc 1 251 12 view .LVU243
 800 0008 04B9     		cbnz	r4, .L21
 258:lib/chibios/os/oslib/src/chmempools.c **** 
 801              		.loc 1 258 1 is_stmt 0 view .LVU244
 802 000a 70BD     		pop	{r4, r5, r6, pc}
 803              	.LVL43:
 804              	.L21:
 252:lib/chibios/os/oslib/src/chmempools.c ****     /*lint -save -e9087 [11.3] Safe cast.*/
 805              		.loc 1 252 5 is_stmt 1 view .LVU245
 806              	.LBB141:
 807              	.LBI141:
 303:./lib/chibios/os/oslib/include/chmempools.h **** }
 304:./lib/chibios/os/oslib/include/chmempools.h **** 
 305:./lib/chibios/os/oslib/include/chmempools.h **** /**
 306:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Releases an object into a guarded memory pool.
 307:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The guarded memory pool must already be initialized.
 308:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The freed object must be of the right size for the specified
 309:./lib/chibios/os/oslib/include/chmempools.h ****  *          guarded memory pool.
 310:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The added object must be properly aligned.
 311:./lib/chibios/os/oslib/include/chmempools.h ****  *
 312:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 313:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] objp      the pointer to the object to be released
 314:./lib/chibios/os/oslib/include/chmempools.h ****  *
 315:./lib/chibios/os/oslib/include/chmempools.h ****  * @sclass
 316:./lib/chibios/os/oslib/include/chmempools.h ****  */
 317:./lib/chibios/os/oslib/include/chmempools.h **** static inline void chGuardedPoolFreeS(guarded_memory_pool_t *gmp, void *objp) {
 318:./lib/chibios/os/oslib/include/chmempools.h **** 
 319:./lib/chibios/os/oslib/include/chmempools.h ****   chGuardedPoolFreeI(gmp, objp);
 320:./lib/chibios/os/oslib/include/chmempools.h ****   chSchRescheduleS();
 321:./lib/chibios/os/oslib/include/chmempools.h **** }
 322:./lib/chibios/os/oslib/include/chmempools.h **** 
 323:./lib/chibios/os/oslib/include/chmempools.h **** /**
 324:./lib/chibios/os/oslib/include/chmempools.h ****  * @brief   Adds an object to a guarded memory pool.
 325:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The guarded memory pool must be already been initialized.
 326:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The added object must be of the right size for the specified
 327:./lib/chibios/os/oslib/include/chmempools.h ****  *          guarded memory pool.
 328:./lib/chibios/os/oslib/include/chmempools.h ****  * @pre     The added object must be properly aligned.
 329:./lib/chibios/os/oslib/include/chmempools.h ****  * @note    This function is just an alias for @p chGuardedPoolFree() and
 330:./lib/chibios/os/oslib/include/chmempools.h ****  *          has been added for clarity.
 331:./lib/chibios/os/oslib/include/chmempools.h ****  *
 332:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 333:./lib/chibios/os/oslib/include/chmempools.h ****  * @param[in] objp      the pointer to the object to be added
 334:./lib/chibios/os/oslib/include/chmempools.h ****  *
 335:./lib/chibios/os/oslib/include/chmempools.h ****  * @api
 336:./lib/chibios/os/oslib/include/chmempools.h ****  */
 337:./lib/chibios/os/oslib/include/chmempools.h **** static inline void chGuardedPoolAdd(guarded_memory_pool_t *gmp, void *objp) {
 808              		.loc 5 337 20 view .LVU246
 809              	.LBB142:
 338:./lib/chibios/os/oslib/include/chmempools.h **** 
 339:./lib/chibios/os/oslib/include/chmempools.h ****   chGuardedPoolFree(gmp, objp);
 810              		.loc 5 339 3 view .LVU247
 811 000c 2946     		mov	r1, r5
 812 000e 3046     		mov	r0, r6
 813 0010 FFF7FEFF 		bl	chGuardedPoolFree
 814              	.LVL44:
 815              		.loc 5 339 3 is_stmt 0 view .LVU248
 816              	.LBE142:
 817              	.LBE141:
 254:lib/chibios/os/oslib/src/chmempools.c ****     /*lint -restore*/
 818              		.loc 1 254 5 is_stmt 1 view .LVU249
 254:lib/chibios/os/oslib/src/chmempools.c ****     /*lint -restore*/
 819              		.loc 1 254 7 is_stmt 0 view .LVU250
 820 0014 3369     		ldr	r3, [r6, #16]
 256:lib/chibios/os/oslib/src/chmempools.c ****   }
 821              		.loc 1 256 6 view .LVU251
 822 0016 013C     		subs	r4, r4, #1
 823              	.LVL45:
 254:lib/chibios/os/oslib/src/chmempools.c ****     /*lint -restore*/
 824              		.loc 1 254 7 view .LVU252
 825 0018 1D44     		add	r5, r5, r3
 826              	.LVL46:
 256:lib/chibios/os/oslib/src/chmempools.c ****   }
 827              		.loc 1 256 5 is_stmt 1 view .LVU253
 256:lib/chibios/os/oslib/src/chmempools.c ****   }
 828              		.loc 1 256 5 is_stmt 0 view .LVU254
 829 001a F5E7     		b	.L20
 830              		.cfi_endproc
 831              	.LFE296:
 833              		.text
 834              	.Letext0:
 835              		.file 6 "/usr/lib/gcc/arm-none-eabi/11.2.0/include/stddef.h"
 836              		.file 7 "/usr/arm-none-eabi/include/machine/_default_types.h"
 837              		.file 8 "/usr/arm-none-eabi/include/sys/_stdint.h"
 838              		.file 9 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 839              		.file 10 "./lib/chibios/os/rt/include/chlists.h"
 840              		.file 11 "./lib/chibios/os/rt/include/chtime.h"
 841              		.file 12 "./lib/chibios/os/rt/include/chsem.h"
 842              		.file 13 "./lib/chibios/os/oslib/include/chmemcore.h"
 843              		.file 14 "./lib/chibios/os/rt/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmempools.c
     /tmp/ccKzxifK.s:18     .text.chPoolObjectInitAligned:0000000000000000 $t
     /tmp/ccKzxifK.s:26     .text.chPoolObjectInitAligned:0000000000000000 chPoolObjectInitAligned
     /tmp/ccKzxifK.s:56     .text.chPoolAllocI:0000000000000000 $t
     /tmp/ccKzxifK.s:63     .text.chPoolAllocI:0000000000000000 chPoolAllocI
     /tmp/ccKzxifK.s:119    .text.chPoolAlloc:0000000000000000 $t
     /tmp/ccKzxifK.s:126    .text.chPoolAlloc:0000000000000000 chPoolAlloc
     /tmp/ccKzxifK.s:225    .text.chPoolFreeI:0000000000000000 $t
     /tmp/ccKzxifK.s:232    .text.chPoolFreeI:0000000000000000 chPoolFreeI
     /tmp/ccKzxifK.s:258    .text.chPoolFree:0000000000000000 $t
     /tmp/ccKzxifK.s:265    .text.chPoolFree:0000000000000000 chPoolFree
     /tmp/ccKzxifK.s:363    .text.chPoolLoadArray:0000000000000000 $t
     /tmp/ccKzxifK.s:370    .text.chPoolLoadArray:0000000000000000 chPoolLoadArray
     /tmp/ccKzxifK.s:421    .text.chGuardedPoolObjectInitAligned:0000000000000000 $t
     /tmp/ccKzxifK.s:428    .text.chGuardedPoolObjectInitAligned:0000000000000000 chGuardedPoolObjectInitAligned
     /tmp/ccKzxifK.s:479    .text.chGuardedPoolAllocTimeoutS:0000000000000000 $t
     /tmp/ccKzxifK.s:486    .text.chGuardedPoolAllocTimeoutS:0000000000000000 chGuardedPoolAllocTimeoutS
     /tmp/ccKzxifK.s:534    .text.chGuardedPoolAllocTimeout:0000000000000000 $t
     /tmp/ccKzxifK.s:541    .text.chGuardedPoolAllocTimeout:0000000000000000 chGuardedPoolAllocTimeout
     /tmp/ccKzxifK.s:637    .text.chGuardedPoolFree:0000000000000000 $t
     /tmp/ccKzxifK.s:644    .text.chGuardedPoolFree:0000000000000000 chGuardedPoolFree
     /tmp/ccKzxifK.s:769    .text.chGuardedPoolLoadArray:0000000000000000 $t
     /tmp/ccKzxifK.s:776    .text.chGuardedPoolLoadArray:0000000000000000 chGuardedPoolLoadArray

UNDEFINED SYMBOLS
chSemObjectInit
chSemWaitTimeoutS
chSemSignalI
chSchRescheduleS
