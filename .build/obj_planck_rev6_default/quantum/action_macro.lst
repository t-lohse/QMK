   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"action_macro.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.action_macro_play,"ax",%progbits
  18              		.align	1
  19              		.global	action_macro_play
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	action_macro_play:
  27              	.LVL0:
  28              	.LFB337:
  29              		.file 1 "quantum/action_macro.c"
   1:quantum/action_macro.c **** /*
   2:quantum/action_macro.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:quantum/action_macro.c **** 
   4:quantum/action_macro.c **** This program is free software: you can redistribute it and/or modify
   5:quantum/action_macro.c **** it under the terms of the GNU General Public License as published by
   6:quantum/action_macro.c **** the Free Software Foundation, either version 2 of the License, or
   7:quantum/action_macro.c **** (at your option) any later version.
   8:quantum/action_macro.c **** 
   9:quantum/action_macro.c **** This program is distributed in the hope that it will be useful,
  10:quantum/action_macro.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:quantum/action_macro.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:quantum/action_macro.c **** GNU General Public License for more details.
  13:quantum/action_macro.c **** 
  14:quantum/action_macro.c **** You should have received a copy of the GNU General Public License
  15:quantum/action_macro.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:quantum/action_macro.c **** */
  17:quantum/action_macro.c **** #include "action.h"
  18:quantum/action_macro.c **** #include "action_util.h"
  19:quantum/action_macro.c **** #include "action_macro.h"
  20:quantum/action_macro.c **** #include "wait.h"
  21:quantum/action_macro.c **** 
  22:quantum/action_macro.c **** #ifdef DEBUG_ACTION
  23:quantum/action_macro.c **** #    include "debug.h"
  24:quantum/action_macro.c **** #else
  25:quantum/action_macro.c **** #    include "nodebug.h"
  26:quantum/action_macro.c **** #endif
  27:quantum/action_macro.c **** 
  28:quantum/action_macro.c **** #ifndef NO_ACTION_MACRO
  29:quantum/action_macro.c **** 
  30:quantum/action_macro.c **** #    define MACRO_READ() (macro = MACRO_GET(macro_p++))
  31:quantum/action_macro.c **** /** \brief Action Macro Play
  32:quantum/action_macro.c ****  *
  33:quantum/action_macro.c ****  * FIXME: Needs doc
  34:quantum/action_macro.c ****  */
  35:quantum/action_macro.c **** void action_macro_play(const macro_t *macro_p) {
  30              		.loc 1 35 48 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  36:quantum/action_macro.c ****     macro_t macro    = END;
  34              		.loc 1 36 5 view .LVU1
  37:quantum/action_macro.c ****     uint8_t interval = 0;
  35              		.loc 1 37 5 view .LVU2
  38:quantum/action_macro.c **** 
  39:quantum/action_macro.c ****     if (!macro_p) return;
  36              		.loc 1 39 5 view .LVU3
  35:quantum/action_macro.c ****     macro_t macro    = END;
  37              		.loc 1 35 48 is_stmt 0 view .LVU4
  38 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  39              		.cfi_def_cfa_offset 24
  40              		.cfi_offset 3, -24
  41              		.cfi_offset 4, -20
  42              		.cfi_offset 5, -16
  43              		.cfi_offset 6, -12
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46              		.loc 1 39 8 view .LVU5
  47 0002 0346     		mov	r3, r0
  48 0004 60B1     		cbz	r0, .L1
  37:quantum/action_macro.c ****     uint8_t interval = 0;
  49              		.loc 1 37 13 view .LVU6
  50 0006 0025     		movs	r5, #0
  40:quantum/action_macro.c ****     while (true) {
  41:quantum/action_macro.c ****         switch (MACRO_READ()) {
  42:quantum/action_macro.c ****             case KEY_DOWN:
  43:quantum/action_macro.c ****                 MACRO_READ();
  44:quantum/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  45:quantum/action_macro.c ****                 if (IS_MOD(macro)) {
  46:quantum/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
  47:quantum/action_macro.c ****                     send_keyboard_report();
  48:quantum/action_macro.c ****                 } else {
  49:quantum/action_macro.c ****                     register_code(macro);
  50:quantum/action_macro.c ****                 }
  51:quantum/action_macro.c ****                 break;
  52:quantum/action_macro.c ****             case KEY_UP:
  53:quantum/action_macro.c ****                 MACRO_READ();
  54:quantum/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
  55:quantum/action_macro.c ****                 if (IS_MOD(macro)) {
  56:quantum/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
  51              		.loc 1 56 36 view .LVU7
  52 0008 0126     		movs	r6, #1
  53              	.LVL1:
  54              	.L17:
  40:quantum/action_macro.c ****     while (true) {
  55              		.loc 1 40 5 is_stmt 1 view .LVU8
  41:quantum/action_macro.c ****             case KEY_DOWN:
  56              		.loc 1 41 9 view .LVU9
  41:quantum/action_macro.c ****             case KEY_DOWN:
  57              		.loc 1 41 17 is_stmt 0 view .LVU10
  58 000a 1C46     		mov	r4, r3
  59              	.LVL2:
  41:quantum/action_macro.c ****             case KEY_DOWN:
  60              		.loc 1 41 17 view .LVU11
  61 000c 14F8010B 		ldrb	r0, [r4], #1	@ zero_extendqisi2
  62              	.LVL3:
  41:quantum/action_macro.c ****             case KEY_DOWN:
  63              		.loc 1 41 9 view .LVU12
  64 0010 7428     		cmp	r0, #116
  65 0012 3CD0     		beq	.L3
  66 0014 0BD8     		bhi	.L4
  67 0016 0228     		cmp	r0, #2
  68 0018 2AD0     		beq	.L5
  69 001a 02D8     		bhi	.L6
  70 001c 0128     		cmp	r0, #1
  71 001e 12D0     		beq	.L7
  72              	.LVL4:
  73              	.L1:
  57:quantum/action_macro.c ****                     send_keyboard_report();
  58:quantum/action_macro.c ****                 } else {
  59:quantum/action_macro.c ****                     unregister_code(macro);
  60:quantum/action_macro.c ****                 }
  61:quantum/action_macro.c ****                 break;
  62:quantum/action_macro.c ****             case WAIT:
  63:quantum/action_macro.c ****                 MACRO_READ();
  64:quantum/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
  65:quantum/action_macro.c ****                 {
  66:quantum/action_macro.c ****                     uint8_t ms = macro;
  67:quantum/action_macro.c ****                     while (ms--) wait_ms(1);
  68:quantum/action_macro.c ****                 }
  69:quantum/action_macro.c ****                 break;
  70:quantum/action_macro.c ****             case INTERVAL:
  71:quantum/action_macro.c ****                 interval = MACRO_READ();
  72:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
  73:quantum/action_macro.c ****                 break;
  74:quantum/action_macro.c ****             case 0x04 ... 0x73:
  75:quantum/action_macro.c ****                 dprintf("DOWN(%02X)\n", macro);
  76:quantum/action_macro.c ****                 register_code(macro);
  77:quantum/action_macro.c ****                 break;
  78:quantum/action_macro.c ****             case 0x84 ... 0xF3:
  79:quantum/action_macro.c ****                 dprintf("UP(%02X)\n", macro);
  80:quantum/action_macro.c ****                 unregister_code(macro & 0x7F);
  81:quantum/action_macro.c ****                 break;
  82:quantum/action_macro.c ****             case END:
  83:quantum/action_macro.c ****             default:
  84:quantum/action_macro.c ****                 return;
  85:quantum/action_macro.c ****         }
  86:quantum/action_macro.c ****         // interval
  87:quantum/action_macro.c ****         {
  88:quantum/action_macro.c ****             uint8_t ms = interval;
  89:quantum/action_macro.c ****             while (ms--) wait_ms(1);
  90:quantum/action_macro.c ****         }
  91:quantum/action_macro.c ****     }
  92:quantum/action_macro.c **** }
  74              		.loc 1 92 1 view .LVU13
  75 0020 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
  76              	.LVL5:
  77              	.L6:
  41:quantum/action_macro.c ****             case KEY_DOWN:
  78              		.loc 1 41 9 view .LVU14
  79 0022 031F     		subs	r3, r0, #4
  80 0024 6F2B     		cmp	r3, #111
  81 0026 FBD8     		bhi	.L1
  82              	.LVL6:
  83              	.L21:
  75:quantum/action_macro.c ****                 register_code(macro);
  84              		.loc 1 75 47 is_stmt 1 view .LVU15
  76:quantum/action_macro.c ****                 break;
  85              		.loc 1 76 17 view .LVU16
  86 0028 FFF7FEFF 		bl	register_code
  87              	.LVL7:
  77:quantum/action_macro.c ****             case 0x84 ... 0xF3:
  88              		.loc 1 77 17 view .LVU17
  89 002c 1AE0     		b	.L10
  90              	.LVL8:
  91              	.L4:
  41:quantum/action_macro.c ****             case KEY_DOWN:
  92              		.loc 1 41 9 is_stmt 0 view .LVU18
  93 002e 7528     		cmp	r0, #117
  94 0030 37D0     		beq	.L9
  95 0032 00F17C03 		add	r3, r0, #124
  96 0036 DBB2     		uxtb	r3, r3
  97 0038 6F2B     		cmp	r3, #111
  98 003a F1D8     		bhi	.L1
  79:quantum/action_macro.c ****                 unregister_code(macro & 0x7F);
  99              		.loc 1 79 45 is_stmt 1 view .LVU19
  80:quantum/action_macro.c ****                 break;
 100              		.loc 1 80 17 view .LVU20
 101 003c 00F07F00 		and	r0, r0, #127
 102              	.LVL9:
 103              	.L12:
  59:quantum/action_macro.c ****                 }
 104              		.loc 1 59 21 view .LVU21
 105 0040 FFF7FEFF 		bl	unregister_code
 106              	.LVL10:
 107 0044 0EE0     		b	.L10
 108              	.LVL11:
 109              	.L7:
  43:quantum/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 110              		.loc 1 43 17 view .LVU22
 111 0046 9C1C     		adds	r4, r3, #2
 112              	.LVL12:
  43:quantum/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 113              		.loc 1 43 17 is_stmt 0 view .LVU23
 114 0048 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 115              	.LVL13:
  44:quantum/action_macro.c ****                 if (IS_MOD(macro)) {
 116              		.loc 1 44 51 is_stmt 1 view .LVU24
  45:quantum/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
 117              		.loc 1 45 17 view .LVU25
  45:quantum/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
 118              		.loc 1 45 21 is_stmt 0 view .LVU26
 119 004a 03F12002 		add	r2, r3, #32
  45:quantum/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
 120              		.loc 1 45 20 view .LVU27
 121 004e D2B2     		uxtb	r2, r2
 122 0050 072A     		cmp	r2, #7
 123 0052 0BD8     		bhi	.L11
  46:quantum/action_macro.c ****                     send_keyboard_report();
 124              		.loc 1 46 21 is_stmt 1 view .LVU28
  46:quantum/action_macro.c ****                     send_keyboard_report();
 125              		.loc 1 46 36 is_stmt 0 view .LVU29
 126 0054 03F00703 		and	r3, r3, #7
 127              	.LVL14:
  46:quantum/action_macro.c ****                     send_keyboard_report();
 128              		.loc 1 46 36 view .LVU30
 129 0058 9840     		lsls	r0, r0, r3
  46:quantum/action_macro.c ****                     send_keyboard_report();
 130              		.loc 1 46 21 view .LVU31
 131 005a C0B2     		uxtb	r0, r0
 132 005c FFF7FEFF 		bl	add_macro_mods
 133              	.LVL15:
  47:quantum/action_macro.c ****                 } else {
 134              		.loc 1 47 21 is_stmt 1 view .LVU32
 135              	.L22:
  57:quantum/action_macro.c ****                 } else {
 136              		.loc 1 57 21 view .LVU33
 137 0060 FFF7FEFF 		bl	send_keyboard_report
 138              	.LVL16:
 139              	.L10:
 140              	.LBB2:
  88:quantum/action_macro.c ****             while (ms--) wait_ms(1);
 141              		.loc 1 88 13 view .LVU34
  89:quantum/action_macro.c ****         }
 142              		.loc 1 89 13 view .LVU35
  89:quantum/action_macro.c ****         }
 143              		.loc 1 89 19 is_stmt 0 view .LVU36
 144 0064 2F46     		mov	r7, r5
 145              	.LVL17:
 146              	.L15:
  89:quantum/action_macro.c ****         }
 147              		.loc 1 89 26 is_stmt 1 discriminator 4 view .LVU37
  89:quantum/action_macro.c ****         }
 148              		.loc 1 89 20 discriminator 4 view .LVU38
  89:quantum/action_macro.c ****         }
 149              		.loc 1 89 20 is_stmt 0 discriminator 4 view .LVU39
 150 0066 FFB9     		cbnz	r7, .L16
 151 0068 2346     		mov	r3, r4
 152 006a CEE7     		b	.L17
 153              	.LVL18:
 154              	.L11:
  89:quantum/action_macro.c ****         }
 155              		.loc 1 89 20 discriminator 4 view .LVU40
 156              	.LBE2:
  49:quantum/action_macro.c ****                 }
 157              		.loc 1 49 21 is_stmt 1 view .LVU41
 158 006c 1846     		mov	r0, r3
 159 006e DBE7     		b	.L21
 160              	.LVL19:
 161              	.L5:
  53:quantum/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 162              		.loc 1 53 17 view .LVU42
 163 0070 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 164              	.LVL20:
  53:quantum/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 165              		.loc 1 53 17 is_stmt 0 view .LVU43
 166 0072 9C1C     		adds	r4, r3, #2
 167              	.LVL21:
  54:quantum/action_macro.c ****                 if (IS_MOD(macro)) {
 168              		.loc 1 54 49 is_stmt 1 view .LVU44
  55:quantum/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 169              		.loc 1 55 17 view .LVU45
  55:quantum/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 170              		.loc 1 55 21 is_stmt 0 view .LVU46
 171 0074 00F12003 		add	r3, r0, #32
  55:quantum/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 172              		.loc 1 55 20 view .LVU47
 173 0078 DBB2     		uxtb	r3, r3
 174 007a 072B     		cmp	r3, #7
 175 007c E0D8     		bhi	.L12
  56:quantum/action_macro.c ****                     send_keyboard_report();
 176              		.loc 1 56 21 is_stmt 1 view .LVU48
  56:quantum/action_macro.c ****                     send_keyboard_report();
 177              		.loc 1 56 36 is_stmt 0 view .LVU49
 178 007e 00F00700 		and	r0, r0, #7
 179              	.LVL22:
  56:quantum/action_macro.c ****                     send_keyboard_report();
 180              		.loc 1 56 36 view .LVU50
 181 0082 06FA00F0 		lsl	r0, r6, r0
  56:quantum/action_macro.c ****                     send_keyboard_report();
 182              		.loc 1 56 21 view .LVU51
 183 0086 C0B2     		uxtb	r0, r0
 184 0088 FFF7FEFF 		bl	del_macro_mods
 185              	.LVL23:
  56:quantum/action_macro.c ****                     send_keyboard_report();
 186              		.loc 1 56 21 view .LVU52
 187 008c E8E7     		b	.L22
 188              	.LVL24:
 189              	.L3:
  63:quantum/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 190              		.loc 1 63 17 is_stmt 1 view .LVU53
 191 008e 5F78     		ldrb	r7, [r3, #1]	@ zero_extendqisi2
 192 0090 9C1C     		adds	r4, r3, #2
 193              	.LVL25:
  64:quantum/action_macro.c ****                 {
 194              		.loc 1 64 45 view .LVU54
 195              	.LBB3:
  66:quantum/action_macro.c ****                     while (ms--) wait_ms(1);
 196              		.loc 1 66 21 view .LVU55
  67:quantum/action_macro.c ****                 }
 197              		.loc 1 67 21 view .LVU56
 198              	.L13:
  67:quantum/action_macro.c ****                 }
 199              		.loc 1 67 34 discriminator 4 view .LVU57
  67:quantum/action_macro.c ****                 }
 200              		.loc 1 67 28 discriminator 4 view .LVU58
  67:quantum/action_macro.c ****                 }
 201              		.loc 1 67 28 is_stmt 0 discriminator 4 view .LVU59
 202 0092 002F     		cmp	r7, #0
 203 0094 E6D0     		beq	.L10
  67:quantum/action_macro.c ****                 }
 204              		.loc 1 67 34 is_stmt 1 discriminator 1 view .LVU60
  67:quantum/action_macro.c ****                 }
 205              		.loc 1 67 34 discriminator 1 view .LVU61
  67:quantum/action_macro.c ****                 }
 206              		.loc 1 67 34 discriminator 1 view .LVU62
 207 0096 0A20     		movs	r0, #10
 208 0098 013F     		subs	r7, r7, #1
 209              	.LVL26:
  67:quantum/action_macro.c ****                 }
 210              		.loc 1 67 34 is_stmt 0 discriminator 1 view .LVU63
 211 009a FFF7FEFF 		bl	chThdSleep
 212              	.LVL27:
 213 009e FFB2     		uxtb	r7, r7
 214 00a0 F7E7     		b	.L13
 215              	.LVL28:
 216              	.L9:
  67:quantum/action_macro.c ****                 }
 217              		.loc 1 67 34 discriminator 1 view .LVU64
 218              	.LBE3:
  71:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 219              		.loc 1 71 17 is_stmt 1 view .LVU65
  71:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 220              		.loc 1 71 28 is_stmt 0 view .LVU66
 221 00a2 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 222              	.LVL29:
  71:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 223              		.loc 1 71 28 view .LVU67
 224 00a4 9C1C     		adds	r4, r3, #2
 225              	.LVL30:
  72:quantum/action_macro.c ****                 break;
 226              		.loc 1 72 52 is_stmt 1 view .LVU68
  73:quantum/action_macro.c ****             case 0x04 ... 0x73:
 227              		.loc 1 73 17 view .LVU69
 228 00a6 DDE7     		b	.L10
 229              	.LVL31:
 230              	.L16:
 231              	.LBB4:
  89:quantum/action_macro.c ****         }
 232              		.loc 1 89 26 discriminator 1 view .LVU70
  89:quantum/action_macro.c ****         }
 233              		.loc 1 89 26 discriminator 1 view .LVU71
  89:quantum/action_macro.c ****         }
 234              		.loc 1 89 26 discriminator 1 view .LVU72
 235 00a8 0A20     		movs	r0, #10
 236 00aa 013F     		subs	r7, r7, #1
 237              	.LVL32:
  89:quantum/action_macro.c ****         }
 238              		.loc 1 89 26 is_stmt 0 discriminator 1 view .LVU73
 239 00ac FFF7FEFF 		bl	chThdSleep
 240              	.LVL33:
 241 00b0 FFB2     		uxtb	r7, r7
 242 00b2 D8E7     		b	.L15
 243              	.LBE4:
 244              		.cfi_endproc
 245              	.LFE337:
 247              		.text
 248              	.Letext0:
 249              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 250              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 251              		.file 4 "quantum/action_macro.h"
 252              		.file 5 "quantum/keycode.h"
 253              		.file 6 "./lib/chibios/os/rt/include/chtime.h"
 254              		.file 7 "./lib/chibios/os/rt/include/chthreads.h"
 255              		.file 8 "quantum/action.h"
 256              		.file 9 "quantum/action_util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_macro.c
     /tmp/ccmz697k.s:18     .text.action_macro_play:0000000000000000 $t
     /tmp/ccmz697k.s:26     .text.action_macro_play:0000000000000000 action_macro_play

UNDEFINED SYMBOLS
register_code
unregister_code
add_macro_mods
send_keyboard_report
del_macro_mods
chThdSleep
