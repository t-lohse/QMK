   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"dip_switch.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.dip_switch_update_user,"ax",%progbits
  18              		.align	1
  19              		.weak	dip_switch_update_user
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	dip_switch_update_user:
  27              	.LVL0:
  28              	.LFB341:
  29              		.file 1 "quantum/dip_switch.c"
   1:quantum/dip_switch.c **** /*
   2:quantum/dip_switch.c ****  * Copyright 2018 Jack Humbert <jack.humb@gmail.com>
   3:quantum/dip_switch.c ****  * Copyright 2019 Drashna Jaelre (Christopher Courtney) <drashna@live.com>
   4:quantum/dip_switch.c ****  *
   5:quantum/dip_switch.c ****  * This program is free software: you can redistribute it and/or modify
   6:quantum/dip_switch.c ****  * it under the terms of the GNU General Public License as published by
   7:quantum/dip_switch.c ****  * the Free Software Foundation, either version 2 of the License, or
   8:quantum/dip_switch.c ****  * (at your option) any later version.
   9:quantum/dip_switch.c ****  *
  10:quantum/dip_switch.c ****  * This program is distributed in the hope that it will be useful,
  11:quantum/dip_switch.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:quantum/dip_switch.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:quantum/dip_switch.c ****  * GNU General Public License for more details.
  14:quantum/dip_switch.c ****  *
  15:quantum/dip_switch.c ****  * You should have received a copy of the GNU General Public License
  16:quantum/dip_switch.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:quantum/dip_switch.c ****  */
  18:quantum/dip_switch.c **** 
  19:quantum/dip_switch.c **** #include "dip_switch.h"
  20:quantum/dip_switch.c **** #ifdef SPLIT_KEYBOARD
  21:quantum/dip_switch.c **** #    include "split_common/split_util.h"
  22:quantum/dip_switch.c **** #endif
  23:quantum/dip_switch.c **** 
  24:quantum/dip_switch.c **** // for memcpy
  25:quantum/dip_switch.c **** #include <string.h>
  26:quantum/dip_switch.c **** 
  27:quantum/dip_switch.c **** #if !defined(DIP_SWITCH_PINS) && !defined(DIP_SWITCH_MATRIX_GRID)
  28:quantum/dip_switch.c **** #    error "Either DIP_SWITCH_PINS or DIP_SWITCH_MATRIX_GRID must be defined."
  29:quantum/dip_switch.c **** #endif
  30:quantum/dip_switch.c **** 
  31:quantum/dip_switch.c **** #if defined(DIP_SWITCH_PINS) && defined(DIP_SWITCH_MATRIX_GRID)
  32:quantum/dip_switch.c **** #    error "Both DIP_SWITCH_PINS and DIP_SWITCH_MATRIX_GRID are defined."
  33:quantum/dip_switch.c **** #endif
  34:quantum/dip_switch.c **** 
  35:quantum/dip_switch.c **** #ifdef DIP_SWITCH_PINS
  36:quantum/dip_switch.c **** #    define NUMBER_OF_DIP_SWITCHES (sizeof(dip_switch_pad) / sizeof(pin_t))
  37:quantum/dip_switch.c **** static pin_t dip_switch_pad[] = DIP_SWITCH_PINS;
  38:quantum/dip_switch.c **** #endif
  39:quantum/dip_switch.c **** 
  40:quantum/dip_switch.c **** #ifdef DIP_SWITCH_MATRIX_GRID
  41:quantum/dip_switch.c **** typedef struct matrix_index_t {
  42:quantum/dip_switch.c ****     uint8_t row;
  43:quantum/dip_switch.c ****     uint8_t col;
  44:quantum/dip_switch.c **** } matrix_index_t;
  45:quantum/dip_switch.c **** 
  46:quantum/dip_switch.c **** #    define NUMBER_OF_DIP_SWITCHES (sizeof(dip_switch_pad) / sizeof(matrix_index_t))
  47:quantum/dip_switch.c **** static matrix_index_t dip_switch_pad[] = DIP_SWITCH_MATRIX_GRID;
  48:quantum/dip_switch.c **** extern bool           peek_matrix(uint8_t row_index, uint8_t col_index, bool read_raw);
  49:quantum/dip_switch.c **** static uint16_t       scan_count;
  50:quantum/dip_switch.c **** #endif /* DIP_SWITCH_MATRIX_GRID */
  51:quantum/dip_switch.c **** 
  52:quantum/dip_switch.c **** static bool dip_switch_state[NUMBER_OF_DIP_SWITCHES]      = {0};
  53:quantum/dip_switch.c **** static bool last_dip_switch_state[NUMBER_OF_DIP_SWITCHES] = {0};
  54:quantum/dip_switch.c **** 
  55:quantum/dip_switch.c **** __attribute__((weak)) bool dip_switch_update_user(uint8_t index, bool active) { return true; }
  30              		.loc 1 55 79 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              		.loc 1 55 81 view .LVU1
  36              		.loc 1 55 94 is_stmt 0 view .LVU2
  37 0000 0120     		movs	r0, #1
  38              	.LVL1:
  39              		.loc 1 55 94 view .LVU3
  40 0002 7047     		bx	lr
  41              		.cfi_endproc
  42              	.LFE341:
  44              		.section	.text.dip_switch_update_kb,"ax",%progbits
  45              		.align	1
  46              		.weak	dip_switch_update_kb
  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  50              		.fpu fpv4-sp-d16
  52              	dip_switch_update_kb:
  53              	.LVL2:
  54              	.LFB342:
  56:quantum/dip_switch.c **** 
  57:quantum/dip_switch.c **** __attribute__((weak)) bool dip_switch_update_kb(uint8_t index, bool active) { return dip_switch_upd
  55              		.loc 1 57 77 is_stmt 1 view -0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		.loc 1 57 79 view .LVU5
  60              		.loc 1 57 77 is_stmt 0 view .LVU6
  61 0000 08B5     		push	{r3, lr}
  62              		.cfi_def_cfa_offset 8
  63              		.cfi_offset 3, -8
  64              		.cfi_offset 14, -4
  65              		.loc 1 57 86 view .LVU7
  66 0002 FFF7FEFF 		bl	dip_switch_update_user
  67              	.LVL3:
  68              		.loc 1 57 125 view .LVU8
  69 0006 08BD     		pop	{r3, pc}
  70              		.cfi_endproc
  71              	.LFE342:
  73              		.section	.text.dip_switch_update_mask_user,"ax",%progbits
  74              		.align	1
  75              		.weak	dip_switch_update_mask_user
  76              		.syntax unified
  77              		.thumb
  78              		.thumb_func
  79              		.fpu fpv4-sp-d16
  81              	dip_switch_update_mask_user:
  82              	.LVL4:
  83              	.LFB343:
  58:quantum/dip_switch.c **** 
  59:quantum/dip_switch.c **** __attribute__((weak)) bool dip_switch_update_mask_user(uint32_t state) { return true; }
  84              		.loc 1 59 72 is_stmt 1 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89              		.loc 1 59 74 view .LVU10
  90              		.loc 1 59 87 is_stmt 0 view .LVU11
  91 0000 0120     		movs	r0, #1
  92              	.LVL5:
  93              		.loc 1 59 87 view .LVU12
  94 0002 7047     		bx	lr
  95              		.cfi_endproc
  96              	.LFE343:
  98              		.section	.text.dip_switch_update_mask_kb,"ax",%progbits
  99              		.align	1
 100              		.weak	dip_switch_update_mask_kb
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu fpv4-sp-d16
 106              	dip_switch_update_mask_kb:
 107              	.LVL6:
 108              	.LFB344:
  60:quantum/dip_switch.c **** 
  61:quantum/dip_switch.c **** __attribute__((weak)) bool dip_switch_update_mask_kb(uint32_t state) { return dip_switch_update_mas
 109              		.loc 1 61 70 is_stmt 1 view -0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		.loc 1 61 72 view .LVU14
 114              		.loc 1 61 70 is_stmt 0 view .LVU15
 115 0000 08B5     		push	{r3, lr}
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 3, -8
 118              		.cfi_offset 14, -4
 119              		.loc 1 61 79 view .LVU16
 120 0002 FFF7FEFF 		bl	dip_switch_update_mask_user
 121              	.LVL7:
 122              		.loc 1 61 115 view .LVU17
 123 0006 08BD     		pop	{r3, pc}
 124              		.cfi_endproc
 125              	.LFE344:
 127              		.section	.text.dip_switch_read,"ax",%progbits
 128              		.align	1
 129              		.global	dip_switch_read
 130              		.syntax unified
 131              		.thumb
 132              		.thumb_func
 133              		.fpu fpv4-sp-d16
 135              	dip_switch_read:
 136              	.LVL8:
 137              	.LFB346:
  62:quantum/dip_switch.c **** 
  63:quantum/dip_switch.c **** void dip_switch_init(void) {
  64:quantum/dip_switch.c **** #ifdef DIP_SWITCH_PINS
  65:quantum/dip_switch.c **** #    if defined(SPLIT_KEYBOARD) && defined(DIP_SWITCH_PINS_RIGHT)
  66:quantum/dip_switch.c ****     if (!isLeftHand) {
  67:quantum/dip_switch.c ****         const pin_t dip_switch_pad_right[] = DIP_SWITCH_PINS_RIGHT;
  68:quantum/dip_switch.c ****         for (uint8_t i = 0; i < NUMBER_OF_DIP_SWITCHES; i++) {
  69:quantum/dip_switch.c ****             dip_switch_pad[i] = dip_switch_pad_right[i];
  70:quantum/dip_switch.c ****         }
  71:quantum/dip_switch.c ****     }
  72:quantum/dip_switch.c **** #    endif
  73:quantum/dip_switch.c ****     for (uint8_t i = 0; i < NUMBER_OF_DIP_SWITCHES; i++) {
  74:quantum/dip_switch.c ****         setPinInputHigh(dip_switch_pad[i]);
  75:quantum/dip_switch.c ****     }
  76:quantum/dip_switch.c ****     dip_switch_read(true);
  77:quantum/dip_switch.c **** #endif
  78:quantum/dip_switch.c **** #ifdef DIP_SWITCH_MATRIX_GRID
  79:quantum/dip_switch.c ****     scan_count = 0;
  80:quantum/dip_switch.c **** #endif
  81:quantum/dip_switch.c **** }
  82:quantum/dip_switch.c **** 
  83:quantum/dip_switch.c **** void dip_switch_read(bool forced) {
 138              		.loc 1 83 35 is_stmt 1 view -0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
  84:quantum/dip_switch.c ****     bool     has_dip_state_changed = false;
 142              		.loc 1 84 5 view .LVU19
  85:quantum/dip_switch.c ****     uint32_t dip_switch_mask       = 0;
 143              		.loc 1 85 5 view .LVU20
  86:quantum/dip_switch.c **** 
  87:quantum/dip_switch.c **** #ifdef DIP_SWITCH_MATRIX_GRID
  88:quantum/dip_switch.c ****     bool read_raw = false;
  89:quantum/dip_switch.c **** 
  90:quantum/dip_switch.c ****     if (scan_count < 500) {
  91:quantum/dip_switch.c ****         scan_count++;
  92:quantum/dip_switch.c ****         if (scan_count == 10) {
  93:quantum/dip_switch.c ****             read_raw = true;
  94:quantum/dip_switch.c ****             forced   = true; /* First reading of the dip switch */
  95:quantum/dip_switch.c ****         } else {
  96:quantum/dip_switch.c ****             return;
  97:quantum/dip_switch.c ****         }
  98:quantum/dip_switch.c ****     }
  99:quantum/dip_switch.c **** #endif
 100:quantum/dip_switch.c **** 
 101:quantum/dip_switch.c ****     for (uint8_t i = 0; i < NUMBER_OF_DIP_SWITCHES; i++) {
 144              		.loc 1 101 5 view .LVU21
 145              	.LBB2:
 146              		.loc 1 101 10 view .LVU22
 147              		.loc 1 101 27 view .LVU23
 148              	.LBE2:
  83:quantum/dip_switch.c ****     bool     has_dip_state_changed = false;
 149              		.loc 1 83 35 is_stmt 0 view .LVU24
 150 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 151              		.cfi_def_cfa_offset 40
 152              		.cfi_offset 3, -40
 153              		.cfi_offset 4, -36
 154              		.cfi_offset 5, -32
 155              		.cfi_offset 6, -28
 156              		.cfi_offset 7, -24
 157              		.cfi_offset 8, -20
 158              		.cfi_offset 9, -16
 159              		.cfi_offset 10, -12
 160              		.cfi_offset 11, -8
 161              		.cfi_offset 14, -4
 162 0004 184F     		ldr	r7, .L17
 163 0006 194E     		ldr	r6, .L17+4
 164 0008 DFF864B0 		ldr	fp, .L17+8
  83:quantum/dip_switch.c ****     bool     has_dip_state_changed = false;
 165              		.loc 1 83 35 view .LVU25
 166 000c 0024     		movs	r4, #0
 167 000e 8246     		mov	r10, r0
  85:quantum/dip_switch.c ****     uint32_t dip_switch_mask       = 0;
 168              		.loc 1 85 14 view .LVU26
 169 0010 2546     		mov	r5, r4
  84:quantum/dip_switch.c ****     uint32_t dip_switch_mask       = 0;
 170              		.loc 1 84 14 view .LVU27
 171 0012 2346     		mov	r3, r4
 172 0014 B946     		mov	r9, r7
 173 0016 B046     		mov	r8, r6
 174              	.LVL9:
 175              	.L8:
 176              	.LBB3:
 102:quantum/dip_switch.c **** #ifdef DIP_SWITCH_PINS
 103:quantum/dip_switch.c ****         dip_switch_state[i] = !readPin(dip_switch_pad[i]);
 177              		.loc 1 103 32 view .LVU28
 178 0018 5BF8042B 		ldr	r2, [fp], #4
 179 001c 22F00F01 		bic	r1, r2, #15
 180 0020 02F00F02 		and	r2, r2, #15
 181 0024 0969     		ldr	r1, [r1, #16]
 182 0026 D140     		lsrs	r1, r1, r2
 183 0028 C943     		mvns	r1, r1
 184              		.loc 1 103 31 view .LVU29
 185 002a 01F00102 		and	r2, r1, #1
 186 002e 1146     		mov	r1, r2
 187              		.loc 1 103 29 view .LVU30
 188 0030 07F8012B 		strb	r2, [r7], #1
 104:quantum/dip_switch.c **** #endif
 105:quantum/dip_switch.c **** #ifdef DIP_SWITCH_MATRIX_GRID
 106:quantum/dip_switch.c ****         dip_switch_state[i] = peek_matrix(dip_switch_pad[i].row, dip_switch_pad[i].col, read_raw);
 107:quantum/dip_switch.c **** #endif
 108:quantum/dip_switch.c ****         dip_switch_mask |= dip_switch_state[i] << i;
 189              		.loc 1 108 48 view .LVU31
 190 0034 A240     		lsls	r2, r2, r4
 191              		.loc 1 108 25 view .LVU32
 192 0036 1543     		orrs	r5, r5, r2
 109:quantum/dip_switch.c ****         if (last_dip_switch_state[i] != dip_switch_state[i] || forced) {
 193              		.loc 1 109 34 view .LVU33
 194 0038 16F8012B 		ldrb	r2, [r6], #1	@ zero_extendqisi2
 195              		.loc 1 109 12 view .LVU34
 196 003c 9142     		cmp	r1, r2
 197 003e E0B2     		uxtb	r0, r4
 198              	.LVL10:
 103:quantum/dip_switch.c **** #endif
 199              		.loc 1 103 9 is_stmt 1 view .LVU35
 108:quantum/dip_switch.c ****         if (last_dip_switch_state[i] != dip_switch_state[i] || forced) {
 200              		.loc 1 108 9 view .LVU36
 201              		.loc 1 109 9 view .LVU37
 202              		.loc 1 109 12 is_stmt 0 view .LVU38
 203 0040 02D1     		bne	.L6
 204              		.loc 1 109 61 discriminator 1 view .LVU39
 205 0042 BAF1000F 		cmp	r10, #0
 206 0046 02D0     		beq	.L7
 207              	.L6:
 110:quantum/dip_switch.c ****             has_dip_state_changed = true;
 208              		.loc 1 110 13 is_stmt 1 view .LVU40
 209              	.LVL11:
 111:quantum/dip_switch.c ****             dip_switch_update_kb(i, dip_switch_state[i]);
 210              		.loc 1 111 13 view .LVU41
 211 0048 FFF7FEFF 		bl	dip_switch_update_kb
 212              	.LVL12:
 110:quantum/dip_switch.c ****             has_dip_state_changed = true;
 213              		.loc 1 110 35 is_stmt 0 view .LVU42
 214 004c 0123     		movs	r3, #1
 215              	.LVL13:
 216              	.L7:
 101:quantum/dip_switch.c **** #ifdef DIP_SWITCH_PINS
 217              		.loc 1 101 54 is_stmt 1 discriminator 2 view .LVU43
 101:quantum/dip_switch.c **** #ifdef DIP_SWITCH_PINS
 218              		.loc 1 101 27 discriminator 2 view .LVU44
 219 004e 0134     		adds	r4, r4, #1
 220              	.LVL14:
 101:quantum/dip_switch.c **** #ifdef DIP_SWITCH_PINS
 221              		.loc 1 101 27 is_stmt 0 discriminator 2 view .LVU45
 222 0050 042C     		cmp	r4, #4
 223 0052 E1D1     		bne	.L8
 224              	.LBE3:
 112:quantum/dip_switch.c ****         }
 113:quantum/dip_switch.c ****     }
 114:quantum/dip_switch.c ****     if (has_dip_state_changed) {
 225              		.loc 1 114 5 is_stmt 1 view .LVU46
 226              		.loc 1 114 8 is_stmt 0 view .LVU47
 227 0054 33B1     		cbz	r3, .L5
 115:quantum/dip_switch.c ****         dip_switch_update_mask_kb(dip_switch_mask);
 228              		.loc 1 115 9 is_stmt 1 view .LVU48
 229 0056 2846     		mov	r0, r5
 230 0058 FFF7FEFF 		bl	dip_switch_update_mask_kb
 231              	.LVL15:
 116:quantum/dip_switch.c ****         memcpy(last_dip_switch_state, dip_switch_state, sizeof(dip_switch_state));
 232              		.loc 1 116 9 view .LVU49
 233 005c D9F80030 		ldr	r3, [r9]	@ unaligned
 234 0060 C8F80030 		str	r3, [r8]	@ unaligned
 235              	.L5:
 117:quantum/dip_switch.c ****     }
 118:quantum/dip_switch.c **** }
 236              		.loc 1 118 1 is_stmt 0 view .LVU50
 237 0064 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 238              	.LVL16:
 239              	.L18:
 240              		.loc 1 118 1 view .LVU51
 241              		.align	2
 242              	.L17:
 243 0068 00000000 		.word	.LANCHOR1
 244 006c 00000000 		.word	.LANCHOR2
 245 0070 00000000 		.word	.LANCHOR0
 246              		.cfi_endproc
 247              	.LFE346:
 249              		.section	.text.dip_switch_init,"ax",%progbits
 250              		.align	1
 251              		.global	dip_switch_init
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 255              		.fpu fpv4-sp-d16
 257              	dip_switch_init:
 258              	.LFB345:
  63:quantum/dip_switch.c **** #ifdef DIP_SWITCH_PINS
 259              		.loc 1 63 28 is_stmt 1 view -0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
  73:quantum/dip_switch.c ****         setPinInputHigh(dip_switch_pad[i]);
 263              		.loc 1 73 5 view .LVU53
 264              	.LBB4:
  73:quantum/dip_switch.c ****         setPinInputHigh(dip_switch_pad[i]);
 265              		.loc 1 73 10 view .LVU54
 266              	.LVL17:
  73:quantum/dip_switch.c ****         setPinInputHigh(dip_switch_pad[i]);
 267              		.loc 1 73 27 view .LVU55
 268              	.LBE4:
  63:quantum/dip_switch.c **** #ifdef DIP_SWITCH_PINS
 269              		.loc 1 63 28 is_stmt 0 view .LVU56
 270 0000 70B5     		push	{r4, r5, r6, lr}
 271              		.cfi_def_cfa_offset 16
 272              		.cfi_offset 4, -16
 273              		.cfi_offset 5, -12
 274              		.cfi_offset 6, -8
 275              		.cfi_offset 14, -4
 276 0002 0B4D     		ldr	r5, .L22
  63:quantum/dip_switch.c **** #ifdef DIP_SWITCH_PINS
 277              		.loc 1 63 28 view .LVU57
 278 0004 0424     		movs	r4, #4
 279              	.LBB5:
  74:quantum/dip_switch.c ****     }
 280              		.loc 1 74 9 view .LVU58
 281 0006 0126     		movs	r6, #1
 282              	.LVL18:
 283              	.L20:
  74:quantum/dip_switch.c ****     }
 284              		.loc 1 74 9 is_stmt 1 discriminator 3 view .LVU59
 285 0008 55F8040B 		ldr	r0, [r5], #4
 286 000c 00F00F01 		and	r1, r0, #15
 287 0010 2022     		movs	r2, #32
 288 0012 06FA01F1 		lsl	r1, r6, r1
 289 0016 20F00F00 		bic	r0, r0, #15
  73:quantum/dip_switch.c ****         setPinInputHigh(dip_switch_pad[i]);
 290              		.loc 1 73 27 is_stmt 0 discriminator 3 view .LVU60
 291 001a 013C     		subs	r4, r4, #1
 292              	.LVL19:
  74:quantum/dip_switch.c ****     }
 293              		.loc 1 74 9 discriminator 3 view .LVU61
 294 001c FFF7FEFF 		bl	_pal_lld_setgroupmode
 295              	.LVL20:
  73:quantum/dip_switch.c ****         setPinInputHigh(dip_switch_pad[i]);
 296              		.loc 1 73 54 is_stmt 1 discriminator 3 view .LVU62
  73:quantum/dip_switch.c ****         setPinInputHigh(dip_switch_pad[i]);
 297              		.loc 1 73 27 discriminator 3 view .LVU63
 298 0020 14F0FF04 		ands	r4, r4, #255
 299 0024 F0D1     		bne	.L20
 300              	.LBE5:
  76:quantum/dip_switch.c **** #endif
 301              		.loc 1 76 5 view .LVU64
  81:quantum/dip_switch.c **** 
 302              		.loc 1 81 1 is_stmt 0 view .LVU65
 303 0026 BDE87040 		pop	{r4, r5, r6, lr}
 304              		.cfi_restore 14
 305              		.cfi_restore 6
 306              		.cfi_restore 5
 307              		.cfi_restore 4
 308              		.cfi_def_cfa_offset 0
  76:quantum/dip_switch.c **** #endif
 309              		.loc 1 76 5 view .LVU66
 310 002a 0120     		movs	r0, #1
 311 002c FFF7FEBF 		b	dip_switch_read
 312              	.LVL21:
 313              	.L23:
 314              		.align	2
 315              	.L22:
 316 0030 00000000 		.word	.LANCHOR0
 317              		.cfi_endproc
 318              	.LFE345:
 320              		.section	.bss.dip_switch_state,"aw",%nobits
 321              		.set	.LANCHOR1,. + 0
 324              	dip_switch_state:
 325 0000 00000000 		.space	4
 326              		.section	.bss.last_dip_switch_state,"aw",%nobits
 327              		.set	.LANCHOR2,. + 0
 330              	last_dip_switch_state:
 331 0000 00000000 		.space	4
 332              		.section	.rodata.dip_switch_pad,"a"
 333              		.align	2
 334              		.set	.LANCHOR0,. + 0
 337              	dip_switch_pad:
 338 0000 0E040048 		.word	1207960590
 339 0004 0F000048 		.word	1207959567
 340 0008 00000048 		.word	1207959552
 341 000c 09040048 		.word	1207960585
 342              		.text
 343              	.Letext0:
 344              		.file 2 "/usr/lib/gcc/arm-none-eabi/11.2.0/include/stddef.h"
 345              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 346              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 347              		.file 5 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/stm32_gpio.h"
 348              		.file 6 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 349              		.file 7 "tmk_core/common/chibios/gpio.h"
 350              		.file 8 "quantum/sequencer/sequencer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 dip_switch.c
     /tmp/cc8DXbIK.s:18     .text.dip_switch_update_user:0000000000000000 $t
     /tmp/cc8DXbIK.s:26     .text.dip_switch_update_user:0000000000000000 dip_switch_update_user
     /tmp/cc8DXbIK.s:45     .text.dip_switch_update_kb:0000000000000000 $t
     /tmp/cc8DXbIK.s:52     .text.dip_switch_update_kb:0000000000000000 dip_switch_update_kb
     /tmp/cc8DXbIK.s:74     .text.dip_switch_update_mask_user:0000000000000000 $t
     /tmp/cc8DXbIK.s:81     .text.dip_switch_update_mask_user:0000000000000000 dip_switch_update_mask_user
     /tmp/cc8DXbIK.s:99     .text.dip_switch_update_mask_kb:0000000000000000 $t
     /tmp/cc8DXbIK.s:106    .text.dip_switch_update_mask_kb:0000000000000000 dip_switch_update_mask_kb
     /tmp/cc8DXbIK.s:128    .text.dip_switch_read:0000000000000000 $t
     /tmp/cc8DXbIK.s:135    .text.dip_switch_read:0000000000000000 dip_switch_read
     /tmp/cc8DXbIK.s:243    .text.dip_switch_read:0000000000000068 $d
     /tmp/cc8DXbIK.s:250    .text.dip_switch_init:0000000000000000 $t
     /tmp/cc8DXbIK.s:257    .text.dip_switch_init:0000000000000000 dip_switch_init
     /tmp/cc8DXbIK.s:316    .text.dip_switch_init:0000000000000030 $d
     /tmp/cc8DXbIK.s:324    .bss.dip_switch_state:0000000000000000 dip_switch_state
     /tmp/cc8DXbIK.s:325    .bss.dip_switch_state:0000000000000000 $d
     /tmp/cc8DXbIK.s:330    .bss.last_dip_switch_state:0000000000000000 last_dip_switch_state
     /tmp/cc8DXbIK.s:331    .bss.last_dip_switch_state:0000000000000000 $d
     /tmp/cc8DXbIK.s:333    .rodata.dip_switch_pad:0000000000000000 $d
     /tmp/cc8DXbIK.s:337    .rodata.dip_switch_pad:0000000000000000 dip_switch_pad

UNDEFINED SYMBOLS
_pal_lld_setgroupmode
