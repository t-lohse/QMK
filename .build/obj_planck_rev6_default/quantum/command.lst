   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"command.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.mousekey_param_print.str1.1,"aMS",%progbits,1
  18              	.LC0:
  19 0000 313A0964 		.ascii	"1:\011delay(*10ms): %u\0122:\011interval(ms): %u\012"
  19      656C6179 
  19      282A3130 
  19      6D73293A 
  19      2025750A 
  20 0028 333A096D 		.ascii	"3:\011max_speed: %u\0124:\011time_to_max: %u\0125:\011"
  20      61785F73 
  20      70656564 
  20      3A202575 
  20      0A343A09 
  21 004f 77686565 		.ascii	"wheel_max_speed: %u\0126:\011wheel_time_to_max: %u\012"
  21      6C5F6D61 
  21      785F7370 
  21      6565643A 
  21      2025750A 
  22 007c 00       		.ascii	"\000"
  23              		.section	.text.mousekey_param_print,"ax",%progbits
  24              		.align	1
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	mousekey_param_print:
  32              	.LFB351:
  33              		.file 1 "quantum/command.c"
   1:quantum/command.c **** /*
   2:quantum/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:quantum/command.c **** 
   4:quantum/command.c **** This program is free software: you can redistribute it and/or modify
   5:quantum/command.c **** it under the terms of the GNU General Public License as published by
   6:quantum/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:quantum/command.c **** (at your option) any later version.
   8:quantum/command.c **** 
   9:quantum/command.c **** This program is distributed in the hope that it will be useful,
  10:quantum/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:quantum/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:quantum/command.c **** GNU General Public License for more details.
  13:quantum/command.c **** 
  14:quantum/command.c **** You should have received a copy of the GNU General Public License
  15:quantum/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:quantum/command.c **** */
  17:quantum/command.c **** #include <stdint.h>
  18:quantum/command.c **** #include <stdbool.h>
  19:quantum/command.c **** #include "wait.h"
  20:quantum/command.c **** #include "keycode.h"
  21:quantum/command.c **** #include "host.h"
  22:quantum/command.c **** #include "keymap.h"
  23:quantum/command.c **** #include "print.h"
  24:quantum/command.c **** #include "debug.h"
  25:quantum/command.c **** #include "util.h"
  26:quantum/command.c **** #include "timer.h"
  27:quantum/command.c **** #include "keyboard.h"
  28:quantum/command.c **** #include "bootloader.h"
  29:quantum/command.c **** #include "action_layer.h"
  30:quantum/command.c **** #include "action_util.h"
  31:quantum/command.c **** #include "eeconfig.h"
  32:quantum/command.c **** #include "sleep_led.h"
  33:quantum/command.c **** #include "led.h"
  34:quantum/command.c **** #include "command.h"
  35:quantum/command.c **** #include "quantum.h"
  36:quantum/command.c **** #include "version.h"
  37:quantum/command.c **** 
  38:quantum/command.c **** #ifdef BACKLIGHT_ENABLE
  39:quantum/command.c **** #    include "backlight.h"
  40:quantum/command.c **** #endif
  41:quantum/command.c **** 
  42:quantum/command.c **** #if defined(MOUSEKEY_ENABLE)
  43:quantum/command.c **** #    include "mousekey.h"
  44:quantum/command.c **** #endif
  45:quantum/command.c **** 
  46:quantum/command.c **** #ifdef AUDIO_ENABLE
  47:quantum/command.c **** #    include "audio.h"
  48:quantum/command.c **** #endif /* AUDIO_ENABLE */
  49:quantum/command.c **** 
  50:quantum/command.c **** static bool command_common(uint8_t code);
  51:quantum/command.c **** static void command_common_help(void);
  52:quantum/command.c **** static void print_version(void);
  53:quantum/command.c **** static void print_status(void);
  54:quantum/command.c **** static bool command_console(uint8_t code);
  55:quantum/command.c **** static void command_console_help(void);
  56:quantum/command.c **** #if defined(MOUSEKEY_ENABLE)
  57:quantum/command.c **** static bool mousekey_console(uint8_t code);
  58:quantum/command.c **** #endif
  59:quantum/command.c **** 
  60:quantum/command.c **** static void switch_default_layer(uint8_t layer);
  61:quantum/command.c **** 
  62:quantum/command.c **** command_state_t command_state = ONESHOT;
  63:quantum/command.c **** 
  64:quantum/command.c **** bool command_proc(uint8_t code) {
  65:quantum/command.c ****     switch (command_state) {
  66:quantum/command.c ****         case ONESHOT:
  67:quantum/command.c ****             if (!IS_COMMAND()) return false;
  68:quantum/command.c ****             return (command_extra(code) || command_common(code));
  69:quantum/command.c ****             break;
  70:quantum/command.c ****         case CONSOLE:
  71:quantum/command.c ****             if (IS_COMMAND())
  72:quantum/command.c ****                 return (command_extra(code) || command_common(code));
  73:quantum/command.c ****             else
  74:quantum/command.c ****                 return (command_console_extra(code) || command_console(code));
  75:quantum/command.c ****             break;
  76:quantum/command.c **** #if defined(MOUSEKEY_ENABLE)
  77:quantum/command.c ****         case MOUSEKEY:
  78:quantum/command.c ****             mousekey_console(code);
  79:quantum/command.c ****             break;
  80:quantum/command.c **** #endif
  81:quantum/command.c ****         default:
  82:quantum/command.c ****             command_state = ONESHOT;
  83:quantum/command.c ****             return false;
  84:quantum/command.c ****     }
  85:quantum/command.c ****     return true;
  86:quantum/command.c **** }
  87:quantum/command.c **** 
  88:quantum/command.c **** /* TODO: Refactoring is needed. */
  89:quantum/command.c **** /* This allows to define extra commands. return false when not processed. */
  90:quantum/command.c **** bool command_extra(uint8_t code) __attribute__((weak));
  91:quantum/command.c **** bool command_extra(uint8_t code) {
  92:quantum/command.c ****     (void)code;
  93:quantum/command.c ****     return false;
  94:quantum/command.c **** }
  95:quantum/command.c **** 
  96:quantum/command.c **** bool command_console_extra(uint8_t code) __attribute__((weak));
  97:quantum/command.c **** bool command_console_extra(uint8_t code) {
  98:quantum/command.c ****     (void)code;
  99:quantum/command.c ****     return false;
 100:quantum/command.c **** }
 101:quantum/command.c **** 
 102:quantum/command.c **** /***********************************************************
 103:quantum/command.c ****  * Command common
 104:quantum/command.c ****  ***********************************************************/
 105:quantum/command.c **** 
 106:quantum/command.c **** static void command_common_help(void) {
 107:quantum/command.c ****     print(/* clang-format off */
 108:quantum/command.c ****         "\n\t- Magic -\n"
 109:quantum/command.c **** 
 110:quantum/command.c ****         STR(MAGIC_KEY_DEBUG) ":	Debug Message Toggle\n"
 111:quantum/command.c ****         STR(MAGIC_KEY_DEBUG_MATRIX) ":	Matrix Debug Mode Toggle"
 112:quantum/command.c ****             " - Show keypresses in matrix grid\n"
 113:quantum/command.c ****         STR(MAGIC_KEY_DEBUG_KBD) ":	Keyboard Debug Toggle"
 114:quantum/command.c ****             " - Show keypress report\n"
 115:quantum/command.c ****         STR(MAGIC_KEY_DEBUG_MOUSE) ":	Debug Mouse Toggle\n"
 116:quantum/command.c ****         STR(MAGIC_KEY_VERSION) ":	Version\n"
 117:quantum/command.c ****         STR(MAGIC_KEY_STATUS) ":	Status\n"
 118:quantum/command.c ****         STR(MAGIC_KEY_CONSOLE) ":	Activate Console Mode\n"
 119:quantum/command.c **** 
 120:quantum/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 121:quantum/command.c ****         STR(MAGIC_KEY_LAYER0) ":	Switch to Layer 0\n"
 122:quantum/command.c ****         STR(MAGIC_KEY_LAYER1) ":	Switch to Layer 1\n"
 123:quantum/command.c ****         STR(MAGIC_KEY_LAYER2) ":	Switch to Layer 2\n"
 124:quantum/command.c ****         STR(MAGIC_KEY_LAYER3) ":	Switch to Layer 3\n"
 125:quantum/command.c ****         STR(MAGIC_KEY_LAYER4) ":	Switch to Layer 4\n"
 126:quantum/command.c ****         STR(MAGIC_KEY_LAYER5) ":	Switch to Layer 5\n"
 127:quantum/command.c ****         STR(MAGIC_KEY_LAYER6) ":	Switch to Layer 6\n"
 128:quantum/command.c ****         STR(MAGIC_KEY_LAYER7) ":	Switch to Layer 7\n"
 129:quantum/command.c ****         STR(MAGIC_KEY_LAYER8) ":	Switch to Layer 8\n"
 130:quantum/command.c ****         STR(MAGIC_KEY_LAYER9) ":	Switch to Layer 9\n"
 131:quantum/command.c **** #endif
 132:quantum/command.c **** 
 133:quantum/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 134:quantum/command.c ****         "F1-F10:	Switch to Layer 0-9 (F10 = L0)\n"
 135:quantum/command.c **** #endif
 136:quantum/command.c **** 
 137:quantum/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 138:quantum/command.c ****         "0-9:	Switch to Layer 0-9\n"
 139:quantum/command.c **** #endif
 140:quantum/command.c **** 
 141:quantum/command.c ****         STR(MAGIC_KEY_LAYER0_ALT) ":	Switch to Layer 0 (alternate)\n"
 142:quantum/command.c **** 
 143:quantum/command.c ****         STR(MAGIC_KEY_BOOTLOADER) ":	Jump to Bootloader\n"
 144:quantum/command.c ****         STR(MAGIC_KEY_BOOTLOADER_ALT) ":	Jump to Bootloader (alternate)\n"
 145:quantum/command.c **** 
 146:quantum/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 147:quantum/command.c ****         STR(MAGIC_KEY_LOCK) ":	Lock Keyboard\n"
 148:quantum/command.c **** #endif
 149:quantum/command.c **** 
 150:quantum/command.c ****         STR(MAGIC_KEY_EEPROM) ":	Print EEPROM Settings\n"
 151:quantum/command.c ****         STR(MAGIC_KEY_EEPROM_CLEAR) ":	Clear EEPROM\n"
 152:quantum/command.c **** 
 153:quantum/command.c **** #ifdef NKRO_ENABLE
 154:quantum/command.c ****         STR(MAGIC_KEY_NKRO) ":	NKRO Toggle\n"
 155:quantum/command.c **** #endif
 156:quantum/command.c **** 
 157:quantum/command.c **** #ifdef SLEEP_LED_ENABLE
 158:quantum/command.c ****         STR(MAGIC_KEY_SLEEP_LED) ":	Sleep LED Test\n"
 159:quantum/command.c **** #endif
 160:quantum/command.c ****     ); /* clang-format on */
 161:quantum/command.c **** }
 162:quantum/command.c **** 
 163:quantum/command.c **** static void print_version(void) {
 164:quantum/command.c ****     print(/* clang-format off */
 165:quantum/command.c ****         "\n\t- Version -\n"
 166:quantum/command.c ****         "VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 167:quantum/command.c ****         "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 168:quantum/command.c ****         "VER: " STR(DEVICE_VER) "\n"
 169:quantum/command.c ****         "BUILD:  (" __DATE__ ")\n"
 170:quantum/command.c **** #ifndef SKIP_VERSION
 171:quantum/command.c **** #    ifdef PROTOCOL_CHIBIOS
 172:quantum/command.c ****         "CHIBIOS: " STR(CHIBIOS_VERSION)
 173:quantum/command.c ****             ", CONTRIB: " STR(CHIBIOS_CONTRIB_VERSION) "\n"
 174:quantum/command.c **** #    endif
 175:quantum/command.c **** #endif
 176:quantum/command.c **** 
 177:quantum/command.c ****     /* build options */
 178:quantum/command.c ****         "OPTIONS:"
 179:quantum/command.c **** 
 180:quantum/command.c **** #ifdef PROTOCOL_LUFA
 181:quantum/command.c ****         " LUFA"
 182:quantum/command.c **** #endif
 183:quantum/command.c **** #ifdef PROTOCOL_VUSB
 184:quantum/command.c ****         " VUSB"
 185:quantum/command.c **** #endif
 186:quantum/command.c **** #ifdef BOOTMAGIC_ENABLE
 187:quantum/command.c ****         " BOOTMAGIC"
 188:quantum/command.c **** #endif
 189:quantum/command.c **** #ifdef MOUSEKEY_ENABLE
 190:quantum/command.c ****         " MOUSEKEY"
 191:quantum/command.c **** #endif
 192:quantum/command.c **** #ifdef EXTRAKEY_ENABLE
 193:quantum/command.c ****         " EXTRAKEY"
 194:quantum/command.c **** #endif
 195:quantum/command.c **** #ifdef CONSOLE_ENABLE
 196:quantum/command.c ****         " CONSOLE"
 197:quantum/command.c **** #endif
 198:quantum/command.c **** #ifdef COMMAND_ENABLE
 199:quantum/command.c ****         " COMMAND"
 200:quantum/command.c **** #endif
 201:quantum/command.c **** #ifdef NKRO_ENABLE
 202:quantum/command.c ****         " NKRO"
 203:quantum/command.c **** #endif
 204:quantum/command.c **** #ifdef LTO_ENABLE
 205:quantum/command.c ****         " LTO"
 206:quantum/command.c **** #endif
 207:quantum/command.c **** 
 208:quantum/command.c ****         " " STR(BOOTLOADER_SIZE) "\n"
 209:quantum/command.c **** 
 210:quantum/command.c ****         "GCC: " STR(__GNUC__)
 211:quantum/command.c ****             "." STR(__GNUC_MINOR__)
 212:quantum/command.c ****             "." STR(__GNUC_PATCHLEVEL__)
 213:quantum/command.c **** #if defined(__AVR__)
 214:quantum/command.c ****         " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 215:quantum/command.c ****         " AVR_ARCH: avr" STR(__AVR_ARCH__)
 216:quantum/command.c **** #endif
 217:quantum/command.c ****         "\n"
 218:quantum/command.c ****     ); /* clang-format on */
 219:quantum/command.c **** }
 220:quantum/command.c **** 
 221:quantum/command.c **** static void print_status(void) {
 222:quantum/command.c ****     xprintf(/* clang-format off */
 223:quantum/command.c ****         "\n\t- Status -\n"
 224:quantum/command.c **** 
 225:quantum/command.c ****         "host_keyboard_leds(): %02X\n"
 226:quantum/command.c **** #ifndef PROTOCOL_VUSB
 227:quantum/command.c ****         "keyboard_protocol: %02X\n"
 228:quantum/command.c ****         "keyboard_idle: %02X\n"
 229:quantum/command.c **** #endif
 230:quantum/command.c **** #ifdef NKRO_ENABLE
 231:quantum/command.c ****         "keymap_config.nkro: %02X\n"
 232:quantum/command.c **** #endif
 233:quantum/command.c ****         "timer_read32(): %08lX\n"
 234:quantum/command.c **** 
 235:quantum/command.c ****         , host_keyboard_leds()
 236:quantum/command.c **** #ifndef PROTOCOL_VUSB
 237:quantum/command.c ****         /* these aren't set on the V-USB protocol, so we just ignore them for now */
 238:quantum/command.c ****         , keyboard_protocol
 239:quantum/command.c ****         , keyboard_idle
 240:quantum/command.c **** #endif
 241:quantum/command.c **** #ifdef NKRO_ENABLE
 242:quantum/command.c ****         , keymap_config.nkro
 243:quantum/command.c **** #endif
 244:quantum/command.c ****         , timer_read32()
 245:quantum/command.c **** 
 246:quantum/command.c ****     ); /* clang-format on */
 247:quantum/command.c **** }
 248:quantum/command.c **** 
 249:quantum/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 250:quantum/command.c **** static void print_eeconfig(void) {
 251:quantum/command.c ****     xprintf("eeconfig:\ndefault_layer: %u\n", eeconfig_read_default_layer());
 252:quantum/command.c **** 
 253:quantum/command.c ****     debug_config_t dc;
 254:quantum/command.c ****     dc.raw = eeconfig_read_debug();
 255:quantum/command.c ****     xprintf(/* clang-format off */
 256:quantum/command.c **** 
 257:quantum/command.c ****         "debug_config.raw: %02X\n"
 258:quantum/command.c ****         ".enable: %u\n"
 259:quantum/command.c ****         ".matrix: %u\n"
 260:quantum/command.c ****         ".keyboard: %u\n"
 261:quantum/command.c ****         ".mouse: %u\n"
 262:quantum/command.c **** 
 263:quantum/command.c ****         , dc.raw
 264:quantum/command.c ****         , dc.enable
 265:quantum/command.c ****         , dc.matrix
 266:quantum/command.c ****         , dc.keyboard
 267:quantum/command.c ****         , dc.mouse
 268:quantum/command.c ****     ); /* clang-format on */
 269:quantum/command.c **** 
 270:quantum/command.c ****     keymap_config_t kc;
 271:quantum/command.c ****     kc.raw = eeconfig_read_keymap();
 272:quantum/command.c ****     xprintf(/* clang-format off */
 273:quantum/command.c **** 
 274:quantum/command.c ****         "keymap_config.raw: %02X\n"
 275:quantum/command.c ****         ".swap_control_capslock: %u\n"
 276:quantum/command.c ****         ".capslock_to_control: %u\n"
 277:quantum/command.c ****         ".swap_lctl_lgui: %u\n"
 278:quantum/command.c ****         ".swap_rctl_rgui: %u\n"
 279:quantum/command.c ****         ".swap_lalt_lgui: %u\n"
 280:quantum/command.c ****         ".swap_ralt_rgui: %u\n"
 281:quantum/command.c ****         ".no_gui: %u\n"
 282:quantum/command.c ****         ".swap_grave_esc: %u\n"
 283:quantum/command.c ****         ".swap_backslash_backspace: %u\n"
 284:quantum/command.c ****         ".nkro: %u\n"
 285:quantum/command.c **** 
 286:quantum/command.c ****         , kc.raw
 287:quantum/command.c ****         , kc.swap_control_capslock
 288:quantum/command.c ****         , kc.capslock_to_control
 289:quantum/command.c ****         , kc.swap_lctl_lgui
 290:quantum/command.c ****         , kc.swap_rctl_rgui
 291:quantum/command.c ****         , kc.swap_lalt_lgui
 292:quantum/command.c ****         , kc.swap_ralt_rgui
 293:quantum/command.c ****         , kc.no_gui
 294:quantum/command.c ****         , kc.swap_grave_esc
 295:quantum/command.c ****         , kc.swap_backslash_backspace
 296:quantum/command.c ****         , kc.nkro
 297:quantum/command.c ****     ); /* clang-format on */
 298:quantum/command.c **** 
 299:quantum/command.c **** #    ifdef BACKLIGHT_ENABLE
 300:quantum/command.c **** 
 301:quantum/command.c ****     backlight_config_t bc;
 302:quantum/command.c ****     bc.raw = eeconfig_read_backlight();
 303:quantum/command.c ****     xprintf(/* clang-format off */
 304:quantum/command.c ****         "backlight_config"
 305:quantum/command.c **** 
 306:quantum/command.c ****         ".raw: %02X\n"
 307:quantum/command.c ****         ".enable: %u\n"
 308:quantum/command.c ****         ".level: %u\n"
 309:quantum/command.c **** 
 310:quantum/command.c ****         , bc.raw
 311:quantum/command.c ****         , bc.enable
 312:quantum/command.c ****         , bc.level
 313:quantum/command.c **** 
 314:quantum/command.c ****     ); /* clang-format on */
 315:quantum/command.c **** 
 316:quantum/command.c **** #    endif /* BACKLIGHT_ENABLE */
 317:quantum/command.c **** }
 318:quantum/command.c **** #endif /* !NO_PRINT && !USER_PRINT */
 319:quantum/command.c **** 
 320:quantum/command.c **** static bool command_common(uint8_t code) {
 321:quantum/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 322:quantum/command.c ****     static host_driver_t *host_driver = 0;
 323:quantum/command.c **** #endif
 324:quantum/command.c **** 
 325:quantum/command.c ****     switch (code) {
 326:quantum/command.c **** #ifdef SLEEP_LED_ENABLE
 327:quantum/command.c **** 
 328:quantum/command.c ****         // test breathing sleep LED
 329:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 330:quantum/command.c ****             print("Sleep LED Test\n");
 331:quantum/command.c ****             sleep_led_toggle();
 332:quantum/command.c ****             led_set(host_keyboard_leds());
 333:quantum/command.c ****             break;
 334:quantum/command.c **** #endif
 335:quantum/command.c **** 
 336:quantum/command.c ****         // print stored eeprom config
 337:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 338:quantum/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 339:quantum/command.c ****             print_eeconfig();
 340:quantum/command.c **** #endif /* !NO_PRINT && !USER_PRINT */
 341:quantum/command.c ****             break;
 342:quantum/command.c **** 
 343:quantum/command.c ****         // clear eeprom
 344:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM_CLEAR):
 345:quantum/command.c ****             print("Clearing EEPROM\n");
 346:quantum/command.c ****             eeconfig_init();
 347:quantum/command.c ****             break;
 348:quantum/command.c **** 
 349:quantum/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 350:quantum/command.c **** 
 351:quantum/command.c ****         // lock/unlock keyboard
 352:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 353:quantum/command.c ****             if (host_get_driver()) {
 354:quantum/command.c ****                 host_driver = host_get_driver();
 355:quantum/command.c ****                 clear_keyboard();
 356:quantum/command.c ****                 host_set_driver(0);
 357:quantum/command.c ****                 print("Locked.\n");
 358:quantum/command.c ****             } else {
 359:quantum/command.c ****                 host_set_driver(host_driver);
 360:quantum/command.c ****                 print("Unlocked.\n");
 361:quantum/command.c ****             }
 362:quantum/command.c ****             break;
 363:quantum/command.c **** #endif
 364:quantum/command.c **** 
 365:quantum/command.c ****         // print help
 366:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP):
 367:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP_ALT):
 368:quantum/command.c ****             command_common_help();
 369:quantum/command.c ****             break;
 370:quantum/command.c **** 
 371:quantum/command.c ****         // activate console
 372:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 373:quantum/command.c ****             debug_matrix   = false;
 374:quantum/command.c ****             debug_keyboard = false;
 375:quantum/command.c ****             debug_mouse    = false;
 376:quantum/command.c ****             debug_enable   = false;
 377:quantum/command.c ****             command_console_help();
 378:quantum/command.c ****             print("C> ");
 379:quantum/command.c ****             command_state = CONSOLE;
 380:quantum/command.c ****             break;
 381:quantum/command.c **** 
 382:quantum/command.c ****         // jump to bootloader
 383:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 384:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER_ALT):
 385:quantum/command.c ****             print("\n\nJumping to bootloader... ");
 386:quantum/command.c ****             reset_keyboard();
 387:quantum/command.c ****             break;
 388:quantum/command.c **** 
 389:quantum/command.c ****         // debug toggle
 390:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 391:quantum/command.c ****             debug_enable = !debug_enable;
 392:quantum/command.c ****             if (debug_enable) {
 393:quantum/command.c ****                 print("\ndebug: on\n");
 394:quantum/command.c ****             } else {
 395:quantum/command.c ****                 print("\ndebug: off\n");
 396:quantum/command.c ****                 debug_matrix   = false;
 397:quantum/command.c ****                 debug_keyboard = false;
 398:quantum/command.c ****                 debug_mouse    = false;
 399:quantum/command.c ****             }
 400:quantum/command.c ****             break;
 401:quantum/command.c **** 
 402:quantum/command.c ****         // debug matrix toggle
 403:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 404:quantum/command.c ****             debug_matrix = !debug_matrix;
 405:quantum/command.c ****             if (debug_matrix) {
 406:quantum/command.c ****                 print("\nmatrix: on\n");
 407:quantum/command.c ****                 debug_enable = true;
 408:quantum/command.c ****             } else {
 409:quantum/command.c ****                 print("\nmatrix: off\n");
 410:quantum/command.c ****             }
 411:quantum/command.c ****             break;
 412:quantum/command.c **** 
 413:quantum/command.c ****         // debug keyboard toggle
 414:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 415:quantum/command.c ****             debug_keyboard = !debug_keyboard;
 416:quantum/command.c ****             if (debug_keyboard) {
 417:quantum/command.c ****                 print("\nkeyboard: on\n");
 418:quantum/command.c ****                 debug_enable = true;
 419:quantum/command.c ****             } else {
 420:quantum/command.c ****                 print("\nkeyboard: off\n");
 421:quantum/command.c ****             }
 422:quantum/command.c ****             break;
 423:quantum/command.c **** 
 424:quantum/command.c ****         // debug mouse toggle
 425:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 426:quantum/command.c ****             debug_mouse = !debug_mouse;
 427:quantum/command.c ****             if (debug_mouse) {
 428:quantum/command.c ****                 print("\nmouse: on\n");
 429:quantum/command.c ****                 debug_enable = true;
 430:quantum/command.c ****             } else {
 431:quantum/command.c ****                 print("\nmouse: off\n");
 432:quantum/command.c ****             }
 433:quantum/command.c ****             break;
 434:quantum/command.c **** 
 435:quantum/command.c ****         // print version
 436:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 437:quantum/command.c ****             print_version();
 438:quantum/command.c ****             break;
 439:quantum/command.c **** 
 440:quantum/command.c ****         // print status
 441:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_STATUS):
 442:quantum/command.c ****             print_status();
 443:quantum/command.c ****             break;
 444:quantum/command.c **** 
 445:quantum/command.c **** #ifdef NKRO_ENABLE
 446:quantum/command.c **** 
 447:quantum/command.c ****         // NKRO toggle
 448:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 449:quantum/command.c ****             clear_keyboard();  // clear to prevent stuck keys
 450:quantum/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 451:quantum/command.c ****             if (keymap_config.nkro) {
 452:quantum/command.c ****                 print("NKRO: on\n");
 453:quantum/command.c ****             } else {
 454:quantum/command.c ****                 print("NKRO: off\n");
 455:quantum/command.c ****             }
 456:quantum/command.c ****             break;
 457:quantum/command.c **** #endif
 458:quantum/command.c **** 
 459:quantum/command.c ****             // switch layers
 460:quantum/command.c **** 
 461:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER0_ALT):
 462:quantum/command.c ****             switch_default_layer(0);
 463:quantum/command.c ****             break;
 464:quantum/command.c **** 
 465:quantum/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 466:quantum/command.c **** 
 467:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER0):
 468:quantum/command.c ****             switch_default_layer(0);
 469:quantum/command.c ****             break;
 470:quantum/command.c **** 
 471:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER1):
 472:quantum/command.c ****             switch_default_layer(1);
 473:quantum/command.c ****             break;
 474:quantum/command.c **** 
 475:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER2):
 476:quantum/command.c ****             switch_default_layer(2);
 477:quantum/command.c ****             break;
 478:quantum/command.c **** 
 479:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER3):
 480:quantum/command.c ****             switch_default_layer(3);
 481:quantum/command.c ****             break;
 482:quantum/command.c **** 
 483:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER4):
 484:quantum/command.c ****             switch_default_layer(4);
 485:quantum/command.c ****             break;
 486:quantum/command.c **** 
 487:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER5):
 488:quantum/command.c ****             switch_default_layer(5);
 489:quantum/command.c ****             break;
 490:quantum/command.c **** 
 491:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER6):
 492:quantum/command.c ****             switch_default_layer(6);
 493:quantum/command.c ****             break;
 494:quantum/command.c **** 
 495:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER7):
 496:quantum/command.c ****             switch_default_layer(7);
 497:quantum/command.c ****             break;
 498:quantum/command.c **** 
 499:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER8):
 500:quantum/command.c ****             switch_default_layer(8);
 501:quantum/command.c ****             break;
 502:quantum/command.c **** 
 503:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER9):
 504:quantum/command.c ****             switch_default_layer(9);
 505:quantum/command.c ****             break;
 506:quantum/command.c **** #endif
 507:quantum/command.c **** 
 508:quantum/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 509:quantum/command.c **** 
 510:quantum/command.c ****         case KC_F1 ... KC_F9:
 511:quantum/command.c ****             switch_default_layer((code - KC_F1) + 1);
 512:quantum/command.c ****             break;
 513:quantum/command.c ****         case KC_F10:
 514:quantum/command.c ****             switch_default_layer(0);
 515:quantum/command.c ****             break;
 516:quantum/command.c **** #endif
 517:quantum/command.c **** 
 518:quantum/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 519:quantum/command.c **** 
 520:quantum/command.c ****         case KC_1 ... KC_9:
 521:quantum/command.c ****             switch_default_layer((code - KC_1) + 1);
 522:quantum/command.c ****             break;
 523:quantum/command.c ****         case KC_0:
 524:quantum/command.c ****             switch_default_layer(0);
 525:quantum/command.c ****             break;
 526:quantum/command.c **** #endif
 527:quantum/command.c **** 
 528:quantum/command.c ****         default:
 529:quantum/command.c ****             print("?");
 530:quantum/command.c ****             return false;
 531:quantum/command.c ****     }
 532:quantum/command.c ****     return true;
 533:quantum/command.c **** }
 534:quantum/command.c **** 
 535:quantum/command.c **** /***********************************************************
 536:quantum/command.c ****  * Command console
 537:quantum/command.c ****  ***********************************************************/
 538:quantum/command.c **** static void command_console_help(void) {
 539:quantum/command.c ****     print("\n\t- Console -\n"
 540:quantum/command.c ****           "ESC/q:	quit\n"
 541:quantum/command.c **** #ifdef MOUSEKEY_ENABLE
 542:quantum/command.c ****           "m:	mousekey\n"
 543:quantum/command.c **** #endif
 544:quantum/command.c ****     );
 545:quantum/command.c **** }
 546:quantum/command.c **** 
 547:quantum/command.c **** static bool command_console(uint8_t code) {
 548:quantum/command.c ****     switch (code) {
 549:quantum/command.c ****         case KC_H:
 550:quantum/command.c ****         case KC_SLASH: /* ? */
 551:quantum/command.c ****             command_console_help();
 552:quantum/command.c ****             print("C> ");
 553:quantum/command.c ****             return true;
 554:quantum/command.c ****         case KC_Q:
 555:quantum/command.c ****         case KC_ESC:
 556:quantum/command.c ****             command_state = ONESHOT;
 557:quantum/command.c ****             return false;
 558:quantum/command.c **** #if defined(MOUSEKEY_ENABLE)
 559:quantum/command.c ****         case KC_M:
 560:quantum/command.c ****             command_state = MOUSEKEY;
 561:quantum/command.c ****             mousekey_console(KC_SLASH /* ? */);
 562:quantum/command.c ****             return true;
 563:quantum/command.c **** #endif
 564:quantum/command.c ****         default:
 565:quantum/command.c ****             print("?");
 566:quantum/command.c ****             return false;
 567:quantum/command.c ****     }
 568:quantum/command.c **** }
 569:quantum/command.c **** 
 570:quantum/command.c **** /***********************************************************
 571:quantum/command.c ****  * Mousekey console
 572:quantum/command.c ****  ***********************************************************/
 573:quantum/command.c **** 
 574:quantum/command.c **** #if defined(MOUSEKEY_ENABLE)
 575:quantum/command.c **** 
 576:quantum/command.c **** #    if !defined(NO_PRINT) && !defined(USER_PRINT)
 577:quantum/command.c **** static void mousekey_param_print(void) {
  34              		.loc 1 577 40 view -0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 0, uses_anonymous_args = 0
 578:quantum/command.c ****     xprintf(/* clang-format off */
  38              		.loc 1 578 5 view .LVU1
 577:quantum/command.c ****     xprintf(/* clang-format off */
  39              		.loc 1 577 40 is_stmt 0 view .LVU2
  40 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
  41              		.cfi_def_cfa_offset 24
  42              		.cfi_offset 14, -4
  43              		.loc 1 578 5 view .LVU3
  44 0002 0A4B     		ldr	r3, .L2
  45 0004 0A4A     		ldr	r2, .L2+4
  46 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  47 0008 0293     		str	r3, [sp, #8]
  48 000a 0A4B     		ldr	r3, .L2+8
  49 000c 0A49     		ldr	r1, .L2+12
  50 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  51 0010 0193     		str	r3, [sp, #4]
  52 0012 0A4B     		ldr	r3, .L2+16
  53 0014 0A48     		ldr	r0, .L2+20
  54 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  55 0018 0093     		str	r3, [sp]
  56 001a 0A4B     		ldr	r3, .L2+24
  57 001c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
  58 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  59 0020 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
  60 0022 FFF7FEFF 		bl	printf_
  61              	.LVL0:
 579:quantum/command.c **** 
 580:quantum/command.c **** #ifndef MK_3_SPEED
 581:quantum/command.c ****         "1:	delay(*10ms): %u\n"
 582:quantum/command.c ****         "2:	interval(ms): %u\n"
 583:quantum/command.c ****         "3:	max_speed: %u\n"
 584:quantum/command.c ****         "4:	time_to_max: %u\n"
 585:quantum/command.c ****         "5:	wheel_max_speed: %u\n"
 586:quantum/command.c ****         "6:	wheel_time_to_max: %u\n"
 587:quantum/command.c **** 
 588:quantum/command.c ****         , mk_delay
 589:quantum/command.c ****         , mk_interval
 590:quantum/command.c ****         , mk_max_speed
 591:quantum/command.c ****         , mk_time_to_max
 592:quantum/command.c ****         , mk_wheel_max_speed
 593:quantum/command.c ****         , mk_wheel_time_to_max
 594:quantum/command.c **** #else
 595:quantum/command.c ****         "no knobs sorry\n"
 596:quantum/command.c **** #endif
 597:quantum/command.c **** 
 598:quantum/command.c ****     ); /* clang-format on */
 599:quantum/command.c **** }
  62              		.loc 1 599 1 view .LVU4
  63 0026 05B0     		add	sp, sp, #20
  64              		.cfi_def_cfa_offset 4
  65              		@ sp needed
  66 0028 5DF804FB 		ldr	pc, [sp], #4
  67              	.L3:
  68              		.align	2
  69              	.L2:
  70 002c 00000000 		.word	mk_wheel_time_to_max
  71 0030 00000000 		.word	mk_interval
  72 0034 00000000 		.word	mk_wheel_max_speed
  73 0038 00000000 		.word	mk_delay
  74 003c 00000000 		.word	mk_time_to_max
  75 0040 00000000 		.word	.LC0
  76 0044 00000000 		.word	mk_max_speed
  77              		.cfi_endproc
  78              	.LFE351:
  80              		.section	.rodata.switch_default_layer.str1.1,"aMS",%progbits,1
  81              	.LC1:
  82 0000 4C25640A 		.ascii	"L%d\012\000"
  82      00
  83              		.section	.text.switch_default_layer,"ax",%progbits
  84              		.align	1
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  88              		.fpu fpv4-sp-d16
  90              	switch_default_layer:
  91              	.LVL1:
  92              	.LFB354:
 600:quantum/command.c **** #    endif /* !NO_PRINT && !USER_PRINT */
 601:quantum/command.c **** 
 602:quantum/command.c **** #    if !defined(NO_PRINT) && !defined(USER_PRINT)
 603:quantum/command.c **** static void mousekey_console_help(void) {
 604:quantum/command.c ****     mousekey_param_print();
 605:quantum/command.c ****     xprintf(/* clang-format off */
 606:quantum/command.c ****         "p:	print values\n"
 607:quantum/command.c ****         "d:	set defaults\n"
 608:quantum/command.c ****         "up:	+1\n"
 609:quantum/command.c ****         "dn:	-1\n"
 610:quantum/command.c ****         "lt:	+10\n"
 611:quantum/command.c ****         "rt:	-10\n"
 612:quantum/command.c ****         "ESC/q:	quit\n"
 613:quantum/command.c **** 
 614:quantum/command.c **** #ifndef MK_3_SPEED
 615:quantum/command.c ****         "\n"
 616:quantum/command.c ****         "speed = delta * max_speed * (repeat / time_to_max)\n"
 617:quantum/command.c ****         "where delta: cursor=%d, wheel=%d\n"
 618:quantum/command.c ****         "See http://en.wikipedia.org/wiki/Mouse_keys\n"
 619:quantum/command.c ****         , MOUSEKEY_MOVE_DELTA, MOUSEKEY_WHEEL_DELTA
 620:quantum/command.c **** #endif
 621:quantum/command.c **** 
 622:quantum/command.c ****     ); /* clang-format on */
 623:quantum/command.c **** }
 624:quantum/command.c **** #    endif /* !NO_PRINT && !USER_PRINT */
 625:quantum/command.c **** 
 626:quantum/command.c **** /* Only used by `quantum/command.c` / `command_proc()`. To avoid
 627:quantum/command.c ****  * any doubt: we return `false` to return to the main console,
 628:quantum/command.c ****  * which differs from the `bool` that `command_proc()` returns. */
 629:quantum/command.c **** bool mousekey_console(uint8_t code) {
 630:quantum/command.c ****     static uint8_t  param = 0;
 631:quantum/command.c ****     static uint8_t *pp    = NULL;
 632:quantum/command.c ****     static char *   desc  = NULL;
 633:quantum/command.c **** 
 634:quantum/command.c **** #    if defined(NO_PRINT) || defined(USER_PRINT) /* -Wunused-parameter */
 635:quantum/command.c ****     (void)desc;
 636:quantum/command.c **** #    endif
 637:quantum/command.c **** 
 638:quantum/command.c ****     int8_t change = 0;
 639:quantum/command.c **** 
 640:quantum/command.c ****     switch (code) {
 641:quantum/command.c ****         case KC_H:
 642:quantum/command.c ****         case KC_SLASH: /* ? */
 643:quantum/command.c **** #    if !defined(NO_PRINT) && !defined(USER_PRINT)
 644:quantum/command.c ****             print("\n\t- Mousekey -\n");
 645:quantum/command.c ****             mousekey_console_help();
 646:quantum/command.c **** #    endif
 647:quantum/command.c ****             break;
 648:quantum/command.c **** 
 649:quantum/command.c ****         case KC_Q:
 650:quantum/command.c ****         case KC_ESC:
 651:quantum/command.c ****             print("q\n");
 652:quantum/command.c ****             if (!param) return false;
 653:quantum/command.c ****             param = 0;
 654:quantum/command.c ****             pp    = NULL;
 655:quantum/command.c ****             desc  = NULL;
 656:quantum/command.c ****             break;
 657:quantum/command.c **** 
 658:quantum/command.c ****         case KC_P:
 659:quantum/command.c **** #    if !defined(NO_PRINT) && !defined(USER_PRINT)
 660:quantum/command.c ****             print("\n\t- Values -\n");
 661:quantum/command.c ****             mousekey_param_print();
 662:quantum/command.c **** #    endif
 663:quantum/command.c ****             break;
 664:quantum/command.c **** 
 665:quantum/command.c ****         case KC_1 ... KC_0: /* KC_0 gives param = 10 */
 666:quantum/command.c ****             param = 1 + code - KC_1;
 667:quantum/command.c ****             switch (param) { /* clang-format off */
 668:quantum/command.c **** #               define PARAM(n, v) case n: pp = &(v); desc = #v; break
 669:quantum/command.c **** 
 670:quantum/command.c **** #ifndef MK_3_SPEED
 671:quantum/command.c ****                 PARAM(1, mk_delay);
 672:quantum/command.c ****                 PARAM(2, mk_interval);
 673:quantum/command.c ****                 PARAM(3, mk_max_speed);
 674:quantum/command.c ****                 PARAM(4, mk_time_to_max);
 675:quantum/command.c ****                 PARAM(5, mk_wheel_max_speed);
 676:quantum/command.c ****                 PARAM(6, mk_wheel_time_to_max);
 677:quantum/command.c **** #endif /* MK_3_SPEED */
 678:quantum/command.c **** 
 679:quantum/command.c **** #               undef PARAM
 680:quantum/command.c ****                 default:
 681:quantum/command.c ****                     param = 0;
 682:quantum/command.c ****                     print("?\n");
 683:quantum/command.c ****                     break;
 684:quantum/command.c ****             } /* clang-format on */
 685:quantum/command.c ****             if (param) xprintf("%u\n", param);
 686:quantum/command.c ****             break;
 687:quantum/command.c **** 
 688:quantum/command.c ****             /* clang-format off */
 689:quantum/command.c ****         case KC_UP:    change =  +1; break;
 690:quantum/command.c ****         case KC_DOWN:  change =  -1; break;
 691:quantum/command.c ****         case KC_LEFT:  change = -10; break;
 692:quantum/command.c ****         case KC_RIGHT: change = +10; break;
 693:quantum/command.c ****             /* clang-format on */
 694:quantum/command.c **** 
 695:quantum/command.c ****         case KC_D:
 696:quantum/command.c **** 
 697:quantum/command.c **** #    ifndef MK_3_SPEED
 698:quantum/command.c ****             mk_delay             = MOUSEKEY_DELAY / 10;
 699:quantum/command.c ****             mk_interval          = MOUSEKEY_INTERVAL;
 700:quantum/command.c ****             mk_max_speed         = MOUSEKEY_MAX_SPEED;
 701:quantum/command.c ****             mk_time_to_max       = MOUSEKEY_TIME_TO_MAX;
 702:quantum/command.c ****             mk_wheel_max_speed   = MOUSEKEY_WHEEL_MAX_SPEED;
 703:quantum/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 704:quantum/command.c **** #    endif /* MK_3_SPEED */
 705:quantum/command.c **** 
 706:quantum/command.c ****             print("defaults\n");
 707:quantum/command.c ****             break;
 708:quantum/command.c **** 
 709:quantum/command.c ****         default:
 710:quantum/command.c ****             print("?\n");
 711:quantum/command.c ****             break;
 712:quantum/command.c ****     }
 713:quantum/command.c **** 
 714:quantum/command.c ****     if (change) {
 715:quantum/command.c ****         if (pp) {
 716:quantum/command.c ****             int16_t val = *pp + change;
 717:quantum/command.c ****             if (val > (int16_t)UINT8_MAX)
 718:quantum/command.c ****                 *pp = UINT8_MAX;
 719:quantum/command.c ****             else if (val < 0)
 720:quantum/command.c ****                 *pp = 0;
 721:quantum/command.c ****             else
 722:quantum/command.c ****                 *pp = (uint8_t)val;
 723:quantum/command.c ****             xprintf("= %u\n", *pp);
 724:quantum/command.c ****         } else {
 725:quantum/command.c ****             print("?\n");
 726:quantum/command.c ****         }
 727:quantum/command.c ****     }
 728:quantum/command.c **** 
 729:quantum/command.c ****     if (param) {
 730:quantum/command.c ****         xprintf("M%u:%s> ", param, desc ? desc : "???");
 731:quantum/command.c ****     } else {
 732:quantum/command.c ****         print("M> ");
 733:quantum/command.c ****     }
 734:quantum/command.c ****     return true;
 735:quantum/command.c **** }
 736:quantum/command.c **** 
 737:quantum/command.c **** #endif /* MOUSEKEY_ENABLE */
 738:quantum/command.c **** 
 739:quantum/command.c **** /***********************************************************
 740:quantum/command.c ****  * Utilities
 741:quantum/command.c ****  ***********************************************************/
 742:quantum/command.c **** 
 743:quantum/command.c **** static void switch_default_layer(uint8_t layer) {
  93              		.loc 1 743 49 is_stmt 1 view -0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
 744:quantum/command.c ****     xprintf("L%d\n", layer);
  97              		.loc 1 744 5 view .LVU6
 743:quantum/command.c ****     xprintf("L%d\n", layer);
  98              		.loc 1 743 49 is_stmt 0 view .LVU7
  99 0000 10B5     		push	{r4, lr}
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 4, -8
 102              		.cfi_offset 14, -4
 103              		.loc 1 744 5 view .LVU8
 104 0002 0146     		mov	r1, r0
 743:quantum/command.c ****     xprintf("L%d\n", layer);
 105              		.loc 1 743 49 view .LVU9
 106 0004 0446     		mov	r4, r0
 107              		.loc 1 744 5 view .LVU10
 108 0006 0548     		ldr	r0, .L5
 109              	.LVL2:
 110              		.loc 1 744 5 view .LVU11
 111 0008 FFF7FEFF 		bl	printf_
 112              	.LVL3:
 745:quantum/command.c ****     default_layer_set((layer_state_t)1 << layer);
 113              		.loc 1 745 5 is_stmt 1 view .LVU12
 114 000c 0120     		movs	r0, #1
 115 000e A040     		lsls	r0, r0, r4
 116 0010 FFF7FEFF 		bl	default_layer_set
 117              	.LVL4:
 746:quantum/command.c ****     clear_keyboard();
 118              		.loc 1 746 5 view .LVU13
 747:quantum/command.c **** }
 119              		.loc 1 747 1 is_stmt 0 view .LVU14
 120 0014 BDE81040 		pop	{r4, lr}
 121              		.cfi_restore 14
 122              		.cfi_restore 4
 123              		.cfi_def_cfa_offset 0
 746:quantum/command.c ****     clear_keyboard();
 124              		.loc 1 746 5 view .LVU15
 125 0018 FFF7FEBF 		b	clear_keyboard
 126              	.LVL5:
 127              	.L6:
 128              		.align	2
 129              	.L5:
 130 001c 00000000 		.word	.LC1
 131              		.cfi_endproc
 132              	.LFE354:
 134              		.section	.rodata.command_common.str1.1,"aMS",%progbits,1
 135              	.LC2:
 136 0000 6565636F 		.ascii	"eeconfig:\012default_layer: %u\012\000"
 136      6E666967 
 136      3A0A6465 
 136      6661756C 
 136      745F6C61 
 137              	.LC3:
 138 001d 64656275 		.ascii	"debug_config.raw: %02X\012.enable: %u\012.matrix: %"
 138      675F636F 
 138      6E666967 
 138      2E726177 
 138      3A202530 
 139 004a 750A2E6B 		.ascii	"u\012.keyboard: %u\012.mouse: %u\012\000"
 139      6579626F 
 139      6172643A 
 139      2025750A 
 139      2E6D6F75 
 140              	.LC4:
 141 0066 6B65796D 		.ascii	"keymap_config.raw: %02X\012.swap_control_capslock: "
 141      61705F63 
 141      6F6E6669 
 141      672E7261 
 141      773A2025 
 142 0096 25750A2E 		.ascii	"%u\012.capslock_to_control: %u\012.swap_lctl_lgui: "
 142      63617073 
 142      6C6F636B 
 142      5F746F5F 
 142      636F6E74 
 143 00c3 25750A2E 		.ascii	"%u\012.swap_rctl_rgui: %u\012.swap_lalt_lgui: %u\012"
 143      73776170 
 143      5F726374 
 143      6C5F7267 
 143      75693A20 
 144 00ee 2E737761 		.ascii	".swap_ralt_rgui: %u\012.no_gui: %u\012.swap_grave_e"
 144      705F7261 
 144      6C745F72 
 144      6775693A 
 144      2025750A 
 145 011b 73633A20 		.ascii	"sc: %u\012.swap_backslash_backspace: %u\012.nkro: %"
 145      25750A2E 
 145      73776170 
 145      5F626163 
 145      6B736C61 
 146 0148 750A00   		.ascii	"u\012\000"
 147              	.LC5:
 148 014b 436C6561 		.ascii	"Clearing EEPROM\012\000"
 148      72696E67 
 148      20454550 
 148      524F4D0A 
 148      00
 149              	.LC6:
 150 015c 0A092D20 		.ascii	"\012\011- Magic -\012D:\011Debug Message Toggle\012"
 150      4D616769 
 150      63202D0A 
 150      443A0944 
 150      65627567 
 151 0180 583A094D 		.ascii	"X:\011Matrix Debug Mode Toggle - Show keypresses in"
 151      61747269 
 151      78204465 
 151      62756720 
 151      4D6F6465 
 152 01b0 206D6174 		.ascii	" matrix grid\012K:\011Keyboard Debug Toggle - Show "
 152      72697820 
 152      67726964 
 152      0A4B3A09 
 152      4B657962 
 153 01dd 6B657970 		.ascii	"keypress report\012M:\011Debug Mouse Toggle\012V:\011"
 153      72657373 
 153      20726570 
 153      6F72740A 
 153      4D3A0944 
 154 0206 56657273 		.ascii	"Version\012S:\011Status\012C:\011Activate Console M"
 154      696F6E0A 
 154      533A0953 
 154      74617475 
 154      730A433A 
 155 022d 6F64650A 		.ascii	"ode\012F1-F10:\011Switch to Layer 0-9 (F10 = L0)\012"
 155      46312D46 
 155      31303A09 
 155      53776974 
 155      63682074 
 156 0258 302D393A 		.ascii	"0-9:\011Switch to Layer 0-9\012GRAVE:\011Switch to "
 156      09537769 
 156      74636820 
 156      746F204C 
 156      61796572 
 157 0282 4C617965 		.ascii	"Layer 0 (alternate)\012B:\011Jump to Bootloader\012"
 157      72203020 
 157      28616C74 
 157      65726E61 
 157      7465290A 
 158 02ac 4553433A 		.ascii	"ESC:\011Jump to Bootloader (alternate)\012E:\011Pri"
 158      094A756D 
 158      7020746F 
 158      20426F6F 
 158      746C6F61 
 159 02d6 6E742045 		.ascii	"nt EEPROM Settings\012BSPACE:\011Clear EEPROM\012N:"
 159      4550524F 
 159      4D205365 
 159      7474696E 
 159      67730A42 
 160 0300 094E4B52 		.ascii	"\011NKRO Toggle\012\000"
 160      4F20546F 
 160      67676C65 
 160      0A00
 161              	.LC7:
 162 030e 0A092D20 		.ascii	"\012\011- Console -\012ESC/q:\011quit\012m:\011mous"
 162      436F6E73 
 162      6F6C6520 
 162      2D0A4553 
 162      432F713A 
 163 032f 656B6579 		.ascii	"ekey\012\000"
 163      0A00
 164              	.LC8:
 165 0335 433E2000 		.ascii	"C> \000"
 166              	.LC9:
 167 0339 0A0A4A75 		.ascii	"\012\012Jumping to bootloader... \000"
 167      6D70696E 
 167      6720746F 
 167      20626F6F 
 167      746C6F61 
 168              	.LC10:
 169 0355 0A646562 		.ascii	"\012debug: on\012\000"
 169      75673A20 
 169      6F6E0A00 
 170              	.LC11:
 171 0361 0A646562 		.ascii	"\012debug: off\012\000"
 171      75673A20 
 171      6F66660A 
 171      00
 172              	.LC12:
 173 036e 0A6D6174 		.ascii	"\012matrix: on\012\000"
 173      7269783A 
 173      206F6E0A 
 173      00
 174              	.LC13:
 175 037b 0A6D6174 		.ascii	"\012matrix: off\012\000"
 175      7269783A 
 175      206F6666 
 175      0A00
 176              	.LC14:
 177 0389 0A6B6579 		.ascii	"\012keyboard: on\012\000"
 177      626F6172 
 177      643A206F 
 177      6E0A00
 178              	.LC15:
 179 0398 0A6B6579 		.ascii	"\012keyboard: off\012\000"
 179      626F6172 
 179      643A206F 
 179      66660A00 
 180              	.LC16:
 181 03a8 0A6D6F75 		.ascii	"\012mouse: on\012\000"
 181      73653A20 
 181      6F6E0A00 
 182              	.LC17:
 183 03b4 0A6D6F75 		.ascii	"\012mouse: off\012\000"
 183      73653A20 
 183      6F66660A 
 183      00
 184              	.LC18:
 185 03c1 0A092D20 		.ascii	"\012\011- Version -\012VID: 0x03A8(OLKB) PID: 0xA4F"
 185      56657273 
 185      696F6E20 
 185      2D0A5649 
 185      443A2030 
 186 03eb 3928506C 		.ascii	"9(Planck) VER: 0x0006\012BUILD:  (Oct 22 2021)\012C"
 186      616E636B 
 186      29205645 
 186      523A2030 
 186      78303030 
 187 0418 48494249 		.ascii	"HIBIOS: \"0.12.29-14-gfe20f5-dirty\", CONTRIB: \"20"
 187      4F533A20 
 187      22302E31 
 187      322E3239 
 187      2D31342D 
 188 0448 32312D31 		.ascii	"21-10-22-21:23:32\"\012OPTIONS: MOUSEKEY EXTRAKEY C"
 188      302D3232 
 188      2D32313A 
 188      32333A33 
 188      32220A4F 
 189 0477 4F4E534F 		.ascii	"ONSOLE COMMAND NKRO BOOTLOADER_SIZE\012GCC: 11.2.0\012"
 189      4C452043 
 189      4F4D4D41 
 189      4E44204E 
 189      4B524F20 
 190 04a7 00       		.ascii	"\000"
 191              	.LC19:
 192 04a8 0A092D20 		.ascii	"\012\011- Status -\012host_keyboard_leds(): %02X\012"
 192      53746174 
 192      7573202D 
 192      0A686F73 
 192      745F6B65 
 193 04d0 6B657962 		.ascii	"keyboard_protocol: %02X\012keyboard_idle: %02X\012k"
 193      6F617264 
 193      5F70726F 
 193      746F636F 
 193      6C3A2025 
 194 04fd 65796D61 		.ascii	"eymap_config.nkro: %02X\012timer_read32(): %08lX\012"
 194      705F636F 
 194      6E666967 
 194      2E6E6B72 
 194      6F3A2025 
 195 052b 00       		.ascii	"\000"
 196              	.LC20:
 197 052c 4E4B524F 		.ascii	"NKRO: on\012\000"
 197      3A206F6E 
 197      0A00
 198              	.LC21:
 199 0536 4E4B524F 		.ascii	"NKRO: off\012\000"
 199      3A206F66 
 199      660A00
 200              	.LC22:
 201 0541 3F00     		.ascii	"?\000"
 202              		.section	.text.command_common,"ax",%progbits
 203              		.align	1
 204              		.syntax unified
 205              		.thumb
 206              		.thumb_func
 207              		.fpu fpv4-sp-d16
 209              	command_common:
 210              	.LVL6:
 211              	.LFB348:
 320:quantum/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 212              		.loc 1 320 42 is_stmt 1 view -0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 16
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 325:quantum/command.c **** #ifdef SLEEP_LED_ENABLE
 216              		.loc 1 325 5 view .LVU17
 320:quantum/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 217              		.loc 1 320 42 is_stmt 0 view .LVU18
 218 0000 10B5     		push	{r4, lr}
 219              		.cfi_def_cfa_offset 8
 220              		.cfi_offset 4, -8
 221              		.cfi_offset 14, -4
 325:quantum/command.c **** #ifdef SLEEP_LED_ENABLE
 222              		.loc 1 325 5 view .LVU19
 223 0002 431F     		subs	r3, r0, #5
 320:quantum/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 224              		.loc 1 320 42 view .LVU20
 225 0004 8CB0     		sub	sp, sp, #48
 226              		.cfi_def_cfa_offset 56
 325:quantum/command.c **** #ifdef SLEEP_LED_ENABLE
 227              		.loc 1 325 5 view .LVU21
 228 0006 3E2B     		cmp	r3, #62
 229 0008 00F21481 		bhi	.L8
 230 000c DFE813F0 		tbh	[pc, r3, lsl #1]
 231              	.L10:
 232 0010 9300     		.2byte	(.L14-.L10)/2
 233 0012 8300     		.2byte	(.L24-.L10)/2
 234 0014 9900     		.2byte	(.L23-.L10)/2
 235 0016 3F00     		.2byte	(.L22-.L10)/2
 236 0018 1201     		.2byte	(.L8-.L10)/2
 237 001a 1201     		.2byte	(.L8-.L10)/2
 238 001c 7F00     		.2byte	(.L12-.L10)/2
 239 001e 1201     		.2byte	(.L8-.L10)/2
 240 0020 1201     		.2byte	(.L8-.L10)/2
 241 0022 C200     		.2byte	(.L21-.L10)/2
 242 0024 1201     		.2byte	(.L8-.L10)/2
 243 0026 D100     		.2byte	(.L20-.L10)/2
 244 0028 F900     		.2byte	(.L19-.L10)/2
 245 002a 1201     		.2byte	(.L8-.L10)/2
 246 002c 1201     		.2byte	(.L8-.L10)/2
 247 002e 1201     		.2byte	(.L8-.L10)/2
 248 0030 1201     		.2byte	(.L8-.L10)/2
 249 0032 E200     		.2byte	(.L18-.L10)/2
 250 0034 1201     		.2byte	(.L8-.L10)/2
 251 0036 1201     		.2byte	(.L8-.L10)/2
 252 0038 E000     		.2byte	(.L17-.L10)/2
 253 003a 1201     		.2byte	(.L8-.L10)/2
 254 003c AE00     		.2byte	(.L16-.L10)/2
 255 003e 1201     		.2byte	(.L8-.L10)/2
 256 0040 1201     		.2byte	(.L8-.L10)/2
 257 0042 1001     		.2byte	(.L15-.L10)/2
 258 0044 1001     		.2byte	(.L15-.L10)/2
 259 0046 1001     		.2byte	(.L15-.L10)/2
 260 0048 1001     		.2byte	(.L15-.L10)/2
 261 004a 1001     		.2byte	(.L15-.L10)/2
 262 004c 1001     		.2byte	(.L15-.L10)/2
 263 004e 1001     		.2byte	(.L15-.L10)/2
 264 0050 1001     		.2byte	(.L15-.L10)/2
 265 0052 1001     		.2byte	(.L15-.L10)/2
 266 0054 0901     		.2byte	(.L9-.L10)/2
 267 0056 1201     		.2byte	(.L8-.L10)/2
 268 0058 9300     		.2byte	(.L14-.L10)/2
 269 005a 7900     		.2byte	(.L13-.L10)/2
 270 005c 1201     		.2byte	(.L8-.L10)/2
 271 005e 1201     		.2byte	(.L8-.L10)/2
 272 0060 1201     		.2byte	(.L8-.L10)/2
 273 0062 1201     		.2byte	(.L8-.L10)/2
 274 0064 1201     		.2byte	(.L8-.L10)/2
 275 0066 1201     		.2byte	(.L8-.L10)/2
 276 0068 1201     		.2byte	(.L8-.L10)/2
 277 006a 1201     		.2byte	(.L8-.L10)/2
 278 006c 1201     		.2byte	(.L8-.L10)/2
 279 006e 1201     		.2byte	(.L8-.L10)/2
 280 0070 0901     		.2byte	(.L9-.L10)/2
 281 0072 1201     		.2byte	(.L8-.L10)/2
 282 0074 1201     		.2byte	(.L8-.L10)/2
 283 0076 7F00     		.2byte	(.L12-.L10)/2
 284 0078 1201     		.2byte	(.L8-.L10)/2
 285 007a 0D01     		.2byte	(.L11-.L10)/2
 286 007c 0D01     		.2byte	(.L11-.L10)/2
 287 007e 0D01     		.2byte	(.L11-.L10)/2
 288 0080 0D01     		.2byte	(.L11-.L10)/2
 289 0082 0D01     		.2byte	(.L11-.L10)/2
 290 0084 0D01     		.2byte	(.L11-.L10)/2
 291 0086 0D01     		.2byte	(.L11-.L10)/2
 292 0088 0D01     		.2byte	(.L11-.L10)/2
 293 008a 0D01     		.2byte	(.L11-.L10)/2
 294 008c 0901     		.2byte	(.L9-.L10)/2
 295              		.p2align 1
 296              	.L22:
 339:quantum/command.c **** #endif /* !NO_PRINT && !USER_PRINT */
 297              		.loc 1 339 13 is_stmt 1 view .LVU22
 298              	.LBB12:
 299              	.LBI12:
 250:quantum/command.c ****     xprintf("eeconfig:\ndefault_layer: %u\n", eeconfig_read_default_layer());
 300              		.loc 1 250 13 view .LVU23
 301              	.LBB13:
 251:quantum/command.c **** 
 302              		.loc 1 251 5 view .LVU24
 251:quantum/command.c **** 
 303              		.loc 1 251 47 is_stmt 0 view .LVU25
 304 008e FFF7FEFF 		bl	eeconfig_read_default_layer
 305              	.LVL7:
 251:quantum/command.c **** 
 306              		.loc 1 251 47 view .LVU26
 307 0092 0146     		mov	r1, r0
 251:quantum/command.c **** 
 308              		.loc 1 251 5 view .LVU27
 309 0094 6A48     		ldr	r0, .L37
 310 0096 FFF7FEFF 		bl	printf_
 311              	.LVL8:
 253:quantum/command.c ****     dc.raw = eeconfig_read_debug();
 312              		.loc 1 253 5 is_stmt 1 view .LVU28
 254:quantum/command.c ****     xprintf(/* clang-format off */
 313              		.loc 1 254 5 view .LVU29
 254:quantum/command.c ****     xprintf(/* clang-format off */
 314              		.loc 1 254 14 is_stmt 0 view .LVU30
 315 009a FFF7FEFF 		bl	eeconfig_read_debug
 316              	.LVL9:
 255:quantum/command.c **** 
 317              		.loc 1 255 5 view .LVU31
 318 009e C0F3C003 		ubfx	r3, r0, #3, #1
 319 00a2 0193     		str	r3, [sp, #4]
 320 00a4 C0F38003 		ubfx	r3, r0, #2, #1
 254:quantum/command.c ****     xprintf(/* clang-format off */
 321              		.loc 1 254 14 view .LVU32
 322 00a8 0146     		mov	r1, r0
 255:quantum/command.c **** 
 323              		.loc 1 255 5 is_stmt 1 view .LVU33
 324 00aa 00F00102 		and	r2, r0, #1
 325 00ae 0093     		str	r3, [sp]
 326 00b0 C0F34003 		ubfx	r3, r0, #1, #1
 327 00b4 6348     		ldr	r0, .L37+4
 328 00b6 FFF7FEFF 		bl	printf_
 329              	.LVL10:
 270:quantum/command.c ****     kc.raw = eeconfig_read_keymap();
 330              		.loc 1 270 5 view .LVU34
 271:quantum/command.c ****     xprintf(/* clang-format off */
 331              		.loc 1 271 5 view .LVU35
 271:quantum/command.c ****     xprintf(/* clang-format off */
 332              		.loc 1 271 14 is_stmt 0 view .LVU36
 333 00ba FFF7FEFF 		bl	eeconfig_read_keymap
 334              	.LVL11:
 272:quantum/command.c **** 
 335              		.loc 1 272 5 view .LVU37
 336 00be C0F3C013 		ubfx	r3, r0, #7, #1
 337 00c2 0793     		str	r3, [sp, #28]
 338 00c4 C0F38013 		ubfx	r3, r0, #6, #1
 339 00c8 0693     		str	r3, [sp, #24]
 340 00ca C0F34013 		ubfx	r3, r0, #5, #1
 341 00ce 0593     		str	r3, [sp, #20]
 342 00d0 C0F30013 		ubfx	r3, r0, #4, #1
 343 00d4 0493     		str	r3, [sp, #16]
 344 00d6 C0F3C003 		ubfx	r3, r0, #3, #1
 345 00da 0393     		str	r3, [sp, #12]
 346 00dc C0F38003 		ubfx	r3, r0, #2, #1
 347 00e0 0293     		str	r3, [sp, #8]
 348 00e2 C0F34023 		ubfx	r3, r0, #9, #1
 349 00e6 0193     		str	r3, [sp, #4]
 350 00e8 C0F30023 		ubfx	r3, r0, #8, #1
 271:quantum/command.c ****     xprintf(/* clang-format off */
 351              		.loc 1 271 14 view .LVU38
 352 00ec 0146     		mov	r1, r0
 272:quantum/command.c **** 
 353              		.loc 1 272 5 is_stmt 1 view .LVU39
 354 00ee 0093     		str	r3, [sp]
 355 00f0 00F00102 		and	r2, r0, #1
 356 00f4 C0F34003 		ubfx	r3, r0, #1, #1
 357 00f8 5348     		ldr	r0, .L37+8
 358 00fa FFF7FEFF 		bl	printf_
 359              	.LVL12:
 360              	.L31:
 361              	.LBE13:
 362              	.LBE12:
 532:quantum/command.c **** }
 363              		.loc 1 532 12 is_stmt 0 view .LVU40
 364 00fe 0120     		movs	r0, #1
 365              	.LBB14:
 366              	.LBB15:
 247:quantum/command.c **** 
 367              		.loc 1 247 1 view .LVU41
 368 0100 17E0     		b	.L25
 369              	.LVL13:
 370              	.L13:
 247:quantum/command.c **** 
 371              		.loc 1 247 1 view .LVU42
 372              	.LBE15:
 373              	.LBE14:
 345:quantum/command.c ****             eeconfig_init();
 374              		.loc 1 345 13 is_stmt 1 view .LVU43
 375 0102 5248     		ldr	r0, .L37+12
 376              	.LVL14:
 345:quantum/command.c ****             eeconfig_init();
 377              		.loc 1 345 13 is_stmt 0 view .LVU44
 378 0104 FFF7FEFF 		bl	printf_
 379              	.LVL15:
 346:quantum/command.c ****             break;
 380              		.loc 1 346 13 is_stmt 1 view .LVU45
 381 0108 FFF7FEFF 		bl	eeconfig_init
 382              	.LVL16:
 347:quantum/command.c **** 
 383              		.loc 1 347 13 view .LVU46
 384 010c F7E7     		b	.L31
 385              	.LVL17:
 386              	.L12:
 368:quantum/command.c ****             break;
 387              		.loc 1 368 13 view .LVU47
 388              	.LBB17:
 389              	.LBI17:
 106:quantum/command.c ****     print(/* clang-format off */
 390              		.loc 1 106 13 view .LVU48
 391              	.LBB18:
 107:quantum/command.c ****         "\n\t- Magic -\n"
 392              		.loc 1 107 5 view .LVU49
 393 010e 5048     		ldr	r0, .L37+16
 394              	.LVL18:
 395              	.L32:
 107:quantum/command.c ****         "\n\t- Magic -\n"
 396              		.loc 1 107 5 is_stmt 0 view .LVU50
 397              	.LBE18:
 398              	.LBE17:
 431:quantum/command.c ****             }
 399              		.loc 1 431 17 view .LVU51
 400 0110 FFF7FEFF 		bl	printf_
 401              	.LVL19:
 402 0114 F3E7     		b	.L31
 403              	.LVL20:
 404              	.L24:
 373:quantum/command.c ****             debug_keyboard = false;
 405              		.loc 1 373 13 is_stmt 1 view .LVU52
 374:quantum/command.c ****             debug_mouse    = false;
 406              		.loc 1 374 13 view .LVU53
 375:quantum/command.c ****             debug_enable   = false;
 407              		.loc 1 375 13 view .LVU54
 376:quantum/command.c ****             command_console_help();
 408              		.loc 1 376 13 view .LVU55
 376:quantum/command.c ****             command_console_help();
 409              		.loc 1 376 28 is_stmt 0 view .LVU56
 410 0116 4F4A     		ldr	r2, .L37+20
 411              	.LBB19:
 412              	.LBB20:
 539:quantum/command.c ****           "ESC/q:	quit\n"
 413              		.loc 1 539 5 view .LVU57
 414 0118 4F48     		ldr	r0, .L37+24
 415              	.LVL21:
 539:quantum/command.c ****           "ESC/q:	quit\n"
 416              		.loc 1 539 5 view .LVU58
 417              	.LBE20:
 418              	.LBE19:
 376:quantum/command.c ****             command_console_help();
 419              		.loc 1 376 28 view .LVU59
 420 011a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 421 011c 23F00F03 		bic	r3, r3, #15
 422 0120 1370     		strb	r3, [r2]
 377:quantum/command.c ****             print("C> ");
 423              		.loc 1 377 13 is_stmt 1 view .LVU60
 424              	.LBB22:
 425              	.LBI19:
 538:quantum/command.c ****     print("\n\t- Console -\n"
 426              		.loc 1 538 13 view .LVU61
 427              	.LBB21:
 539:quantum/command.c ****           "ESC/q:	quit\n"
 428              		.loc 1 539 5 view .LVU62
 429 0122 FFF7FEFF 		bl	printf_
 430              	.LVL22:
 431              	.LBE21:
 432              	.LBE22:
 378:quantum/command.c ****             command_state = CONSOLE;
 433              		.loc 1 378 13 view .LVU63
 434 0126 4D48     		ldr	r0, .L37+28
 435 0128 FFF7FEFF 		bl	printf_
 436              	.LVL23:
 379:quantum/command.c ****             break;
 437              		.loc 1 379 13 view .LVU64
 379:quantum/command.c ****             break;
 438              		.loc 1 379 27 is_stmt 0 view .LVU65
 439 012c 4C4B     		ldr	r3, .L37+32
 440 012e 0120     		movs	r0, #1
 441 0130 1870     		strb	r0, [r3]
 380:quantum/command.c **** 
 442              		.loc 1 380 13 is_stmt 1 view .LVU66
 443              	.L25:
 533:quantum/command.c **** 
 444              		.loc 1 533 1 is_stmt 0 view .LVU67
 445 0132 0CB0     		add	sp, sp, #48
 446              		.cfi_remember_state
 447              		.cfi_def_cfa_offset 8
 448              		@ sp needed
 449 0134 10BD     		pop	{r4, pc}
 450              	.LVL24:
 451              	.L14:
 452              		.cfi_restore_state
 385:quantum/command.c ****             reset_keyboard();
 453              		.loc 1 385 13 is_stmt 1 view .LVU68
 454 0136 4B48     		ldr	r0, .L37+36
 455              	.LVL25:
 385:quantum/command.c ****             reset_keyboard();
 456              		.loc 1 385 13 is_stmt 0 view .LVU69
 457 0138 FFF7FEFF 		bl	printf_
 458              	.LVL26:
 386:quantum/command.c ****             break;
 459              		.loc 1 386 13 is_stmt 1 view .LVU70
 460 013c FFF7FEFF 		bl	reset_keyboard
 461              	.LVL27:
 387:quantum/command.c **** 
 462              		.loc 1 387 13 view .LVU71
 463 0140 DDE7     		b	.L31
 464              	.LVL28:
 465              	.L23:
 391:quantum/command.c ****             if (debug_enable) {
 466              		.loc 1 391 13 view .LVU72
 391:quantum/command.c ****             if (debug_enable) {
 467              		.loc 1 391 26 is_stmt 0 view .LVU73
 468 0142 444C     		ldr	r4, .L37+20
 391:quantum/command.c ****             if (debug_enable) {
 469              		.loc 1 391 29 view .LVU74
 470 0144 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 471 0146 C3F30002 		ubfx	r2, r3, #0, #1
 391:quantum/command.c ****             if (debug_enable) {
 472              		.loc 1 391 13 view .LVU75
 473 014a 82F00102 		eor	r2, r2, #1
 391:quantum/command.c ****             if (debug_enable) {
 474              		.loc 1 391 26 view .LVU76
 475 014e 62F30003 		bfi	r3, r2, #0, #1
 476 0152 2370     		strb	r3, [r4]
 392:quantum/command.c ****                 print("\ndebug: on\n");
 477              		.loc 1 392 13 is_stmt 1 view .LVU77
 392:quantum/command.c ****                 print("\ndebug: on\n");
 478              		.loc 1 392 16 is_stmt 0 view .LVU78
 479 0154 DB07     		lsls	r3, r3, #31
 480 0156 01D5     		bpl	.L26
 393:quantum/command.c ****             } else {
 481              		.loc 1 393 17 is_stmt 1 view .LVU79
 482 0158 4348     		ldr	r0, .L37+40
 483              	.LVL29:
 393:quantum/command.c ****             } else {
 484              		.loc 1 393 17 is_stmt 0 view .LVU80
 485 015a D9E7     		b	.L32
 486              	.LVL30:
 487              	.L26:
 395:quantum/command.c ****                 debug_matrix   = false;
 488              		.loc 1 395 17 is_stmt 1 view .LVU81
 489 015c 4348     		ldr	r0, .L37+44
 490              	.LVL31:
 395:quantum/command.c ****                 debug_matrix   = false;
 491              		.loc 1 395 17 is_stmt 0 view .LVU82
 492 015e FFF7FEFF 		bl	printf_
 493              	.LVL32:
 396:quantum/command.c ****                 debug_keyboard = false;
 494              		.loc 1 396 17 is_stmt 1 view .LVU83
 397:quantum/command.c ****                 debug_mouse    = false;
 495              		.loc 1 397 17 view .LVU84
 398:quantum/command.c ****             }
 496              		.loc 1 398 17 view .LVU85
 396:quantum/command.c ****                 debug_keyboard = false;
 497              		.loc 1 396 32 is_stmt 0 view .LVU86
 498 0162 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 499 0164 23F00E03 		bic	r3, r3, #14
 500              	.L33:
 407:quantum/command.c ****             } else {
 501              		.loc 1 407 30 view .LVU87
 502 0168 2370     		strb	r3, [r4]
 503 016a C8E7     		b	.L31
 504              	.LVL33:
 505              	.L16:
 404:quantum/command.c ****             if (debug_matrix) {
 506              		.loc 1 404 13 is_stmt 1 view .LVU88
 404:quantum/command.c ****             if (debug_matrix) {
 507              		.loc 1 404 26 is_stmt 0 view .LVU89
 508 016c 394C     		ldr	r4, .L37+20
 404:quantum/command.c ****             if (debug_matrix) {
 509              		.loc 1 404 29 view .LVU90
 510 016e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 511 0170 C3F34002 		ubfx	r2, r3, #1, #1
 404:quantum/command.c ****             if (debug_matrix) {
 512              		.loc 1 404 13 view .LVU91
 513 0174 82F00102 		eor	r2, r2, #1
 404:quantum/command.c ****             if (debug_matrix) {
 514              		.loc 1 404 26 view .LVU92
 515 0178 62F34103 		bfi	r3, r2, #1, #1
 405:quantum/command.c ****                 print("\nmatrix: on\n");
 516              		.loc 1 405 16 view .LVU93
 517 017c 9807     		lsls	r0, r3, #30
 518              	.LVL34:
 404:quantum/command.c ****             if (debug_matrix) {
 519              		.loc 1 404 26 view .LVU94
 520 017e 2370     		strb	r3, [r4]
 405:quantum/command.c ****                 print("\nmatrix: on\n");
 521              		.loc 1 405 13 is_stmt 1 view .LVU95
 405:quantum/command.c ****                 print("\nmatrix: on\n");
 522              		.loc 1 405 16 is_stmt 0 view .LVU96
 523 0180 06D5     		bpl	.L27
 406:quantum/command.c ****                 debug_enable = true;
 524              		.loc 1 406 17 is_stmt 1 view .LVU97
 525 0182 3B48     		ldr	r0, .L37+48
 526              	.L34:
 527 0184 FFF7FEFF 		bl	printf_
 528              	.LVL35:
 407:quantum/command.c ****             } else {
 529              		.loc 1 407 17 view .LVU98
 407:quantum/command.c ****             } else {
 530              		.loc 1 407 30 is_stmt 0 view .LVU99
 531 0188 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 532 018a 43F00103 		orr	r3, r3, #1
 533 018e EBE7     		b	.L33
 534              	.L27:
 409:quantum/command.c ****             }
 535              		.loc 1 409 17 is_stmt 1 view .LVU100
 536 0190 3848     		ldr	r0, .L37+52
 537 0192 BDE7     		b	.L32
 538              	.LVL36:
 539              	.L21:
 415:quantum/command.c ****             if (debug_keyboard) {
 540              		.loc 1 415 13 view .LVU101
 415:quantum/command.c ****             if (debug_keyboard) {
 541              		.loc 1 415 28 is_stmt 0 view .LVU102
 542 0194 2F4C     		ldr	r4, .L37+20
 415:quantum/command.c ****             if (debug_keyboard) {
 543              		.loc 1 415 31 view .LVU103
 544 0196 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 545 0198 C3F38002 		ubfx	r2, r3, #2, #1
 415:quantum/command.c ****             if (debug_keyboard) {
 546              		.loc 1 415 13 view .LVU104
 547 019c 82F00102 		eor	r2, r2, #1
 415:quantum/command.c ****             if (debug_keyboard) {
 548              		.loc 1 415 28 view .LVU105
 549 01a0 62F38203 		bfi	r3, r2, #2, #1
 416:quantum/command.c ****                 print("\nkeyboard: on\n");
 550              		.loc 1 416 16 view .LVU106
 551 01a4 5907     		lsls	r1, r3, #29
 415:quantum/command.c ****             if (debug_keyboard) {
 552              		.loc 1 415 28 view .LVU107
 553 01a6 2370     		strb	r3, [r4]
 416:quantum/command.c ****                 print("\nkeyboard: on\n");
 554              		.loc 1 416 13 is_stmt 1 view .LVU108
 416:quantum/command.c ****                 print("\nkeyboard: on\n");
 555              		.loc 1 416 16 is_stmt 0 view .LVU109
 556 01a8 01D5     		bpl	.L28
 417:quantum/command.c ****                 debug_enable = true;
 557              		.loc 1 417 17 is_stmt 1 view .LVU110
 558 01aa 3348     		ldr	r0, .L37+56
 559              	.LVL37:
 417:quantum/command.c ****                 debug_enable = true;
 560              		.loc 1 417 17 is_stmt 0 view .LVU111
 561 01ac EAE7     		b	.L34
 562              	.LVL38:
 563              	.L28:
 420:quantum/command.c ****             }
 564              		.loc 1 420 17 is_stmt 1 view .LVU112
 565 01ae 3348     		ldr	r0, .L37+60
 566              	.LVL39:
 420:quantum/command.c ****             }
 567              		.loc 1 420 17 is_stmt 0 view .LVU113
 568 01b0 AEE7     		b	.L32
 569              	.LVL40:
 570              	.L20:
 426:quantum/command.c ****             if (debug_mouse) {
 571              		.loc 1 426 13 is_stmt 1 view .LVU114
 426:quantum/command.c ****             if (debug_mouse) {
 572              		.loc 1 426 25 is_stmt 0 view .LVU115
 573 01b2 284C     		ldr	r4, .L37+20
 426:quantum/command.c ****             if (debug_mouse) {
 574              		.loc 1 426 28 view .LVU116
 575 01b4 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 576 01b6 C3F3C002 		ubfx	r2, r3, #3, #1
 426:quantum/command.c ****             if (debug_mouse) {
 577              		.loc 1 426 13 view .LVU117
 578 01ba 82F00102 		eor	r2, r2, #1
 426:quantum/command.c ****             if (debug_mouse) {
 579              		.loc 1 426 25 view .LVU118
 580 01be 62F3C303 		bfi	r3, r2, #3, #1
 427:quantum/command.c ****                 print("\nmouse: on\n");
 581              		.loc 1 427 16 view .LVU119
 582 01c2 1A07     		lsls	r2, r3, #28
 426:quantum/command.c ****             if (debug_mouse) {
 583              		.loc 1 426 25 view .LVU120
 584 01c4 2370     		strb	r3, [r4]
 427:quantum/command.c ****                 print("\nmouse: on\n");
 585              		.loc 1 427 13 is_stmt 1 view .LVU121
 427:quantum/command.c ****                 print("\nmouse: on\n");
 586              		.loc 1 427 16 is_stmt 0 view .LVU122
 587 01c6 01D5     		bpl	.L29
 428:quantum/command.c ****                 debug_enable = true;
 588              		.loc 1 428 17 is_stmt 1 view .LVU123
 589 01c8 2D48     		ldr	r0, .L37+64
 590              	.LVL41:
 428:quantum/command.c ****                 debug_enable = true;
 591              		.loc 1 428 17 is_stmt 0 view .LVU124
 592 01ca DBE7     		b	.L34
 593              	.LVL42:
 594              	.L29:
 431:quantum/command.c ****             }
 595              		.loc 1 431 17 is_stmt 1 view .LVU125
 596 01cc 2D48     		ldr	r0, .L37+68
 597              	.LVL43:
 431:quantum/command.c ****             }
 598              		.loc 1 431 17 is_stmt 0 view .LVU126
 599 01ce 9FE7     		b	.L32
 600              	.LVL44:
 601              	.L17:
 437:quantum/command.c ****             break;
 602              		.loc 1 437 13 is_stmt 1 view .LVU127
 603              	.LBB23:
 604              	.LBI23:
 163:quantum/command.c ****     print(/* clang-format off */
 605              		.loc 1 163 13 view .LVU128
 606              	.LBB24:
 164:quantum/command.c ****         "\n\t- Version -\n"
 607              		.loc 1 164 5 view .LVU129
 608 01d0 2D48     		ldr	r0, .L37+72
 609              	.LVL45:
 164:quantum/command.c ****         "\n\t- Version -\n"
 610              		.loc 1 164 5 is_stmt 0 view .LVU130
 611 01d2 9DE7     		b	.L32
 612              	.LVL46:
 613              	.L18:
 164:quantum/command.c ****         "\n\t- Version -\n"
 614              		.loc 1 164 5 view .LVU131
 615              	.LBE24:
 616              	.LBE23:
 442:quantum/command.c ****             break;
 617              		.loc 1 442 13 is_stmt 1 view .LVU132
 618              	.LBB25:
 619              	.LBI14:
 221:quantum/command.c ****     xprintf(/* clang-format off */
 620              		.loc 1 221 13 view .LVU133
 621              	.LBB16:
 222:quantum/command.c ****         "\n\t- Status -\n"
 622              		.loc 1 222 5 view .LVU134
 235:quantum/command.c **** #ifndef PROTOCOL_VUSB
 623              		.loc 1 235 11 is_stmt 0 view .LVU135
 624 01d4 FFF7FEFF 		bl	host_keyboard_leds
 625              	.LVL47:
 222:quantum/command.c ****         "\n\t- Status -\n"
 626              		.loc 1 222 5 view .LVU136
 627 01d8 2C4B     		ldr	r3, .L37+76
 235:quantum/command.c **** #ifndef PROTOCOL_VUSB
 628              		.loc 1 235 11 view .LVU137
 629 01da 0B90     		str	r0, [sp, #44]
 222:quantum/command.c ****         "\n\t- Status -\n"
 630              		.loc 1 222 5 view .LVU138
 631 01dc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 632 01de 2C4B     		ldr	r3, .L37+80
 242:quantum/command.c **** #endif
 633              		.loc 1 242 24 view .LVU139
 634 01e0 2C48     		ldr	r0, .L37+84
 222:quantum/command.c ****         "\n\t- Status -\n"
 635              		.loc 1 222 5 view .LVU140
 636 01e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 637 01e4 0A92     		str	r2, [sp, #40]
 638 01e6 0993     		str	r3, [sp, #36]
 242:quantum/command.c **** #endif
 639              		.loc 1 242 24 view .LVU141
 640 01e8 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 222:quantum/command.c ****         "\n\t- Status -\n"
 641              		.loc 1 222 5 view .LVU142
 642 01ea FFF7FEFF 		bl	timer_read32
 643              	.LVL48:
 644 01ee E409     		lsrs	r4, r4, #7
 645 01f0 CDE90040 		strd	r4, r0, [sp]
 646 01f4 DDE90932 		ldrd	r3, r2, [sp, #36]
 647 01f8 0B99     		ldr	r1, [sp, #44]
 648 01fa 2748     		ldr	r0, .L37+88
 649 01fc FFF7FEFF 		bl	printf_
 650              	.LVL49:
 651 0200 7DE7     		b	.L31
 652              	.LVL50:
 653              	.L19:
 222:quantum/command.c ****         "\n\t- Status -\n"
 654              		.loc 1 222 5 view .LVU143
 655              	.LBE16:
 656              	.LBE25:
 449:quantum/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 657              		.loc 1 449 13 is_stmt 1 view .LVU144
 658 0202 FFF7FEFF 		bl	clear_keyboard
 659              	.LVL51:
 450:quantum/command.c ****             if (keymap_config.nkro) {
 660              		.loc 1 450 13 view .LVU145
 450:quantum/command.c ****             if (keymap_config.nkro) {
 661              		.loc 1 450 32 is_stmt 0 view .LVU146
 662 0206 2349     		ldr	r1, .L37+84
 450:quantum/command.c ****             if (keymap_config.nkro) {
 663              		.loc 1 450 48 view .LVU147
 664 0208 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 665 020a C3F3C012 		ubfx	r2, r3, #7, #1
 450:quantum/command.c ****             if (keymap_config.nkro) {
 666              		.loc 1 450 13 view .LVU148
 667 020e 82F00102 		eor	r2, r2, #1
 450:quantum/command.c ****             if (keymap_config.nkro) {
 668              		.loc 1 450 32 view .LVU149
 669 0212 62F3C713 		bfi	r3, r2, #7, #1
 670 0216 0B70     		strb	r3, [r1]
 451:quantum/command.c ****                 print("NKRO: on\n");
 671              		.loc 1 451 13 is_stmt 1 view .LVU150
 451:quantum/command.c ****                 print("NKRO: on\n");
 672              		.loc 1 451 16 is_stmt 0 view .LVU151
 673 0218 1B06     		lsls	r3, r3, #24
 452:quantum/command.c ****             } else {
 674              		.loc 1 452 17 is_stmt 1 view .LVU152
 675 021a 4CBF     		ite	mi
 676 021c 1F48     		ldrmi	r0, .L37+92
 454:quantum/command.c ****             }
 677              		.loc 1 454 17 view .LVU153
 678 021e 2048     		ldrpl	r0, .L37+96
 679 0220 76E7     		b	.L32
 680              	.LVL52:
 681              	.L9:
 462:quantum/command.c ****             break;
 682              		.loc 1 462 13 view .LVU154
 683 0222 0020     		movs	r0, #0
 684              	.LVL53:
 685              	.L36:
 521:quantum/command.c ****             break;
 686              		.loc 1 521 13 is_stmt 0 view .LVU155
 687 0224 FFF7FEFF 		bl	switch_default_layer
 688              	.LVL54:
 522:quantum/command.c ****         case KC_0:
 689              		.loc 1 522 13 is_stmt 1 view .LVU156
 690 0228 69E7     		b	.L31
 691              	.LVL55:
 692              	.L11:
 511:quantum/command.c ****             break;
 693              		.loc 1 511 13 view .LVU157
 694 022a 3938     		subs	r0, r0, #57
 695              	.LVL56:
 696              	.L35:
 521:quantum/command.c ****             break;
 697              		.loc 1 521 13 is_stmt 0 view .LVU158
 698 022c C0B2     		uxtb	r0, r0
 699 022e F9E7     		b	.L36
 700              	.LVL57:
 701              	.L15:
 521:quantum/command.c ****             break;
 702              		.loc 1 521 13 is_stmt 1 view .LVU159
 703 0230 1D38     		subs	r0, r0, #29
 704              	.LVL58:
 521:quantum/command.c ****             break;
 705              		.loc 1 521 13 is_stmt 0 view .LVU160
 706 0232 FBE7     		b	.L35
 707              	.LVL59:
 708              	.L8:
 529:quantum/command.c ****             return false;
 709              		.loc 1 529 13 is_stmt 1 view .LVU161
 710 0234 1B48     		ldr	r0, .L37+100
 711              	.LVL60:
 529:quantum/command.c ****             return false;
 712              		.loc 1 529 13 is_stmt 0 view .LVU162
 713 0236 FFF7FEFF 		bl	printf_
 714              	.LVL61:
 530:quantum/command.c ****     }
 715              		.loc 1 530 13 is_stmt 1 view .LVU163
 530:quantum/command.c ****     }
 716              		.loc 1 530 20 is_stmt 0 view .LVU164
 717 023a 0020     		movs	r0, #0
 718 023c 79E7     		b	.L25
 719              	.L38:
 720 023e 00BF     		.align	2
 721              	.L37:
 722 0240 00000000 		.word	.LC2
 723 0244 1D000000 		.word	.LC3
 724 0248 66000000 		.word	.LC4
 725 024c 4B010000 		.word	.LC5
 726 0250 5C010000 		.word	.LC6
 727 0254 00000000 		.word	debug_config
 728 0258 0E030000 		.word	.LC7
 729 025c 35030000 		.word	.LC8
 730 0260 00000000 		.word	.LANCHOR0
 731 0264 39030000 		.word	.LC9
 732 0268 55030000 		.word	.LC10
 733 026c 61030000 		.word	.LC11
 734 0270 6E030000 		.word	.LC12
 735 0274 7B030000 		.word	.LC13
 736 0278 89030000 		.word	.LC14
 737 027c 98030000 		.word	.LC15
 738 0280 A8030000 		.word	.LC16
 739 0284 B4030000 		.word	.LC17
 740 0288 C1030000 		.word	.LC18
 741 028c 00000000 		.word	keyboard_protocol
 742 0290 00000000 		.word	keyboard_idle
 743 0294 00000000 		.word	keymap_config
 744 0298 A8040000 		.word	.LC19
 745 029c 2C050000 		.word	.LC20
 746 02a0 36050000 		.word	.LC21
 747 02a4 41050000 		.word	.LC22
 748              		.cfi_endproc
 749              	.LFE348:
 751              		.section	.rodata.mousekey_console.isra.0.str1.1,"aMS",%progbits,1
 752              	.LC23:
 753 0000 3F3F3F00 		.ascii	"???\000"
 754              	.LC24:
 755 0004 0A092D20 		.ascii	"\012\011- Mousekey -\012\000"
 755      4D6F7573 
 755      656B6579 
 755      202D0A00 
 756              	.LC25:
 757 0014 703A0970 		.ascii	"p:\011print values\012d:\011set defaults\012up:\011"
 757      72696E74 
 757      2076616C 
 757      7565730A 
 757      643A0973 
 758 0038 2B310A64 		.ascii	"+1\012dn:\011-1\012lt:\011+10\012rt:\011-10\012ESC/"
 758      6E3A092D 
 758      310A6C74 
 758      3A092B31 
 758      300A7274 
 759 0056 713A0971 		.ascii	"q:\011quit\012\012speed = delta * max_speed * (repe"
 759      7569740A 
 759      0A737065 
 759      6564203D 
 759      2064656C 
 760 0080 6174202F 		.ascii	"at / time_to_max)\012where delta: cursor=%d, wheel="
 760      2074696D 
 760      655F746F 
 760      5F6D6178 
 760      290A7768 
 761 00b0 25640A53 		.ascii	"%d\012See http://en.wikipedia.org/wiki/Mouse_keys\012"
 761      65652068 
 761      7474703A 
 761      2F2F656E 
 761      2E77696B 
 762 00df 00       		.ascii	"\000"
 763              	.LC26:
 764 00e0 710A00   		.ascii	"q\012\000"
 765              	.LC27:
 766 00e3 0A092D20 		.ascii	"\012\011- Values -\012\000"
 766      56616C75 
 766      6573202D 
 766      0A00
 767              	.LC28:
 768 00f1 6D6B5F64 		.ascii	"mk_delay\000"
 768      656C6179 
 768      00
 769              	.LC29:
 770 00fa 6D6B5F69 		.ascii	"mk_interval\000"
 770      6E746572 
 770      76616C00 
 771              	.LC30:
 772 0106 6D6B5F6D 		.ascii	"mk_max_speed\000"
 772      61785F73 
 772      70656564 
 772      00
 773              	.LC31:
 774 0113 6D6B5F74 		.ascii	"mk_time_to_max\000"
 774      696D655F 
 774      746F5F6D 
 774      617800
 775              	.LC32:
 776 0122 6D6B5F77 		.ascii	"mk_wheel_max_speed\000"
 776      6865656C 
 776      5F6D6178 
 776      5F737065 
 776      656400
 777              	.LC33:
 778 0135 6D6B5F77 		.ascii	"mk_wheel_time_to_max\000"
 778      6865656C 
 778      5F74696D 
 778      655F746F 
 778      5F6D6178 
 779              	.LC34:
 780 014a 3F0A00   		.ascii	"?\012\000"
 781              	.LC35:
 782 014d 25750A00 		.ascii	"%u\012\000"
 783              	.LC36:
 784 0151 64656661 		.ascii	"defaults\012\000"
 784      756C7473 
 784      0A00
 785              	.LC37:
 786 015b 3D202575 		.ascii	"= %u\012\000"
 786      0A00
 787              	.LC38:
 788 0161 4D25753A 		.ascii	"M%u:%s> \000"
 788      25733E20 
 788      00
 789              	.LC39:
 790 016a 4D3E2000 		.ascii	"M> \000"
 791              		.section	.text.mousekey_console.isra.0,"ax",%progbits
 792              		.align	1
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
 796              		.fpu fpv4-sp-d16
 798              	mousekey_console.isra.0:
 799              	.LVL62:
 800              	.LFB357:
 629:quantum/command.c ****     static uint8_t  param = 0;
 801              		.loc 1 629 6 is_stmt 1 view -0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 0
 804              		@ frame_needed = 0, uses_anonymous_args = 0
 630:quantum/command.c ****     static uint8_t *pp    = NULL;
 805              		.loc 1 630 5 view .LVU166
 631:quantum/command.c ****     static char *   desc  = NULL;
 806              		.loc 1 631 5 view .LVU167
 632:quantum/command.c **** 
 807              		.loc 1 632 5 view .LVU168
 638:quantum/command.c **** 
 808              		.loc 1 638 5 view .LVU169
 640:quantum/command.c ****         case KC_H:
 809              		.loc 1 640 5 view .LVU170
 810 0000 2928     		cmp	r0, #41
 629:quantum/command.c ****     static uint8_t  param = 0;
 811              		.loc 1 629 6 is_stmt 0 view .LVU171
 812 0002 10B5     		push	{r4, lr}
 813              		.cfi_def_cfa_offset 8
 814              		.cfi_offset 4, -8
 815              		.cfi_offset 14, -4
 816 0004 5F4C     		ldr	r4, .L91
 640:quantum/command.c ****         case KC_H:
 817              		.loc 1 640 5 view .LVU172
 818 0006 51D0     		beq	.L40
 819 0008 2BD8     		bhi	.L41
 820 000a 1328     		cmp	r0, #19
 821 000c 5BD0     		beq	.L42
 822 000e 17D8     		bhi	.L43
 823 0010 0728     		cmp	r0, #7
 824 0012 00F08F80 		beq	.L44
 825 0016 0B28     		cmp	r0, #11
 826 0018 30D0     		beq	.L45
 827              	.LVL63:
 828              	.L64:
 725:quantum/command.c ****         }
 829              		.loc 1 725 13 is_stmt 1 view .LVU173
 830 001a 5B48     		ldr	r0, .L91+4
 831 001c 9DE0     		b	.L90
 832              	.LVL64:
 833              	.L47:
 640:quantum/command.c ****         case KC_H:
 834              		.loc 1 640 5 is_stmt 0 view .LVU174
 835 001e 0A23     		movs	r3, #10
 836              	.L48:
 837              	.LVL65:
 715:quantum/command.c ****             int16_t val = *pp + change;
 838              		.loc 1 715 9 is_stmt 1 view .LVU175
 715:quantum/command.c ****             int16_t val = *pp + change;
 839              		.loc 1 715 13 is_stmt 0 view .LVU176
 840 0020 5A4A     		ldr	r2, .L91+8
 841 0022 1268     		ldr	r2, [r2]
 715:quantum/command.c ****             int16_t val = *pp + change;
 842              		.loc 1 715 12 view .LVU177
 843 0024 002A     		cmp	r2, #0
 844 0026 F8D0     		beq	.L64
 845              	.LBB30:
 716:quantum/command.c ****             if (val > (int16_t)UINT8_MAX)
 846              		.loc 1 716 13 is_stmt 1 view .LVU178
 716:quantum/command.c ****             if (val > (int16_t)UINT8_MAX)
 847              		.loc 1 716 27 is_stmt 0 view .LVU179
 848 0028 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 716:quantum/command.c ****             if (val > (int16_t)UINT8_MAX)
 849              		.loc 1 716 21 view .LVU180
 850 002a 1944     		add	r1, r1, r3
 851              	.LVL66:
 717:quantum/command.c ****                 *pp = UINT8_MAX;
 852              		.loc 1 717 13 is_stmt 1 view .LVU181
 717:quantum/command.c ****                 *pp = UINT8_MAX;
 853              		.loc 1 717 16 is_stmt 0 view .LVU182
 854 002c FF29     		cmp	r1, #255
 855 002e 00F39F80 		bgt	.L69
 719:quantum/command.c ****                 *pp = 0;
 856              		.loc 1 719 18 is_stmt 1 view .LVU183
 719:quantum/command.c ****                 *pp = 0;
 857              		.loc 1 719 21 is_stmt 0 view .LVU184
 858 0032 0029     		cmp	r1, #0
 859 0034 C0F29E80 		blt	.L70
 722:quantum/command.c ****             xprintf("= %u\n", *pp);
 860              		.loc 1 722 17 is_stmt 1 view .LVU185
 722:quantum/command.c ****             xprintf("= %u\n", *pp);
 861              		.loc 1 722 23 is_stmt 0 view .LVU186
 862 0038 C9B2     		uxtb	r1, r1
 863              	.LVL67:
 864              	.L65:
 723:quantum/command.c ****         } else {
 865              		.loc 1 723 13 view .LVU187
 866 003a 5548     		ldr	r0, .L91+12
 718:quantum/command.c ****             else if (val < 0)
 867              		.loc 1 718 21 view .LVU188
 868 003c 1170     		strb	r1, [r2]
 869              	.LVL68:
 723:quantum/command.c ****         } else {
 870              		.loc 1 723 13 is_stmt 1 view .LVU189
 871 003e 52E0     		b	.L89
 872              	.LVL69:
 873              	.L43:
 723:quantum/command.c ****         } else {
 874              		.loc 1 723 13 is_stmt 0 view .LVU190
 875              	.LBE30:
 640:quantum/command.c ****         case KC_H:
 876              		.loc 1 640 5 view .LVU191
 877 0040 1428     		cmp	r0, #20
 878 0042 33D0     		beq	.L40
 879 0044 A0F11E03 		sub	r3, r0, #30
 880 0048 092B     		cmp	r3, #9
 881 004a E6D8     		bhi	.L64
 666:quantum/command.c ****             switch (param) { /* clang-format off */
 882              		.loc 1 666 13 is_stmt 1 view .LVU192
 666:quantum/command.c ****             switch (param) { /* clang-format off */
 883              		.loc 1 666 30 is_stmt 0 view .LVU193
 884 004c 1D38     		subs	r0, r0, #29
 885              	.LVL70:
 666:quantum/command.c ****             switch (param) { /* clang-format off */
 886              		.loc 1 666 30 view .LVU194
 887 004e C0B2     		uxtb	r0, r0
 666:quantum/command.c ****             switch (param) { /* clang-format off */
 888              		.loc 1 666 19 view .LVU195
 889 0050 2070     		strb	r0, [r4]
 667:quantum/command.c **** #               define PARAM(n, v) case n: pp = &(v); desc = #v; break
 890              		.loc 1 667 13 is_stmt 1 view .LVU196
 891 0052 0138     		subs	r0, r0, #1
 892 0054 0528     		cmp	r0, #5
 893 0056 67D8     		bhi	.L52
 894 0058 DFE800F0 		tbb	[pc, r0]
 895              	.L54:
 896 005c 3B       		.byte	(.L59-.L54)/2
 897 005d 48       		.byte	(.L58-.L54)/2
 898 005e 4E       		.byte	(.L57-.L54)/2
 899 005f 54       		.byte	(.L56-.L54)/2
 900 0060 5A       		.byte	(.L55-.L54)/2
 901 0061 60       		.byte	(.L53-.L54)/2
 902              	.LVL71:
 903              		.p2align 1
 904              	.L41:
 640:quantum/command.c ****         case KC_H:
 905              		.loc 1 640 5 is_stmt 0 view .LVU197
 906 0062 3828     		cmp	r0, #56
 907 0064 0AD0     		beq	.L45
 908 0066 A0F14F03 		sub	r3, r0, #79
 909 006a 032B     		cmp	r3, #3
 910 006c D5D8     		bhi	.L64
 911 006e 5038     		subs	r0, r0, #80
 912              	.LVL72:
 640:quantum/command.c ****         case KC_H:
 913              		.loc 1 640 5 view .LVU198
 914 0070 0228     		cmp	r0, #2
 915 0072 D4D8     		bhi	.L47
 916 0074 DFE800F0 		tbb	[pc, r0]
 917              	.L49:
 918 0078 74       		.byte	(.L51-.L49)/2
 919 0079 77       		.byte	(.L50-.L49)/2
 920 007a 7A       		.byte	(.L68-.L49)/2
 921              	.LVL73:
 922 007b 00       		.p2align 1
 923              	.L45:
 644:quantum/command.c ****             mousekey_console_help();
 924              		.loc 1 644 13 is_stmt 1 view .LVU199
 925 007c 4548     		ldr	r0, .L91+16
 926              	.LVL74:
 644:quantum/command.c ****             mousekey_console_help();
 927              		.loc 1 644 13 is_stmt 0 view .LVU200
 928 007e FFF7FEFF 		bl	printf_
 929              	.LVL75:
 645:quantum/command.c **** #    endif
 930              		.loc 1 645 13 is_stmt 1 view .LVU201
 931              	.LBB31:
 932              	.LBI31:
 603:quantum/command.c ****     mousekey_param_print();
 933              		.loc 1 603 13 view .LVU202
 934              	.LBB32:
 604:quantum/command.c ****     xprintf(/* clang-format off */
 935              		.loc 1 604 5 view .LVU203
 936 0082 FFF7FEFF 		bl	mousekey_param_print
 937              	.LVL76:
 605:quantum/command.c ****         "p:	print values\n"
 938              		.loc 1 605 5 view .LVU204
 939 0086 4448     		ldr	r0, .L91+20
 940 0088 0122     		movs	r2, #1
 941 008a 0521     		movs	r1, #5
 942 008c FFF7FEFF 		bl	printf_
 943              	.LVL77:
 944              	.L61:
 605:quantum/command.c ****         "p:	print values\n"
 945              		.loc 1 605 5 is_stmt 0 view .LVU205
 946              	.LBE32:
 947              	.LBE31:
 729:quantum/command.c ****         xprintf("M%u:%s> ", param, desc ? desc : "???");
 948              		.loc 1 729 5 is_stmt 1 view .LVU206
 729:quantum/command.c ****         xprintf("M%u:%s> ", param, desc ? desc : "???");
 949              		.loc 1 729 9 is_stmt 0 view .LVU207
 950 0090 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 729:quantum/command.c ****         xprintf("M%u:%s> ", param, desc ? desc : "???");
 951              		.loc 1 729 8 view .LVU208
 952 0092 0029     		cmp	r1, #0
 953 0094 70D0     		beq	.L66
 730:quantum/command.c ****     } else {
 954              		.loc 1 730 9 is_stmt 1 view .LVU209
 730:quantum/command.c ****     } else {
 955              		.loc 1 730 41 is_stmt 0 view .LVU210
 956 0096 414B     		ldr	r3, .L91+24
 730:quantum/command.c ****     } else {
 957              		.loc 1 730 9 view .LVU211
 958 0098 4148     		ldr	r0, .L91+28
 730:quantum/command.c ****     } else {
 959              		.loc 1 730 41 view .LVU212
 960 009a 1A68     		ldr	r2, [r3]
 730:quantum/command.c ****     } else {
 961              		.loc 1 730 9 view .LVU213
 962 009c 414B     		ldr	r3, .L91+32
 735:quantum/command.c **** 
 963              		.loc 1 735 1 view .LVU214
 964 009e BDE81040 		pop	{r4, lr}
 965              		.cfi_remember_state
 966              		.cfi_restore 14
 967              		.cfi_restore 4
 968              		.cfi_def_cfa_offset 0
 730:quantum/command.c ****     } else {
 969              		.loc 1 730 9 view .LVU215
 970 00a2 002A     		cmp	r2, #0
 971 00a4 08BF     		it	eq
 972 00a6 1A46     		moveq	r2, r3
 973 00a8 FFF7FEBF 		b	printf_
 974              	.LVL78:
 975              	.L40:
 976              		.cfi_restore_state
 651:quantum/command.c ****             if (!param) return false;
 977              		.loc 1 651 13 is_stmt 1 view .LVU216
 978 00ac 3E48     		ldr	r0, .L91+36
 979              	.LVL79:
 651:quantum/command.c ****             if (!param) return false;
 980              		.loc 1 651 13 is_stmt 0 view .LVU217
 981 00ae FFF7FEFF 		bl	printf_
 982              	.LVL80:
 652:quantum/command.c ****             param = 0;
 983              		.loc 1 652 13 is_stmt 1 view .LVU218
 652:quantum/command.c ****             param = 0;
 984              		.loc 1 652 16 is_stmt 0 view .LVU219
 985 00b2 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 986 00b4 002B     		cmp	r3, #0
 987 00b6 64D0     		beq	.L39
 653:quantum/command.c ****             pp    = NULL;
 988              		.loc 1 653 13 is_stmt 1 view .LVU220
 654:quantum/command.c ****             desc  = NULL;
 989              		.loc 1 654 19 is_stmt 0 view .LVU221
 990 00b8 344A     		ldr	r2, .L91+8
 653:quantum/command.c ****             pp    = NULL;
 991              		.loc 1 653 19 view .LVU222
 992 00ba 0023     		movs	r3, #0
 654:quantum/command.c ****             desc  = NULL;
 993              		.loc 1 654 19 view .LVU223
 994 00bc 1360     		str	r3, [r2]
 655:quantum/command.c ****             break;
 995              		.loc 1 655 19 view .LVU224
 996 00be 374A     		ldr	r2, .L91+24
 653:quantum/command.c ****             pp    = NULL;
 997              		.loc 1 653 19 view .LVU225
 998 00c0 2370     		strb	r3, [r4]
 654:quantum/command.c ****             desc  = NULL;
 999              		.loc 1 654 13 is_stmt 1 view .LVU226
 655:quantum/command.c ****             break;
 1000              		.loc 1 655 13 view .LVU227
 655:quantum/command.c ****             break;
 1001              		.loc 1 655 19 is_stmt 0 view .LVU228
 1002 00c2 1360     		str	r3, [r2]
 656:quantum/command.c **** 
 1003              		.loc 1 656 13 is_stmt 1 view .LVU229
 714:quantum/command.c ****         if (pp) {
 1004              		.loc 1 714 5 view .LVU230
 1005 00c4 E4E7     		b	.L61
 1006              	.LVL81:
 1007              	.L42:
 660:quantum/command.c ****             mousekey_param_print();
 1008              		.loc 1 660 13 view .LVU231
 1009 00c6 3948     		ldr	r0, .L91+40
 1010              	.LVL82:
 660:quantum/command.c ****             mousekey_param_print();
 1011              		.loc 1 660 13 is_stmt 0 view .LVU232
 1012 00c8 FFF7FEFF 		bl	printf_
 1013              	.LVL83:
 661:quantum/command.c **** #    endif
 1014              		.loc 1 661 13 is_stmt 1 view .LVU233
 1015 00cc FFF7FEFF 		bl	mousekey_param_print
 1016              	.LVL84:
 663:quantum/command.c **** 
 1017              		.loc 1 663 13 view .LVU234
 714:quantum/command.c ****         if (pp) {
 1018              		.loc 1 714 5 view .LVU235
 1019 00d0 DEE7     		b	.L61
 1020              	.L59:
 671:quantum/command.c ****                 PARAM(2, mk_interval);
 1021              		.loc 1 671 17 view .LVU236
 1022 00d2 2E4B     		ldr	r3, .L91+8
 1023 00d4 364A     		ldr	r2, .L91+44
 1024 00d6 1A60     		str	r2, [r3]
 671:quantum/command.c ****                 PARAM(2, mk_interval);
 1025              		.loc 1 671 17 view .LVU237
 1026 00d8 304B     		ldr	r3, .L91+24
 1027 00da 364A     		ldr	r2, .L91+48
 1028              	.L88:
 672:quantum/command.c ****                 PARAM(3, mk_max_speed);
 1029              		.loc 1 672 17 is_stmt 0 view .LVU238
 1030 00dc 1A60     		str	r2, [r3]
 672:quantum/command.c ****                 PARAM(3, mk_max_speed);
 1031              		.loc 1 672 17 is_stmt 1 view .LVU239
 1032              	.L63:
 685:quantum/command.c ****             break;
 1033              		.loc 1 685 13 view .LVU240
 685:quantum/command.c ****             break;
 1034              		.loc 1 685 17 is_stmt 0 view .LVU241
 1035 00de 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 685:quantum/command.c ****             break;
 1036              		.loc 1 685 16 view .LVU242
 1037 00e0 0029     		cmp	r1, #0
 1038 00e2 D5D0     		beq	.L61
 685:quantum/command.c ****             break;
 1039              		.loc 1 685 24 is_stmt 1 view .LVU243
 1040 00e4 3448     		ldr	r0, .L91+52
 1041              	.LVL85:
 1042              	.L89:
 1043              	.LBB33:
 723:quantum/command.c ****         } else {
 1044              		.loc 1 723 13 is_stmt 0 view .LVU244
 1045 00e6 FFF7FEFF 		bl	printf_
 1046              	.LVL86:
 1047              	.LBE33:
 1048 00ea D1E7     		b	.L61
 1049              	.LVL87:
 1050              	.L58:
 672:quantum/command.c ****                 PARAM(3, mk_max_speed);
 1051              		.loc 1 672 17 is_stmt 1 view .LVU245
 1052 00ec 274B     		ldr	r3, .L91+8
 1053 00ee 334A     		ldr	r2, .L91+56
 1054 00f0 1A60     		str	r2, [r3]
 672:quantum/command.c ****                 PARAM(3, mk_max_speed);
 1055              		.loc 1 672 17 view .LVU246
 1056 00f2 2A4B     		ldr	r3, .L91+24
 1057 00f4 324A     		ldr	r2, .L91+60
 1058 00f6 F1E7     		b	.L88
 1059              	.L57:
 673:quantum/command.c ****                 PARAM(4, mk_time_to_max);
 1060              		.loc 1 673 17 view .LVU247
 1061 00f8 244B     		ldr	r3, .L91+8
 1062 00fa 324A     		ldr	r2, .L91+64
 1063 00fc 1A60     		str	r2, [r3]
 673:quantum/command.c ****                 PARAM(4, mk_time_to_max);
 1064              		.loc 1 673 17 view .LVU248
 1065 00fe 274B     		ldr	r3, .L91+24
 1066 0100 314A     		ldr	r2, .L91+68
 1067 0102 EBE7     		b	.L88
 1068              	.L56:
 674:quantum/command.c ****                 PARAM(5, mk_wheel_max_speed);
 1069              		.loc 1 674 17 view .LVU249
 1070 0104 214B     		ldr	r3, .L91+8
 1071 0106 314A     		ldr	r2, .L91+72
 1072 0108 1A60     		str	r2, [r3]
 674:quantum/command.c ****                 PARAM(5, mk_wheel_max_speed);
 1073              		.loc 1 674 17 view .LVU250
 1074 010a 244B     		ldr	r3, .L91+24
 1075 010c 304A     		ldr	r2, .L91+76
 1076 010e E5E7     		b	.L88
 1077              	.L55:
 675:quantum/command.c ****                 PARAM(6, mk_wheel_time_to_max);
 1078              		.loc 1 675 17 view .LVU251
 1079 0110 1E4B     		ldr	r3, .L91+8
 1080 0112 304A     		ldr	r2, .L91+80
 1081 0114 1A60     		str	r2, [r3]
 675:quantum/command.c ****                 PARAM(6, mk_wheel_time_to_max);
 1082              		.loc 1 675 17 view .LVU252
 1083 0116 214B     		ldr	r3, .L91+24
 1084 0118 2F4A     		ldr	r2, .L91+84
 1085 011a DFE7     		b	.L88
 1086              	.L53:
 676:quantum/command.c **** #endif /* MK_3_SPEED */
 1087              		.loc 1 676 17 view .LVU253
 1088 011c 1B4B     		ldr	r3, .L91+8
 1089 011e 2F4A     		ldr	r2, .L91+88
 1090 0120 1A60     		str	r2, [r3]
 676:quantum/command.c **** #endif /* MK_3_SPEED */
 1091              		.loc 1 676 17 view .LVU254
 1092 0122 1E4B     		ldr	r3, .L91+24
 1093 0124 2E4A     		ldr	r2, .L91+92
 1094 0126 D9E7     		b	.L88
 1095              	.L52:
 681:quantum/command.c ****                     print("?\n");
 1096              		.loc 1 681 21 view .LVU255
 681:quantum/command.c ****                     print("?\n");
 1097              		.loc 1 681 27 is_stmt 0 view .LVU256
 1098 0128 0023     		movs	r3, #0
 682:quantum/command.c ****                     break;
 1099              		.loc 1 682 21 view .LVU257
 1100 012a 1748     		ldr	r0, .L91+4
 681:quantum/command.c ****                     print("?\n");
 1101              		.loc 1 681 27 view .LVU258
 1102 012c 2370     		strb	r3, [r4]
 682:quantum/command.c ****                     break;
 1103              		.loc 1 682 21 is_stmt 1 view .LVU259
 1104 012e FFF7FEFF 		bl	printf_
 1105              	.LVL88:
 683:quantum/command.c ****             } /* clang-format on */
 1106              		.loc 1 683 21 view .LVU260
 1107 0132 D4E7     		b	.L63
 1108              	.LVL89:
 1109              	.L44:
 698:quantum/command.c ****             mk_interval          = MOUSEKEY_INTERVAL;
 1110              		.loc 1 698 13 view .LVU261
 698:quantum/command.c ****             mk_interval          = MOUSEKEY_INTERVAL;
 1111              		.loc 1 698 34 is_stmt 0 view .LVU262
 1112 0134 1E4B     		ldr	r3, .L91+44
 706:quantum/command.c ****             break;
 1113              		.loc 1 706 13 view .LVU263
 1114 0136 2B48     		ldr	r0, .L91+96
 1115              	.LVL90:
 698:quantum/command.c ****             mk_interval          = MOUSEKEY_INTERVAL;
 1116              		.loc 1 698 34 view .LVU264
 1117 0138 1E22     		movs	r2, #30
 1118 013a 1A70     		strb	r2, [r3]
 699:quantum/command.c ****             mk_max_speed         = MOUSEKEY_MAX_SPEED;
 1119              		.loc 1 699 13 is_stmt 1 view .LVU265
 699:quantum/command.c ****             mk_max_speed         = MOUSEKEY_MAX_SPEED;
 1120              		.loc 1 699 34 is_stmt 0 view .LVU266
 1121 013c 1F4B     		ldr	r3, .L91+56
 1122 013e 3222     		movs	r2, #50
 1123 0140 1A70     		strb	r2, [r3]
 700:quantum/command.c ****             mk_time_to_max       = MOUSEKEY_TIME_TO_MAX;
 1124              		.loc 1 700 13 is_stmt 1 view .LVU267
 700:quantum/command.c ****             mk_time_to_max       = MOUSEKEY_TIME_TO_MAX;
 1125              		.loc 1 700 34 is_stmt 0 view .LVU268
 1126 0142 204B     		ldr	r3, .L91+64
 1127 0144 0A22     		movs	r2, #10
 1128 0146 1A70     		strb	r2, [r3]
 701:quantum/command.c ****             mk_wheel_max_speed   = MOUSEKEY_WHEEL_MAX_SPEED;
 1129              		.loc 1 701 13 is_stmt 1 view .LVU269
 701:quantum/command.c ****             mk_wheel_max_speed   = MOUSEKEY_WHEEL_MAX_SPEED;
 1130              		.loc 1 701 34 is_stmt 0 view .LVU270
 1131 0148 204B     		ldr	r3, .L91+72
 1132 014a 1422     		movs	r2, #20
 1133 014c 1A70     		strb	r2, [r3]
 702:quantum/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1134              		.loc 1 702 13 is_stmt 1 view .LVU271
 702:quantum/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1135              		.loc 1 702 34 is_stmt 0 view .LVU272
 1136 014e 214B     		ldr	r3, .L91+80
 1137 0150 0822     		movs	r2, #8
 1138 0152 1A70     		strb	r2, [r3]
 703:quantum/command.c **** #    endif /* MK_3_SPEED */
 1139              		.loc 1 703 13 is_stmt 1 view .LVU273
 703:quantum/command.c **** #    endif /* MK_3_SPEED */
 1140              		.loc 1 703 34 is_stmt 0 view .LVU274
 1141 0154 214B     		ldr	r3, .L91+88
 1142 0156 2822     		movs	r2, #40
 1143 0158 1A70     		strb	r2, [r3]
 706:quantum/command.c ****             break;
 1144              		.loc 1 706 13 is_stmt 1 view .LVU275
 1145              	.LVL91:
 1146              	.L90:
 725:quantum/command.c ****         }
 1147              		.loc 1 725 13 is_stmt 0 view .LVU276
 1148 015a FFF7FEFF 		bl	printf_
 1149              	.LVL92:
 1150 015e 97E7     		b	.L61
 1151              	.LVL93:
 1152              	.L51:
 691:quantum/command.c ****         case KC_RIGHT: change = +10; break;
 1153              		.loc 1 691 31 view .LVU277
 1154 0160 6FF00903 		mvn	r3, #9
 1155 0164 5CE7     		b	.L48
 1156              	.L50:
 690:quantum/command.c ****         case KC_LEFT:  change = -10; break;
 1157              		.loc 1 690 31 view .LVU278
 1158 0166 4FF0FF33 		mov	r3, #-1
 1159 016a 59E7     		b	.L48
 1160              	.L68:
 689:quantum/command.c ****         case KC_DOWN:  change =  -1; break;
 1161              		.loc 1 689 31 view .LVU279
 1162 016c 0123     		movs	r3, #1
 1163 016e 57E7     		b	.L48
 1164              	.LVL94:
 1165              	.L69:
 1166              	.LBB34:
 689:quantum/command.c ****         case KC_DOWN:  change =  -1; break;
 1167              		.loc 1 689 31 view .LVU280
 1168 0170 FF21     		movs	r1, #255
 1169              	.LVL95:
 689:quantum/command.c ****         case KC_DOWN:  change =  -1; break;
 1170              		.loc 1 689 31 view .LVU281
 1171 0172 62E7     		b	.L65
 1172              	.LVL96:
 1173              	.L70:
 689:quantum/command.c ****         case KC_DOWN:  change =  -1; break;
 1174              		.loc 1 689 31 view .LVU282
 1175 0174 0021     		movs	r1, #0
 1176              	.LVL97:
 689:quantum/command.c ****         case KC_DOWN:  change =  -1; break;
 1177              		.loc 1 689 31 view .LVU283
 1178 0176 60E7     		b	.L65
 1179              	.LVL98:
 1180              	.L66:
 689:quantum/command.c ****         case KC_DOWN:  change =  -1; break;
 1181              		.loc 1 689 31 view .LVU284
 1182              	.LBE34:
 732:quantum/command.c ****     }
 1183              		.loc 1 732 9 is_stmt 1 view .LVU285
 735:quantum/command.c **** 
 1184              		.loc 1 735 1 is_stmt 0 view .LVU286
 1185 0178 BDE81040 		pop	{r4, lr}
 1186              		.cfi_remember_state
 1187              		.cfi_restore 14
 1188              		.cfi_restore 4
 1189              		.cfi_def_cfa_offset 0
 732:quantum/command.c ****     }
 1190              		.loc 1 732 9 view .LVU287
 1191 017c 1A48     		ldr	r0, .L91+100
 1192 017e FFF7FEBF 		b	printf_
 1193              	.LVL99:
 1194              	.L39:
 1195              		.cfi_restore_state
 735:quantum/command.c **** 
 1196              		.loc 1 735 1 view .LVU288
 1197 0182 10BD     		pop	{r4, pc}
 1198              	.L92:
 1199              		.align	2
 1200              	.L91:
 1201 0184 00000000 		.word	.LANCHOR1
 1202 0188 4A010000 		.word	.LC34
 1203 018c 00000000 		.word	.LANCHOR2
 1204 0190 5B010000 		.word	.LC37
 1205 0194 04000000 		.word	.LC24
 1206 0198 14000000 		.word	.LC25
 1207 019c 00000000 		.word	.LANCHOR3
 1208 01a0 61010000 		.word	.LC38
 1209 01a4 00000000 		.word	.LC23
 1210 01a8 E0000000 		.word	.LC26
 1211 01ac E3000000 		.word	.LC27
 1212 01b0 00000000 		.word	mk_delay
 1213 01b4 F1000000 		.word	.LC28
 1214 01b8 4D010000 		.word	.LC35
 1215 01bc 00000000 		.word	mk_interval
 1216 01c0 FA000000 		.word	.LC29
 1217 01c4 00000000 		.word	mk_max_speed
 1218 01c8 06010000 		.word	.LC30
 1219 01cc 00000000 		.word	mk_time_to_max
 1220 01d0 13010000 		.word	.LC31
 1221 01d4 00000000 		.word	mk_wheel_max_speed
 1222 01d8 22010000 		.word	.LC32
 1223 01dc 00000000 		.word	mk_wheel_time_to_max
 1224 01e0 35010000 		.word	.LC33
 1225 01e4 51010000 		.word	.LC36
 1226 01e8 6A010000 		.word	.LC39
 1227              		.cfi_endproc
 1228              	.LFE357:
 1230              		.section	.text.command_extra,"ax",%progbits
 1231              		.align	1
 1232              		.weak	command_extra
 1233              		.syntax unified
 1234              		.thumb
 1235              		.thumb_func
 1236              		.fpu fpv4-sp-d16
 1238              	command_extra:
 1239              	.LVL100:
 1240              	.LFB342:
  91:quantum/command.c ****     (void)code;
 1241              		.loc 1 91 34 is_stmt 1 view -0
 1242              		.cfi_startproc
 1243              		@ args = 0, pretend = 0, frame = 0
 1244              		@ frame_needed = 0, uses_anonymous_args = 0
 1245              		@ link register save eliminated.
  92:quantum/command.c ****     return false;
 1246              		.loc 1 92 5 view .LVU290
  93:quantum/command.c **** }
 1247              		.loc 1 93 5 view .LVU291
  94:quantum/command.c **** 
 1248              		.loc 1 94 1 is_stmt 0 view .LVU292
 1249 0000 0020     		movs	r0, #0
 1250              	.LVL101:
  94:quantum/command.c **** 
 1251              		.loc 1 94 1 view .LVU293
 1252 0002 7047     		bx	lr
 1253              		.cfi_endproc
 1254              	.LFE342:
 1256              		.section	.text.command_console_extra,"ax",%progbits
 1257              		.align	1
 1258              		.weak	command_console_extra
 1259              		.syntax unified
 1260              		.thumb
 1261              		.thumb_func
 1262              		.fpu fpv4-sp-d16
 1264              	command_console_extra:
 1265              	.LFB356:
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 0
 1268              		@ frame_needed = 0, uses_anonymous_args = 0
 1269              		@ link register save eliminated.
 1270 0000 0020     		movs	r0, #0
 1271 0002 7047     		bx	lr
 1272              		.cfi_endproc
 1273              	.LFE356:
 1275              		.section	.text.command_proc,"ax",%progbits
 1276              		.align	1
 1277              		.global	command_proc
 1278              		.syntax unified
 1279              		.thumb
 1280              		.thumb_func
 1281              		.fpu fpv4-sp-d16
 1283              	command_proc:
 1284              	.LVL102:
 1285              	.LFB341:
  64:quantum/command.c ****     switch (command_state) {
 1286              		.loc 1 64 33 is_stmt 1 view -0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 0
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
  65:quantum/command.c ****         case ONESHOT:
 1290              		.loc 1 65 5 view .LVU295
  64:quantum/command.c ****     switch (command_state) {
 1291              		.loc 1 64 33 is_stmt 0 view .LVU296
 1292 0000 70B5     		push	{r4, r5, r6, lr}
 1293              		.cfi_def_cfa_offset 16
 1294              		.cfi_offset 4, -16
 1295              		.cfi_offset 5, -12
 1296              		.cfi_offset 6, -8
 1297              		.cfi_offset 14, -4
  65:quantum/command.c ****         case ONESHOT:
 1298              		.loc 1 65 5 view .LVU297
 1299 0002 264E     		ldr	r6, .L124
 1300 0004 3478     		ldrb	r4, [r6]	@ zero_extendqisi2
 1301 0006 012C     		cmp	r4, #1
  64:quantum/command.c ****     switch (command_state) {
 1302              		.loc 1 64 33 view .LVU298
 1303 0008 0546     		mov	r5, r0
  65:quantum/command.c ****         case ONESHOT:
 1304              		.loc 1 65 5 view .LVU299
 1305 000a 14D0     		beq	.L96
 1306 000c 022C     		cmp	r4, #2
 1307 000e 3FD0     		beq	.L97
 1308 0010 002C     		cmp	r4, #0
 1309 0012 40D1     		bne	.L98
  67:quantum/command.c ****             return (command_extra(code) || command_common(code));
 1310              		.loc 1 67 13 is_stmt 1 view .LVU300
  67:quantum/command.c ****             return (command_extra(code) || command_common(code));
 1311              		.loc 1 67 18 is_stmt 0 view .LVU301
 1312 0014 FFF7FEFF 		bl	get_mods
 1313              	.LVL103:
  67:quantum/command.c ****             return (command_extra(code) || command_common(code));
 1314              		.loc 1 67 16 view .LVU302
 1315 0018 2228     		cmp	r0, #34
 1316 001a 0AD1     		bne	.L99
  68:quantum/command.c ****             break;
 1317              		.loc 1 68 13 is_stmt 1 view .LVU303
  68:quantum/command.c ****             break;
 1318              		.loc 1 68 21 is_stmt 0 view .LVU304
 1319 001c 2846     		mov	r0, r5
 1320 001e FFF7FEFF 		bl	command_extra
 1321              	.LVL104:
  68:quantum/command.c ****             break;
 1322              		.loc 1 68 41 view .LVU305
 1323 0022 18B9     		cbnz	r0, .L110
 1324              	.L123:
  72:quantum/command.c ****             else
 1325              		.loc 1 72 48 discriminator 2 view .LVU306
 1326 0024 2846     		mov	r0, r5
 1327 0026 FFF7FEFF 		bl	command_common
 1328              	.LVL105:
 1329 002a 00E0     		b	.L102
 1330              	.L110:
  68:quantum/command.c ****             break;
 1331              		.loc 1 68 41 view .LVU307
 1332 002c 0120     		movs	r0, #1
 1333              	.L102:
  72:quantum/command.c ****             else
 1334              		.loc 1 72 45 discriminator 6 view .LVU308
 1335 002e 00F00104 		and	r4, r0, #1
 1336              	.L99:
  86:quantum/command.c **** 
 1337              		.loc 1 86 1 view .LVU309
 1338 0032 2046     		mov	r0, r4
 1339 0034 70BD     		pop	{r4, r5, r6, pc}
 1340              	.LVL106:
 1341              	.L96:
  69:quantum/command.c ****         case CONSOLE:
 1342              		.loc 1 69 13 is_stmt 1 view .LVU310
  71:quantum/command.c ****                 return (command_extra(code) || command_common(code));
 1343              		.loc 1 71 13 view .LVU311
  71:quantum/command.c ****                 return (command_extra(code) || command_common(code));
 1344              		.loc 1 71 17 is_stmt 0 view .LVU312
 1345 0036 FFF7FEFF 		bl	get_mods
 1346              	.LVL107:
  71:quantum/command.c ****                 return (command_extra(code) || command_common(code));
 1347              		.loc 1 71 16 view .LVU313
 1348 003a 2228     		cmp	r0, #34
  72:quantum/command.c ****             else
 1349              		.loc 1 72 25 view .LVU314
 1350 003c 2846     		mov	r0, r5
  71:quantum/command.c ****                 return (command_extra(code) || command_common(code));
 1351              		.loc 1 71 16 view .LVU315
 1352 003e 05D1     		bne	.L101
  72:quantum/command.c ****             else
 1353              		.loc 1 72 17 is_stmt 1 view .LVU316
  72:quantum/command.c ****             else
 1354              		.loc 1 72 25 is_stmt 0 view .LVU317
 1355 0040 FFF7FEFF 		bl	command_extra
 1356              	.LVL108:
  72:quantum/command.c ****             else
 1357              		.loc 1 72 45 view .LVU318
 1358 0044 0028     		cmp	r0, #0
 1359 0046 EDD0     		beq	.L123
 1360 0048 2046     		mov	r0, r4
 1361 004a F0E7     		b	.L102
 1362              	.L101:
  74:quantum/command.c ****             break;
 1363              		.loc 1 74 17 is_stmt 1 view .LVU319
  74:quantum/command.c ****             break;
 1364              		.loc 1 74 25 is_stmt 0 view .LVU320
 1365 004c FFF7FEFF 		bl	command_console_extra
 1366              	.LVL109:
  74:quantum/command.c ****             break;
 1367              		.loc 1 74 53 view .LVU321
 1368 0050 0028     		cmp	r0, #0
 1369 0052 EED1     		bne	.L99
 1370              	.LVL110:
 1371              	.LBB39:
 1372              	.LBI39:
 547:quantum/command.c ****     switch (code) {
 1373              		.loc 1 547 13 is_stmt 1 view .LVU322
 1374              	.LBB40:
 548:quantum/command.c ****         case KC_H:
 1375              		.loc 1 548 5 view .LVU323
 1376 0054 142D     		cmp	r5, #20
 1377 0056 1ED0     		beq	.L98
 1378 0058 08D8     		bhi	.L105
 1379 005a 0B2D     		cmp	r5, #11
 1380 005c 0AD0     		beq	.L106
 1381 005e 102D     		cmp	r5, #16
 1382 0060 10D0     		beq	.L107
 1383              	.L108:
 565:quantum/command.c ****             return false;
 1384              		.loc 1 565 13 view .LVU324
 1385 0062 0F48     		ldr	r0, .L124+4
 1386 0064 FFF7FEFF 		bl	printf_
 1387              	.LVL111:
 566:quantum/command.c ****     }
 1388              		.loc 1 566 13 view .LVU325
 566:quantum/command.c ****     }
 1389              		.loc 1 566 13 is_stmt 0 view .LVU326
 1390              	.LBE40:
 1391              	.LBE39:
  74:quantum/command.c ****             break;
 1392              		.loc 1 74 53 view .LVU327
 1393 0068 0024     		movs	r4, #0
 1394 006a E2E7     		b	.L99
 1395              	.LVL112:
 1396              	.L105:
 1397              	.LBB45:
 1398              	.LBB43:
 548:quantum/command.c ****         case KC_H:
 1399              		.loc 1 548 5 view .LVU328
 1400 006c 292D     		cmp	r5, #41
 1401 006e 12D0     		beq	.L98
 1402 0070 382D     		cmp	r5, #56
 1403 0072 F6D1     		bne	.L108
 1404              	.L106:
 551:quantum/command.c ****             print("C> ");
 1405              		.loc 1 551 13 is_stmt 1 view .LVU329
 1406              	.LBB41:
 1407              	.LBI41:
 538:quantum/command.c ****     print("\n\t- Console -\n"
 1408              		.loc 1 538 13 view .LVU330
 1409              	.LBB42:
 539:quantum/command.c ****           "ESC/q:	quit\n"
 1410              		.loc 1 539 5 view .LVU331
 1411 0074 0B48     		ldr	r0, .L124+8
 1412 0076 FFF7FEFF 		bl	printf_
 1413              	.LVL113:
 1414              	.LBE42:
 1415              	.LBE41:
 552:quantum/command.c ****             return true;
 1416              		.loc 1 552 13 view .LVU332
 1417 007a 0B48     		ldr	r0, .L124+12
 1418 007c FFF7FEFF 		bl	printf_
 1419              	.LVL114:
 553:quantum/command.c ****         case KC_Q:
 1420              		.loc 1 553 13 view .LVU333
 1421              	.L122:
 553:quantum/command.c ****         case KC_Q:
 1422              		.loc 1 553 13 is_stmt 0 view .LVU334
 1423              	.LBE43:
 1424              	.LBE45:
  79:quantum/command.c **** #endif
 1425              		.loc 1 79 13 is_stmt 1 view .LVU335
  85:quantum/command.c **** }
 1426              		.loc 1 85 5 view .LVU336
  85:quantum/command.c **** }
 1427              		.loc 1 85 12 is_stmt 0 view .LVU337
 1428 0080 0124     		movs	r4, #1
 1429 0082 D6E7     		b	.L99
 1430              	.LVL115:
 1431              	.L107:
 1432              	.LBB46:
 1433              	.LBB44:
 560:quantum/command.c ****             mousekey_console(KC_SLASH /* ? */);
 1434              		.loc 1 560 13 is_stmt 1 view .LVU338
 560:quantum/command.c ****             mousekey_console(KC_SLASH /* ? */);
 1435              		.loc 1 560 27 is_stmt 0 view .LVU339
 1436 0084 0223     		movs	r3, #2
 561:quantum/command.c ****             return true;
 1437              		.loc 1 561 13 view .LVU340
 1438 0086 3820     		movs	r0, #56
 560:quantum/command.c ****             mousekey_console(KC_SLASH /* ? */);
 1439              		.loc 1 560 27 view .LVU341
 1440 0088 3370     		strb	r3, [r6]
 561:quantum/command.c ****             return true;
 1441              		.loc 1 561 13 is_stmt 1 view .LVU342
 1442 008a FFF7FEFF 		bl	mousekey_console.isra.0
 1443              	.LVL116:
 562:quantum/command.c **** #endif
 1444              		.loc 1 562 13 view .LVU343
 562:quantum/command.c **** #endif
 1445              		.loc 1 562 13 is_stmt 0 view .LVU344
 1446 008e D0E7     		b	.L99
 1447              	.LVL117:
 1448              	.L97:
 562:quantum/command.c **** #endif
 1449              		.loc 1 562 13 view .LVU345
 1450              	.LBE44:
 1451              	.LBE46:
  75:quantum/command.c **** #if defined(MOUSEKEY_ENABLE)
 1452              		.loc 1 75 13 is_stmt 1 view .LVU346
  78:quantum/command.c ****             break;
 1453              		.loc 1 78 13 view .LVU347
 1454 0090 FFF7FEFF 		bl	mousekey_console.isra.0
 1455              	.LVL118:
  78:quantum/command.c ****             break;
 1456              		.loc 1 78 13 is_stmt 0 view .LVU348
 1457 0094 F4E7     		b	.L122
 1458              	.L98:
  82:quantum/command.c ****             return false;
 1459              		.loc 1 82 13 is_stmt 1 view .LVU349
  82:quantum/command.c ****             return false;
 1460              		.loc 1 82 27 is_stmt 0 view .LVU350
 1461 0096 0024     		movs	r4, #0
 1462 0098 3470     		strb	r4, [r6]
  83:quantum/command.c ****     }
 1463              		.loc 1 83 13 is_stmt 1 view .LVU351
  83:quantum/command.c ****     }
 1464              		.loc 1 83 20 is_stmt 0 view .LVU352
 1465 009a CAE7     		b	.L99
 1466              	.L125:
 1467              		.align	2
 1468              	.L124:
 1469 009c 00000000 		.word	.LANCHOR0
 1470 00a0 41050000 		.word	.LC22
 1471 00a4 0E030000 		.word	.LC7
 1472 00a8 35030000 		.word	.LC8
 1473              		.cfi_endproc
 1474              	.LFE341:
 1476              		.global	command_state
 1477              		.section	.bss.command_state,"aw",%nobits
 1478              		.set	.LANCHOR0,. + 0
 1481              	command_state:
 1482 0000 00       		.space	1
 1483              		.section	.bss.desc.0,"aw",%nobits
 1484              		.align	2
 1485              		.set	.LANCHOR3,. + 0
 1488              	desc.0:
 1489 0000 00000000 		.space	4
 1490              		.section	.bss.param.2,"aw",%nobits
 1491              		.set	.LANCHOR1,. + 0
 1494              	param.2:
 1495 0000 00       		.space	1
 1496              		.section	.bss.pp.1,"aw",%nobits
 1497              		.align	2
 1498              		.set	.LANCHOR2,. + 0
 1501              	pp.1:
 1502 0000 00000000 		.space	4
 1503              		.text
 1504              	.Letext0:
 1505              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1506              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1507              		.file 4 "/usr/lib/gcc/arm-none-eabi/11.2.0/include/stddef.h"
 1508              		.file 5 "tmk_core/common/host.h"
 1509              		.file 6 "quantum/logging/debug.h"
 1510              		.file 7 "quantum/keycode_config.h"
 1511              		.file 8 "quantum/action_layer.h"
 1512              		.file 9 "quantum/sequencer/sequencer.h"
 1513              		.file 10 "quantum/command.h"
 1514              		.file 11 "quantum/mousekey.h"
 1515              		.file 12 "tmk_core/common/timer.h"
 1516              		.file 13 "quantum/eeconfig.h"
 1517              		.file 14 "quantum/action.h"
 1518              		.file 15 "quantum/quantum.h"
 1519              		.file 16 "quantum/action_util.h"
 1520              		.file 17 "lib/printf/printf.h"
 1521              		.file 18 "quantum/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
     /tmp/ccsamyo6.s:24     .text.mousekey_param_print:0000000000000000 $t
     /tmp/ccsamyo6.s:31     .text.mousekey_param_print:0000000000000000 mousekey_param_print
     /tmp/ccsamyo6.s:70     .text.mousekey_param_print:000000000000002c $d
     /tmp/ccsamyo6.s:84     .text.switch_default_layer:0000000000000000 $t
     /tmp/ccsamyo6.s:90     .text.switch_default_layer:0000000000000000 switch_default_layer
     /tmp/ccsamyo6.s:130    .text.switch_default_layer:000000000000001c $d
     /tmp/ccsamyo6.s:203    .text.command_common:0000000000000000 $t
     /tmp/ccsamyo6.s:209    .text.command_common:0000000000000000 command_common
     /tmp/ccsamyo6.s:232    .text.command_common:0000000000000010 $d
     /tmp/ccsamyo6.s:295    .text.command_common:000000000000008e $t
     /tmp/ccsamyo6.s:722    .text.command_common:0000000000000240 $d
     /tmp/ccsamyo6.s:792    .text.mousekey_console.isra.0:0000000000000000 $t
     /tmp/ccsamyo6.s:798    .text.mousekey_console.isra.0:0000000000000000 mousekey_console.isra.0
     /tmp/ccsamyo6.s:896    .text.mousekey_console.isra.0:000000000000005c $d
     /tmp/ccsamyo6.s:903    .text.mousekey_console.isra.0:0000000000000062 $t
     /tmp/ccsamyo6.s:918    .text.mousekey_console.isra.0:0000000000000078 $d
     /tmp/ccsamyo6.s:1201   .text.mousekey_console.isra.0:0000000000000184 $d
     /tmp/ccsamyo6.s:1231   .text.command_extra:0000000000000000 $t
     /tmp/ccsamyo6.s:1238   .text.command_extra:0000000000000000 command_extra
     /tmp/ccsamyo6.s:1257   .text.command_console_extra:0000000000000000 $t
     /tmp/ccsamyo6.s:1264   .text.command_console_extra:0000000000000000 command_console_extra
     /tmp/ccsamyo6.s:1276   .text.command_proc:0000000000000000 $t
     /tmp/ccsamyo6.s:1283   .text.command_proc:0000000000000000 command_proc
     /tmp/ccsamyo6.s:1469   .text.command_proc:000000000000009c $d
     /tmp/ccsamyo6.s:1481   .bss.command_state:0000000000000000 command_state
     /tmp/ccsamyo6.s:1482   .bss.command_state:0000000000000000 $d
     /tmp/ccsamyo6.s:1484   .bss.desc.0:0000000000000000 $d
     /tmp/ccsamyo6.s:1488   .bss.desc.0:0000000000000000 desc.0
     /tmp/ccsamyo6.s:1494   .bss.param.2:0000000000000000 param.2
     /tmp/ccsamyo6.s:1495   .bss.param.2:0000000000000000 $d
     /tmp/ccsamyo6.s:1497   .bss.pp.1:0000000000000000 $d
     /tmp/ccsamyo6.s:1501   .bss.pp.1:0000000000000000 pp.1
     /tmp/ccsamyo6.s:922    .text.mousekey_console.isra.0:000000000000007b $d
     /tmp/ccsamyo6.s:922    .text.mousekey_console.isra.0:000000000000007c $t

UNDEFINED SYMBOLS
printf_
mk_wheel_time_to_max
mk_interval
mk_wheel_max_speed
mk_delay
mk_time_to_max
mk_max_speed
default_layer_set
clear_keyboard
eeconfig_read_default_layer
eeconfig_read_debug
eeconfig_read_keymap
eeconfig_init
reset_keyboard
host_keyboard_leds
timer_read32
debug_config
keyboard_protocol
keyboard_idle
keymap_config
get_mods
