   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"led.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.led_set_user,"ax",%progbits
  18              		.align	1
  19              		.weak	led_set_user
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	led_set_user:
  27              	.LVL0:
  28              	.LFB341:
  29              		.file 1 "quantum/led.c"
   1:quantum/led.c **** /* Copyright 2020 zvecr<git@zvecr.com>
   2:quantum/led.c ****  *
   3:quantum/led.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/led.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/led.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/led.c ****  * (at your option) any later version.
   7:quantum/led.c ****  *
   8:quantum/led.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/led.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/led.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/led.c ****  * GNU General Public License for more details.
  12:quantum/led.c ****  *
  13:quantum/led.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/led.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/led.c ****  */
  16:quantum/led.c **** #include "quantum.h"
  17:quantum/led.c **** 
  18:quantum/led.c **** #ifdef BACKLIGHT_ENABLE
  19:quantum/led.c **** #    include "backlight.h"
  20:quantum/led.c **** extern backlight_config_t backlight_config;
  21:quantum/led.c **** #else
  22:quantum/led.c **** // Cannot use BACKLIGHT_CAPS_LOCK without backlight being enabled
  23:quantum/led.c **** #    undef BACKLIGHT_CAPS_LOCK
  24:quantum/led.c **** #endif
  25:quantum/led.c **** 
  26:quantum/led.c **** #ifndef LED_PIN_ON_STATE
  27:quantum/led.c **** #    define LED_PIN_ON_STATE 1
  28:quantum/led.c **** #endif
  29:quantum/led.c **** 
  30:quantum/led.c **** #if defined(BACKLIGHT_CAPS_LOCK)
  31:quantum/led.c **** /** \brief Caps Lock indicator using backlight (for keyboards without dedicated LED)
  32:quantum/led.c ****  */
  33:quantum/led.c **** static void handle_backlight_caps_lock(led_t led_state) {
  34:quantum/led.c ****     // Use backlight as Caps Lock indicator
  35:quantum/led.c ****     uint8_t bl_toggle_lvl = 0;
  36:quantum/led.c **** 
  37:quantum/led.c ****     if (led_state.caps_lock && !backlight_config.enable) {
  38:quantum/led.c ****         // Turning Caps Lock ON and backlight is disabled in config
  39:quantum/led.c ****         // Toggling backlight to the brightest level
  40:quantum/led.c ****         bl_toggle_lvl = BACKLIGHT_LEVELS;
  41:quantum/led.c ****     } else if (!led_state.caps_lock && backlight_config.enable) {
  42:quantum/led.c ****         // Turning Caps Lock OFF and backlight is enabled in config
  43:quantum/led.c ****         // Toggling backlight and restoring config level
  44:quantum/led.c ****         bl_toggle_lvl = backlight_config.level;
  45:quantum/led.c ****     }
  46:quantum/led.c **** 
  47:quantum/led.c ****     // Set level without modify backlight_config to keep ability to restore state
  48:quantum/led.c ****     backlight_set(bl_toggle_lvl);
  49:quantum/led.c **** }
  50:quantum/led.c **** #endif
  51:quantum/led.c **** 
  52:quantum/led.c **** /** \brief Lock LED set callback - keymap/user level
  53:quantum/led.c ****  *
  54:quantum/led.c ****  * \deprecated Use led_update_user() instead.
  55:quantum/led.c ****  */
  56:quantum/led.c **** __attribute__((weak)) void led_set_user(uint8_t usb_led) {}
  30              		.loc 1 56 58 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              		.loc 1 56 59 view .LVU1
  36 0000 7047     		bx	lr
  37              		.cfi_endproc
  38              	.LFE341:
  40              		.section	.text.led_set_kb,"ax",%progbits
  41              		.align	1
  42              		.weak	led_set_kb
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  46              		.fpu fpv4-sp-d16
  48              	led_set_kb:
  49              	.LVL1:
  50              	.LFB342:
  57:quantum/led.c **** 
  58:quantum/led.c **** /** \brief Lock LED set callback - keyboard level
  59:quantum/led.c ****  *
  60:quantum/led.c ****  * \deprecated Use led_update_kb() instead.
  61:quantum/led.c ****  */
  62:quantum/led.c **** __attribute__((weak)) void led_set_kb(uint8_t usb_led) { led_set_user(usb_led); }
  51              		.loc 1 62 56 view -0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		.loc 1 62 58 view .LVU3
  56              		.loc 1 62 56 is_stmt 0 view .LVU4
  57 0000 08B5     		push	{r3, lr}
  58              		.cfi_def_cfa_offset 8
  59              		.cfi_offset 3, -8
  60              		.cfi_offset 14, -4
  61              		.loc 1 62 58 view .LVU5
  62 0002 FFF7FEFF 		bl	led_set_user
  63              	.LVL2:
  64              		.loc 1 62 81 view .LVU6
  65 0006 08BD     		pop	{r3, pc}
  66              		.cfi_endproc
  67              	.LFE342:
  69              		.section	.text.led_update_user,"ax",%progbits
  70              		.align	1
  71              		.weak	led_update_user
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  75              		.fpu fpv4-sp-d16
  77              	led_update_user:
  78              	.LVL3:
  79              	.LFB343:
  63:quantum/led.c **** 
  64:quantum/led.c **** /** \brief Lock LED update callback - keymap/user level
  65:quantum/led.c ****  *
  66:quantum/led.c ****  * \return True if led_update_kb() should run its own code, false otherwise.
  67:quantum/led.c ****  */
  68:quantum/led.c **** __attribute__((weak)) bool led_update_user(led_t led_state) { return true; }
  80              		.loc 1 68 61 is_stmt 1 view -0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85              		.loc 1 68 63 view .LVU8
  86              		.loc 1 68 76 is_stmt 0 view .LVU9
  87 0000 0120     		movs	r0, #1
  88              	.LVL4:
  89              		.loc 1 68 76 view .LVU10
  90 0002 7047     		bx	lr
  91              		.cfi_endproc
  92              	.LFE343:
  94              		.section	.text.led_update_kb,"ax",%progbits
  95              		.align	1
  96              		.weak	led_update_kb
  97              		.syntax unified
  98              		.thumb
  99              		.thumb_func
 100              		.fpu fpv4-sp-d16
 102              	led_update_kb:
 103              	.LVL5:
 104              	.LFB344:
  69:quantum/led.c **** 
  70:quantum/led.c **** /** \brief Lock LED update callback - keyboard level
  71:quantum/led.c ****  *
  72:quantum/led.c ****  * \return Ignored for now.
  73:quantum/led.c ****  */
  74:quantum/led.c **** __attribute__((weak)) bool led_update_kb(led_t led_state) {
 105              		.loc 1 74 59 is_stmt 1 view -0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
  75:quantum/led.c ****     bool res = led_update_user(led_state);
 109              		.loc 1 75 5 view .LVU12
  74:quantum/led.c ****     bool res = led_update_user(led_state);
 110              		.loc 1 74 59 is_stmt 0 view .LVU13
 111 0000 08B5     		push	{r3, lr}
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 3, -8
 114              		.cfi_offset 14, -4
 115              		.loc 1 75 16 view .LVU14
 116 0002 FFF7FEFF 		bl	led_update_user
 117              	.LVL6:
  76:quantum/led.c ****     if (res) {
 118              		.loc 1 76 5 is_stmt 1 view .LVU15
  77:quantum/led.c **** #if defined(LED_NUM_LOCK_PIN) || defined(LED_CAPS_LOCK_PIN) || defined(LED_SCROLL_LOCK_PIN) || defi
  78:quantum/led.c **** #    if LED_PIN_ON_STATE == 0
  79:quantum/led.c ****         // invert the whole thing to avoid having to conditionally !led_state.x later
  80:quantum/led.c ****         led_state.raw = ~led_state.raw;
  81:quantum/led.c **** #    endif
  82:quantum/led.c **** 
  83:quantum/led.c **** #    ifdef LED_NUM_LOCK_PIN
  84:quantum/led.c ****         writePin(LED_NUM_LOCK_PIN, led_state.num_lock);
  85:quantum/led.c **** #    endif
  86:quantum/led.c **** #    ifdef LED_CAPS_LOCK_PIN
  87:quantum/led.c ****         writePin(LED_CAPS_LOCK_PIN, led_state.caps_lock);
  88:quantum/led.c **** #    endif
  89:quantum/led.c **** #    ifdef LED_SCROLL_LOCK_PIN
  90:quantum/led.c ****         writePin(LED_SCROLL_LOCK_PIN, led_state.scroll_lock);
  91:quantum/led.c **** #    endif
  92:quantum/led.c **** #    ifdef LED_COMPOSE_PIN
  93:quantum/led.c ****         writePin(LED_COMPOSE_PIN, led_state.compose);
  94:quantum/led.c **** #    endif
  95:quantum/led.c **** #    ifdef LED_KANA_PIN
  96:quantum/led.c ****         writePin(LED_KANA_PIN, led_state.kana);
  97:quantum/led.c **** #    endif
  98:quantum/led.c **** #endif
  99:quantum/led.c ****     }
 119              		.loc 1 99 5 view .LVU16
 100:quantum/led.c ****     return res;
 120              		.loc 1 100 5 view .LVU17
 101:quantum/led.c **** }
 121              		.loc 1 101 1 is_stmt 0 view .LVU18
 122 0006 08BD     		pop	{r3, pc}
 123              		.cfi_endproc
 124              	.LFE344:
 126              		.section	.text.led_init_ports,"ax",%progbits
 127              		.align	1
 128              		.weak	led_init_ports
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu fpv4-sp-d16
 134              	led_init_ports:
 135              	.LFB345:
 102:quantum/led.c **** 
 103:quantum/led.c **** /** \brief Initialise any LED related hardware and/or state
 104:quantum/led.c ****  */
 105:quantum/led.c **** __attribute__((weak)) void led_init_ports(void) {
 136              		.loc 1 105 49 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 106:quantum/led.c **** #ifdef LED_NUM_LOCK_PIN
 107:quantum/led.c ****     setPinOutput(LED_NUM_LOCK_PIN);
 108:quantum/led.c ****     writePin(LED_NUM_LOCK_PIN, !LED_PIN_ON_STATE);
 109:quantum/led.c **** #endif
 110:quantum/led.c **** #ifdef LED_CAPS_LOCK_PIN
 111:quantum/led.c ****     setPinOutput(LED_CAPS_LOCK_PIN);
 112:quantum/led.c ****     writePin(LED_CAPS_LOCK_PIN, !LED_PIN_ON_STATE);
 113:quantum/led.c **** #endif
 114:quantum/led.c **** #ifdef LED_SCROLL_LOCK_PIN
 115:quantum/led.c ****     setPinOutput(LED_SCROLL_LOCK_PIN);
 116:quantum/led.c ****     writePin(LED_SCROLL_LOCK_PIN, !LED_PIN_ON_STATE);
 117:quantum/led.c **** #endif
 118:quantum/led.c **** #ifdef LED_COMPOSE_PIN
 119:quantum/led.c ****     setPinOutput(LED_COMPOSE_PIN);
 120:quantum/led.c ****     writePin(LED_COMPOSE_PIN, !LED_PIN_ON_STATE);
 121:quantum/led.c **** #endif
 122:quantum/led.c **** #ifdef LED_KANA_PIN
 123:quantum/led.c ****     setPinOutput(LED_KANA_PIN);
 124:quantum/led.c ****     writePin(LED_KANA_PIN, !LED_PIN_ON_STATE);
 125:quantum/led.c **** #endif
 126:quantum/led.c **** }
 141              		.loc 1 126 1 view .LVU20
 142 0000 7047     		bx	lr
 143              		.cfi_endproc
 144              	.LFE345:
 146              		.section	.text.led_set,"ax",%progbits
 147              		.align	1
 148              		.weak	led_set
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 152              		.fpu fpv4-sp-d16
 154              	led_set:
 155              	.LVL7:
 156              	.LFB346:
 127:quantum/led.c **** 
 128:quantum/led.c **** /** \brief Entrypoint for protocol to LED binding
 129:quantum/led.c ****  */
 130:quantum/led.c **** __attribute__((weak)) void led_set(uint8_t usb_led) {
 157              		.loc 1 130 53 view -0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 131:quantum/led.c **** #ifdef BACKLIGHT_CAPS_LOCK
 132:quantum/led.c ****     handle_backlight_caps_lock((led_t)usb_led);
 133:quantum/led.c **** #endif
 134:quantum/led.c **** 
 135:quantum/led.c ****     led_set_kb(usb_led);
 161              		.loc 1 135 5 view .LVU22
 130:quantum/led.c **** #ifdef BACKLIGHT_CAPS_LOCK
 162              		.loc 1 130 53 is_stmt 0 view .LVU23
 163 0000 10B5     		push	{r4, lr}
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 4, -8
 166              		.cfi_offset 14, -4
 130:quantum/led.c **** #ifdef BACKLIGHT_CAPS_LOCK
 167              		.loc 1 130 53 view .LVU24
 168 0002 0446     		mov	r4, r0
 169              		.loc 1 135 5 view .LVU25
 170 0004 FFF7FEFF 		bl	led_set_kb
 171              	.LVL8:
 136:quantum/led.c ****     led_update_kb((led_t)usb_led);
 172              		.loc 1 136 5 is_stmt 1 view .LVU26
 173 0008 2046     		mov	r0, r4
 174 000a FFF7FEFF 		bl	led_update_kb
 175              	.LVL9:
 137:quantum/led.c **** }
 176              		.loc 1 137 1 is_stmt 0 view .LVU27
 177 000e 10BD     		pop	{r4, pc}
 178              		.cfi_endproc
 179              	.LFE346:
 181              		.text
 182              	.Letext0:
 183              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 184              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 185              		.file 4 "quantum/led.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 led.c
     /tmp/cckRSUTn.s:18     .text.led_set_user:0000000000000000 $t
     /tmp/cckRSUTn.s:26     .text.led_set_user:0000000000000000 led_set_user
     /tmp/cckRSUTn.s:41     .text.led_set_kb:0000000000000000 $t
     /tmp/cckRSUTn.s:48     .text.led_set_kb:0000000000000000 led_set_kb
     /tmp/cckRSUTn.s:70     .text.led_update_user:0000000000000000 $t
     /tmp/cckRSUTn.s:77     .text.led_update_user:0000000000000000 led_update_user
     /tmp/cckRSUTn.s:95     .text.led_update_kb:0000000000000000 $t
     /tmp/cckRSUTn.s:102    .text.led_update_kb:0000000000000000 led_update_kb
     /tmp/cckRSUTn.s:127    .text.led_init_ports:0000000000000000 $t
     /tmp/cckRSUTn.s:134    .text.led_init_ports:0000000000000000 led_init_ports
     /tmp/cckRSUTn.s:147    .text.led_set:0000000000000000 $t
     /tmp/cckRSUTn.s:154    .text.led_set:0000000000000000 led_set

NO UNDEFINED SYMBOLS
