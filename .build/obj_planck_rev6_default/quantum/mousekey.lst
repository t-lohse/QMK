   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"mousekey.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.move_unit,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	move_unit:
  26              	.LFB333:
  27              		.file 1 "quantum/mousekey.c"
   1:quantum/mousekey.c **** /*
   2:quantum/mousekey.c ****  * Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:quantum/mousekey.c ****  *
   4:quantum/mousekey.c ****  * This program is free software: you can redistribute it and/or modify
   5:quantum/mousekey.c ****  * it under the terms of the GNU General Public License as published by
   6:quantum/mousekey.c ****  * the Free Software Foundation, either version 2 of the License, or
   7:quantum/mousekey.c ****  * (at your option) any later version.
   8:quantum/mousekey.c ****  *
   9:quantum/mousekey.c ****  * This program is distributed in the hope that it will be useful,
  10:quantum/mousekey.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:quantum/mousekey.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:quantum/mousekey.c ****  * GNU General Public License for more details.
  13:quantum/mousekey.c ****  *
  14:quantum/mousekey.c ****  * You should have received a copy of the GNU General Public License
  15:quantum/mousekey.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:quantum/mousekey.c ****  */
  17:quantum/mousekey.c **** 
  18:quantum/mousekey.c **** #include <stdint.h>
  19:quantum/mousekey.c **** #include "keycode.h"
  20:quantum/mousekey.c **** #include "host.h"
  21:quantum/mousekey.c **** #include "timer.h"
  22:quantum/mousekey.c **** #include "print.h"
  23:quantum/mousekey.c **** #include "debug.h"
  24:quantum/mousekey.c **** #include "mousekey.h"
  25:quantum/mousekey.c **** 
  26:quantum/mousekey.c **** inline int8_t times_inv_sqrt2(int8_t x) {
  27:quantum/mousekey.c ****     // 181/256 is pretty close to 1/sqrt(2)
  28:quantum/mousekey.c ****     // 0.70703125                 0.707106781
  29:quantum/mousekey.c ****     // 1 too small for x=99 and x=198
  30:quantum/mousekey.c ****     // This ends up being a mult and discard lower 8 bits
  31:quantum/mousekey.c ****     return (x * 181) >> 8;
  32:quantum/mousekey.c **** }
  33:quantum/mousekey.c **** 
  34:quantum/mousekey.c **** static report_mouse_t mouse_report = {0};
  35:quantum/mousekey.c **** static void           mousekey_debug(void);
  36:quantum/mousekey.c **** static uint8_t        mousekey_accel        = 0;
  37:quantum/mousekey.c **** static uint8_t        mousekey_repeat       = 0;
  38:quantum/mousekey.c **** static uint8_t        mousekey_wheel_repeat = 0;
  39:quantum/mousekey.c **** #ifdef MK_KINETIC_SPEED
  40:quantum/mousekey.c **** static uint16_t mouse_timer = 0;
  41:quantum/mousekey.c **** #endif
  42:quantum/mousekey.c **** 
  43:quantum/mousekey.c **** #ifndef MK_3_SPEED
  44:quantum/mousekey.c **** 
  45:quantum/mousekey.c **** static uint16_t last_timer_c = 0;
  46:quantum/mousekey.c **** static uint16_t last_timer_w = 0;
  47:quantum/mousekey.c **** 
  48:quantum/mousekey.c **** /*
  49:quantum/mousekey.c ****  * Mouse keys acceleration algorithm
  50:quantum/mousekey.c ****  *  http://en.wikipedia.org/wiki/Mouse_keys
  51:quantum/mousekey.c ****  *
  52:quantum/mousekey.c ****  *  speed = delta * max_speed * (repeat / time_to_max)**((1000+curve)/1000)
  53:quantum/mousekey.c ****  */
  54:quantum/mousekey.c **** /* milliseconds between the initial key press and first repeated motion event (0-2550) */
  55:quantum/mousekey.c **** uint8_t mk_delay = MOUSEKEY_DELAY / 10;
  56:quantum/mousekey.c **** /* milliseconds between repeated motion events (0-255) */
  57:quantum/mousekey.c **** uint8_t mk_interval = MOUSEKEY_INTERVAL;
  58:quantum/mousekey.c **** /* steady speed (in action_delta units) applied each event (0-255) */
  59:quantum/mousekey.c **** uint8_t mk_max_speed = MOUSEKEY_MAX_SPEED;
  60:quantum/mousekey.c **** /* number of events (count) accelerating to steady speed (0-255) */
  61:quantum/mousekey.c **** uint8_t mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
  62:quantum/mousekey.c **** /* ramp used to reach maximum pointer speed (NOT SUPPORTED) */
  63:quantum/mousekey.c **** // int8_t mk_curve = 0;
  64:quantum/mousekey.c **** /* wheel params */
  65:quantum/mousekey.c **** /* milliseconds between the initial key press and first repeated motion event (0-2550) */
  66:quantum/mousekey.c **** uint8_t mk_wheel_delay = MOUSEKEY_WHEEL_DELAY / 10;
  67:quantum/mousekey.c **** /* milliseconds between repeated motion events (0-255) */
  68:quantum/mousekey.c **** uint8_t mk_wheel_interval    = MOUSEKEY_WHEEL_INTERVAL;
  69:quantum/mousekey.c **** uint8_t mk_wheel_max_speed   = MOUSEKEY_WHEEL_MAX_SPEED;
  70:quantum/mousekey.c **** uint8_t mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
  71:quantum/mousekey.c **** 
  72:quantum/mousekey.c **** #    ifndef MK_COMBINED
  73:quantum/mousekey.c **** 
  74:quantum/mousekey.c **** static uint8_t move_unit(void) {
  28              		.loc 1 74 32 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  75:quantum/mousekey.c ****     uint16_t unit;
  33              		.loc 1 75 5 view .LVU1
  76:quantum/mousekey.c ****     if (mousekey_accel & (1 << 0)) {
  34              		.loc 1 76 5 view .LVU2
  35              		.loc 1 76 24 is_stmt 0 view .LVU3
  36 0000 194B     		ldr	r3, .L13
  37 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  38              		.loc 1 76 8 view .LVU4
  39 0004 D907     		lsls	r1, r3, #31
  40 0006 09D5     		bpl	.L2
  77:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed) / 4;
  41              		.loc 1 77 9 is_stmt 1 view .LVU5
  42              		.loc 1 77 37 is_stmt 0 view .LVU6
  43 0008 184B     		ldr	r3, .L13+4
  44 000a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  45 000c 00EB8000 		add	r0, r0, r0, lsl #2
  46              		.loc 1 77 14 view .LVU7
  47 0010 8008     		lsrs	r0, r0, #2
  48              	.LVL0:
  49              	.L3:
  78:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
  79:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed) / 2;
  80:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
  81:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
  82:quantum/mousekey.c ****     } else if (mousekey_repeat == 0) {
  83:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA;
  84:quantum/mousekey.c ****     } else if (mousekey_repeat >= mk_time_to_max) {
  85:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
  86:quantum/mousekey.c ****     } else {
  87:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
  88:quantum/mousekey.c ****     }
  89:quantum/mousekey.c ****     return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
  50              		.loc 1 89 5 is_stmt 1 view .LVU8
  51              		.loc 1 89 58 is_stmt 0 view .LVU9
  52 0012 7F28     		cmp	r0, #127
  53 0014 24D8     		bhi	.L10
  54              	.LVL1:
  55              		.loc 1 89 58 discriminator 1 view .LVU10
  56 0016 28B3     		cbz	r0, .L11
  57              	.L6:
  58              		.loc 1 89 58 discriminator 3 view .LVU11
  59 0018 C0B2     		uxtb	r0, r0
  60 001a 7047     		bx	lr
  61              	.L2:
  78:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
  62              		.loc 1 78 12 is_stmt 1 view .LVU12
  78:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
  63              		.loc 1 78 15 is_stmt 0 view .LVU13
  64 001c 9A07     		lsls	r2, r3, #30
  65 001e 05D5     		bpl	.L4
  79:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
  66              		.loc 1 79 9 is_stmt 1 view .LVU14
  79:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
  67              		.loc 1 79 37 is_stmt 0 view .LVU15
  68 0020 124B     		ldr	r3, .L13+4
  69 0022 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  70 0024 00EB8000 		add	r0, r0, r0, lsl #2
  79:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
  71              		.loc 1 79 14 view .LVU16
  72 0028 4008     		lsrs	r0, r0, #1
  73              	.LVL2:
  79:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
  74              		.loc 1 79 14 view .LVU17
  75 002a F2E7     		b	.L3
  76              	.LVL3:
  77              	.L4:
  80:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
  78              		.loc 1 80 12 is_stmt 1 view .LVU18
  80:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
  79              		.loc 1 80 15 is_stmt 0 view .LVU19
  80 002c 5B07     		lsls	r3, r3, #29
  81 002e 04D5     		bpl	.L5
  81:quantum/mousekey.c ****     } else if (mousekey_repeat == 0) {
  82              		.loc 1 81 9 is_stmt 1 view .LVU20
  81:quantum/mousekey.c ****     } else if (mousekey_repeat == 0) {
  83              		.loc 1 81 14 is_stmt 0 view .LVU21
  84 0030 0E4B     		ldr	r3, .L13+4
  85 0032 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  86              	.L12:
  85:quantum/mousekey.c ****     } else {
  87              		.loc 1 85 9 is_stmt 1 view .LVU22
  85:quantum/mousekey.c ****     } else {
  88              		.loc 1 85 14 is_stmt 0 view .LVU23
  89 0034 00EB8000 		add	r0, r0, r0, lsl #2
  90              	.LVL4:
  85:quantum/mousekey.c ****     } else {
  91              		.loc 1 85 14 view .LVU24
  92 0038 EBE7     		b	.L3
  93              	.LVL5:
  94              	.L5:
  82:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA;
  95              		.loc 1 82 12 is_stmt 1 view .LVU25
  82:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA;
  96              		.loc 1 82 32 is_stmt 0 view .LVU26
  97 003a 0D4B     		ldr	r3, .L13+8
  98 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  82:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA;
  99              		.loc 1 82 15 view .LVU27
 100 003e 6BB1     		cbz	r3, .L9
  84:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
 101              		.loc 1 84 12 is_stmt 1 view .LVU28
  84:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
 102              		.loc 1 84 32 is_stmt 0 view .LVU29
 103 0040 0C4A     		ldr	r2, .L13+12
  77:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 104              		.loc 1 77 37 view .LVU30
 105 0042 0A49     		ldr	r1, .L13+4
  84:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
 106              		.loc 1 84 32 view .LVU31
 107 0044 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
  77:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 108              		.loc 1 77 37 view .LVU32
 109 0046 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
  84:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
 110              		.loc 1 84 15 view .LVU33
 111 0048 9342     		cmp	r3, r2
 112 004a F3D2     		bcs	.L12
  87:quantum/mousekey.c ****     }
 113              		.loc 1 87 9 is_stmt 1 view .LVU34
  87:quantum/mousekey.c ****     }
 114              		.loc 1 87 52 is_stmt 0 view .LVU35
 115 004c 10FB03F0 		smulbb	r0, r0, r3
 116 0050 00EB8000 		add	r0, r0, r0, lsl #2
  87:quantum/mousekey.c ****     }
 117              		.loc 1 87 71 view .LVU36
 118 0054 B0FBF2F0 		udiv	r0, r0, r2
  87:quantum/mousekey.c ****     }
 119              		.loc 1 87 14 view .LVU37
 120 0058 80B2     		uxth	r0, r0
 121              	.LVL6:
  87:quantum/mousekey.c ****     }
 122              		.loc 1 87 14 view .LVU38
 123 005a DAE7     		b	.L3
 124              	.LVL7:
 125              	.L9:
  83:quantum/mousekey.c ****     } else if (mousekey_repeat >= mk_time_to_max) {
 126              		.loc 1 83 14 view .LVU39
 127 005c 0520     		movs	r0, #5
 128 005e DBE7     		b	.L6
 129              	.LVL8:
 130              	.L10:
 131              		.loc 1 89 58 view .LVU40
 132 0060 7F20     		movs	r0, #127
 133              	.LVL9:
 134              		.loc 1 89 58 view .LVU41
 135 0062 7047     		bx	lr
 136              	.L11:
 137              		.loc 1 89 58 view .LVU42
 138 0064 0120     		movs	r0, #1
  90:quantum/mousekey.c **** }
 139              		.loc 1 90 1 view .LVU43
 140 0066 7047     		bx	lr
 141              	.L14:
 142              		.align	2
 143              	.L13:
 144 0068 00000000 		.word	.LANCHOR0
 145 006c 00000000 		.word	.LANCHOR1
 146 0070 00000000 		.word	.LANCHOR2
 147 0074 00000000 		.word	.LANCHOR3
 148              		.cfi_endproc
 149              	.LFE333:
 151              		.section	.text.wheel_unit,"ax",%progbits
 152              		.align	1
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 156              		.fpu fpv4-sp-d16
 158              	wheel_unit:
 159              	.LFB334:
  91:quantum/mousekey.c **** 
  92:quantum/mousekey.c **** static uint8_t wheel_unit(void) {
 160              		.loc 1 92 33 is_stmt 1 view -0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
  93:quantum/mousekey.c ****     uint16_t unit;
 165              		.loc 1 93 5 view .LVU45
  94:quantum/mousekey.c ****     if (mousekey_accel & (1 << 0)) {
 166              		.loc 1 94 5 view .LVU46
 167              		.loc 1 94 24 is_stmt 0 view .LVU47
 168 0000 154B     		ldr	r3, .L27
 169 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170              		.loc 1 94 8 view .LVU48
 171 0004 D907     		lsls	r1, r3, #31
 172 0006 05D5     		bpl	.L16
  95:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed) / 4;
 173              		.loc 1 95 9 is_stmt 1 view .LVU49
 174              		.loc 1 95 38 is_stmt 0 view .LVU50
 175 0008 144B     		ldr	r3, .L27+4
 176 000a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 177              		.loc 1 95 14 view .LVU51
 178 000c 8008     		lsrs	r0, r0, #2
 179              	.LVL10:
 180              	.L17:
  96:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
  97:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed) / 2;
  98:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
  99:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
 100:quantum/mousekey.c ****     } else if (mousekey_wheel_repeat == 0) {
 101:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA;
 102:quantum/mousekey.c ****     } else if (mousekey_wheel_repeat >= mk_wheel_time_to_max) {
 103:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
 104:quantum/mousekey.c ****     } else {
 105:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_wheel_repeat) / mk_wheel_time_
 106:quantum/mousekey.c ****     }
 107:quantum/mousekey.c ****     return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
 181              		.loc 1 107 60 view .LVU52
 182 000e 00B3     		cbz	r0, .L26
 183              	.L21:
 184              		.loc 1 107 60 discriminator 3 view .LVU53
 185 0010 C0B2     		uxtb	r0, r0
 186 0012 7047     		bx	lr
 187              	.L16:
  96:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 188              		.loc 1 96 12 is_stmt 1 view .LVU54
  96:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 189              		.loc 1 96 15 is_stmt 0 view .LVU55
 190 0014 9A07     		lsls	r2, r3, #30
 191 0016 03D5     		bpl	.L18
  97:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
 192              		.loc 1 97 9 is_stmt 1 view .LVU56
  97:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
 193              		.loc 1 97 38 is_stmt 0 view .LVU57
 194 0018 104B     		ldr	r3, .L27+4
 195 001a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  97:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
 196              		.loc 1 97 14 view .LVU58
 197 001c 4008     		lsrs	r0, r0, #1
 198              	.LVL11:
  97:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
 199              		.loc 1 97 14 view .LVU59
 200 001e F6E7     		b	.L17
 201              	.LVL12:
 202              	.L18:
  98:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
 203              		.loc 1 98 12 is_stmt 1 view .LVU60
  98:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
 204              		.loc 1 98 15 is_stmt 0 view .LVU61
 205 0020 5B07     		lsls	r3, r3, #29
 206 0022 05D5     		bpl	.L19
  99:quantum/mousekey.c ****     } else if (mousekey_wheel_repeat == 0) {
 207              		.loc 1 99 9 is_stmt 1 view .LVU62
  99:quantum/mousekey.c ****     } else if (mousekey_wheel_repeat == 0) {
 208              		.loc 1 99 14 is_stmt 0 view .LVU63
 209 0024 0D4B     		ldr	r3, .L27+4
 210 0026 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 211              	.LVL13:
 212              	.L20:
 213              		.loc 1 107 5 is_stmt 1 view .LVU64
 214              		.loc 1 107 60 is_stmt 0 view .LVU65
 215 0028 7F28     		cmp	r0, #127
 216 002a F0D9     		bls	.L17
 217              		.loc 1 107 60 view .LVU66
 218 002c 7F20     		movs	r0, #127
 219              	.LVL14:
 220              		.loc 1 107 60 view .LVU67
 221 002e 7047     		bx	lr
 222              	.L19:
 100:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA;
 223              		.loc 1 100 12 is_stmt 1 view .LVU68
 100:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA;
 224              		.loc 1 100 38 is_stmt 0 view .LVU69
 225 0030 0B4B     		ldr	r3, .L27+8
 226 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 100:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA;
 227              		.loc 1 100 15 view .LVU70
 228 0034 5BB1     		cbz	r3, .L24
 102:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
 229              		.loc 1 102 12 is_stmt 1 view .LVU71
 102:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
 230              		.loc 1 102 38 is_stmt 0 view .LVU72
 231 0036 0B4A     		ldr	r2, .L27+12
  95:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 232              		.loc 1 95 38 view .LVU73
 233 0038 0849     		ldr	r1, .L27+4
 102:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
 234              		.loc 1 102 38 view .LVU74
 235 003a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
  95:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 236              		.loc 1 95 38 view .LVU75
 237 003c 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 102:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
 238              		.loc 1 102 15 view .LVU76
 239 003e 9342     		cmp	r3, r2
 103:quantum/mousekey.c ****     } else {
 240              		.loc 1 103 9 is_stmt 1 view .LVU77
 105:quantum/mousekey.c ****     }
 241              		.loc 1 105 59 is_stmt 0 view .LVU78
 242 0040 36BF     		itet	cc
 243 0042 10FB03F0 		smulbbcc	r0, r0, r3
 103:quantum/mousekey.c ****     } else {
 244              		.loc 1 103 14 view .LVU79
 245 0046 80B2     		uxthcs	r0, r0
 105:quantum/mousekey.c ****     }
 246              		.loc 1 105 9 is_stmt 1 view .LVU80
 105:quantum/mousekey.c ****     }
 247              		.loc 1 105 14 is_stmt 0 view .LVU81
 248 0048 B0FBF2F0 		udivcc	r0, r0, r2
 249              	.LVL15:
 105:quantum/mousekey.c ****     }
 250              		.loc 1 105 14 view .LVU82
 251 004c ECE7     		b	.L20
 252              	.LVL16:
 253              	.L24:
 101:quantum/mousekey.c ****     } else if (mousekey_wheel_repeat >= mk_wheel_time_to_max) {
 254              		.loc 1 101 14 view .LVU83
 255 004e 0120     		movs	r0, #1
 256 0050 DEE7     		b	.L21
 257              	.L26:
 258              		.loc 1 107 60 view .LVU84
 259 0052 0120     		movs	r0, #1
 108:quantum/mousekey.c **** }
 260              		.loc 1 108 1 view .LVU85
 261 0054 7047     		bx	lr
 262              	.L28:
 263 0056 00BF     		.align	2
 264              	.L27:
 265 0058 00000000 		.word	.LANCHOR0
 266 005c 00000000 		.word	.LANCHOR4
 267 0060 00000000 		.word	.LANCHOR5
 268 0064 00000000 		.word	.LANCHOR6
 269              		.cfi_endproc
 270              	.LFE334:
 272              		.section	.text.mousekey_on,"ax",%progbits
 273              		.align	1
 274              		.global	mousekey_on
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 278              		.fpu fpv4-sp-d16
 280              	mousekey_on:
 281              	.LVL17:
 282              	.LFB336:
 109:quantum/mousekey.c **** 
 110:quantum/mousekey.c **** #    else /* #ifndef MK_COMBINED */
 111:quantum/mousekey.c **** #        ifdef MK_KINETIC_SPEED
 112:quantum/mousekey.c **** 
 113:quantum/mousekey.c **** /*
 114:quantum/mousekey.c ****  * Kinetic movement  acceleration algorithm
 115:quantum/mousekey.c ****  *
 116:quantum/mousekey.c ****  *  current speed = I + A * T/50 + A * 0.5 * T^2 | maximum B
 117:quantum/mousekey.c ****  *
 118:quantum/mousekey.c ****  * T: time since the mouse movement started
 119:quantum/mousekey.c ****  * E: mouse events per second (set through MOUSEKEY_INTERVAL, UHK sends 250, the
 120:quantum/mousekey.c ****  *    pro micro on my Signum 3.0 sends only 125!)
 121:quantum/mousekey.c ****  * I: initial speed at time 0
 122:quantum/mousekey.c ****  * A: acceleration
 123:quantum/mousekey.c ****  * B: base mouse travel speed
 124:quantum/mousekey.c ****  */
 125:quantum/mousekey.c **** const uint16_t mk_accelerated_speed = MOUSEKEY_ACCELERATED_SPEED;
 126:quantum/mousekey.c **** const uint16_t mk_base_speed        = MOUSEKEY_BASE_SPEED;
 127:quantum/mousekey.c **** const uint16_t mk_decelerated_speed = MOUSEKEY_DECELERATED_SPEED;
 128:quantum/mousekey.c **** const uint16_t mk_initial_speed     = MOUSEKEY_INITIAL_SPEED;
 129:quantum/mousekey.c **** 
 130:quantum/mousekey.c **** static uint8_t move_unit(void) {
 131:quantum/mousekey.c ****     float speed = mk_initial_speed;
 132:quantum/mousekey.c **** 
 133:quantum/mousekey.c ****     if (mousekey_accel & ((1 << 0) | (1 << 2))) {
 134:quantum/mousekey.c ****         speed = mousekey_accel & (1 << 2) ? mk_accelerated_speed : mk_decelerated_speed;
 135:quantum/mousekey.c ****     } else if (mousekey_repeat && mouse_timer) {
 136:quantum/mousekey.c ****         const float time_elapsed = timer_elapsed(mouse_timer) / 50;
 137:quantum/mousekey.c ****         speed                    = mk_initial_speed + MOUSEKEY_MOVE_DELTA * time_elapsed + MOUSEKEY
 138:quantum/mousekey.c **** 
 139:quantum/mousekey.c ****         speed = speed > mk_base_speed ? mk_base_speed : speed;
 140:quantum/mousekey.c ****     }
 141:quantum/mousekey.c **** 
 142:quantum/mousekey.c ****     /* convert speed to USB mouse speed 1 to 127 */
 143:quantum/mousekey.c ****     speed = (uint8_t)(speed / (1000.0f / mk_interval));
 144:quantum/mousekey.c ****     speed = speed < 1 ? 1 : speed;
 145:quantum/mousekey.c **** 
 146:quantum/mousekey.c ****     return speed > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : speed;
 147:quantum/mousekey.c **** }
 148:quantum/mousekey.c **** 
 149:quantum/mousekey.c **** float mk_wheel_interval = 1000.0f / MOUSEKEY_WHEEL_INITIAL_MOVEMENTS;
 150:quantum/mousekey.c **** 
 151:quantum/mousekey.c **** static uint8_t wheel_unit(void) {
 152:quantum/mousekey.c ****     float speed = MOUSEKEY_WHEEL_INITIAL_MOVEMENTS;
 153:quantum/mousekey.c **** 
 154:quantum/mousekey.c ****     if (mousekey_accel & ((1 << 0) | (1 << 2))) {
 155:quantum/mousekey.c ****         speed = mousekey_accel & (1 << 2) ? MOUSEKEY_WHEEL_ACCELERATED_MOVEMENTS : MOUSEKEY_WHEEL_D
 156:quantum/mousekey.c ****     } else if (mousekey_repeat && mouse_timer) {
 157:quantum/mousekey.c ****         if (mk_wheel_interval != MOUSEKEY_WHEEL_BASE_MOVEMENTS) {
 158:quantum/mousekey.c ****             const float time_elapsed = timer_elapsed(mouse_timer) / 50;
 159:quantum/mousekey.c ****             speed                    = MOUSEKEY_WHEEL_INITIAL_MOVEMENTS + 1 * time_elapsed + 1 * 0.
 160:quantum/mousekey.c ****         }
 161:quantum/mousekey.c ****         speed = speed > MOUSEKEY_WHEEL_BASE_MOVEMENTS ? MOUSEKEY_WHEEL_BASE_MOVEMENTS : speed;
 162:quantum/mousekey.c ****     }
 163:quantum/mousekey.c **** 
 164:quantum/mousekey.c ****     mk_wheel_interval = 1000.0f / speed;
 165:quantum/mousekey.c **** 
 166:quantum/mousekey.c ****     return 1;
 167:quantum/mousekey.c **** }
 168:quantum/mousekey.c **** 
 169:quantum/mousekey.c **** #        else /* #ifndef MK_KINETIC_SPEED */
 170:quantum/mousekey.c **** 
 171:quantum/mousekey.c **** static uint8_t move_unit(void) {
 172:quantum/mousekey.c ****     uint16_t unit;
 173:quantum/mousekey.c ****     if (mousekey_accel & (1 << 0)) {
 174:quantum/mousekey.c ****         unit = 1;
 175:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 176:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed) / 2;
 177:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
 178:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_MAX;
 179:quantum/mousekey.c ****     } else if (mousekey_repeat == 0) {
 180:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA;
 181:quantum/mousekey.c ****     } else if (mousekey_repeat >= mk_time_to_max) {
 182:quantum/mousekey.c ****         unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
 183:quantum/mousekey.c ****     } else {
 184:quantum/mousekey.c ****         unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
 185:quantum/mousekey.c ****     }
 186:quantum/mousekey.c ****     return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
 187:quantum/mousekey.c **** }
 188:quantum/mousekey.c **** 
 189:quantum/mousekey.c **** static uint8_t wheel_unit(void) {
 190:quantum/mousekey.c ****     uint16_t unit;
 191:quantum/mousekey.c ****     if (mousekey_accel & (1 << 0)) {
 192:quantum/mousekey.c ****         unit = 1;
 193:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 1)) {
 194:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed) / 2;
 195:quantum/mousekey.c ****     } else if (mousekey_accel & (1 << 2)) {
 196:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_MAX;
 197:quantum/mousekey.c ****     } else if (mousekey_repeat == 0) {
 198:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA;
 199:quantum/mousekey.c ****     } else if (mousekey_repeat >= mk_wheel_time_to_max) {
 200:quantum/mousekey.c ****         unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
 201:quantum/mousekey.c ****     } else {
 202:quantum/mousekey.c ****         unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max
 203:quantum/mousekey.c ****     }
 204:quantum/mousekey.c ****     return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
 205:quantum/mousekey.c **** }
 206:quantum/mousekey.c **** 
 207:quantum/mousekey.c **** #        endif /* #ifndef MK_KINETIC_SPEED */
 208:quantum/mousekey.c **** #    endif     /* #ifndef MK_COMBINED */
 209:quantum/mousekey.c **** 
 210:quantum/mousekey.c **** void mousekey_task(void) {
 211:quantum/mousekey.c ****     // report cursor and scroll movement independently
 212:quantum/mousekey.c ****     report_mouse_t const tmpmr = mouse_report;
 213:quantum/mousekey.c **** 
 214:quantum/mousekey.c ****     mouse_report.x = 0;
 215:quantum/mousekey.c ****     mouse_report.y = 0;
 216:quantum/mousekey.c ****     mouse_report.v = 0;
 217:quantum/mousekey.c ****     mouse_report.h = 0;
 218:quantum/mousekey.c **** 
 219:quantum/mousekey.c ****     if ((tmpmr.x || tmpmr.y) && timer_elapsed(last_timer_c) > (mousekey_repeat ? mk_interval : mk_d
 220:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 221:quantum/mousekey.c ****         if (tmpmr.x != 0) mouse_report.x = move_unit() * ((tmpmr.x > 0) ? 1 : -1);
 222:quantum/mousekey.c ****         if (tmpmr.y != 0) mouse_report.y = move_unit() * ((tmpmr.y > 0) ? 1 : -1);
 223:quantum/mousekey.c **** 
 224:quantum/mousekey.c ****         /* diagonal move [1/sqrt(2)] */
 225:quantum/mousekey.c ****         if (mouse_report.x && mouse_report.y) {
 226:quantum/mousekey.c ****             mouse_report.x = times_inv_sqrt2(mouse_report.x);
 227:quantum/mousekey.c ****             if (mouse_report.x == 0) {
 228:quantum/mousekey.c ****                 mouse_report.x = 1;
 229:quantum/mousekey.c ****             }
 230:quantum/mousekey.c ****             mouse_report.y = times_inv_sqrt2(mouse_report.y);
 231:quantum/mousekey.c ****             if (mouse_report.y == 0) {
 232:quantum/mousekey.c ****                 mouse_report.y = 1;
 233:quantum/mousekey.c ****             }
 234:quantum/mousekey.c ****         }
 235:quantum/mousekey.c ****     }
 236:quantum/mousekey.c ****     if ((tmpmr.v || tmpmr.h) && timer_elapsed(last_timer_w) > (mousekey_wheel_repeat ? mk_wheel_int
 237:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 238:quantum/mousekey.c ****         if (tmpmr.v != 0) mouse_report.v = wheel_unit() * ((tmpmr.v > 0) ? 1 : -1);
 239:quantum/mousekey.c ****         if (tmpmr.h != 0) mouse_report.h = wheel_unit() * ((tmpmr.h > 0) ? 1 : -1);
 240:quantum/mousekey.c **** 
 241:quantum/mousekey.c ****         /* diagonal move [1/sqrt(2)] */
 242:quantum/mousekey.c ****         if (mouse_report.v && mouse_report.h) {
 243:quantum/mousekey.c ****             mouse_report.v = times_inv_sqrt2(mouse_report.v);
 244:quantum/mousekey.c ****             if (mouse_report.v == 0) {
 245:quantum/mousekey.c ****                 mouse_report.v = 1;
 246:quantum/mousekey.c ****             }
 247:quantum/mousekey.c ****             mouse_report.h = times_inv_sqrt2(mouse_report.h);
 248:quantum/mousekey.c ****             if (mouse_report.h == 0) {
 249:quantum/mousekey.c ****                 mouse_report.h = 1;
 250:quantum/mousekey.c ****             }
 251:quantum/mousekey.c ****         }
 252:quantum/mousekey.c ****     }
 253:quantum/mousekey.c **** 
 254:quantum/mousekey.c ****     if (mouse_report.x || mouse_report.y || mouse_report.v || mouse_report.h) mousekey_send();
 255:quantum/mousekey.c ****     mouse_report = tmpmr;
 256:quantum/mousekey.c **** }
 257:quantum/mousekey.c **** 
 258:quantum/mousekey.c **** void mousekey_on(uint8_t code) {
 283              		.loc 1 258 32 is_stmt 1 view -0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 259:quantum/mousekey.c **** #    ifdef MK_KINETIC_SPEED
 260:quantum/mousekey.c ****     if (mouse_timer == 0) {
 261:quantum/mousekey.c ****         mouse_timer = timer_read();
 262:quantum/mousekey.c ****     }
 263:quantum/mousekey.c **** #    endif /* #ifdef MK_KINETIC_SPEED */
 264:quantum/mousekey.c **** 
 265:quantum/mousekey.c ****     if (code == KC_MS_UP)
 287              		.loc 1 265 5 view .LVU87
 258:quantum/mousekey.c **** #    ifdef MK_KINETIC_SPEED
 288              		.loc 1 258 32 is_stmt 0 view .LVU88
 289 0000 08B5     		push	{r3, lr}
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 3, -8
 292              		.cfi_offset 14, -4
 293 0002 A0F1ED03 		sub	r3, r0, #237
 294 0006 122B     		cmp	r3, #18
 295 0008 10D8     		bhi	.L29
 296 000a DFE803F0 		tbb	[pc, r3]
 297              	.L32:
 298 000e 0A       		.byte	(.L43-.L32)/2
 299 000f 10       		.byte	(.L42-.L32)/2
 300 0010 13       		.byte	(.L41-.L32)/2
 301 0011 19       		.byte	(.L40-.L32)/2
 302 0012 2E       		.byte	(.L39-.L32)/2
 303 0013 2E       		.byte	(.L39-.L32)/2
 304 0014 2E       		.byte	(.L39-.L32)/2
 305 0015 2E       		.byte	(.L39-.L32)/2
 306 0016 2E       		.byte	(.L39-.L32)/2
 307 0017 2E       		.byte	(.L39-.L32)/2
 308 0018 2E       		.byte	(.L39-.L32)/2
 309 0019 2E       		.byte	(.L39-.L32)/2
 310 001a 1C       		.byte	(.L38-.L32)/2
 311 001b 21       		.byte	(.L37-.L32)/2
 312 001c 25       		.byte	(.L36-.L32)/2
 313 001d 2B       		.byte	(.L35-.L32)/2
 314 001e 36       		.byte	(.L34-.L32)/2
 315 001f 3C       		.byte	(.L33-.L32)/2
 316 0020 41       		.byte	(.L31-.L32)/2
 317 0021 00       		.p2align 1
 318              	.L43:
 266:quantum/mousekey.c ****         mouse_report.y = move_unit() * -1;
 319              		.loc 1 266 9 is_stmt 1 view .LVU89
 320              		.loc 1 266 26 is_stmt 0 view .LVU90
 321 0022 FFF7FEFF 		bl	move_unit
 322              	.LVL18:
 323              		.loc 1 266 24 view .LVU91
 324 0026 4042     		rsbs	r0, r0, #0
 325              	.L46:
 267:quantum/mousekey.c ****     else if (code == KC_MS_DOWN)
 268:quantum/mousekey.c ****         mouse_report.y = move_unit();
 326              		.loc 1 268 24 view .LVU92
 327 0028 1C4B     		ldr	r3, .L50
 328 002a D870     		strb	r0, [r3, #3]
 329              	.L29:
 269:quantum/mousekey.c ****     else if (code == KC_MS_LEFT)
 270:quantum/mousekey.c ****         mouse_report.x = move_unit() * -1;
 271:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT)
 272:quantum/mousekey.c ****         mouse_report.x = move_unit();
 273:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP)
 274:quantum/mousekey.c ****         mouse_report.v = wheel_unit();
 275:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN)
 276:quantum/mousekey.c ****         mouse_report.v = wheel_unit() * -1;
 277:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT)
 278:quantum/mousekey.c ****         mouse_report.h = wheel_unit() * -1;
 279:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT)
 280:quantum/mousekey.c ****         mouse_report.h = wheel_unit();
 281:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 282:quantum/mousekey.c ****         mouse_report.buttons |= 1 << (code - KC_MS_BTN1);
 283:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 284:quantum/mousekey.c ****         mousekey_accel |= (1 << 0);
 285:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 286:quantum/mousekey.c ****         mousekey_accel |= (1 << 1);
 287:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 288:quantum/mousekey.c ****         mousekey_accel |= (1 << 2);
 289:quantum/mousekey.c **** }
 330              		.loc 1 289 1 view .LVU93
 331 002c 08BD     		pop	{r3, pc}
 332              	.LVL19:
 333              	.L42:
 268:quantum/mousekey.c ****     else if (code == KC_MS_LEFT)
 334              		.loc 1 268 9 is_stmt 1 view .LVU94
 268:quantum/mousekey.c ****     else if (code == KC_MS_LEFT)
 335              		.loc 1 268 26 is_stmt 0 view .LVU95
 336 002e FFF7FEFF 		bl	move_unit
 337              	.LVL20:
 268:quantum/mousekey.c ****     else if (code == KC_MS_LEFT)
 338              		.loc 1 268 26 view .LVU96
 339 0032 F9E7     		b	.L46
 340              	.LVL21:
 341              	.L41:
 270:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT)
 342              		.loc 1 270 9 is_stmt 1 view .LVU97
 270:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT)
 343              		.loc 1 270 26 is_stmt 0 view .LVU98
 344 0034 FFF7FEFF 		bl	move_unit
 345              	.LVL22:
 270:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT)
 346              		.loc 1 270 24 view .LVU99
 347 0038 4042     		rsbs	r0, r0, #0
 348              	.L47:
 272:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP)
 349              		.loc 1 272 24 view .LVU100
 350 003a 184B     		ldr	r3, .L50
 351 003c 9870     		strb	r0, [r3, #2]
 352 003e F5E7     		b	.L29
 353              	.LVL23:
 354              	.L40:
 272:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP)
 355              		.loc 1 272 9 is_stmt 1 view .LVU101
 272:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP)
 356              		.loc 1 272 26 is_stmt 0 view .LVU102
 357 0040 FFF7FEFF 		bl	move_unit
 358              	.LVL24:
 272:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP)
 359              		.loc 1 272 26 view .LVU103
 360 0044 F9E7     		b	.L47
 361              	.LVL25:
 362              	.L38:
 274:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN)
 363              		.loc 1 274 9 is_stmt 1 view .LVU104
 274:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN)
 364              		.loc 1 274 26 is_stmt 0 view .LVU105
 365 0046 FFF7FEFF 		bl	wheel_unit
 366              	.LVL26:
 367              	.L49:
 276:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT)
 368              		.loc 1 276 24 view .LVU106
 369 004a 144B     		ldr	r3, .L50
 370 004c 1871     		strb	r0, [r3, #4]
 371 004e EDE7     		b	.L29
 372              	.LVL27:
 373              	.L37:
 276:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT)
 374              		.loc 1 276 9 is_stmt 1 view .LVU107
 276:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT)
 375              		.loc 1 276 26 is_stmt 0 view .LVU108
 376 0050 FFF7FEFF 		bl	wheel_unit
 377              	.LVL28:
 276:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT)
 378              		.loc 1 276 24 view .LVU109
 379 0054 4042     		rsbs	r0, r0, #0
 380 0056 F8E7     		b	.L49
 381              	.LVL29:
 382              	.L36:
 278:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT)
 383              		.loc 1 278 9 is_stmt 1 view .LVU110
 278:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT)
 384              		.loc 1 278 26 is_stmt 0 view .LVU111
 385 0058 FFF7FEFF 		bl	wheel_unit
 386              	.LVL30:
 278:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT)
 387              		.loc 1 278 24 view .LVU112
 388 005c 4042     		rsbs	r0, r0, #0
 389              	.L48:
 280:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 390              		.loc 1 280 24 view .LVU113
 391 005e 0F4B     		ldr	r3, .L50
 392 0060 5871     		strb	r0, [r3, #5]
 393 0062 E3E7     		b	.L29
 394              	.LVL31:
 395              	.L35:
 280:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 396              		.loc 1 280 9 is_stmt 1 view .LVU114
 280:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 397              		.loc 1 280 26 is_stmt 0 view .LVU115
 398 0064 FFF7FEFF 		bl	wheel_unit
 399              	.LVL32:
 280:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 400              		.loc 1 280 26 view .LVU116
 401 0068 F9E7     		b	.L48
 402              	.LVL33:
 403              	.L39:
 282:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 404              		.loc 1 282 9 is_stmt 1 view .LVU117
 282:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 405              		.loc 1 282 30 is_stmt 0 view .LVU118
 406 006a 0C4A     		ldr	r2, .L50
 282:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 407              		.loc 1 282 44 view .LVU119
 408 006c F138     		subs	r0, r0, #241
 409              	.LVL34:
 282:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 410              		.loc 1 282 30 view .LVU120
 411 006e 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 282:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 412              		.loc 1 282 35 view .LVU121
 413 0070 0123     		movs	r3, #1
 414 0072 8340     		lsls	r3, r3, r0
 282:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 415              		.loc 1 282 30 view .LVU122
 416 0074 0B43     		orrs	r3, r3, r1
 417 0076 5370     		strb	r3, [r2, #1]
 418 0078 D8E7     		b	.L29
 419              	.LVL35:
 420              	.L34:
 284:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 421              		.loc 1 284 9 is_stmt 1 view .LVU123
 284:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 422              		.loc 1 284 24 is_stmt 0 view .LVU124
 423 007a 094A     		ldr	r2, .L50+4
 424 007c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 425 007e 43F00103 		orr	r3, r3, #1
 426              	.L45:
 288:quantum/mousekey.c **** }
 427              		.loc 1 288 24 view .LVU125
 428 0082 1370     		strb	r3, [r2]
 429              		.loc 1 289 1 view .LVU126
 430 0084 D2E7     		b	.L29
 431              	.L33:
 286:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 432              		.loc 1 286 9 is_stmt 1 view .LVU127
 286:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 433              		.loc 1 286 24 is_stmt 0 view .LVU128
 434 0086 064A     		ldr	r2, .L50+4
 435 0088 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 436 008a 43F00203 		orr	r3, r3, #2
 437 008e F8E7     		b	.L45
 438              	.L31:
 288:quantum/mousekey.c **** }
 439              		.loc 1 288 9 is_stmt 1 view .LVU129
 288:quantum/mousekey.c **** }
 440              		.loc 1 288 24 is_stmt 0 view .LVU130
 441 0090 034A     		ldr	r2, .L50+4
 442 0092 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 443 0094 43F00403 		orr	r3, r3, #4
 444 0098 F3E7     		b	.L45
 445              	.L51:
 446 009a 00BF     		.align	2
 447              	.L50:
 448 009c 00000000 		.word	.LANCHOR7
 449 00a0 00000000 		.word	.LANCHOR0
 450              		.cfi_endproc
 451              	.LFE336:
 453              		.section	.text.mousekey_off,"ax",%progbits
 454              		.align	1
 455              		.global	mousekey_off
 456              		.syntax unified
 457              		.thumb
 458              		.thumb_func
 459              		.fpu fpv4-sp-d16
 461              	mousekey_off:
 462              	.LVL36:
 463              	.LFB337:
 290:quantum/mousekey.c **** 
 291:quantum/mousekey.c **** void mousekey_off(uint8_t code) {
 464              		.loc 1 291 33 is_stmt 1 view -0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 0, uses_anonymous_args = 0
 292:quantum/mousekey.c ****     if (code == KC_MS_UP && mouse_report.y < 0)
 468              		.loc 1 292 5 view .LVU132
 291:quantum/mousekey.c ****     if (code == KC_MS_UP && mouse_report.y < 0)
 469              		.loc 1 291 33 is_stmt 0 view .LVU133
 470 0000 30B5     		push	{r4, r5, lr}
 471              		.cfi_def_cfa_offset 12
 472              		.cfi_offset 4, -12
 473              		.cfi_offset 5, -8
 474              		.cfi_offset 14, -4
 475              		.loc 1 292 41 view .LVU134
 476 0002 414B     		ldr	r3, .L75
 477              		.loc 1 292 8 view .LVU135
 478 0004 ED28     		cmp	r0, #237
 479              		.loc 1 292 41 view .LVU136
 480 0006 93F90350 		ldrsb	r5, [r3, #3]
 293:quantum/mousekey.c ****         mouse_report.y = 0;
 294:quantum/mousekey.c ****     else if (code == KC_MS_DOWN && mouse_report.y > 0)
 295:quantum/mousekey.c ****         mouse_report.y = 0;
 296:quantum/mousekey.c ****     else if (code == KC_MS_LEFT && mouse_report.x < 0)
 481              		.loc 1 296 48 view .LVU137
 482 000a 93F90240 		ldrsb	r4, [r3, #2]
 297:quantum/mousekey.c ****         mouse_report.x = 0;
 298:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT && mouse_report.x > 0)
 299:quantum/mousekey.c ****         mouse_report.x = 0;
 300:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP && mouse_report.v > 0)
 483              		.loc 1 300 49 view .LVU138
 484 000e 93F90410 		ldrsb	r1, [r3, #4]
 301:quantum/mousekey.c ****         mouse_report.v = 0;
 302:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN && mouse_report.v < 0)
 303:quantum/mousekey.c ****         mouse_report.v = 0;
 304:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT && mouse_report.h < 0)
 485              		.loc 1 304 51 view .LVU139
 486 0012 93F90520 		ldrsb	r2, [r3, #5]
 292:quantum/mousekey.c ****         mouse_report.y = 0;
 487              		.loc 1 292 8 view .LVU140
 488 0016 12D1     		bne	.L53
 292:quantum/mousekey.c ****         mouse_report.y = 0;
 489              		.loc 1 292 26 discriminator 1 view .LVU141
 490 0018 002D     		cmp	r5, #0
 491 001a 01DA     		bge	.L54
 492              	.L56:
 293:quantum/mousekey.c ****     else if (code == KC_MS_DOWN && mouse_report.y > 0)
 493              		.loc 1 293 9 is_stmt 1 view .LVU142
 293:quantum/mousekey.c ****     else if (code == KC_MS_DOWN && mouse_report.y > 0)
 494              		.loc 1 293 24 is_stmt 0 view .LVU143
 495 001c 0022     		movs	r2, #0
 496 001e DA70     		strb	r2, [r3, #3]
 497              	.LVL37:
 498              	.L54:
 305:quantum/mousekey.c ****         mouse_report.h = 0;
 306:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0)
 307:quantum/mousekey.c ****         mouse_report.h = 0;
 308:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 309:quantum/mousekey.c ****         mouse_report.buttons &= ~(1 << (code - KC_MS_BTN1));
 310:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 311:quantum/mousekey.c ****         mousekey_accel &= ~(1 << 0);
 312:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 313:quantum/mousekey.c ****         mousekey_accel &= ~(1 << 1);
 314:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 315:quantum/mousekey.c ****         mousekey_accel &= ~(1 << 2);
 316:quantum/mousekey.c ****     if (mouse_report.x == 0 && mouse_report.y == 0) {
 499              		.loc 1 316 5 is_stmt 1 view .LVU144
 500              		.loc 1 316 29 is_stmt 0 view .LVU145
 501 0020 D978     		ldrb	r1, [r3, #3]	@ zero_extendqisi2
 502 0022 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 503 0024 0A43     		orrs	r2, r2, r1
 504 0026 51B2     		sxtb	r1, r2
 505 0028 0AB9     		cbnz	r2, .L71
 317:quantum/mousekey.c ****         mousekey_repeat = 0;
 506              		.loc 1 317 9 is_stmt 1 view .LVU146
 507              		.loc 1 317 25 is_stmt 0 view .LVU147
 508 002a 384A     		ldr	r2, .L75+4
 509 002c 1170     		strb	r1, [r2]
 510              	.L71:
 318:quantum/mousekey.c **** #    ifdef MK_KINETIC_SPEED
 319:quantum/mousekey.c ****         mouse_timer = 0;
 320:quantum/mousekey.c **** #    endif /* #ifdef MK_KINETIC_SPEED */
 321:quantum/mousekey.c ****     }
 322:quantum/mousekey.c ****     if (mouse_report.v == 0 && mouse_report.h == 0) mousekey_wheel_repeat = 0;
 511              		.loc 1 322 5 is_stmt 1 view .LVU148
 512              		.loc 1 322 29 is_stmt 0 view .LVU149
 513 002e 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 514 0030 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 515 0032 1343     		orrs	r3, r3, r2
 516 0034 5AB2     		sxtb	r2, r3
 517 0036 0BB9     		cbnz	r3, .L52
 518              		.loc 1 322 53 is_stmt 1 discriminator 2 view .LVU150
 519              		.loc 1 322 75 is_stmt 0 discriminator 2 view .LVU151
 520 0038 354B     		ldr	r3, .L75+8
 521 003a 1A70     		strb	r2, [r3]
 522              	.L52:
 323:quantum/mousekey.c **** }
 523              		.loc 1 323 1 view .LVU152
 524 003c 30BD     		pop	{r4, r5, pc}
 525              	.LVL38:
 526              	.L53:
 294:quantum/mousekey.c ****         mouse_report.y = 0;
 527              		.loc 1 294 10 is_stmt 1 view .LVU153
 294:quantum/mousekey.c ****         mouse_report.y = 0;
 528              		.loc 1 294 13 is_stmt 0 view .LVU154
 529 003e EE28     		cmp	r0, #238
 530 0040 02D1     		bne	.L55
 294:quantum/mousekey.c ****         mouse_report.y = 0;
 531              		.loc 1 294 33 discriminator 1 view .LVU155
 532 0042 002D     		cmp	r5, #0
 533 0044 EADC     		bgt	.L56
 534 0046 EBE7     		b	.L54
 535              	.L55:
 296:quantum/mousekey.c ****         mouse_report.x = 0;
 536              		.loc 1 296 10 is_stmt 1 view .LVU156
 296:quantum/mousekey.c ****         mouse_report.x = 0;
 537              		.loc 1 296 13 is_stmt 0 view .LVU157
 538 0048 EF28     		cmp	r0, #239
 539 004a 04D1     		bne	.L57
 296:quantum/mousekey.c ****         mouse_report.x = 0;
 540              		.loc 1 296 33 discriminator 1 view .LVU158
 541 004c 002C     		cmp	r4, #0
 542 004e E7DA     		bge	.L54
 543              	.L59:
 297:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT && mouse_report.x > 0)
 544              		.loc 1 297 9 is_stmt 1 view .LVU159
 297:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT && mouse_report.x > 0)
 545              		.loc 1 297 24 is_stmt 0 view .LVU160
 546 0050 0022     		movs	r2, #0
 547 0052 9A70     		strb	r2, [r3, #2]
 548 0054 E4E7     		b	.L54
 549              	.L57:
 298:quantum/mousekey.c ****         mouse_report.x = 0;
 550              		.loc 1 298 10 is_stmt 1 view .LVU161
 298:quantum/mousekey.c ****         mouse_report.x = 0;
 551              		.loc 1 298 13 is_stmt 0 view .LVU162
 552 0056 F028     		cmp	r0, #240
 553 0058 02D1     		bne	.L58
 298:quantum/mousekey.c ****         mouse_report.x = 0;
 554              		.loc 1 298 34 discriminator 1 view .LVU163
 555 005a 002C     		cmp	r4, #0
 556 005c F8DC     		bgt	.L59
 557 005e DFE7     		b	.L54
 558              	.L58:
 300:quantum/mousekey.c ****         mouse_report.v = 0;
 559              		.loc 1 300 10 is_stmt 1 view .LVU164
 300:quantum/mousekey.c ****         mouse_report.v = 0;
 560              		.loc 1 300 13 is_stmt 0 view .LVU165
 561 0060 F928     		cmp	r0, #249
 562 0062 04D1     		bne	.L60
 300:quantum/mousekey.c ****         mouse_report.v = 0;
 563              		.loc 1 300 34 discriminator 1 view .LVU166
 564 0064 0029     		cmp	r1, #0
 565 0066 DBDD     		ble	.L54
 566              	.L62:
 301:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN && mouse_report.v < 0)
 567              		.loc 1 301 9 is_stmt 1 view .LVU167
 301:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN && mouse_report.v < 0)
 568              		.loc 1 301 24 is_stmt 0 view .LVU168
 569 0068 0022     		movs	r2, #0
 570 006a 1A71     		strb	r2, [r3, #4]
 571 006c D8E7     		b	.L54
 572              	.L60:
 302:quantum/mousekey.c ****         mouse_report.v = 0;
 573              		.loc 1 302 10 is_stmt 1 view .LVU169
 302:quantum/mousekey.c ****         mouse_report.v = 0;
 574              		.loc 1 302 13 is_stmt 0 view .LVU170
 575 006e FA28     		cmp	r0, #250
 576 0070 02D1     		bne	.L61
 302:quantum/mousekey.c ****         mouse_report.v = 0;
 577              		.loc 1 302 36 discriminator 1 view .LVU171
 578 0072 0029     		cmp	r1, #0
 579 0074 D4DA     		bge	.L54
 580 0076 F7E7     		b	.L62
 581              	.L61:
 304:quantum/mousekey.c ****         mouse_report.h = 0;
 582              		.loc 1 304 10 is_stmt 1 view .LVU172
 304:quantum/mousekey.c ****         mouse_report.h = 0;
 583              		.loc 1 304 13 is_stmt 0 view .LVU173
 584 0078 FB28     		cmp	r0, #251
 585 007a 04D1     		bne	.L63
 304:quantum/mousekey.c ****         mouse_report.h = 0;
 586              		.loc 1 304 36 discriminator 1 view .LVU174
 587 007c 002A     		cmp	r2, #0
 588 007e CFDA     		bge	.L54
 589              	.L65:
 305:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0)
 590              		.loc 1 305 9 is_stmt 1 view .LVU175
 305:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0)
 591              		.loc 1 305 24 is_stmt 0 view .LVU176
 592 0080 0022     		movs	r2, #0
 593 0082 5A71     		strb	r2, [r3, #5]
 594 0084 CCE7     		b	.L54
 595              	.L63:
 306:quantum/mousekey.c ****         mouse_report.h = 0;
 596              		.loc 1 306 10 is_stmt 1 view .LVU177
 306:quantum/mousekey.c ****         mouse_report.h = 0;
 597              		.loc 1 306 13 is_stmt 0 view .LVU178
 598 0086 FC28     		cmp	r0, #252
 599 0088 02D1     		bne	.L64
 306:quantum/mousekey.c ****         mouse_report.h = 0;
 600              		.loc 1 306 37 discriminator 1 view .LVU179
 601 008a 002A     		cmp	r2, #0
 602 008c F8DC     		bgt	.L65
 603 008e C7E7     		b	.L54
 604              	.L64:
 308:quantum/mousekey.c ****         mouse_report.buttons &= ~(1 << (code - KC_MS_BTN1));
 605              		.loc 1 308 10 is_stmt 1 view .LVU180
 606 0090 F138     		subs	r0, r0, #241
 607              	.LVL39:
 308:quantum/mousekey.c ****         mouse_report.buttons &= ~(1 << (code - KC_MS_BTN1));
 608              		.loc 1 308 10 is_stmt 0 view .LVU181
 609 0092 0E28     		cmp	r0, #14
 610 0094 C4D8     		bhi	.L54
 611 0096 01A2     		adr	r2, .L67
 612 0098 52F820F0 		ldr	pc, [r2, r0, lsl #2]
 613              		.p2align 2
 614              	.L67:
 615 009c D9000000 		.word	.L70+1
 616 00a0 D9000000 		.word	.L70+1
 617 00a4 D9000000 		.word	.L70+1
 618 00a8 D9000000 		.word	.L70+1
 619 00ac D9000000 		.word	.L70+1
 620 00b0 D9000000 		.word	.L70+1
 621 00b4 D9000000 		.word	.L70+1
 622 00b8 D9000000 		.word	.L70+1
 623 00bc 21000000 		.word	.L54+1
 624 00c0 21000000 		.word	.L54+1
 625 00c4 21000000 		.word	.L54+1
 626 00c8 21000000 		.word	.L54+1
 627 00cc E7000000 		.word	.L69+1
 628 00d0 F3000000 		.word	.L68+1
 629 00d4 FD000000 		.word	.L66+1
 630              		.p2align 1
 631              	.L70:
 309:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 632              		.loc 1 309 9 is_stmt 1 view .LVU182
 309:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 633              		.loc 1 309 30 is_stmt 0 view .LVU183
 634 00d8 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 309:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 635              		.loc 1 309 37 view .LVU184
 636 00da 0121     		movs	r1, #1
 637 00dc 8140     		lsls	r1, r1, r0
 309:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 638              		.loc 1 309 30 view .LVU185
 639 00de 22EA0102 		bic	r2, r2, r1
 640 00e2 5A70     		strb	r2, [r3, #1]
 641 00e4 9CE7     		b	.L54
 642              	.L69:
 311:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 643              		.loc 1 311 9 is_stmt 1 view .LVU186
 311:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 644              		.loc 1 311 24 is_stmt 0 view .LVU187
 645 00e6 0B49     		ldr	r1, .L75+12
 646 00e8 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 647 00ea 22F00102 		bic	r2, r2, #1
 648              	.L74:
 315:quantum/mousekey.c ****     if (mouse_report.x == 0 && mouse_report.y == 0) {
 649              		.loc 1 315 24 view .LVU188
 650 00ee 0A70     		strb	r2, [r1]
 651 00f0 96E7     		b	.L54
 652              	.L68:
 313:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 653              		.loc 1 313 9 is_stmt 1 view .LVU189
 313:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 654              		.loc 1 313 24 is_stmt 0 view .LVU190
 655 00f2 0849     		ldr	r1, .L75+12
 656 00f4 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 657 00f6 22F00202 		bic	r2, r2, #2
 658 00fa F8E7     		b	.L74
 659              	.L66:
 315:quantum/mousekey.c ****     if (mouse_report.x == 0 && mouse_report.y == 0) {
 660              		.loc 1 315 9 is_stmt 1 view .LVU191
 315:quantum/mousekey.c ****     if (mouse_report.x == 0 && mouse_report.y == 0) {
 661              		.loc 1 315 24 is_stmt 0 view .LVU192
 662 00fc 0549     		ldr	r1, .L75+12
 663 00fe 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 664 0100 22F00402 		bic	r2, r2, #4
 665 0104 F3E7     		b	.L74
 666              	.L76:
 667 0106 00BF     		.align	2
 668              	.L75:
 669 0108 00000000 		.word	.LANCHOR7
 670 010c 00000000 		.word	.LANCHOR2
 671 0110 00000000 		.word	.LANCHOR5
 672 0114 00000000 		.word	.LANCHOR0
 673              		.cfi_endproc
 674              	.LFE337:
 676              		.section	.rodata.mousekey_send.str1.1,"aMS",%progbits,1
 677              	.LC0:
 678 0000 6D6F7573 		.ascii	"mousekey [btn|x y v h](rep/acl): [\000"
 678      656B6579 
 678      205B6274 
 678      6E7C7820 
 678      79207620 
 679              	.LC1:
 680 0023 25303258 		.ascii	"%02X\000"
 680      00
 681              	.LC2:
 682 0028 7C00     		.ascii	"|\000"
 683              	.LC3:
 684 002a 256400   		.ascii	"%d\000"
 685              	.LC4:
 686 002d 2000     		.ascii	" \000"
 687              	.LC5:
 688 002f 5D2800   		.ascii	"](\000"
 689              	.LC6:
 690 0032 257500   		.ascii	"%u\000"
 691              	.LC7:
 692 0035 2F00     		.ascii	"/\000"
 693              	.LC8:
 694 0037 290A00   		.ascii	")\012\000"
 695              		.section	.text.mousekey_send,"ax",%progbits
 696              		.align	1
 697              		.global	mousekey_send
 698              		.syntax unified
 699              		.thumb
 700              		.thumb_func
 701              		.fpu fpv4-sp-d16
 703              	mousekey_send:
 704              	.LFB338:
 324:quantum/mousekey.c **** 
 325:quantum/mousekey.c **** #else /* #ifndef MK_3_SPEED */
 326:quantum/mousekey.c **** 
 327:quantum/mousekey.c **** enum { mkspd_unmod, mkspd_0, mkspd_1, mkspd_2, mkspd_COUNT };
 328:quantum/mousekey.c **** #    ifndef MK_MOMENTARY_ACCEL
 329:quantum/mousekey.c **** static uint8_t  mk_speed                 = mkspd_1;
 330:quantum/mousekey.c **** #    else
 331:quantum/mousekey.c **** static uint8_t mk_speed      = mkspd_unmod;
 332:quantum/mousekey.c **** static uint8_t mkspd_DEFAULT = mkspd_unmod;
 333:quantum/mousekey.c **** #    endif
 334:quantum/mousekey.c **** static uint16_t last_timer_c             = 0;
 335:quantum/mousekey.c **** static uint16_t last_timer_w             = 0;
 336:quantum/mousekey.c **** uint16_t        c_offsets[mkspd_COUNT]   = {MK_C_OFFSET_UNMOD, MK_C_OFFSET_0, MK_C_OFFSET_1, MK_C_O
 337:quantum/mousekey.c **** uint16_t        c_intervals[mkspd_COUNT] = {MK_C_INTERVAL_UNMOD, MK_C_INTERVAL_0, MK_C_INTERVAL_1, 
 338:quantum/mousekey.c **** uint16_t        w_offsets[mkspd_COUNT]   = {MK_W_OFFSET_UNMOD, MK_W_OFFSET_0, MK_W_OFFSET_1, MK_W_O
 339:quantum/mousekey.c **** uint16_t        w_intervals[mkspd_COUNT] = {MK_W_INTERVAL_UNMOD, MK_W_INTERVAL_0, MK_W_INTERVAL_1, 
 340:quantum/mousekey.c **** 
 341:quantum/mousekey.c **** void mousekey_task(void) {
 342:quantum/mousekey.c ****     // report cursor and scroll movement independently
 343:quantum/mousekey.c ****     report_mouse_t const tmpmr = mouse_report;
 344:quantum/mousekey.c ****     mouse_report.x             = 0;
 345:quantum/mousekey.c ****     mouse_report.y             = 0;
 346:quantum/mousekey.c ****     mouse_report.v             = 0;
 347:quantum/mousekey.c ****     mouse_report.h             = 0;
 348:quantum/mousekey.c **** 
 349:quantum/mousekey.c ****     if ((tmpmr.x || tmpmr.y) && timer_elapsed(last_timer_c) > c_intervals[mk_speed]) {
 350:quantum/mousekey.c ****         mouse_report.x = tmpmr.x;
 351:quantum/mousekey.c ****         mouse_report.y = tmpmr.y;
 352:quantum/mousekey.c ****     }
 353:quantum/mousekey.c ****     if ((tmpmr.h || tmpmr.v) && timer_elapsed(last_timer_w) > w_intervals[mk_speed]) {
 354:quantum/mousekey.c ****         mouse_report.v = tmpmr.v;
 355:quantum/mousekey.c ****         mouse_report.h = tmpmr.h;
 356:quantum/mousekey.c ****     }
 357:quantum/mousekey.c **** 
 358:quantum/mousekey.c ****     if (mouse_report.x || mouse_report.y || mouse_report.v || mouse_report.h) mousekey_send();
 359:quantum/mousekey.c ****     mouse_report = tmpmr;
 360:quantum/mousekey.c **** }
 361:quantum/mousekey.c **** 
 362:quantum/mousekey.c **** void adjust_speed(void) {
 363:quantum/mousekey.c ****     uint16_t const c_offset = c_offsets[mk_speed];
 364:quantum/mousekey.c ****     uint16_t const w_offset = w_offsets[mk_speed];
 365:quantum/mousekey.c ****     if (mouse_report.x > 0) mouse_report.x = c_offset;
 366:quantum/mousekey.c ****     if (mouse_report.x < 0) mouse_report.x = c_offset * -1;
 367:quantum/mousekey.c ****     if (mouse_report.y > 0) mouse_report.y = c_offset;
 368:quantum/mousekey.c ****     if (mouse_report.y < 0) mouse_report.y = c_offset * -1;
 369:quantum/mousekey.c ****     if (mouse_report.h > 0) mouse_report.h = w_offset;
 370:quantum/mousekey.c ****     if (mouse_report.h < 0) mouse_report.h = w_offset * -1;
 371:quantum/mousekey.c ****     if (mouse_report.v > 0) mouse_report.v = w_offset;
 372:quantum/mousekey.c ****     if (mouse_report.v < 0) mouse_report.v = w_offset * -1;
 373:quantum/mousekey.c ****     // adjust for diagonals
 374:quantum/mousekey.c ****     if (mouse_report.x && mouse_report.y) {
 375:quantum/mousekey.c ****         mouse_report.x = times_inv_sqrt2(mouse_report.x);
 376:quantum/mousekey.c ****         if (mouse_report.x == 0) {
 377:quantum/mousekey.c ****             mouse_report.x = 1;
 378:quantum/mousekey.c ****         }
 379:quantum/mousekey.c ****         mouse_report.y = times_inv_sqrt2(mouse_report.y);
 380:quantum/mousekey.c ****         if (mouse_report.y == 0) {
 381:quantum/mousekey.c ****             mouse_report.y = 1;
 382:quantum/mousekey.c ****         }
 383:quantum/mousekey.c ****     }
 384:quantum/mousekey.c ****     if (mouse_report.h && mouse_report.v) {
 385:quantum/mousekey.c ****         mouse_report.h = times_inv_sqrt2(mouse_report.h);
 386:quantum/mousekey.c ****         mouse_report.v = times_inv_sqrt2(mouse_report.v);
 387:quantum/mousekey.c ****     }
 388:quantum/mousekey.c **** }
 389:quantum/mousekey.c **** 
 390:quantum/mousekey.c **** void mousekey_on(uint8_t code) {
 391:quantum/mousekey.c ****     uint16_t const c_offset  = c_offsets[mk_speed];
 392:quantum/mousekey.c ****     uint16_t const w_offset  = w_offsets[mk_speed];
 393:quantum/mousekey.c ****     uint8_t const  old_speed = mk_speed;
 394:quantum/mousekey.c ****     if (code == KC_MS_UP)
 395:quantum/mousekey.c ****         mouse_report.y = c_offset * -1;
 396:quantum/mousekey.c ****     else if (code == KC_MS_DOWN)
 397:quantum/mousekey.c ****         mouse_report.y = c_offset;
 398:quantum/mousekey.c ****     else if (code == KC_MS_LEFT)
 399:quantum/mousekey.c ****         mouse_report.x = c_offset * -1;
 400:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT)
 401:quantum/mousekey.c ****         mouse_report.x = c_offset;
 402:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP)
 403:quantum/mousekey.c ****         mouse_report.v = w_offset;
 404:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN)
 405:quantum/mousekey.c ****         mouse_report.v = w_offset * -1;
 406:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT)
 407:quantum/mousekey.c ****         mouse_report.h = w_offset * -1;
 408:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT)
 409:quantum/mousekey.c ****         mouse_report.h = w_offset;
 410:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 411:quantum/mousekey.c ****         mouse_report.buttons |= 1 << (code - KC_MS_BTN1);
 412:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 413:quantum/mousekey.c ****         mk_speed = mkspd_0;
 414:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 415:quantum/mousekey.c ****         mk_speed = mkspd_1;
 416:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 417:quantum/mousekey.c ****         mk_speed = mkspd_2;
 418:quantum/mousekey.c ****     if (mk_speed != old_speed) adjust_speed();
 419:quantum/mousekey.c **** }
 420:quantum/mousekey.c **** 
 421:quantum/mousekey.c **** void mousekey_off(uint8_t code) {
 422:quantum/mousekey.c **** #    ifdef MK_MOMENTARY_ACCEL
 423:quantum/mousekey.c ****     uint8_t const old_speed = mk_speed;
 424:quantum/mousekey.c **** #    endif
 425:quantum/mousekey.c ****     if (code == KC_MS_UP && mouse_report.y < 0)
 426:quantum/mousekey.c ****         mouse_report.y = 0;
 427:quantum/mousekey.c ****     else if (code == KC_MS_DOWN && mouse_report.y > 0)
 428:quantum/mousekey.c ****         mouse_report.y = 0;
 429:quantum/mousekey.c ****     else if (code == KC_MS_LEFT && mouse_report.x < 0)
 430:quantum/mousekey.c ****         mouse_report.x = 0;
 431:quantum/mousekey.c ****     else if (code == KC_MS_RIGHT && mouse_report.x > 0)
 432:quantum/mousekey.c ****         mouse_report.x = 0;
 433:quantum/mousekey.c ****     else if (code == KC_MS_WH_UP && mouse_report.v > 0)
 434:quantum/mousekey.c ****         mouse_report.v = 0;
 435:quantum/mousekey.c ****     else if (code == KC_MS_WH_DOWN && mouse_report.v < 0)
 436:quantum/mousekey.c ****         mouse_report.v = 0;
 437:quantum/mousekey.c ****     else if (code == KC_MS_WH_LEFT && mouse_report.h < 0)
 438:quantum/mousekey.c ****         mouse_report.h = 0;
 439:quantum/mousekey.c ****     else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0)
 440:quantum/mousekey.c ****         mouse_report.h = 0;
 441:quantum/mousekey.c ****     else if (IS_MOUSEKEY_BUTTON(code))
 442:quantum/mousekey.c ****         mouse_report.buttons &= ~(1 << (code - KC_MS_BTN1));
 443:quantum/mousekey.c **** #    ifdef MK_MOMENTARY_ACCEL
 444:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL0)
 445:quantum/mousekey.c ****         mk_speed = mkspd_DEFAULT;
 446:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL1)
 447:quantum/mousekey.c ****         mk_speed = mkspd_DEFAULT;
 448:quantum/mousekey.c ****     else if (code == KC_MS_ACCEL2)
 449:quantum/mousekey.c ****         mk_speed = mkspd_DEFAULT;
 450:quantum/mousekey.c ****     if (mk_speed != old_speed) adjust_speed();
 451:quantum/mousekey.c **** #    endif
 452:quantum/mousekey.c **** }
 453:quantum/mousekey.c **** 
 454:quantum/mousekey.c **** #endif /* #ifndef MK_3_SPEED */
 455:quantum/mousekey.c **** 
 456:quantum/mousekey.c **** void mousekey_send(void) {
 705              		.loc 1 456 26 is_stmt 1 view -0
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 0
 708              		@ frame_needed = 0, uses_anonymous_args = 0
 457:quantum/mousekey.c ****     mousekey_debug();
 709              		.loc 1 457 5 view .LVU194
 710              	.LBB12:
 711              	.LBI12:
 458:quantum/mousekey.c ****     uint16_t time = timer_read();
 459:quantum/mousekey.c ****     if (mouse_report.x || mouse_report.y) last_timer_c = time;
 460:quantum/mousekey.c ****     if (mouse_report.v || mouse_report.h) last_timer_w = time;
 461:quantum/mousekey.c ****     host_mouse_send(&mouse_report);
 462:quantum/mousekey.c **** }
 463:quantum/mousekey.c **** 
 464:quantum/mousekey.c **** void mousekey_clear(void) {
 465:quantum/mousekey.c ****     mouse_report          = (report_mouse_t){};
 466:quantum/mousekey.c ****     mousekey_repeat       = 0;
 467:quantum/mousekey.c ****     mousekey_wheel_repeat = 0;
 468:quantum/mousekey.c ****     mousekey_accel        = 0;
 469:quantum/mousekey.c **** }
 470:quantum/mousekey.c **** 
 471:quantum/mousekey.c **** static void mousekey_debug(void) {
 712              		.loc 1 471 13 view .LVU195
 713              	.LBB13:
 472:quantum/mousekey.c ****     if (!debug_mouse) return;
 714              		.loc 1 472 5 view .LVU196
 715              		.loc 1 472 10 is_stmt 0 view .LVU197
 716 0000 2A4B     		ldr	r3, .L90
 717 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 718              		.loc 1 472 8 view .LVU198
 719 0004 13F0080F 		tst	r3, #8
 720              	.LBE13:
 721              	.LBE12:
 456:quantum/mousekey.c ****     mousekey_debug();
 722              		.loc 1 456 26 view .LVU199
 723 0008 10B5     		push	{r4, lr}
 724              		.cfi_def_cfa_offset 8
 725              		.cfi_offset 4, -8
 726              		.cfi_offset 14, -4
 727 000a 294C     		ldr	r4, .L90+4
 728              	.LBB15:
 729              	.LBB14:
 730              		.loc 1 472 8 view .LVU200
 731 000c 39D0     		beq	.L78
 473:quantum/mousekey.c ****     print("mousekey [btn|x y v h](rep/acl): [");
 732              		.loc 1 473 5 is_stmt 1 view .LVU201
 733 000e 2948     		ldr	r0, .L90+8
 734 0010 FFF7FEFF 		bl	printf_
 735              	.LVL40:
 474:quantum/mousekey.c ****     print_hex8(mouse_report.buttons);
 736              		.loc 1 474 5 view .LVU202
 737 0014 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 738 0016 2848     		ldr	r0, .L90+12
 739 0018 FFF7FEFF 		bl	printf_
 740              	.LVL41:
 475:quantum/mousekey.c ****     print("|");
 741              		.loc 1 475 5 view .LVU203
 742 001c 2748     		ldr	r0, .L90+16
 743 001e FFF7FEFF 		bl	printf_
 744              	.LVL42:
 476:quantum/mousekey.c ****     print_decs(mouse_report.x);
 745              		.loc 1 476 5 view .LVU204
 746 0022 94F90210 		ldrsb	r1, [r4, #2]
 747 0026 2648     		ldr	r0, .L90+20
 748 0028 FFF7FEFF 		bl	printf_
 749              	.LVL43:
 477:quantum/mousekey.c ****     print(" ");
 750              		.loc 1 477 5 view .LVU205
 751 002c 2548     		ldr	r0, .L90+24
 752 002e FFF7FEFF 		bl	printf_
 753              	.LVL44:
 478:quantum/mousekey.c ****     print_decs(mouse_report.y);
 754              		.loc 1 478 5 view .LVU206
 755 0032 94F90310 		ldrsb	r1, [r4, #3]
 756 0036 2248     		ldr	r0, .L90+20
 757 0038 FFF7FEFF 		bl	printf_
 758              	.LVL45:
 479:quantum/mousekey.c ****     print(" ");
 759              		.loc 1 479 5 view .LVU207
 760 003c 2148     		ldr	r0, .L90+24
 761 003e FFF7FEFF 		bl	printf_
 762              	.LVL46:
 480:quantum/mousekey.c ****     print_decs(mouse_report.v);
 763              		.loc 1 480 5 view .LVU208
 764 0042 94F90410 		ldrsb	r1, [r4, #4]
 765 0046 1E48     		ldr	r0, .L90+20
 766 0048 FFF7FEFF 		bl	printf_
 767              	.LVL47:
 481:quantum/mousekey.c ****     print(" ");
 768              		.loc 1 481 5 view .LVU209
 769 004c 1D48     		ldr	r0, .L90+24
 770 004e FFF7FEFF 		bl	printf_
 771              	.LVL48:
 482:quantum/mousekey.c ****     print_decs(mouse_report.h);
 772              		.loc 1 482 5 view .LVU210
 773 0052 94F90510 		ldrsb	r1, [r4, #5]
 774 0056 1A48     		ldr	r0, .L90+20
 775 0058 FFF7FEFF 		bl	printf_
 776              	.LVL49:
 483:quantum/mousekey.c ****     print("](");
 777              		.loc 1 483 5 view .LVU211
 778 005c 1A48     		ldr	r0, .L90+28
 779 005e FFF7FEFF 		bl	printf_
 780              	.LVL50:
 484:quantum/mousekey.c ****     print_dec(mousekey_repeat);
 781              		.loc 1 484 5 view .LVU212
 782 0062 1A4B     		ldr	r3, .L90+32
 783 0064 1A48     		ldr	r0, .L90+36
 784 0066 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 785 0068 FFF7FEFF 		bl	printf_
 786              	.LVL51:
 485:quantum/mousekey.c ****     print("/");
 787              		.loc 1 485 5 view .LVU213
 788 006c 1948     		ldr	r0, .L90+40
 789 006e FFF7FEFF 		bl	printf_
 790              	.LVL52:
 486:quantum/mousekey.c ****     print_dec(mousekey_accel);
 791              		.loc 1 486 5 view .LVU214
 792 0072 194B     		ldr	r3, .L90+44
 793 0074 1648     		ldr	r0, .L90+36
 794 0076 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 795 0078 FFF7FEFF 		bl	printf_
 796              	.LVL53:
 487:quantum/mousekey.c ****     print(")\n");
 797              		.loc 1 487 5 view .LVU215
 798 007c 1748     		ldr	r0, .L90+48
 799 007e FFF7FEFF 		bl	printf_
 800              	.LVL54:
 801              	.L78:
 802              	.LBE14:
 803              	.LBE15:
 458:quantum/mousekey.c ****     if (mouse_report.x || mouse_report.y) last_timer_c = time;
 804              		.loc 1 458 5 view .LVU216
 458:quantum/mousekey.c ****     if (mouse_report.x || mouse_report.y) last_timer_c = time;
 805              		.loc 1 458 21 is_stmt 0 view .LVU217
 806 0082 FFF7FEFF 		bl	timer_read
 807              	.LVL55:
 459:quantum/mousekey.c ****     if (mouse_report.v || mouse_report.h) last_timer_w = time;
 808              		.loc 1 459 5 is_stmt 1 view .LVU218
 459:quantum/mousekey.c ****     if (mouse_report.v || mouse_report.h) last_timer_w = time;
 809              		.loc 1 459 24 is_stmt 0 view .LVU219
 810 0086 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 811 0088 E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 812 008a 1343     		orrs	r3, r3, r2
 459:quantum/mousekey.c ****     if (mouse_report.v || mouse_report.h) last_timer_w = time;
 813              		.loc 1 459 43 is_stmt 1 view .LVU220
 459:quantum/mousekey.c ****     if (mouse_report.v || mouse_report.h) last_timer_w = time;
 814              		.loc 1 459 56 is_stmt 0 view .LVU221
 815 008c 18BF     		it	ne
 816 008e 144B     		ldrne	r3, .L90+52
 460:quantum/mousekey.c ****     host_mouse_send(&mouse_report);
 817              		.loc 1 460 24 view .LVU222
 818 0090 6279     		ldrb	r2, [r4, #5]	@ zero_extendqisi2
 459:quantum/mousekey.c ****     if (mouse_report.v || mouse_report.h) last_timer_w = time;
 819              		.loc 1 459 56 view .LVU223
 820 0092 18BF     		it	ne
 821 0094 1880     		strhne	r0, [r3]	@ movhi
 460:quantum/mousekey.c ****     host_mouse_send(&mouse_report);
 822              		.loc 1 460 5 is_stmt 1 view .LVU224
 460:quantum/mousekey.c ****     host_mouse_send(&mouse_report);
 823              		.loc 1 460 24 is_stmt 0 view .LVU225
 824 0096 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 825 0098 1343     		orrs	r3, r3, r2
 460:quantum/mousekey.c ****     host_mouse_send(&mouse_report);
 826              		.loc 1 460 43 is_stmt 1 view .LVU226
 460:quantum/mousekey.c ****     host_mouse_send(&mouse_report);
 827              		.loc 1 460 56 is_stmt 0 view .LVU227
 828 009a 18BF     		it	ne
 829 009c 114B     		ldrne	r3, .L90+56
 462:quantum/mousekey.c **** 
 830              		.loc 1 462 1 view .LVU228
 831 009e BDE81040 		pop	{r4, lr}
 832              		.cfi_restore 14
 833              		.cfi_restore 4
 834              		.cfi_def_cfa_offset 0
 460:quantum/mousekey.c ****     host_mouse_send(&mouse_report);
 835              		.loc 1 460 56 view .LVU229
 836 00a2 18BF     		it	ne
 837 00a4 1880     		strhne	r0, [r3]	@ movhi
 461:quantum/mousekey.c **** }
 838              		.loc 1 461 5 is_stmt 1 view .LVU230
 839 00a6 0248     		ldr	r0, .L90+4
 840              	.LVL56:
 461:quantum/mousekey.c **** }
 841              		.loc 1 461 5 is_stmt 0 view .LVU231
 842 00a8 FFF7FEBF 		b	host_mouse_send
 843              	.LVL57:
 844              	.L91:
 845              		.align	2
 846              	.L90:
 847 00ac 00000000 		.word	debug_config
 848 00b0 00000000 		.word	.LANCHOR7
 849 00b4 00000000 		.word	.LC0
 850 00b8 23000000 		.word	.LC1
 851 00bc 28000000 		.word	.LC2
 852 00c0 2A000000 		.word	.LC3
 853 00c4 2D000000 		.word	.LC4
 854 00c8 2F000000 		.word	.LC5
 855 00cc 00000000 		.word	.LANCHOR2
 856 00d0 32000000 		.word	.LC6
 857 00d4 35000000 		.word	.LC7
 858 00d8 00000000 		.word	.LANCHOR0
 859 00dc 37000000 		.word	.LC8
 860 00e0 00000000 		.word	.LANCHOR8
 861 00e4 00000000 		.word	.LANCHOR9
 862              		.cfi_endproc
 863              	.LFE338:
 865              		.section	.text.mousekey_task,"ax",%progbits
 866              		.align	1
 867              		.global	mousekey_task
 868              		.syntax unified
 869              		.thumb
 870              		.thumb_func
 871              		.fpu fpv4-sp-d16
 873              	mousekey_task:
 874              	.LFB335:
 210:quantum/mousekey.c ****     // report cursor and scroll movement independently
 875              		.loc 1 210 26 is_stmt 1 view -0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 0
 878              		@ frame_needed = 0, uses_anonymous_args = 0
 212:quantum/mousekey.c **** 
 879              		.loc 1 212 5 view .LVU233
 210:quantum/mousekey.c ****     // report cursor and scroll movement independently
 880              		.loc 1 210 26 is_stmt 0 view .LVU234
 881 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 882              		.cfi_def_cfa_offset 32
 883              		.cfi_offset 4, -32
 884              		.cfi_offset 5, -28
 885              		.cfi_offset 6, -24
 886              		.cfi_offset 7, -20
 887              		.cfi_offset 8, -16
 888              		.cfi_offset 9, -12
 889              		.cfi_offset 10, -8
 890              		.cfi_offset 14, -4
 212:quantum/mousekey.c **** 
 891              		.loc 1 212 26 view .LVU235
 892 0004 564C     		ldr	r4, .L159
 893 0006 94F90280 		ldrsb	r8, [r4, #2]
 894 000a 94F90370 		ldrsb	r7, [r4, #3]
 895 000e 94F90460 		ldrsb	r6, [r4, #4]
 896 0012 94F90550 		ldrsb	r5, [r4, #5]
 897 0016 94F800A0 		ldrb	r10, [r4]	@ zero_extendqisi2
 898              	.LVL58:
 212:quantum/mousekey.c **** 
 899              		.loc 1 212 26 view .LVU236
 900 001a 94F80190 		ldrb	r9, [r4, #1]	@ zero_extendqisi2
 901              	.LVL59:
 214:quantum/mousekey.c ****     mouse_report.y = 0;
 902              		.loc 1 214 5 is_stmt 1 view .LVU237
 214:quantum/mousekey.c ****     mouse_report.y = 0;
 903              		.loc 1 214 20 is_stmt 0 view .LVU238
 904 001e 0023     		movs	r3, #0
 905 0020 A370     		strb	r3, [r4, #2]
 215:quantum/mousekey.c ****     mouse_report.v = 0;
 906              		.loc 1 215 5 is_stmt 1 view .LVU239
 215:quantum/mousekey.c ****     mouse_report.v = 0;
 907              		.loc 1 215 20 is_stmt 0 view .LVU240
 908 0022 E370     		strb	r3, [r4, #3]
 216:quantum/mousekey.c ****     mouse_report.h = 0;
 909              		.loc 1 216 5 is_stmt 1 view .LVU241
 216:quantum/mousekey.c ****     mouse_report.h = 0;
 910              		.loc 1 216 20 is_stmt 0 view .LVU242
 911 0024 2371     		strb	r3, [r4, #4]
 217:quantum/mousekey.c **** 
 912              		.loc 1 217 5 is_stmt 1 view .LVU243
 217:quantum/mousekey.c **** 
 913              		.loc 1 217 20 is_stmt 0 view .LVU244
 914 0026 6371     		strb	r3, [r4, #5]
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 915              		.loc 1 219 5 is_stmt 1 view .LVU245
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 916              		.loc 1 219 18 is_stmt 0 view .LVU246
 917 0028 58EA0703 		orrs	r3, r8, r7
 918 002c 0AD0     		beq	.L94
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 919              		.loc 1 219 33 discriminator 3 view .LVU247
 920 002e 4D4B     		ldr	r3, .L159+4
 921 0030 1888     		ldrh	r0, [r3]
 922 0032 FFF7FEFF 		bl	timer_elapsed
 923              	.LVL60:
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 924              		.loc 1 219 80 discriminator 3 view .LVU248
 925 0036 4C49     		ldr	r1, .L159+8
 926 0038 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 927              		.loc 1 219 94 discriminator 3 view .LVU249
 928 003a 3BB3     		cbz	r3, .L95
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 929              		.loc 1 219 94 discriminator 4 view .LVU250
 930 003c 4B4A     		ldr	r2, .L159+12
 931 003e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 932              		.loc 1 219 30 discriminator 4 view .LVU251
 933 0040 9042     		cmp	r0, r2
 934 0042 2DDC     		bgt	.L96
 935              	.L94:
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 936              		.loc 1 236 5 is_stmt 1 view .LVU252
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 937              		.loc 1 236 18 is_stmt 0 view .LVU253
 938 0044 56EA0503 		orrs	r3, r6, r5
 939 0048 0BD0     		beq	.L107
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 940              		.loc 1 236 33 discriminator 3 view .LVU254
 941 004a 494B     		ldr	r3, .L159+16
 942 004c 1888     		ldrh	r0, [r3]
 943 004e FFF7FEFF 		bl	timer_elapsed
 944              	.LVL61:
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 945              		.loc 1 236 86 discriminator 3 view .LVU255
 946 0052 4849     		ldr	r1, .L159+20
 947 0054 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 948              		.loc 1 236 106 discriminator 3 view .LVU256
 949 0056 002B     		cmp	r3, #0
 950 0058 4ED0     		beq	.L108
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 951              		.loc 1 236 106 discriminator 4 view .LVU257
 952 005a 474A     		ldr	r2, .L159+24
 953 005c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 954              		.loc 1 236 30 discriminator 4 view .LVU258
 955 005e 9042     		cmp	r0, r2
 956 0060 54DC     		bgt	.L109
 957              	.L107:
 254:quantum/mousekey.c ****     mouse_report = tmpmr;
 958              		.loc 1 254 5 is_stmt 1 view .LVU259
 254:quantum/mousekey.c ****     mouse_report = tmpmr;
 959              		.loc 1 254 60 is_stmt 0 view .LVU260
 960 0062 E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 961 0064 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 962 0066 1343     		orrs	r3, r3, r2
 963 0068 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 964 006a 1343     		orrs	r3, r3, r2
 965 006c 6279     		ldrb	r2, [r4, #5]	@ zero_extendqisi2
 966 006e 1343     		orrs	r3, r3, r2
 967 0070 01D0     		beq	.L119
 254:quantum/mousekey.c ****     mouse_report = tmpmr;
 968              		.loc 1 254 79 is_stmt 1 discriminator 7 view .LVU261
 969 0072 FFF7FEFF 		bl	mousekey_send
 970              	.LVL62:
 971              	.L119:
 255:quantum/mousekey.c **** }
 972              		.loc 1 255 5 view .LVU262
 255:quantum/mousekey.c **** }
 973              		.loc 1 255 18 is_stmt 0 view .LVU263
 974 0076 84F800A0 		strb	r10, [r4]
 975 007a 84F80190 		strb	r9, [r4, #1]
 976 007e 84F80280 		strb	r8, [r4, #2]
 977 0082 E770     		strb	r7, [r4, #3]
 978 0084 2671     		strb	r6, [r4, #4]
 979 0086 6571     		strb	r5, [r4, #5]
 980              	.LVL63:
 256:quantum/mousekey.c **** 
 981              		.loc 1 256 1 view .LVU264
 982 0088 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 983              	.LVL64:
 984              	.L95:
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 985              		.loc 1 219 94 discriminator 5 view .LVU265
 986 008c 3B4A     		ldr	r2, .L159+28
 987 008e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 988 0090 02EB8202 		add	r2, r2, r2, lsl #2
 219:quantum/mousekey.c ****         if (mousekey_repeat != UINT8_MAX) mousekey_repeat++;
 989              		.loc 1 219 30 discriminator 5 view .LVU266
 990 0094 B0EB420F 		cmp	r0, r2, lsl #1
 991 0098 D4DD     		ble	.L94
 992              	.L98:
 220:quantum/mousekey.c ****         if (tmpmr.x != 0) mouse_report.x = move_unit() * ((tmpmr.x > 0) ? 1 : -1);
 993              		.loc 1 220 43 is_stmt 1 discriminator 1 view .LVU267
 220:quantum/mousekey.c ****         if (tmpmr.x != 0) mouse_report.x = move_unit() * ((tmpmr.x > 0) ? 1 : -1);
 994              		.loc 1 220 58 is_stmt 0 discriminator 1 view .LVU268
 995 009a 0133     		adds	r3, r3, #1
 996 009c 0B70     		strb	r3, [r1]
 997 009e 01E0     		b	.L99
 998              	.L96:
 220:quantum/mousekey.c ****         if (tmpmr.x != 0) mouse_report.x = move_unit() * ((tmpmr.x > 0) ? 1 : -1);
 999              		.loc 1 220 9 is_stmt 1 view .LVU269
 220:quantum/mousekey.c ****         if (tmpmr.x != 0) mouse_report.x = move_unit() * ((tmpmr.x > 0) ? 1 : -1);
 1000              		.loc 1 220 12 is_stmt 0 view .LVU270
 1001 00a0 FF2B     		cmp	r3, #255
 1002 00a2 FAD1     		bne	.L98
 1003              	.L99:
 221:quantum/mousekey.c ****         if (tmpmr.y != 0) mouse_report.y = move_unit() * ((tmpmr.y > 0) ? 1 : -1);
 1004              		.loc 1 221 9 is_stmt 1 view .LVU271
 221:quantum/mousekey.c ****         if (tmpmr.y != 0) mouse_report.y = move_unit() * ((tmpmr.y > 0) ? 1 : -1);
 1005              		.loc 1 221 12 is_stmt 0 view .LVU272
 1006 00a4 B8F1000F 		cmp	r8, #0
 1007 00a8 08D0     		beq	.L100
 221:quantum/mousekey.c ****         if (tmpmr.y != 0) mouse_report.y = move_unit() * ((tmpmr.y > 0) ? 1 : -1);
 1008              		.loc 1 221 27 is_stmt 1 discriminator 1 view .LVU273
 221:quantum/mousekey.c ****         if (tmpmr.y != 0) mouse_report.y = move_unit() * ((tmpmr.y > 0) ? 1 : -1);
 1009              		.loc 1 221 44 is_stmt 0 discriminator 1 view .LVU274
 1010 00aa FFF7FEFF 		bl	move_unit
 1011              	.LVL65:
 221:quantum/mousekey.c ****         if (tmpmr.y != 0) mouse_report.y = move_unit() * ((tmpmr.y > 0) ? 1 : -1);
 1012              		.loc 1 221 42 discriminator 1 view .LVU275
 1013 00ae B8F1000F 		cmp	r8, #0
 1014 00b2 CCBF     		ite	gt
 1015 00b4 0123     		movgt	r3, #1
 1016 00b6 FF23     		movle	r3, #255
 1017 00b8 5843     		muls	r0, r3, r0
 1018 00ba A070     		strb	r0, [r4, #2]
 1019              	.L100:
 222:quantum/mousekey.c **** 
 1020              		.loc 1 222 9 is_stmt 1 view .LVU276
 222:quantum/mousekey.c **** 
 1021              		.loc 1 222 12 is_stmt 0 view .LVU277
 1022 00bc 3FB1     		cbz	r7, .L102
 222:quantum/mousekey.c **** 
 1023              		.loc 1 222 27 is_stmt 1 discriminator 1 view .LVU278
 222:quantum/mousekey.c **** 
 1024              		.loc 1 222 44 is_stmt 0 discriminator 1 view .LVU279
 1025 00be FFF7FEFF 		bl	move_unit
 1026              	.LVL66:
 222:quantum/mousekey.c **** 
 1027              		.loc 1 222 42 discriminator 1 view .LVU280
 1028 00c2 002F     		cmp	r7, #0
 1029 00c4 CCBF     		ite	gt
 1030 00c6 0123     		movgt	r3, #1
 1031 00c8 FF23     		movle	r3, #255
 1032 00ca 5843     		muls	r0, r3, r0
 1033 00cc E070     		strb	r0, [r4, #3]
 1034              	.L102:
 225:quantum/mousekey.c ****             mouse_report.x = times_inv_sqrt2(mouse_report.x);
 1035              		.loc 1 225 9 is_stmt 1 view .LVU281
 225:quantum/mousekey.c ****             mouse_report.x = times_inv_sqrt2(mouse_report.x);
 1036              		.loc 1 225 25 is_stmt 0 view .LVU282
 1037 00ce 94F90230 		ldrsb	r3, [r4, #2]
 225:quantum/mousekey.c ****             mouse_report.x = times_inv_sqrt2(mouse_report.x);
 1038              		.loc 1 225 12 view .LVU283
 1039 00d2 002B     		cmp	r3, #0
 1040 00d4 B6D0     		beq	.L94
 225:quantum/mousekey.c ****             mouse_report.x = times_inv_sqrt2(mouse_report.x);
 1041              		.loc 1 225 43 discriminator 1 view .LVU284
 1042 00d6 94F90320 		ldrsb	r2, [r4, #3]
 225:quantum/mousekey.c ****             mouse_report.x = times_inv_sqrt2(mouse_report.x);
 1043              		.loc 1 225 28 discriminator 1 view .LVU285
 1044 00da 002A     		cmp	r2, #0
 1045 00dc B2D0     		beq	.L94
 226:quantum/mousekey.c ****             if (mouse_report.x == 0) {
 1046              		.loc 1 226 13 is_stmt 1 view .LVU286
 1047              	.LVL67:
 1048              	.LBB16:
 1049              	.LBI16:
  26:quantum/mousekey.c ****     // 181/256 is pretty close to 1/sqrt(2)
 1050              		.loc 1 26 15 view .LVU287
 1051              	.LBB17:
  31:quantum/mousekey.c **** }
 1052              		.loc 1 31 5 view .LVU288
  31:quantum/mousekey.c **** }
 1053              		.loc 1 31 5 is_stmt 0 view .LVU289
 1054              	.LBE17:
 1055              	.LBE16:
 227:quantum/mousekey.c ****                 mouse_report.x = 1;
 1056              		.loc 1 227 13 is_stmt 1 view .LVU290
 1057              	.LBB19:
 1058              	.LBB18:
  31:quantum/mousekey.c **** }
 1059              		.loc 1 31 15 is_stmt 0 view .LVU291
 1060 00de B521     		movs	r1, #181
 1061 00e0 4B43     		muls	r3, r1, r3
 1062              	.LBE18:
 1063              	.LBE19:
 227:quantum/mousekey.c ****                 mouse_report.x = 1;
 1064              		.loc 1 227 16 view .LVU292
 1065 00e2 1B12     		asrs	r3, r3, #8
 1066 00e4 08BF     		it	eq
 1067 00e6 0123     		moveq	r3, #1
 1068 00e8 A370     		strb	r3, [r4, #2]
 230:quantum/mousekey.c ****             if (mouse_report.y == 0) {
 1069              		.loc 1 230 13 is_stmt 1 view .LVU293
 1070              	.LVL68:
 1071              	.LBB20:
 1072              	.LBI20:
  26:quantum/mousekey.c ****     // 181/256 is pretty close to 1/sqrt(2)
 1073              		.loc 1 26 15 view .LVU294
 1074              	.LBB21:
  31:quantum/mousekey.c **** }
 1075              		.loc 1 31 5 view .LVU295
  31:quantum/mousekey.c **** }
 1076              		.loc 1 31 5 is_stmt 0 view .LVU296
 1077              	.LBE21:
 1078              	.LBE20:
 231:quantum/mousekey.c ****                 mouse_report.y = 1;
 1079              		.loc 1 231 13 is_stmt 1 view .LVU297
 1080              	.LBB23:
 1081              	.LBB22:
  31:quantum/mousekey.c **** }
 1082              		.loc 1 31 15 is_stmt 0 view .LVU298
 1083 00ea 01FB02F3 		mul	r3, r1, r2
 1084              	.LBE22:
 1085              	.LBE23:
 231:quantum/mousekey.c ****                 mouse_report.y = 1;
 1086              		.loc 1 231 16 view .LVU299
 1087 00ee 1B12     		asrs	r3, r3, #8
 232:quantum/mousekey.c ****             }
 1088              		.loc 1 232 17 is_stmt 1 view .LVU300
 232:quantum/mousekey.c ****             }
 1089              		.loc 1 232 32 is_stmt 0 view .LVU301
 1090 00f0 08BF     		it	eq
 1091 00f2 0123     		moveq	r3, #1
 1092 00f4 E370     		strb	r3, [r4, #3]
 1093 00f6 A5E7     		b	.L94
 1094              	.L108:
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 1095              		.loc 1 236 106 discriminator 5 view .LVU302
 1096 00f8 214A     		ldr	r2, .L159+32
 1097 00fa 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1098 00fc 02EB8202 		add	r2, r2, r2, lsl #2
 236:quantum/mousekey.c ****         if (mousekey_wheel_repeat != UINT8_MAX) mousekey_wheel_repeat++;
 1099              		.loc 1 236 30 discriminator 5 view .LVU303
 1100 0100 B0EB420F 		cmp	r0, r2, lsl #1
 1101 0104 ADDD     		ble	.L107
 1102              	.L111:
 237:quantum/mousekey.c ****         if (tmpmr.v != 0) mouse_report.v = wheel_unit() * ((tmpmr.v > 0) ? 1 : -1);
 1103              		.loc 1 237 49 is_stmt 1 discriminator 1 view .LVU304
 237:quantum/mousekey.c ****         if (tmpmr.v != 0) mouse_report.v = wheel_unit() * ((tmpmr.v > 0) ? 1 : -1);
 1104              		.loc 1 237 70 is_stmt 0 discriminator 1 view .LVU305
 1105 0106 0133     		adds	r3, r3, #1
 1106 0108 0B70     		strb	r3, [r1]
 1107 010a 01E0     		b	.L112
 1108              	.L109:
 237:quantum/mousekey.c ****         if (tmpmr.v != 0) mouse_report.v = wheel_unit() * ((tmpmr.v > 0) ? 1 : -1);
 1109              		.loc 1 237 9 is_stmt 1 view .LVU306
 237:quantum/mousekey.c ****         if (tmpmr.v != 0) mouse_report.v = wheel_unit() * ((tmpmr.v > 0) ? 1 : -1);
 1110              		.loc 1 237 12 is_stmt 0 view .LVU307
 1111 010c FF2B     		cmp	r3, #255
 1112 010e FAD1     		bne	.L111
 1113              	.L112:
 238:quantum/mousekey.c ****         if (tmpmr.h != 0) mouse_report.h = wheel_unit() * ((tmpmr.h > 0) ? 1 : -1);
 1114              		.loc 1 238 9 is_stmt 1 view .LVU308
 238:quantum/mousekey.c ****         if (tmpmr.h != 0) mouse_report.h = wheel_unit() * ((tmpmr.h > 0) ? 1 : -1);
 1115              		.loc 1 238 12 is_stmt 0 view .LVU309
 1116 0110 3EB1     		cbz	r6, .L113
 238:quantum/mousekey.c ****         if (tmpmr.h != 0) mouse_report.h = wheel_unit() * ((tmpmr.h > 0) ? 1 : -1);
 1117              		.loc 1 238 27 is_stmt 1 discriminator 1 view .LVU310
 238:quantum/mousekey.c ****         if (tmpmr.h != 0) mouse_report.h = wheel_unit() * ((tmpmr.h > 0) ? 1 : -1);
 1118              		.loc 1 238 44 is_stmt 0 discriminator 1 view .LVU311
 1119 0112 FFF7FEFF 		bl	wheel_unit
 1120              	.LVL69:
 238:quantum/mousekey.c ****         if (tmpmr.h != 0) mouse_report.h = wheel_unit() * ((tmpmr.h > 0) ? 1 : -1);
 1121              		.loc 1 238 42 discriminator 1 view .LVU312
 1122 0116 002E     		cmp	r6, #0
 1123 0118 CCBF     		ite	gt
 1124 011a 0123     		movgt	r3, #1
 1125 011c FF23     		movle	r3, #255
 1126 011e 5843     		muls	r0, r3, r0
 1127 0120 2071     		strb	r0, [r4, #4]
 1128              	.L113:
 239:quantum/mousekey.c **** 
 1129              		.loc 1 239 9 is_stmt 1 view .LVU313
 239:quantum/mousekey.c **** 
 1130              		.loc 1 239 12 is_stmt 0 view .LVU314
 1131 0122 3DB1     		cbz	r5, .L115
 239:quantum/mousekey.c **** 
 1132              		.loc 1 239 27 is_stmt 1 discriminator 1 view .LVU315
 239:quantum/mousekey.c **** 
 1133              		.loc 1 239 44 is_stmt 0 discriminator 1 view .LVU316
 1134 0124 FFF7FEFF 		bl	wheel_unit
 1135              	.LVL70:
 239:quantum/mousekey.c **** 
 1136              		.loc 1 239 42 discriminator 1 view .LVU317
 1137 0128 002D     		cmp	r5, #0
 1138 012a CCBF     		ite	gt
 1139 012c 0123     		movgt	r3, #1
 1140 012e FF23     		movle	r3, #255
 1141 0130 5843     		muls	r0, r3, r0
 1142 0132 6071     		strb	r0, [r4, #5]
 1143              	.L115:
 242:quantum/mousekey.c ****             mouse_report.v = times_inv_sqrt2(mouse_report.v);
 1144              		.loc 1 242 9 is_stmt 1 view .LVU318
 242:quantum/mousekey.c ****             mouse_report.v = times_inv_sqrt2(mouse_report.v);
 1145              		.loc 1 242 25 is_stmt 0 view .LVU319
 1146 0134 94F90430 		ldrsb	r3, [r4, #4]
 242:quantum/mousekey.c ****             mouse_report.v = times_inv_sqrt2(mouse_report.v);
 1147              		.loc 1 242 43 view .LVU320
 1148 0138 94F90520 		ldrsb	r2, [r4, #5]
 242:quantum/mousekey.c ****             mouse_report.v = times_inv_sqrt2(mouse_report.v);
 1149              		.loc 1 242 12 view .LVU321
 1150 013c 002B     		cmp	r3, #0
 1151 013e 90D0     		beq	.L107
 242:quantum/mousekey.c ****             mouse_report.v = times_inv_sqrt2(mouse_report.v);
 1152              		.loc 1 242 28 discriminator 1 view .LVU322
 1153 0140 002A     		cmp	r2, #0
 1154 0142 8ED0     		beq	.L107
 243:quantum/mousekey.c ****             if (mouse_report.v == 0) {
 1155              		.loc 1 243 13 is_stmt 1 view .LVU323
 1156              	.LVL71:
 1157              	.LBB24:
 1158              	.LBI24:
  26:quantum/mousekey.c ****     // 181/256 is pretty close to 1/sqrt(2)
 1159              		.loc 1 26 15 view .LVU324
 1160              	.LBB25:
  31:quantum/mousekey.c **** }
 1161              		.loc 1 31 5 view .LVU325
  31:quantum/mousekey.c **** }
 1162              		.loc 1 31 5 is_stmt 0 view .LVU326
 1163              	.LBE25:
 1164              	.LBE24:
 244:quantum/mousekey.c ****                 mouse_report.v = 1;
 1165              		.loc 1 244 13 is_stmt 1 view .LVU327
 1166              	.LBB27:
 1167              	.LBB26:
  31:quantum/mousekey.c **** }
 1168              		.loc 1 31 15 is_stmt 0 view .LVU328
 1169 0144 B521     		movs	r1, #181
 1170 0146 4B43     		muls	r3, r1, r3
 1171              	.LBE26:
 1172              	.LBE27:
 244:quantum/mousekey.c ****                 mouse_report.v = 1;
 1173              		.loc 1 244 16 view .LVU329
 1174 0148 1B12     		asrs	r3, r3, #8
 1175 014a 08BF     		it	eq
 1176 014c 0123     		moveq	r3, #1
 1177 014e 2371     		strb	r3, [r4, #4]
 247:quantum/mousekey.c ****             if (mouse_report.h == 0) {
 1178              		.loc 1 247 13 is_stmt 1 view .LVU330
 1179              	.LVL72:
 1180              	.LBB28:
 1181              	.LBI28:
  26:quantum/mousekey.c ****     // 181/256 is pretty close to 1/sqrt(2)
 1182              		.loc 1 26 15 view .LVU331
 1183              	.LBB29:
  31:quantum/mousekey.c **** }
 1184              		.loc 1 31 5 view .LVU332
  31:quantum/mousekey.c **** }
 1185              		.loc 1 31 5 is_stmt 0 view .LVU333
 1186              	.LBE29:
 1187              	.LBE28:
 248:quantum/mousekey.c ****                 mouse_report.h = 1;
 1188              		.loc 1 248 13 is_stmt 1 view .LVU334
 1189              	.LBB31:
 1190              	.LBB30:
  31:quantum/mousekey.c **** }
 1191              		.loc 1 31 15 is_stmt 0 view .LVU335
 1192 0150 01FB02F3 		mul	r3, r1, r2
 1193              	.LBE30:
 1194              	.LBE31:
 248:quantum/mousekey.c ****                 mouse_report.h = 1;
 1195              		.loc 1 248 16 view .LVU336
 1196 0154 1B12     		asrs	r3, r3, #8
 249:quantum/mousekey.c ****             }
 1197              		.loc 1 249 17 is_stmt 1 view .LVU337
 249:quantum/mousekey.c ****             }
 1198              		.loc 1 249 32 is_stmt 0 view .LVU338
 1199 0156 08BF     		it	eq
 1200 0158 0123     		moveq	r3, #1
 1201 015a 6371     		strb	r3, [r4, #5]
 1202 015c 81E7     		b	.L107
 1203              	.L160:
 1204 015e 00BF     		.align	2
 1205              	.L159:
 1206 0160 00000000 		.word	.LANCHOR7
 1207 0164 00000000 		.word	.LANCHOR8
 1208 0168 00000000 		.word	.LANCHOR2
 1209 016c 00000000 		.word	.LANCHOR10
 1210 0170 00000000 		.word	.LANCHOR9
 1211 0174 00000000 		.word	.LANCHOR5
 1212 0178 00000000 		.word	.LANCHOR12
 1213 017c 00000000 		.word	.LANCHOR11
 1214 0180 00000000 		.word	.LANCHOR13
 1215              		.cfi_endproc
 1216              	.LFE335:
 1218              		.section	.text.mousekey_clear,"ax",%progbits
 1219              		.align	1
 1220              		.global	mousekey_clear
 1221              		.syntax unified
 1222              		.thumb
 1223              		.thumb_func
 1224              		.fpu fpv4-sp-d16
 1226              	mousekey_clear:
 1227              	.LFB339:
 464:quantum/mousekey.c ****     mouse_report          = (report_mouse_t){};
 1228              		.loc 1 464 27 is_stmt 1 view -0
 1229              		.cfi_startproc
 1230              		@ args = 0, pretend = 0, frame = 0
 1231              		@ frame_needed = 0, uses_anonymous_args = 0
 1232              		@ link register save eliminated.
 465:quantum/mousekey.c ****     mousekey_repeat       = 0;
 1233              		.loc 1 465 5 view .LVU340
 465:quantum/mousekey.c ****     mousekey_repeat       = 0;
 1234              		.loc 1 465 27 is_stmt 0 view .LVU341
 1235 0000 054A     		ldr	r2, .L162
 1236 0002 0023     		movs	r3, #0
 1237 0004 1360     		str	r3, [r2]	@ unaligned
 1238 0006 9380     		strh	r3, [r2, #4]	@ unaligned
 466:quantum/mousekey.c ****     mousekey_wheel_repeat = 0;
 1239              		.loc 1 466 5 is_stmt 1 view .LVU342
 466:quantum/mousekey.c ****     mousekey_wheel_repeat = 0;
 1240              		.loc 1 466 27 is_stmt 0 view .LVU343
 1241 0008 044A     		ldr	r2, .L162+4
 1242 000a 1370     		strb	r3, [r2]
 467:quantum/mousekey.c ****     mousekey_accel        = 0;
 1243              		.loc 1 467 5 is_stmt 1 view .LVU344
 467:quantum/mousekey.c ****     mousekey_accel        = 0;
 1244              		.loc 1 467 27 is_stmt 0 view .LVU345
 1245 000c 044A     		ldr	r2, .L162+8
 1246 000e 1370     		strb	r3, [r2]
 468:quantum/mousekey.c **** }
 1247              		.loc 1 468 5 is_stmt 1 view .LVU346
 468:quantum/mousekey.c **** }
 1248              		.loc 1 468 27 is_stmt 0 view .LVU347
 1249 0010 044A     		ldr	r2, .L162+12
 1250 0012 1370     		strb	r3, [r2]
 469:quantum/mousekey.c **** 
 1251              		.loc 1 469 1 view .LVU348
 1252 0014 7047     		bx	lr
 1253              	.L163:
 1254 0016 00BF     		.align	2
 1255              	.L162:
 1256 0018 00000000 		.word	.LANCHOR7
 1257 001c 00000000 		.word	.LANCHOR2
 1258 0020 00000000 		.word	.LANCHOR5
 1259 0024 00000000 		.word	.LANCHOR0
 1260              		.cfi_endproc
 1261              	.LFE339:
 1263              		.section	.text.mousekey_get_report,"ax",%progbits
 1264              		.align	1
 1265              		.global	mousekey_get_report
 1266              		.syntax unified
 1267              		.thumb
 1268              		.thumb_func
 1269              		.fpu fpv4-sp-d16
 1271              	mousekey_get_report:
 1272              	.LVL73:
 1273              	.LFB341:
 488:quantum/mousekey.c **** }
 489:quantum/mousekey.c **** 
 490:quantum/mousekey.c **** report_mouse_t mousekey_get_report(void) { return mouse_report; }
 1274              		.loc 1 490 42 is_stmt 1 view -0
 1275              		.cfi_startproc
 1276              		@ args = 0, pretend = 0, frame = 0
 1277              		@ frame_needed = 0, uses_anonymous_args = 0
 1278              		@ link register save eliminated.
 1279              		.loc 1 490 44 view .LVU350
 1280              		.loc 1 490 51 is_stmt 0 view .LVU351
 1281 0000 024A     		ldr	r2, .L165
 1282 0002 1168     		ldr	r1, [r2]	@ unaligned
 1283 0004 9288     		ldrh	r2, [r2, #4]	@ unaligned
 1284 0006 0160     		str	r1, [r0]	@ unaligned
 1285 0008 8280     		strh	r2, [r0, #4]	@ unaligned
 1286              		.loc 1 490 65 view .LVU352
 1287 000a 7047     		bx	lr
 1288              	.L166:
 1289              		.align	2
 1290              	.L165:
 1291 000c 00000000 		.word	.LANCHOR7
 1292              		.cfi_endproc
 1293              	.LFE341:
 1295              		.global	mk_wheel_time_to_max
 1296              		.global	mk_wheel_max_speed
 1297              		.global	mk_wheel_interval
 1298              		.global	mk_wheel_delay
 1299              		.global	mk_time_to_max
 1300              		.global	mk_max_speed
 1301              		.global	mk_interval
 1302              		.global	mk_delay
 1303              		.section	.bss.last_timer_c,"aw",%nobits
 1304              		.align	1
 1305              		.set	.LANCHOR8,. + 0
 1308              	last_timer_c:
 1309 0000 0000     		.space	2
 1310              		.section	.bss.last_timer_w,"aw",%nobits
 1311              		.align	1
 1312              		.set	.LANCHOR9,. + 0
 1315              	last_timer_w:
 1316 0000 0000     		.space	2
 1317              		.section	.bss.mouse_report,"aw",%nobits
 1318              		.set	.LANCHOR7,. + 0
 1321              	mouse_report:
 1322 0000 00000000 		.space	6
 1322      0000
 1323              		.section	.bss.mousekey_accel,"aw",%nobits
 1324              		.set	.LANCHOR0,. + 0
 1327              	mousekey_accel:
 1328 0000 00       		.space	1
 1329              		.section	.bss.mousekey_repeat,"aw",%nobits
 1330              		.set	.LANCHOR2,. + 0
 1333              	mousekey_repeat:
 1334 0000 00       		.space	1
 1335              		.section	.bss.mousekey_wheel_repeat,"aw",%nobits
 1336              		.set	.LANCHOR5,. + 0
 1339              	mousekey_wheel_repeat:
 1340 0000 00       		.space	1
 1341              		.section	.data.mk_delay,"aw"
 1342              		.set	.LANCHOR11,. + 0
 1345              	mk_delay:
 1346 0000 1E       		.byte	30
 1347              		.section	.data.mk_interval,"aw"
 1348              		.set	.LANCHOR10,. + 0
 1351              	mk_interval:
 1352 0000 32       		.byte	50
 1353              		.section	.data.mk_max_speed,"aw"
 1354              		.set	.LANCHOR1,. + 0
 1357              	mk_max_speed:
 1358 0000 0A       		.byte	10
 1359              		.section	.data.mk_time_to_max,"aw"
 1360              		.set	.LANCHOR3,. + 0
 1363              	mk_time_to_max:
 1364 0000 14       		.byte	20
 1365              		.section	.data.mk_wheel_delay,"aw"
 1366              		.set	.LANCHOR13,. + 0
 1369              	mk_wheel_delay:
 1370 0000 1E       		.byte	30
 1371              		.section	.data.mk_wheel_interval,"aw"
 1372              		.set	.LANCHOR12,. + 0
 1375              	mk_wheel_interval:
 1376 0000 64       		.byte	100
 1377              		.section	.data.mk_wheel_max_speed,"aw"
 1378              		.set	.LANCHOR4,. + 0
 1381              	mk_wheel_max_speed:
 1382 0000 08       		.byte	8
 1383              		.section	.data.mk_wheel_time_to_max,"aw"
 1384              		.set	.LANCHOR6,. + 0
 1387              	mk_wheel_time_to_max:
 1388 0000 28       		.byte	40
 1389              		.text
 1390              	.Letext0:
 1391              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1392              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1393              		.file 4 "/usr/lib/gcc/arm-none-eabi/11.2.0/include/stddef.h"
 1394              		.file 5 "tmk_core/common/report.h"
 1395              		.file 6 "quantum/logging/debug.h"
 1396              		.file 7 "quantum/mousekey.h"
 1397              		.file 8 "lib/printf/printf.h"
 1398              		.file 9 "tmk_core/common/timer.h"
 1399              		.file 10 "tmk_core/common/host.h"
 1400              		.file 11 "quantum/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 mousekey.c
     /tmp/ccCJoByR.s:18     .text.move_unit:0000000000000000 $t
     /tmp/ccCJoByR.s:25     .text.move_unit:0000000000000000 move_unit
     /tmp/ccCJoByR.s:144    .text.move_unit:0000000000000068 $d
     /tmp/ccCJoByR.s:152    .text.wheel_unit:0000000000000000 $t
     /tmp/ccCJoByR.s:158    .text.wheel_unit:0000000000000000 wheel_unit
     /tmp/ccCJoByR.s:265    .text.wheel_unit:0000000000000058 $d
     /tmp/ccCJoByR.s:273    .text.mousekey_on:0000000000000000 $t
     /tmp/ccCJoByR.s:280    .text.mousekey_on:0000000000000000 mousekey_on
     /tmp/ccCJoByR.s:298    .text.mousekey_on:000000000000000e $d
     /tmp/ccCJoByR.s:448    .text.mousekey_on:000000000000009c $d
     /tmp/ccCJoByR.s:454    .text.mousekey_off:0000000000000000 $t
     /tmp/ccCJoByR.s:461    .text.mousekey_off:0000000000000000 mousekey_off
     /tmp/ccCJoByR.s:615    .text.mousekey_off:000000000000009c $d
     /tmp/ccCJoByR.s:630    .text.mousekey_off:00000000000000d8 $t
     /tmp/ccCJoByR.s:669    .text.mousekey_off:0000000000000108 $d
     /tmp/ccCJoByR.s:696    .text.mousekey_send:0000000000000000 $t
     /tmp/ccCJoByR.s:703    .text.mousekey_send:0000000000000000 mousekey_send
     /tmp/ccCJoByR.s:847    .text.mousekey_send:00000000000000ac $d
     /tmp/ccCJoByR.s:866    .text.mousekey_task:0000000000000000 $t
     /tmp/ccCJoByR.s:873    .text.mousekey_task:0000000000000000 mousekey_task
     /tmp/ccCJoByR.s:1206   .text.mousekey_task:0000000000000160 $d
     /tmp/ccCJoByR.s:1219   .text.mousekey_clear:0000000000000000 $t
     /tmp/ccCJoByR.s:1226   .text.mousekey_clear:0000000000000000 mousekey_clear
     /tmp/ccCJoByR.s:1256   .text.mousekey_clear:0000000000000018 $d
     /tmp/ccCJoByR.s:1264   .text.mousekey_get_report:0000000000000000 $t
     /tmp/ccCJoByR.s:1271   .text.mousekey_get_report:0000000000000000 mousekey_get_report
     /tmp/ccCJoByR.s:1291   .text.mousekey_get_report:000000000000000c $d
     /tmp/ccCJoByR.s:1387   .data.mk_wheel_time_to_max:0000000000000000 mk_wheel_time_to_max
     /tmp/ccCJoByR.s:1381   .data.mk_wheel_max_speed:0000000000000000 mk_wheel_max_speed
     /tmp/ccCJoByR.s:1375   .data.mk_wheel_interval:0000000000000000 mk_wheel_interval
     /tmp/ccCJoByR.s:1369   .data.mk_wheel_delay:0000000000000000 mk_wheel_delay
     /tmp/ccCJoByR.s:1363   .data.mk_time_to_max:0000000000000000 mk_time_to_max
     /tmp/ccCJoByR.s:1357   .data.mk_max_speed:0000000000000000 mk_max_speed
     /tmp/ccCJoByR.s:1351   .data.mk_interval:0000000000000000 mk_interval
     /tmp/ccCJoByR.s:1345   .data.mk_delay:0000000000000000 mk_delay
     /tmp/ccCJoByR.s:1304   .bss.last_timer_c:0000000000000000 $d
     /tmp/ccCJoByR.s:1308   .bss.last_timer_c:0000000000000000 last_timer_c
     /tmp/ccCJoByR.s:1311   .bss.last_timer_w:0000000000000000 $d
     /tmp/ccCJoByR.s:1315   .bss.last_timer_w:0000000000000000 last_timer_w
     /tmp/ccCJoByR.s:1321   .bss.mouse_report:0000000000000000 mouse_report
     /tmp/ccCJoByR.s:1322   .bss.mouse_report:0000000000000000 $d
     /tmp/ccCJoByR.s:1327   .bss.mousekey_accel:0000000000000000 mousekey_accel
     /tmp/ccCJoByR.s:1328   .bss.mousekey_accel:0000000000000000 $d
     /tmp/ccCJoByR.s:1333   .bss.mousekey_repeat:0000000000000000 mousekey_repeat
     /tmp/ccCJoByR.s:1334   .bss.mousekey_repeat:0000000000000000 $d
     /tmp/ccCJoByR.s:1339   .bss.mousekey_wheel_repeat:0000000000000000 mousekey_wheel_repeat
     /tmp/ccCJoByR.s:1340   .bss.mousekey_wheel_repeat:0000000000000000 $d
     /tmp/ccCJoByR.s:317    .text.mousekey_on:0000000000000021 $d
     /tmp/ccCJoByR.s:317    .text.mousekey_on:0000000000000022 $t

UNDEFINED SYMBOLS
printf_
timer_read
host_mouse_send
debug_config
timer_elapsed
