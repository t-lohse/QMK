   1               		.file	"matrix_common.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_init_user,"ax",@progbits
  11               		.weak	matrix_init_user
  13               	matrix_init_user:
  14               	.LFB121:
  15               		.file 1 "quantum/matrix_common.c"
   1:quantum/matrix_common.c **** #include "quantum.h"
   2:quantum/matrix_common.c **** #include "matrix.h"
   3:quantum/matrix_common.c **** #include "debounce.h"
   4:quantum/matrix_common.c **** #include "wait.h"
   5:quantum/matrix_common.c **** #include "print.h"
   6:quantum/matrix_common.c **** #include "debug.h"
   7:quantum/matrix_common.c **** 
   8:quantum/matrix_common.c **** #ifndef MATRIX_IO_DELAY
   9:quantum/matrix_common.c **** #    define MATRIX_IO_DELAY 30
  10:quantum/matrix_common.c **** #endif
  11:quantum/matrix_common.c **** 
  12:quantum/matrix_common.c **** /* matrix state(1:on, 0:off) */
  13:quantum/matrix_common.c **** matrix_row_t raw_matrix[MATRIX_ROWS];
  14:quantum/matrix_common.c **** matrix_row_t matrix[MATRIX_ROWS];
  15:quantum/matrix_common.c **** 
  16:quantum/matrix_common.c **** #ifdef MATRIX_MASKED
  17:quantum/matrix_common.c **** extern const matrix_row_t matrix_mask[];
  18:quantum/matrix_common.c **** #endif
  19:quantum/matrix_common.c **** 
  20:quantum/matrix_common.c **** // user-defined overridable functions
  21:quantum/matrix_common.c **** 
  22:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_kb(void) { matrix_init_user(); }
  23:quantum/matrix_common.c **** 
  24:quantum/matrix_common.c **** __attribute__((weak)) void matrix_scan_kb(void) { matrix_scan_user(); }
  25:quantum/matrix_common.c **** 
  26:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_user(void) {}
  16               		.loc 1 26 51 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               		.loc 1 26 52 view .LVU1
  23               	/* epilogue start */
  24 0000 0895      		ret
  25               		.cfi_endproc
  26               	.LFE121:
  28               		.set	matrix_init_user.localalias,matrix_init_user
  29               		.section	.text.matrix_init_kb,"ax",@progbits
  30               		.weak	matrix_init_kb
  32               	matrix_init_kb:
  33               	.LFB119:
  22:quantum/matrix_common.c **** 
  34               		.loc 1 22 49 view -0
  35               		.cfi_startproc
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
  22:quantum/matrix_common.c **** 
  40               		.loc 1 22 51 view .LVU3
  41 0000 0C94 0000 		jmp matrix_init_user
  42               	.LVL0:
  43               		.cfi_endproc
  44               	.LFE119:
  46               		.section	.text.matrix_scan_user,"ax",@progbits
  47               		.weak	matrix_scan_user
  49               	matrix_scan_user:
  50               	.LFB139:
  51               		.cfi_startproc
  52               	/* prologue: function */
  53               	/* frame size = 0 */
  54               	/* stack size = 0 */
  55               	.L__stack_usage = 0
  56               	/* epilogue start */
  57 0000 0895      		ret
  58               		.cfi_endproc
  59               	.LFE139:
  61               		.section	.text.matrix_scan_kb,"ax",@progbits
  62               		.weak	matrix_scan_kb
  64               	matrix_scan_kb:
  65               	.LFB120:
  24:quantum/matrix_common.c **** 
  66               		.loc 1 24 49 view -0
  67               		.cfi_startproc
  68               	/* prologue: function */
  69               	/* frame size = 0 */
  70               	/* stack size = 0 */
  71               	.L__stack_usage = 0
  24:quantum/matrix_common.c **** 
  72               		.loc 1 24 51 view .LVU5
  73 0000 0C94 0000 		jmp matrix_scan_user
  74               	.LVL1:
  75               		.cfi_endproc
  76               	.LFE120:
  78               		.section	.text.matrix_rows,"ax",@progbits
  79               	.global	matrix_rows
  81               	matrix_rows:
  82               	.LFB123:
  27:quantum/matrix_common.c **** 
  28:quantum/matrix_common.c **** __attribute__((weak)) void matrix_scan_user(void) {}
  29:quantum/matrix_common.c **** 
  30:quantum/matrix_common.c **** // helper functions
  31:quantum/matrix_common.c **** 
  32:quantum/matrix_common.c **** inline uint8_t matrix_rows(void) { return MATRIX_ROWS; }
  83               		.loc 1 32 34 view -0
  84               		.cfi_startproc
  85               	/* prologue: function */
  86               	/* frame size = 0 */
  87               	/* stack size = 0 */
  88               	.L__stack_usage = 0
  89               		.loc 1 32 36 view .LVU7
  90               		.loc 1 32 56 is_stmt 0 view .LVU8
  91 0000 81E0      		ldi r24,lo8(1)
  92               	/* epilogue start */
  93 0002 0895      		ret
  94               		.cfi_endproc
  95               	.LFE123:
  97               		.section	.text.matrix_cols,"ax",@progbits
  98               	.global	matrix_cols
 100               	matrix_cols:
 101               	.LFB124:
  33:quantum/matrix_common.c **** 
  34:quantum/matrix_common.c **** inline uint8_t matrix_cols(void) { return MATRIX_COLS; }
 102               		.loc 1 34 34 is_stmt 1 view -0
 103               		.cfi_startproc
 104               	/* prologue: function */
 105               	/* frame size = 0 */
 106               	/* stack size = 0 */
 107               	.L__stack_usage = 0
 108               		.loc 1 34 36 view .LVU10
 109               		.loc 1 34 56 is_stmt 0 view .LVU11
 110 0000 83E0      		ldi r24,lo8(3)
 111               	/* epilogue start */
 112 0002 0895      		ret
 113               		.cfi_endproc
 114               	.LFE124:
 116               		.section	.text.matrix_is_on,"ax",@progbits
 117               	.global	matrix_is_on
 119               	matrix_is_on:
 120               	.LVL2:
 121               	.LFB125:
  35:quantum/matrix_common.c **** 
  36:quantum/matrix_common.c **** inline bool matrix_is_on(uint8_t row, uint8_t col) { return (matrix[row] & ((matrix_row_t)1 << col)
 122               		.loc 1 36 52 is_stmt 1 view -0
 123               		.cfi_startproc
 124               	/* prologue: function */
 125               	/* frame size = 0 */
 126               	/* stack size = 0 */
 127               	.L__stack_usage = 0
 128               		.loc 1 36 54 view .LVU13
 129               		.loc 1 36 68 is_stmt 0 view .LVU14
 130 0000 E82F      		mov r30,r24
 131 0002 F0E0      		ldi r31,0
 132 0004 E050      		subi r30,lo8(-(matrix))
 133 0006 F040      		sbci r31,hi8(-(matrix))
 134 0008 2081      		ld r18,Z
 135 000a 30E0      		ldi r19,0
 136               		.loc 1 36 93 view .LVU15
 137 000c 81E0      		ldi r24,lo8(1)
 138 000e 90E0      		ldi r25,0
 139               	.LVL3:
 140               		.loc 1 36 93 view .LVU16
 141 0010 00C0      		rjmp 2f
 142               		1:
 143 0012 880F      		lsl r24
 144 0014 991F      		rol r25
 145               		2:
 146 0016 6A95      		dec r22
 147 0018 02F4      		brpl 1b
 148               		.loc 1 36 74 view .LVU17
 149 001a 2823      		and r18,r24
 150 001c 3923      		and r19,r25
 151 001e 81E0      		ldi r24,lo8(1)
 152 0020 232B      		or r18,r19
 153 0022 01F4      		brne .L8
 154 0024 80E0      		ldi r24,0
 155               	.L8:
 156               	/* epilogue start */
 157               		.loc 1 36 103 view .LVU18
 158 0026 0895      		ret
 159               		.cfi_endproc
 160               	.LFE125:
 162               		.section	.text.matrix_get_row,"ax",@progbits
 163               	.global	matrix_get_row
 165               	matrix_get_row:
 166               	.LVL4:
 167               	.LFB126:
  37:quantum/matrix_common.c **** 
  38:quantum/matrix_common.c **** inline matrix_row_t matrix_get_row(uint8_t row) {
 168               		.loc 1 38 49 is_stmt 1 view -0
 169               		.cfi_startproc
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 0 */
 173               	.L__stack_usage = 0
  39:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
  40:quantum/matrix_common.c ****     // switch blocker installed and the switch is always pressed.
  41:quantum/matrix_common.c **** #ifdef MATRIX_MASKED
  42:quantum/matrix_common.c ****     return matrix[row] & matrix_mask[row];
  43:quantum/matrix_common.c **** #else
  44:quantum/matrix_common.c ****     return matrix[row];
 174               		.loc 1 44 5 view .LVU20
 175               		.loc 1 44 18 is_stmt 0 view .LVU21
 176 0000 E82F      		mov r30,r24
 177 0002 F0E0      		ldi r31,0
 178 0004 E050      		subi r30,lo8(-(matrix))
 179 0006 F040      		sbci r31,hi8(-(matrix))
  45:quantum/matrix_common.c **** #endif
  46:quantum/matrix_common.c **** }
 180               		.loc 1 46 1 view .LVU22
 181 0008 8081      		ld r24,Z
 182               	.LVL5:
 183               	/* epilogue start */
 184               		.loc 1 46 1 view .LVU23
 185 000a 0895      		ret
 186               		.cfi_endproc
 187               	.LFE126:
 189               		.section	.text.matrix_is_modified,"ax",@progbits
 190               	.global	matrix_is_modified
 192               	matrix_is_modified:
 193               	.LFB127:
  47:quantum/matrix_common.c **** 
  48:quantum/matrix_common.c **** // Deprecated.
  49:quantum/matrix_common.c **** bool matrix_is_modified(void) {
 194               		.loc 1 49 31 is_stmt 1 view -0
 195               		.cfi_startproc
 196               	/* prologue: function */
 197               	/* frame size = 0 */
 198               	/* stack size = 0 */
 199               	.L__stack_usage = 0
  50:quantum/matrix_common.c ****     if (debounce_active()) return false;
 200               		.loc 1 50 5 view .LVU25
 201               		.loc 1 50 9 is_stmt 0 view .LVU26
 202 0000 0E94 0000 		call debounce_active
 203               	.LVL6:
  51:quantum/matrix_common.c ****     return true;
  52:quantum/matrix_common.c **** }
 204               		.loc 1 52 1 view .LVU27
 205 0004 91E0      		ldi r25,lo8(1)
 206 0006 8927      		eor r24,r25
 207               	/* epilogue start */
 208 0008 0895      		ret
 209               		.cfi_endproc
 210               	.LFE127:
 212               		.section	.text.matrix_print,"ax",@progbits
 213               	.global	matrix_print
 215               	matrix_print:
 216               	.LFB128:
  53:quantum/matrix_common.c **** 
  54:quantum/matrix_common.c **** #if (MATRIX_COLS <= 8)
  55:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 01234567\n")
  56:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse8(matrix_get_row(row))
  57:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop(matrix_get_row(row))
  58:quantum/matrix_common.c **** #elif (MATRIX_COLS <= 16)
  59:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 0123456789ABCDEF\n")
  60:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse16(matrix_get_row(row))
  61:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop16(matrix_get_row(row))
  62:quantum/matrix_common.c **** #elif (MATRIX_COLS <= 32)
  63:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 0123456789ABCDEF0123456789ABCDEF\n")
  64:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse32(matrix_get_row(row))
  65:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop32(matrix_get_row(row))
  66:quantum/matrix_common.c **** #endif
  67:quantum/matrix_common.c **** 
  68:quantum/matrix_common.c **** void matrix_print(void) {
 217               		.loc 1 68 25 is_stmt 1 view -0
 218               		.cfi_startproc
 219               	/* prologue: function */
 220               	/* frame size = 0 */
 221               	/* stack size = 0 */
 222               	.L__stack_usage = 0
  69:quantum/matrix_common.c ****     print_matrix_header();
 223               		.loc 1 69 26 view .LVU29
  70:quantum/matrix_common.c **** 
  71:quantum/matrix_common.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 224               		.loc 1 71 5 view .LVU30
 225               		.loc 1 71 10 view .LVU31
 226               	.LVL7:
 227               		.loc 1 71 31 view .LVU32
 228               		.loc 1 71 31 view .LVU33
 229               	/* epilogue start */
  72:quantum/matrix_common.c ****         print_hex8(row);
  73:quantum/matrix_common.c ****         print(": ");
  74:quantum/matrix_common.c ****         print_matrix_row(row);
  75:quantum/matrix_common.c ****         print("\n");
  76:quantum/matrix_common.c ****     }
  77:quantum/matrix_common.c **** }
 230               		.loc 1 77 1 is_stmt 0 view .LVU34
 231 0000 0895      		ret
 232               		.cfi_endproc
 233               	.LFE128:
 235               		.section	.text.matrix_key_count,"ax",@progbits
 236               	.global	matrix_key_count
 238               	matrix_key_count:
 239               	.LFB129:
  78:quantum/matrix_common.c **** 
  79:quantum/matrix_common.c **** uint8_t matrix_key_count(void) {
 240               		.loc 1 79 32 is_stmt 1 view -0
 241               		.cfi_startproc
 242               	/* prologue: function */
 243               	/* frame size = 0 */
 244               	/* stack size = 0 */
 245               	.L__stack_usage = 0
  80:quantum/matrix_common.c ****     uint8_t count = 0;
 246               		.loc 1 80 5 view .LVU36
 247               	.LVL8:
  81:quantum/matrix_common.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 248               		.loc 1 81 5 view .LVU37
 249               	.LBB7:
 250               		.loc 1 81 10 view .LVU38
 251               		.loc 1 81 27 view .LVU39
  82:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 252               		.loc 1 82 9 view .LVU40
 253               	.LBB8:
 254               	.LBI8:
  38:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 255               		.loc 1 38 21 view .LVU41
 256               	.LBB9:
  44:quantum/matrix_common.c **** #endif
 257               		.loc 1 44 5 view .LVU42
  44:quantum/matrix_common.c **** #endif
 258               		.loc 1 44 5 is_stmt 0 view .LVU43
 259               	.LBE9:
 260               	.LBE8:
 261               		.loc 1 82 18 view .LVU44
 262 0000 8091 0000 		lds r24,matrix
 263 0004 0C94 0000 		jmp bitpop
 264               	.LVL9:
 265               	.LBE7:
 266               		.cfi_endproc
 267               	.LFE129:
 269               		.section	.text.matrix_io_delay,"ax",@progbits
 270               		.weak	matrix_io_delay
 272               	matrix_io_delay:
 273               	.LFB130:
  83:quantum/matrix_common.c ****     }
  84:quantum/matrix_common.c ****     return count;
  85:quantum/matrix_common.c **** }
  86:quantum/matrix_common.c **** 
  87:quantum/matrix_common.c **** /*　`matrix_io_delay ()` exists for backwards compatibility. From now on, use matrix_output_unsele
  88:quantum/matrix_common.c **** __attribute__((weak)) void matrix_io_delay(void) { wait_us(MATRIX_IO_DELAY); }
 274               		.loc 1 88 50 is_stmt 1 view -0
 275               		.cfi_startproc
 276               	/* prologue: function */
 277               	/* frame size = 0 */
 278               	/* stack size = 0 */
 279               	.L__stack_usage = 0
 280               		.loc 1 88 52 view .LVU46
 281               		.loc 1 88 52 view .LVU47
 282               		.loc 1 88 52 view .LVU48
 283               	.LVL10:
 284               	.LBB10:
 285               	.LBI10:
 286               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 211:/usr/avr/include/util/delay.h **** 
 212:/usr/avr/include/util/delay.h **** /**
 213:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/avr/include/util/delay.h **** 
 215:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/avr/include/util/delay.h **** 
 217:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/avr/include/util/delay.h **** 
 220:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/avr/include/util/delay.h **** 
 226:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/avr/include/util/delay.h **** 
 231:/usr/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/avr/include/util/delay.h **** 
 236:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/avr/include/util/delay.h ****    respectively.
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h ****    \note
 242:/usr/avr/include/util/delay.h **** 
 243:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/avr/include/util/delay.h **** 
 253:/usr/avr/include/util/delay.h ****  */
 254:/usr/avr/include/util/delay.h **** void
 255:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 287               		.loc 2 255 1 view .LVU49
 288               	.LBB11:
 256:/usr/avr/include/util/delay.h **** {
 257:/usr/avr/include/util/delay.h **** 	double __tmp ;
 289               		.loc 2 257 2 view .LVU50
 258:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 290               		.loc 2 261 2 view .LVU51
 262:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 291               		.loc 2 262 2 view .LVU52
 263:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 292               		.loc 2 263 2 view .LVU53
 264:/usr/avr/include/util/delay.h **** 
 265:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/avr/include/util/delay.h **** 
 268:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/avr/include/util/delay.h **** 
 271:/usr/avr/include/util/delay.h **** 	#else
 272:/usr/avr/include/util/delay.h **** 		//round up by default
 273:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 293               		.loc 2 273 3 view .LVU54
 274:/usr/avr/include/util/delay.h **** 	#endif
 275:/usr/avr/include/util/delay.h **** 
 276:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 294               		.loc 2 276 2 view .LVU55
 295 0000 80EA      		ldi r24,lo8(-96)
 296 0002 8A95      	1:	dec r24
 297 0004 01F4      		brne 1b
 298               	.LVL11:
 299               		.loc 2 276 2 is_stmt 0 view .LVU56
 300               	.LBE11:
 301               	.LBE10:
 302               		.loc 1 88 52 is_stmt 1 view .LVU57
 303               	/* epilogue start */
 304               		.loc 1 88 78 is_stmt 0 view .LVU58
 305 0006 0895      		ret
 306               		.cfi_endproc
 307               	.LFE130:
 309               		.section	.text.matrix_output_select_delay,"ax",@progbits
 310               		.weak	matrix_output_select_delay
 312               	matrix_output_select_delay:
 313               	.LFB131:
  89:quantum/matrix_common.c **** 
  90:quantum/matrix_common.c **** __attribute__((weak)) void matrix_output_select_delay(void) { waitInputPinDelay(); }
 314               		.loc 1 90 61 is_stmt 1 view -0
 315               		.cfi_startproc
 316               	/* prologue: function */
 317               	/* frame size = 0 */
 318               	/* stack size = 0 */
 319               	.L__stack_usage = 0
 320               		.loc 1 90 63 view .LVU60
 321 0000 00C0      		rjmp .
 322               	/* epilogue start */
 323               		.loc 1 90 84 is_stmt 0 view .LVU61
 324 0002 0895      		ret
 325               		.cfi_endproc
 326               	.LFE131:
 328               		.section	.text.matrix_output_unselect_delay,"ax",@progbits
 329               		.weak	matrix_output_unselect_delay
 331               	matrix_output_unselect_delay:
 332               	.LVL12:
 333               	.LFB132:
  91:quantum/matrix_common.c **** __attribute__((weak)) void matrix_output_unselect_delay(uint8_t line, bool key_pressed) { matrix_io
 334               		.loc 1 91 89 is_stmt 1 view -0
 335               		.cfi_startproc
 336               	/* prologue: function */
 337               	/* frame size = 0 */
 338               	/* stack size = 0 */
 339               	.L__stack_usage = 0
 340               		.loc 1 91 91 view .LVU63
 341 0000 0C94 0000 		jmp matrix_io_delay
 342               	.LVL13:
 343               		.loc 1 91 91 is_stmt 0 view .LVU64
 344               		.cfi_endproc
 345               	.LFE132:
 347               		.section	.text.matrix_init_custom,"ax",@progbits
 348               		.weak	matrix_init_custom
 350               	matrix_init_custom:
 351               	.LFB141:
 352               		.cfi_startproc
 353               	/* prologue: function */
 354               	/* frame size = 0 */
 355               	/* stack size = 0 */
 356               	.L__stack_usage = 0
 357               	/* epilogue start */
 358 0000 0895      		ret
 359               		.cfi_endproc
 360               	.LFE141:
 362               		.section	.text.matrix_scan_custom,"ax",@progbits
 363               		.weak	matrix_scan_custom
 365               	matrix_scan_custom:
 366               	.LVL14:
 367               	.LFB134:
  92:quantum/matrix_common.c **** 
  93:quantum/matrix_common.c **** // CUSTOM MATRIX 'LITE'
  94:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_custom(void) {}
  95:quantum/matrix_common.c **** 
  96:quantum/matrix_common.c **** __attribute__((weak)) bool matrix_scan_custom(matrix_row_t current_matrix[]) { return true; }
 368               		.loc 1 96 78 is_stmt 1 view -0
 369               		.cfi_startproc
 370               	/* prologue: function */
 371               	/* frame size = 0 */
 372               	/* stack size = 0 */
 373               	.L__stack_usage = 0
 374               		.loc 1 96 80 view .LVU66
 375               		.loc 1 96 93 is_stmt 0 view .LVU67
 376 0000 81E0      		ldi r24,lo8(1)
 377               	.LVL15:
 378               	/* epilogue start */
 379               		.loc 1 96 93 view .LVU68
 380 0002 0895      		ret
 381               		.cfi_endproc
 382               	.LFE134:
 384               		.section	.text.matrix_init,"ax",@progbits
 385               		.weak	matrix_init
 387               	matrix_init:
 388               	.LFB135:
  97:quantum/matrix_common.c **** 
  98:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init(void) {
 389               		.loc 1 98 46 is_stmt 1 view -0
 390               		.cfi_startproc
 391               	/* prologue: function */
 392               	/* frame size = 0 */
 393               	/* stack size = 0 */
 394               	.L__stack_usage = 0
  99:quantum/matrix_common.c ****     matrix_init_custom();
 395               		.loc 1 99 5 view .LVU70
 396 0000 0E94 0000 		call matrix_init_custom
 397               	.LVL16:
 100:quantum/matrix_common.c **** 
 101:quantum/matrix_common.c ****     // initialize matrix state: all keys off
 102:quantum/matrix_common.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 398               		.loc 1 102 5 view .LVU71
 399               	.LBB12:
 400               		.loc 1 102 10 view .LVU72
 401               		.loc 1 102 27 view .LVU73
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 402               		.loc 1 103 9 view .LVU74
 403               		.loc 1 103 23 is_stmt 0 view .LVU75
 404 0004 1092 0000 		sts raw_matrix,__zero_reg__
 104:quantum/matrix_common.c ****         matrix[i]     = 0;
 405               		.loc 1 104 9 is_stmt 1 view .LVU76
 406               		.loc 1 104 23 is_stmt 0 view .LVU77
 407 0008 1092 0000 		sts matrix,__zero_reg__
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 408               		.loc 1 102 43 is_stmt 1 view .LVU78
 409               	.LVL17:
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 410               		.loc 1 102 27 view .LVU79
 411               	.LBE12:
 105:quantum/matrix_common.c ****     }
 106:quantum/matrix_common.c **** 
 107:quantum/matrix_common.c ****     debounce_init(MATRIX_ROWS);
 412               		.loc 1 107 5 view .LVU80
 413 000c 81E0      		ldi r24,lo8(1)
 414 000e 0E94 0000 		call debounce_init
 415               	.LVL18:
 108:quantum/matrix_common.c **** 
 109:quantum/matrix_common.c ****     matrix_init_quantum();
 416               		.loc 1 109 5 view .LVU81
 417 0012 0C94 0000 		jmp matrix_init_quantum
 418               	.LVL19:
 419               		.cfi_endproc
 420               	.LFE135:
 422               		.section	.text.matrix_scan,"ax",@progbits
 423               		.weak	matrix_scan
 425               	matrix_scan:
 426               	.LFB136:
 110:quantum/matrix_common.c **** }
 111:quantum/matrix_common.c **** 
 112:quantum/matrix_common.c **** __attribute__((weak)) uint8_t matrix_scan(void) {
 427               		.loc 1 112 49 view -0
 428               		.cfi_startproc
 429 0000 CF93      		push r28
 430               	.LCFI0:
 431               		.cfi_def_cfa_offset 3
 432               		.cfi_offset 28, -2
 433               	/* prologue: function */
 434               	/* frame size = 0 */
 435               	/* stack size = 1 */
 436               	.L__stack_usage = 1
 113:quantum/matrix_common.c ****     bool changed = matrix_scan_custom(raw_matrix);
 437               		.loc 1 113 5 view .LVU83
 438               		.loc 1 113 20 is_stmt 0 view .LVU84
 439 0002 80E0      		ldi r24,lo8(raw_matrix)
 440 0004 90E0      		ldi r25,hi8(raw_matrix)
 441 0006 0E94 0000 		call matrix_scan_custom
 442               	.LVL20:
 443 000a C82F      		mov r28,r24
 444               	.LVL21:
 114:quantum/matrix_common.c **** 
 115:quantum/matrix_common.c ****     debounce(raw_matrix, matrix, MATRIX_ROWS, changed);
 445               		.loc 1 115 5 is_stmt 1 view .LVU85
 446 000c 282F      		mov r18,r24
 447 000e 41E0      		ldi r20,lo8(1)
 448 0010 60E0      		ldi r22,lo8(matrix)
 449 0012 70E0      		ldi r23,hi8(matrix)
 450 0014 80E0      		ldi r24,lo8(raw_matrix)
 451 0016 90E0      		ldi r25,hi8(raw_matrix)
 452               	.LVL22:
 453               		.loc 1 115 5 is_stmt 0 view .LVU86
 454 0018 0E94 0000 		call debounce
 455               	.LVL23:
 116:quantum/matrix_common.c **** 
 117:quantum/matrix_common.c ****     matrix_scan_quantum();
 456               		.loc 1 117 5 is_stmt 1 view .LVU87
 457 001c 0E94 0000 		call matrix_scan_quantum
 458               	.LVL24:
 118:quantum/matrix_common.c ****     return changed;
 459               		.loc 1 118 5 view .LVU88
 119:quantum/matrix_common.c **** }
 460               		.loc 1 119 1 is_stmt 0 view .LVU89
 461 0020 8C2F      		mov r24,r28
 462               	/* epilogue start */
 463 0022 CF91      		pop r28
 464               	.LVL25:
 465               		.loc 1 119 1 view .LVU90
 466 0024 0895      		ret
 467               		.cfi_endproc
 468               	.LFE136:
 470               		.section	.text.peek_matrix,"ax",@progbits
 471               		.weak	peek_matrix
 473               	peek_matrix:
 474               	.LVL26:
 475               	.LFB137:
 120:quantum/matrix_common.c **** 
 121:quantum/matrix_common.c **** __attribute__((weak)) bool peek_matrix(uint8_t row_index, uint8_t col_index, bool raw) { return 0 !
 476               		.loc 1 121 88 is_stmt 1 view -0
 477               		.cfi_startproc
 478               	/* prologue: function */
 479               	/* frame size = 0 */
 480               	/* stack size = 0 */
 481               	.L__stack_usage = 0
 482               		.loc 1 121 90 view .LVU92
 483               		.loc 1 121 120 is_stmt 0 view .LVU93
 484 0000 90E0      		ldi r25,0
 485               		.loc 1 121 132 view .LVU94
 486 0002 4423      		tst r20
 487 0004 01F0      		breq .L21
 488               		.loc 1 121 120 discriminator 1 view .LVU95
 489 0006 8050      		subi r24,lo8(-(raw_matrix))
 490 0008 9040      		sbci r25,hi8(-(raw_matrix))
 491               	.LVL27:
 492               	.L23:
 493               		.loc 1 121 132 discriminator 2 view .LVU96
 494 000a FC01      		movw r30,r24
 495 000c 8081      		ld r24,Z
 496 000e 90E0      		ldi r25,0
 497               		.loc 1 121 99 discriminator 2 view .LVU97
 498 0010 00C0      		rjmp 2f
 499               		1:
 500 0012 9595      		asr r25
 501 0014 8795      		ror r24
 502               		2:
 503 0016 6A95      		dec r22
 504 0018 02F4      		brpl 1b
 505               		.loc 1 121 191 discriminator 2 view .LVU98
 506 001a 8170      		andi r24,lo8(1)
 507               	/* epilogue start */
 508 001c 0895      		ret
 509               	.LVL28:
 510               	.L21:
 511               		.loc 1 121 140 discriminator 2 view .LVU99
 512 001e 8050      		subi r24,lo8(-(matrix))
 513 0020 9040      		sbci r25,hi8(-(matrix))
 514               	.LVL29:
 515               		.loc 1 121 140 discriminator 2 view .LVU100
 516 0022 00C0      		rjmp .L23
 517               		.cfi_endproc
 518               	.LFE137:
 520               		.comm	matrix,1,1
 521               		.comm	raw_matrix,1,1
 522               		.text
 523               	.Letext0:
 524               		.file 3 "/usr/avr/include/stdint.h"
 525               		.file 4 "quantum/matrix.h"
 526               		.file 5 "quantum/debounce.h"
 527               		.file 6 "/usr/avr/include/math.h"
 528               		.file 7 "quantum/bitwise.h"
 529               		.file 8 "quantum/sequencer/sequencer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix_common.c
     /tmp/ccThEGPq.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccThEGPq.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccThEGPq.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccThEGPq.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccThEGPq.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccThEGPq.s:13     .text.matrix_init_user:0000000000000000 matrix_init_user
     /tmp/ccThEGPq.s:13     .text.matrix_init_user:0000000000000000 matrix_init_user.localalias
     /tmp/ccThEGPq.s:32     .text.matrix_init_kb:0000000000000000 matrix_init_kb
     /tmp/ccThEGPq.s:49     .text.matrix_scan_user:0000000000000000 matrix_scan_user
     /tmp/ccThEGPq.s:64     .text.matrix_scan_kb:0000000000000000 matrix_scan_kb
     /tmp/ccThEGPq.s:81     .text.matrix_rows:0000000000000000 matrix_rows
     /tmp/ccThEGPq.s:100    .text.matrix_cols:0000000000000000 matrix_cols
     /tmp/ccThEGPq.s:119    .text.matrix_is_on:0000000000000000 matrix_is_on
                            *COM*:0000000000000001 matrix
     /tmp/ccThEGPq.s:165    .text.matrix_get_row:0000000000000000 matrix_get_row
     /tmp/ccThEGPq.s:192    .text.matrix_is_modified:0000000000000000 matrix_is_modified
     /tmp/ccThEGPq.s:215    .text.matrix_print:0000000000000000 matrix_print
     /tmp/ccThEGPq.s:238    .text.matrix_key_count:0000000000000000 matrix_key_count
     /tmp/ccThEGPq.s:272    .text.matrix_io_delay:0000000000000000 matrix_io_delay
     /tmp/ccThEGPq.s:312    .text.matrix_output_select_delay:0000000000000000 matrix_output_select_delay
     /tmp/ccThEGPq.s:331    .text.matrix_output_unselect_delay:0000000000000000 matrix_output_unselect_delay
     /tmp/ccThEGPq.s:350    .text.matrix_init_custom:0000000000000000 matrix_init_custom
     /tmp/ccThEGPq.s:365    .text.matrix_scan_custom:0000000000000000 matrix_scan_custom
     /tmp/ccThEGPq.s:387    .text.matrix_init:0000000000000000 matrix_init
                            *COM*:0000000000000001 raw_matrix
     /tmp/ccThEGPq.s:425    .text.matrix_scan:0000000000000000 matrix_scan
     /tmp/ccThEGPq.s:473    .text.peek_matrix:0000000000000000 peek_matrix

UNDEFINED SYMBOLS
debounce_active
bitpop
debounce_init
matrix_init_quantum
debounce
matrix_scan_quantum
__do_clear_bss
