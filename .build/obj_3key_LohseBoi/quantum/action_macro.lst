   1               		.file	"action_macro.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_macro_play,"ax",@progbits
  11               	.global	action_macro_play
  13               	action_macro_play:
  14               	.LVL0:
  15               	.LFB108:
  16               		.file 1 "quantum/action_macro.c"
   1:quantum/action_macro.c **** /*
   2:quantum/action_macro.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:quantum/action_macro.c **** 
   4:quantum/action_macro.c **** This program is free software: you can redistribute it and/or modify
   5:quantum/action_macro.c **** it under the terms of the GNU General Public License as published by
   6:quantum/action_macro.c **** the Free Software Foundation, either version 2 of the License, or
   7:quantum/action_macro.c **** (at your option) any later version.
   8:quantum/action_macro.c **** 
   9:quantum/action_macro.c **** This program is distributed in the hope that it will be useful,
  10:quantum/action_macro.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:quantum/action_macro.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:quantum/action_macro.c **** GNU General Public License for more details.
  13:quantum/action_macro.c **** 
  14:quantum/action_macro.c **** You should have received a copy of the GNU General Public License
  15:quantum/action_macro.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:quantum/action_macro.c **** */
  17:quantum/action_macro.c **** #include "action.h"
  18:quantum/action_macro.c **** #include "action_util.h"
  19:quantum/action_macro.c **** #include "action_macro.h"
  20:quantum/action_macro.c **** #include "wait.h"
  21:quantum/action_macro.c **** 
  22:quantum/action_macro.c **** #ifdef DEBUG_ACTION
  23:quantum/action_macro.c **** #    include "debug.h"
  24:quantum/action_macro.c **** #else
  25:quantum/action_macro.c **** #    include "nodebug.h"
  26:quantum/action_macro.c **** #endif
  27:quantum/action_macro.c **** 
  28:quantum/action_macro.c **** #ifndef NO_ACTION_MACRO
  29:quantum/action_macro.c **** 
  30:quantum/action_macro.c **** #    define MACRO_READ() (macro = MACRO_GET(macro_p++))
  31:quantum/action_macro.c **** /** \brief Action Macro Play
  32:quantum/action_macro.c ****  *
  33:quantum/action_macro.c ****  * FIXME: Needs doc
  34:quantum/action_macro.c ****  */
  35:quantum/action_macro.c **** void action_macro_play(const macro_t *macro_p) {
  17               		.loc 1 35 48 view -0
  18               		.cfi_startproc
  19               		.loc 1 35 48 is_stmt 0 view .LVU1
  20 0000 EF92      		push r14
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 14, -2
  24 0002 FF92      		push r15
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 15, -3
  28 0004 0F93      		push r16
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 16, -4
  32 0006 1F93      		push r17
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 17, -5
  36 0008 CF93      		push r28
  37               	.LCFI4:
  38               		.cfi_def_cfa_offset 7
  39               		.cfi_offset 28, -6
  40 000a DF93      		push r29
  41               	.LCFI5:
  42               		.cfi_def_cfa_offset 8
  43               		.cfi_offset 29, -7
  44               	/* prologue: function */
  45               	/* frame size = 0 */
  46               	/* stack size = 6 */
  47               	.L__stack_usage = 6
  48 000c 8C01      		movw r16,r24
  36:quantum/action_macro.c ****     macro_t macro    = END;
  49               		.loc 1 36 5 is_stmt 1 view .LVU2
  50               	.LVL1:
  37:quantum/action_macro.c ****     uint8_t interval = 0;
  51               		.loc 1 37 5 view .LVU3
  38:quantum/action_macro.c **** 
  39:quantum/action_macro.c ****     if (!macro_p) return;
  52               		.loc 1 39 5 view .LVU4
  53               		.loc 1 39 8 is_stmt 0 view .LVU5
  54 000e 892B      		or r24,r25
  55 0010 01F0      		breq .L1
  37:quantum/action_macro.c ****     uint8_t interval = 0;
  56               		.loc 1 37 13 view .LVU6
  57 0012 F12C      		mov r15,__zero_reg__
  40:quantum/action_macro.c ****     while (true) {
  41:quantum/action_macro.c ****         switch (MACRO_READ()) {
  42:quantum/action_macro.c ****             case KEY_DOWN:
  43:quantum/action_macro.c ****                 MACRO_READ();
  44:quantum/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  45:quantum/action_macro.c ****                 if (IS_MOD(macro)) {
  46:quantum/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
  47:quantum/action_macro.c ****                     send_keyboard_report();
  48:quantum/action_macro.c ****                 } else {
  49:quantum/action_macro.c ****                     register_code(macro);
  50:quantum/action_macro.c ****                 }
  51:quantum/action_macro.c ****                 break;
  52:quantum/action_macro.c ****             case KEY_UP:
  53:quantum/action_macro.c ****                 MACRO_READ();
  54:quantum/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
  55:quantum/action_macro.c ****                 if (IS_MOD(macro)) {
  56:quantum/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
  58               		.loc 1 56 36 view .LVU7
  59 0014 EE24      		clr r14
  60 0016 E394      		inc r14
  61               	.LVL2:
  62               	.L17:
  40:quantum/action_macro.c ****     while (true) {
  63               		.loc 1 40 5 is_stmt 1 view .LVU8
  41:quantum/action_macro.c ****             case KEY_DOWN:
  64               		.loc 1 41 9 view .LVU9
  65               	.LBB13:
  41:quantum/action_macro.c ****             case KEY_DOWN:
  66               		.loc 1 41 17 view .LVU10
  67 0018 E801      		movw r28,r16
  68 001a 2196      		adiw r28,1
  69               	.LVL3:
  41:quantum/action_macro.c ****             case KEY_DOWN:
  70               		.loc 1 41 17 view .LVU11
  41:quantum/action_macro.c ****             case KEY_DOWN:
  71               		.loc 1 41 17 view .LVU12
  72 001c F801      		movw r30,r16
  73               	/* #APP */
  74               	 ;  41 "quantum/action_macro.c" 1
  75 001e 8491      		lpm r24, Z
  76               		
  77               	 ;  0 "" 2
  78               	.LVL4:
  41:quantum/action_macro.c ****             case KEY_DOWN:
  79               		.loc 1 41 17 view .LVU13
  41:quantum/action_macro.c ****             case KEY_DOWN:
  80               		.loc 1 41 17 is_stmt 0 view .LVU14
  81               	/* #NOAPP */
  82               	.LBE13:
  41:quantum/action_macro.c ****             case KEY_DOWN:
  83               		.loc 1 41 9 view .LVU15
  84 0020 8437      		cpi r24,lo8(116)
  85 0022 01F4      		brne .+2
  86 0024 00C0      		rjmp .L3
  41:quantum/action_macro.c ****             case KEY_DOWN:
  87               		.loc 1 41 9 view .LVU16
  88 0026 00F4      		brsh .L4
  89 0028 8230      		cpi r24,lo8(2)
  90 002a 01F4      		brne .+2
  91 002c 00C0      		rjmp .L5
  92 002e 00F4      		brsh .L6
  93 0030 8130      		cpi r24,lo8(1)
  94 0032 01F0      		breq .L7
  95               	.LVL5:
  96               	.L1:
  97               	/* epilogue start */
  57:quantum/action_macro.c ****                     send_keyboard_report();
  58:quantum/action_macro.c ****                 } else {
  59:quantum/action_macro.c ****                     unregister_code(macro);
  60:quantum/action_macro.c ****                 }
  61:quantum/action_macro.c ****                 break;
  62:quantum/action_macro.c ****             case WAIT:
  63:quantum/action_macro.c ****                 MACRO_READ();
  64:quantum/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
  65:quantum/action_macro.c ****                 {
  66:quantum/action_macro.c ****                     uint8_t ms = macro;
  67:quantum/action_macro.c ****                     while (ms--) wait_ms(1);
  68:quantum/action_macro.c ****                 }
  69:quantum/action_macro.c ****                 break;
  70:quantum/action_macro.c ****             case INTERVAL:
  71:quantum/action_macro.c ****                 interval = MACRO_READ();
  72:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
  73:quantum/action_macro.c ****                 break;
  74:quantum/action_macro.c ****             case 0x04 ... 0x73:
  75:quantum/action_macro.c ****                 dprintf("DOWN(%02X)\n", macro);
  76:quantum/action_macro.c ****                 register_code(macro);
  77:quantum/action_macro.c ****                 break;
  78:quantum/action_macro.c ****             case 0x84 ... 0xF3:
  79:quantum/action_macro.c ****                 dprintf("UP(%02X)\n", macro);
  80:quantum/action_macro.c ****                 unregister_code(macro & 0x7F);
  81:quantum/action_macro.c ****                 break;
  82:quantum/action_macro.c ****             case END:
  83:quantum/action_macro.c ****             default:
  84:quantum/action_macro.c ****                 return;
  85:quantum/action_macro.c ****         }
  86:quantum/action_macro.c ****         // interval
  87:quantum/action_macro.c ****         {
  88:quantum/action_macro.c ****             uint8_t ms = interval;
  89:quantum/action_macro.c ****             while (ms--) wait_ms(1);
  90:quantum/action_macro.c ****         }
  91:quantum/action_macro.c ****     }
  92:quantum/action_macro.c **** }
  98               		.loc 1 92 1 view .LVU17
  99 0034 DF91      		pop r29
 100 0036 CF91      		pop r28
 101 0038 1F91      		pop r17
 102 003a 0F91      		pop r16
 103 003c FF90      		pop r15
 104 003e EF90      		pop r14
 105 0040 0895      		ret
 106               	.LVL6:
 107               	.L6:
  41:quantum/action_macro.c ****             case KEY_DOWN:
 108               		.loc 1 41 9 view .LVU18
 109 0042 9CEF      		ldi r25,lo8(-4)
 110 0044 980F      		add r25,r24
 111 0046 9037      		cpi r25,lo8(112)
 112 0048 00F4      		brsh .L1
  75:quantum/action_macro.c ****                 register_code(macro);
 113               		.loc 1 75 47 is_stmt 1 view .LVU19
  76:quantum/action_macro.c ****                 break;
 114               		.loc 1 76 17 view .LVU20
 115 004a 0E94 0000 		call register_code
 116               	.LVL7:
  76:quantum/action_macro.c ****                 break;
 117               		.loc 1 76 17 is_stmt 0 view .LVU21
 118 004e 00C0      		rjmp .L23
 119               	.LVL8:
 120               	.L4:
  41:quantum/action_macro.c ****             case KEY_DOWN:
 121               		.loc 1 41 9 view .LVU22
 122 0050 8537      		cpi r24,lo8(117)
 123 0052 01F4      		brne .+2
 124 0054 00C0      		rjmp .L9
 125 0056 9CE7      		ldi r25,lo8(124)
 126 0058 980F      		add r25,r24
 127 005a 9037      		cpi r25,lo8(112)
 128 005c 00F4      		brsh .L1
  79:quantum/action_macro.c ****                 unregister_code(macro & 0x7F);
 129               		.loc 1 79 45 is_stmt 1 view .LVU23
  80:quantum/action_macro.c ****                 break;
 130               		.loc 1 80 17 view .LVU24
 131 005e 8F77      		andi r24,lo8(127)
 132               	.LVL9:
  80:quantum/action_macro.c ****                 break;
 133               		.loc 1 80 17 is_stmt 0 view .LVU25
 134 0060 0E94 0000 		call unregister_code
 135               	.LVL10:
  81:quantum/action_macro.c ****             case END:
 136               		.loc 1 81 17 is_stmt 1 view .LVU26
 137               	.L23:
  77:quantum/action_macro.c ****             case 0x84 ... 0xF3:
 138               		.loc 1 77 17 view .LVU27
 139               	.LBB14:
  41:quantum/action_macro.c ****             case KEY_DOWN:
 140               		.loc 1 41 17 is_stmt 0 view .LVU28
 141 0064 8E01      		movw r16,r28
 142               	.LVL11:
  41:quantum/action_macro.c ****             case KEY_DOWN:
 143               		.loc 1 41 17 view .LVU29
 144               	.LBE14:
  77:quantum/action_macro.c ****             case 0x84 ... 0xF3:
 145               		.loc 1 77 17 view .LVU30
 146 0066 00C0      		rjmp .L10
 147               	.LVL12:
 148               	.L7:
  43:quantum/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 149               		.loc 1 43 17 is_stmt 1 view .LVU31
 150               	.LBB15:
  43:quantum/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 151               		.loc 1 43 17 view .LVU32
 152 0068 0E5F      		subi r16,-2
 153 006a 1F4F      		sbci r17,-1
 154               	.LVL13:
  43:quantum/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 155               		.loc 1 43 17 view .LVU33
  43:quantum/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 156               		.loc 1 43 17 view .LVU34
 157 006c FE01      		movw r30,r28
 158               	.LVL14:
  43:quantum/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 159               		.loc 1 43 17 is_stmt 0 view .LVU35
 160               	/* #APP */
 161               	 ;  43 "quantum/action_macro.c" 1
 162 006e 8491      		lpm r24, Z
 163               		
 164               	 ;  0 "" 2
 165               	.LVL15:
  43:quantum/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 166               		.loc 1 43 17 is_stmt 1 view .LVU36
  43:quantum/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 167               		.loc 1 43 17 is_stmt 0 view .LVU37
 168               	/* #NOAPP */
 169               	.LBE15:
  44:quantum/action_macro.c ****                 if (IS_MOD(macro)) {
 170               		.loc 1 44 51 is_stmt 1 view .LVU38
  45:quantum/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
 171               		.loc 1 45 17 view .LVU39
  45:quantum/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
 172               		.loc 1 45 21 is_stmt 0 view .LVU40
 173 0070 90E2      		ldi r25,lo8(32)
 174 0072 980F      		add r25,r24
  45:quantum/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
 175               		.loc 1 45 20 view .LVU41
 176 0074 9830      		cpi r25,lo8(8)
 177 0076 00F4      		brsh .L11
  46:quantum/action_macro.c ****                     send_keyboard_report();
 178               		.loc 1 46 21 is_stmt 1 view .LVU42
  46:quantum/action_macro.c ****                     send_keyboard_report();
 179               		.loc 1 46 36 is_stmt 0 view .LVU43
 180 0078 8770      		andi r24,lo8(7)
 181               	.LVL16:
  46:quantum/action_macro.c ****                     send_keyboard_report();
 182               		.loc 1 46 21 view .LVU44
 183 007a FE2D      		mov r31,r14
 184 007c 00C0      		rjmp 2f
 185               		1:
 186 007e FF0F      		lsl r31
 187               		2:
 188 0080 8A95      		dec r24
 189 0082 02F4      		brpl 1b
 190 0084 8F2F      		mov r24,r31
 191 0086 0E94 0000 		call add_macro_mods
 192               	.LVL17:
  47:quantum/action_macro.c ****                 } else {
 193               		.loc 1 47 21 is_stmt 1 view .LVU45
 194               	.L22:
  57:quantum/action_macro.c ****                 } else {
 195               		.loc 1 57 21 view .LVU46
 196 008a 0E94 0000 		call send_keyboard_report
 197               	.LVL18:
 198 008e 00C0      		rjmp .L10
 199               	.LVL19:
 200               	.L11:
  49:quantum/action_macro.c ****                 }
 201               		.loc 1 49 21 view .LVU47
 202 0090 0E94 0000 		call register_code
 203               	.LVL20:
 204               	.L10:
 205               	.LBB16:
  88:quantum/action_macro.c ****             while (ms--) wait_ms(1);
 206               		.loc 1 88 13 view .LVU48
  89:quantum/action_macro.c ****         }
 207               		.loc 1 89 13 view .LVU49
  89:quantum/action_macro.c ****         }
 208               		.loc 1 89 19 is_stmt 0 view .LVU50
 209 0094 8F2D      		mov r24,r15
 210               	.LVL21:
 211               	.L15:
  89:quantum/action_macro.c ****         }
 212               		.loc 1 89 26 is_stmt 1 discriminator 7 view .LVU51
  89:quantum/action_macro.c ****         }
 213               		.loc 1 89 20 discriminator 7 view .LVU52
  89:quantum/action_macro.c ****         }
 214               		.loc 1 89 20 is_stmt 0 discriminator 7 view .LVU53
 215 0096 8823      		tst r24
 216 0098 01F4      		brne .+2
 217 009a 00C0      		rjmp .L17
  89:quantum/action_macro.c ****         }
 218               		.loc 1 89 26 is_stmt 1 view .LVU54
  89:quantum/action_macro.c ****         }
 219               		.loc 1 89 26 view .LVU55
  89:quantum/action_macro.c ****         }
 220               		.loc 1 89 26 view .LVU56
 221               	.LVL22:
 222               	.LBB17:
 223               	.LBI17:
 224               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 225               		.loc 2 166 1 view .LVU57
 226               	.LBB18:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 227               		.loc 2 168 2 view .LVU58
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 228               		.loc 2 172 2 view .LVU59
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 229               		.loc 2 173 2 view .LVU60
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 230               		.loc 2 174 2 view .LVU61
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 231               		.loc 2 184 3 view .LVU62
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 232               		.loc 2 187 2 view .LVU63
 233 009c EFE9      		ldi r30,lo8(3999)
 234 009e FFE0      		ldi r31,hi8(3999)
 235 00a0 3197      	1:	sbiw r30,1
 236 00a2 01F4      		brne 1b
 237 00a4 00C0      		rjmp .
 238 00a6 0000      		nop
 239 00a8 8150      		subi r24,lo8(-(-1))
 240               	.LVL23:
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 241               		.loc 2 210 1 is_stmt 0 view .LVU64
 242 00aa 00C0      		rjmp .L15
 243               	.LVL24:
 244               	.L5:
 245               		.loc 2 210 1 view .LVU65
 246               	.LBE18:
 247               	.LBE17:
 248               	.LBE16:
  53:quantum/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 249               		.loc 1 53 17 is_stmt 1 view .LVU66
 250               	.LBB19:
  53:quantum/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 251               		.loc 1 53 17 view .LVU67
 252 00ac 0E5F      		subi r16,-2
 253 00ae 1F4F      		sbci r17,-1
 254               	.LVL25:
  53:quantum/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 255               		.loc 1 53 17 view .LVU68
  53:quantum/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 256               		.loc 1 53 17 view .LVU69
 257 00b0 FE01      		movw r30,r28
 258               	.LVL26:
  53:quantum/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 259               		.loc 1 53 17 is_stmt 0 view .LVU70
 260               	/* #APP */
 261               	 ;  53 "quantum/action_macro.c" 1
 262 00b2 8491      		lpm r24, Z
 263               		
 264               	 ;  0 "" 2
 265               	.LVL27:
  53:quantum/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 266               		.loc 1 53 17 is_stmt 1 view .LVU71
  53:quantum/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 267               		.loc 1 53 17 is_stmt 0 view .LVU72
 268               	/* #NOAPP */
 269               	.LBE19:
  54:quantum/action_macro.c ****                 if (IS_MOD(macro)) {
 270               		.loc 1 54 49 is_stmt 1 view .LVU73
  55:quantum/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 271               		.loc 1 55 17 view .LVU74
  55:quantum/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 272               		.loc 1 55 21 is_stmt 0 view .LVU75
 273 00b4 90E2      		ldi r25,lo8(32)
 274 00b6 980F      		add r25,r24
  55:quantum/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 275               		.loc 1 55 20 view .LVU76
 276 00b8 9830      		cpi r25,lo8(8)
 277 00ba 00F4      		brsh .L12
  56:quantum/action_macro.c ****                     send_keyboard_report();
 278               		.loc 1 56 21 is_stmt 1 view .LVU77
  56:quantum/action_macro.c ****                     send_keyboard_report();
 279               		.loc 1 56 36 is_stmt 0 view .LVU78
 280 00bc 8770      		andi r24,lo8(7)
 281               	.LVL28:
  56:quantum/action_macro.c ****                     send_keyboard_report();
 282               		.loc 1 56 21 view .LVU79
 283 00be FE2D      		mov r31,r14
 284 00c0 00C0      		rjmp 2f
 285               		1:
 286 00c2 FF0F      		lsl r31
 287               		2:
 288 00c4 8A95      		dec r24
 289 00c6 02F4      		brpl 1b
 290 00c8 8F2F      		mov r24,r31
 291 00ca 0E94 0000 		call del_macro_mods
 292               	.LVL29:
 293 00ce 00C0      		rjmp .L22
 294               	.LVL30:
 295               	.L12:
  59:quantum/action_macro.c ****                 }
 296               		.loc 1 59 21 is_stmt 1 view .LVU80
 297 00d0 0E94 0000 		call unregister_code
 298               	.LVL31:
  59:quantum/action_macro.c ****                 }
 299               		.loc 1 59 21 is_stmt 0 view .LVU81
 300 00d4 00C0      		rjmp .L10
 301               	.LVL32:
 302               	.L3:
  63:quantum/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 303               		.loc 1 63 17 is_stmt 1 view .LVU82
 304               	.LBB20:
  63:quantum/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 305               		.loc 1 63 17 view .LVU83
 306 00d6 0E5F      		subi r16,-2
 307 00d8 1F4F      		sbci r17,-1
 308               	.LVL33:
  63:quantum/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 309               		.loc 1 63 17 view .LVU84
  63:quantum/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 310               		.loc 1 63 17 view .LVU85
 311 00da FE01      		movw r30,r28
 312               	.LVL34:
  63:quantum/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 313               		.loc 1 63 17 is_stmt 0 view .LVU86
 314               	/* #APP */
 315               	 ;  63 "quantum/action_macro.c" 1
 316 00dc C491      		lpm r28, Z
 317               		
 318               	 ;  0 "" 2
 319               	.LVL35:
  63:quantum/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 320               		.loc 1 63 17 is_stmt 1 view .LVU87
  63:quantum/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 321               		.loc 1 63 17 is_stmt 0 view .LVU88
 322               	/* #NOAPP */
 323               	.LBE20:
  64:quantum/action_macro.c ****                 {
 324               		.loc 1 64 45 is_stmt 1 view .LVU89
 325               	.LBB21:
  66:quantum/action_macro.c ****                     while (ms--) wait_ms(1);
 326               		.loc 1 66 21 view .LVU90
  67:quantum/action_macro.c ****                 }
 327               		.loc 1 67 21 view .LVU91
 328               	.L13:
  67:quantum/action_macro.c ****                 }
 329               		.loc 1 67 34 discriminator 7 view .LVU92
  67:quantum/action_macro.c ****                 }
 330               		.loc 1 67 28 discriminator 7 view .LVU93
  67:quantum/action_macro.c ****                 }
 331               		.loc 1 67 28 is_stmt 0 discriminator 7 view .LVU94
 332 00de CC23      		tst r28
 333 00e0 01F0      		breq .L10
  67:quantum/action_macro.c ****                 }
 334               		.loc 1 67 34 is_stmt 1 view .LVU95
  67:quantum/action_macro.c ****                 }
 335               		.loc 1 67 34 view .LVU96
  67:quantum/action_macro.c ****                 }
 336               		.loc 1 67 34 view .LVU97
 337               	.LVL36:
 338               	.LBB22:
 339               	.LBI22:
 166:/usr/avr/include/util/delay.h **** {
 340               		.loc 2 166 1 view .LVU98
 341               	.LBB23:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 342               		.loc 2 168 2 view .LVU99
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 343               		.loc 2 172 2 view .LVU100
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 344               		.loc 2 173 2 view .LVU101
 174:/usr/avr/include/util/delay.h **** 
 345               		.loc 2 174 2 view .LVU102
 184:/usr/avr/include/util/delay.h **** 	#endif
 346               		.loc 2 184 3 view .LVU103
 187:/usr/avr/include/util/delay.h **** 
 347               		.loc 2 187 2 view .LVU104
 348 00e2 8FE9      		ldi r24,lo8(3999)
 349 00e4 9FE0      		ldi r25,hi8(3999)
 350 00e6 0197      	1:	sbiw r24,1
 351 00e8 01F4      		brne 1b
 352 00ea 00C0      		rjmp .
 353 00ec 0000      		nop
 354 00ee C150      		subi r28,lo8(-(-1))
 355               	.LVL37:
 356               		.loc 2 210 1 is_stmt 0 view .LVU105
 357 00f0 00C0      		rjmp .L13
 358               	.LVL38:
 359               	.L9:
 360               		.loc 2 210 1 view .LVU106
 361               	.LBE23:
 362               	.LBE22:
 363               	.LBE21:
  71:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 364               		.loc 1 71 17 is_stmt 1 view .LVU107
 365               	.LBB24:
  71:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 366               		.loc 1 71 28 view .LVU108
 367 00f2 0E5F      		subi r16,-2
 368 00f4 1F4F      		sbci r17,-1
 369               	.LVL39:
  71:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 370               		.loc 1 71 28 view .LVU109
  71:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 371               		.loc 1 71 28 view .LVU110
 372 00f6 FE01      		movw r30,r28
 373               	.LVL40:
  71:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 374               		.loc 1 71 28 is_stmt 0 view .LVU111
 375               	/* #APP */
 376               	 ;  71 "quantum/action_macro.c" 1
 377 00f8 F490      		lpm r15, Z
 378               		
 379               	 ;  0 "" 2
 380               	.LVL41:
  71:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 381               		.loc 1 71 28 is_stmt 1 view .LVU112
  71:quantum/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 382               		.loc 1 71 28 is_stmt 0 view .LVU113
 383               	/* #NOAPP */
 384               	.LBE24:
  72:quantum/action_macro.c ****                 break;
 385               		.loc 1 72 52 is_stmt 1 view .LVU114
  73:quantum/action_macro.c ****             case 0x04 ... 0x73:
 386               		.loc 1 73 17 view .LVU115
 387 00fa 00C0      		rjmp .L10
 388               		.cfi_endproc
 389               	.LFE108:
 391               		.text
 392               	.Letext0:
 393               		.file 3 "/usr/avr/include/stdint.h"
 394               		.file 4 "quantum/action_macro.h"
 395               		.file 5 "quantum/keycode.h"
 396               		.file 6 "quantum/action.h"
 397               		.file 7 "quantum/action_util.h"
 398               		.file 8 "/usr/avr/include/math.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_macro.c
     /tmp/cchUB7Il.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cchUB7Il.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cchUB7Il.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cchUB7Il.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cchUB7Il.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cchUB7Il.s:13     .text.action_macro_play:0000000000000000 action_macro_play

UNDEFINED SYMBOLS
register_code
unregister_code
add_macro_mods
send_keyboard_report
del_macro_mods
