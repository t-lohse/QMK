   1               		.file	"bootmagic_lite.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.bootmagic_lite_reset_eeprom,"ax",@progbits
  11               		.weak	bootmagic_lite_reset_eeprom
  13               	bootmagic_lite_reset_eeprom:
  14               	.LFB119:
  15               		.file 1 "quantum/bootmagic/bootmagic_lite.c"
   1:quantum/bootmagic/bootmagic_lite.c **** /* Copyright 2021 QMK
   2:quantum/bootmagic/bootmagic_lite.c ****  *
   3:quantum/bootmagic/bootmagic_lite.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/bootmagic/bootmagic_lite.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/bootmagic/bootmagic_lite.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:quantum/bootmagic/bootmagic_lite.c ****  * (at your option) any later version.
   7:quantum/bootmagic/bootmagic_lite.c ****  *
   8:quantum/bootmagic/bootmagic_lite.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/bootmagic/bootmagic_lite.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/bootmagic/bootmagic_lite.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/bootmagic/bootmagic_lite.c ****  * GNU General Public License for more details.
  12:quantum/bootmagic/bootmagic_lite.c ****  *
  13:quantum/bootmagic/bootmagic_lite.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/bootmagic/bootmagic_lite.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/bootmagic/bootmagic_lite.c ****  */
  16:quantum/bootmagic/bootmagic_lite.c **** #include "quantum.h"
  17:quantum/bootmagic/bootmagic_lite.c **** 
  18:quantum/bootmagic/bootmagic_lite.c **** /** \brief Reset eeprom
  19:quantum/bootmagic/bootmagic_lite.c ****  *
  20:quantum/bootmagic/bootmagic_lite.c ****  * ...just incase someone wants to only change the eeprom behaviour
  21:quantum/bootmagic/bootmagic_lite.c ****  */
  22:quantum/bootmagic/bootmagic_lite.c **** __attribute__((weak)) void bootmagic_lite_reset_eeprom(void) { eeconfig_disable(); }
  16               		.loc 1 22 62 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               		.loc 1 22 64 view .LVU1
  23 0000 0C94 0000 		jmp eeconfig_disable
  24               	.LVL0:
  25               		.cfi_endproc
  26               	.LFE119:
  28               		.section	.text.bootmagic_lite,"ax",@progbits
  29               		.weak	bootmagic_lite
  31               	bootmagic_lite:
  32               	.LFB120:
  23:quantum/bootmagic/bootmagic_lite.c **** 
  24:quantum/bootmagic/bootmagic_lite.c **** /** \brief The lite version of TMK's bootmagic based on Wilba.
  25:quantum/bootmagic/bootmagic_lite.c ****  *
  26:quantum/bootmagic/bootmagic_lite.c ****  *  100% less potential for accidentally making the keyboard do stupid things.
  27:quantum/bootmagic/bootmagic_lite.c ****  */
  28:quantum/bootmagic/bootmagic_lite.c **** __attribute__((weak)) void bootmagic_lite(void) {
  33               		.loc 1 28 49 view -0
  34               		.cfi_startproc
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 0 */
  38               	.L__stack_usage = 0
  29:quantum/bootmagic/bootmagic_lite.c ****     // We need multiple scans because debouncing can't be turned off.
  30:quantum/bootmagic/bootmagic_lite.c ****     matrix_scan();
  39               		.loc 1 30 5 view .LVU3
  40 0000 0E94 0000 		call matrix_scan
  41               	.LVL1:
  31:quantum/bootmagic/bootmagic_lite.c **** #if defined(DEBOUNCE) && DEBOUNCE > 0
  32:quantum/bootmagic/bootmagic_lite.c ****     wait_ms(DEBOUNCE * 2);
  33:quantum/bootmagic/bootmagic_lite.c **** #else
  34:quantum/bootmagic/bootmagic_lite.c ****     wait_ms(30);
  42               		.loc 1 34 5 view .LVU4
  43               		.loc 1 34 5 view .LVU5
  44               		.loc 1 34 5 view .LVU6
  45               	.LBB4:
  46               	.LBI4:
  47               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
  48               		.loc 2 166 1 view .LVU7
  49               	.LBB5:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
  50               		.loc 2 168 2 view .LVU8
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
  51               		.loc 2 172 2 view .LVU9
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
  52               		.loc 2 173 2 view .LVU10
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
  53               		.loc 2 174 2 view .LVU11
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
  54               		.loc 2 184 3 view .LVU12
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  55               		.loc 2 187 2 view .LVU13
  56 0004 2FEF      		ldi r18,lo8(95999)
  57 0006 86E7      		ldi r24,hi8(95999)
  58 0008 91E0      		ldi r25,hlo8(95999)
  59 000a 2150      	1:	subi r18,1
  60 000c 8040      		sbci r24,0
  61 000e 9040      		sbci r25,0
  62 0010 01F4      		brne 1b
  63 0012 00C0      		rjmp .
  64 0014 0000      		nop
  65               	.LVL2:
  66               		.loc 2 187 2 is_stmt 0 view .LVU14
  67               	.LBE5:
  68               	.LBE4:
  69               		.loc 1 34 5 is_stmt 1 view .LVU15
  35:quantum/bootmagic/bootmagic_lite.c **** #endif
  36:quantum/bootmagic/bootmagic_lite.c ****     matrix_scan();
  70               		.loc 1 36 5 view .LVU16
  71 0016 0E94 0000 		call matrix_scan
  72               	.LVL3:
  37:quantum/bootmagic/bootmagic_lite.c **** 
  38:quantum/bootmagic/bootmagic_lite.c ****     // If the configured key (commonly Esc) is held down on power up,
  39:quantum/bootmagic/bootmagic_lite.c ****     // reset the EEPROM valid state and jump to bootloader.
  40:quantum/bootmagic/bootmagic_lite.c ****     // This isn't very generalized, but we need something that doesn't
  41:quantum/bootmagic/bootmagic_lite.c ****     // rely on user's keymaps in firmware or EEPROM.
  42:quantum/bootmagic/bootmagic_lite.c ****     uint8_t row = BOOTMAGIC_LITE_ROW;
  73               		.loc 1 42 5 view .LVU17
  43:quantum/bootmagic/bootmagic_lite.c ****     uint8_t col = BOOTMAGIC_LITE_COLUMN;
  74               		.loc 1 43 5 view .LVU18
  44:quantum/bootmagic/bootmagic_lite.c **** 
  45:quantum/bootmagic/bootmagic_lite.c **** #if defined(SPLIT_KEYBOARD) && defined(BOOTMAGIC_LITE_ROW_RIGHT) && defined(BOOTMAGIC_LITE_COLUMN_R
  46:quantum/bootmagic/bootmagic_lite.c ****     if (!is_keyboard_left()) {
  47:quantum/bootmagic/bootmagic_lite.c ****         row = BOOTMAGIC_LITE_ROW_RIGHT;
  48:quantum/bootmagic/bootmagic_lite.c ****         col = BOOTMAGIC_LITE_COLUMN_RIGHT;
  49:quantum/bootmagic/bootmagic_lite.c ****     }
  50:quantum/bootmagic/bootmagic_lite.c **** #endif
  51:quantum/bootmagic/bootmagic_lite.c **** 
  52:quantum/bootmagic/bootmagic_lite.c ****     if (matrix_get_row(row) & (1 << col)) {
  75               		.loc 1 52 5 view .LVU19
  76               		.loc 1 52 9 is_stmt 0 view .LVU20
  77 001a 80E0      		ldi r24,0
  78 001c 0E94 0000 		call matrix_get_row
  79               	.LVL4:
  80               		.loc 1 52 8 view .LVU21
  81 0020 80FF      		sbrs r24,0
  82 0022 00C0      		rjmp .L2
  53:quantum/bootmagic/bootmagic_lite.c ****         bootmagic_lite_reset_eeprom();
  83               		.loc 1 53 9 is_stmt 1 view .LVU22
  84 0024 0E94 0000 		call bootmagic_lite_reset_eeprom
  85               	.LVL5:
  54:quantum/bootmagic/bootmagic_lite.c **** 
  55:quantum/bootmagic/bootmagic_lite.c ****         // Jump to bootloader.
  56:quantum/bootmagic/bootmagic_lite.c ****         bootloader_jump();
  86               		.loc 1 56 9 view .LVU23
  87 0028 0C94 0000 		jmp bootloader_jump
  88               	.LVL6:
  89               	.L2:
  90               	/* epilogue start */
  57:quantum/bootmagic/bootmagic_lite.c ****     }
  58:quantum/bootmagic/bootmagic_lite.c **** }
  91               		.loc 1 58 1 is_stmt 0 view .LVU24
  92 002c 0895      		ret
  93               		.cfi_endproc
  94               	.LFE120:
  96               		.section	.text.bootmagic,"ax",@progbits
  97               	.global	bootmagic
  99               	bootmagic:
 100               	.LFB121:
  59:quantum/bootmagic/bootmagic_lite.c **** 
  60:quantum/bootmagic/bootmagic_lite.c **** void bootmagic(void) { bootmagic_lite(); }
 101               		.loc 1 60 22 is_stmt 1 view -0
 102               		.cfi_startproc
 103               	/* prologue: function */
 104               	/* frame size = 0 */
 105               	/* stack size = 0 */
 106               	.L__stack_usage = 0
 107               		.loc 1 60 24 view .LVU26
 108 0000 0C94 0000 		jmp bootmagic_lite
 109               	.LVL7:
 110               		.cfi_endproc
 111               	.LFE121:
 113               		.text
 114               	.Letext0:
 115               		.file 3 "/usr/avr/include/stdint.h"
 116               		.file 4 "quantum/matrix.h"
 117               		.file 5 "/usr/avr/include/math.h"
 118               		.file 6 "tmk_core/common/bootloader.h"
 119               		.file 7 "quantum/eeconfig.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic_lite.c
     /tmp/cc6Ao5IY.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc6Ao5IY.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc6Ao5IY.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc6Ao5IY.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc6Ao5IY.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc6Ao5IY.s:13     .text.bootmagic_lite_reset_eeprom:0000000000000000 bootmagic_lite_reset_eeprom
     /tmp/cc6Ao5IY.s:31     .text.bootmagic_lite:0000000000000000 bootmagic_lite
     /tmp/cc6Ao5IY.s:99     .text.bootmagic:0000000000000000 bootmagic

UNDEFINED SYMBOLS
eeconfig_disable
matrix_scan
matrix_get_row
bootloader_jump
