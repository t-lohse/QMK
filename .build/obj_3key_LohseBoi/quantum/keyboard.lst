   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.last_input_activity_time,"ax",@progbits
  11               	.global	last_input_activity_time
  13               	last_input_activity_time:
  14               	.LFB107:
  15               		.file 1 "quantum/keyboard.c"
   1:quantum/keyboard.c **** /*
   2:quantum/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:quantum/keyboard.c **** 
   4:quantum/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:quantum/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:quantum/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:quantum/keyboard.c **** (at your option) any later version.
   8:quantum/keyboard.c **** 
   9:quantum/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:quantum/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:quantum/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:quantum/keyboard.c **** GNU General Public License for more details.
  13:quantum/keyboard.c **** 
  14:quantum/keyboard.c **** You should have received a copy of the GNU General Public License
  15:quantum/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:quantum/keyboard.c **** */
  17:quantum/keyboard.c **** 
  18:quantum/keyboard.c **** #include <stdint.h>
  19:quantum/keyboard.c **** #include "keyboard.h"
  20:quantum/keyboard.c **** #include "matrix.h"
  21:quantum/keyboard.c **** #include "keymap.h"
  22:quantum/keyboard.c **** #include "host.h"
  23:quantum/keyboard.c **** #include "led.h"
  24:quantum/keyboard.c **** #include "keycode.h"
  25:quantum/keyboard.c **** #include "timer.h"
  26:quantum/keyboard.c **** #include "sync_timer.h"
  27:quantum/keyboard.c **** #include "print.h"
  28:quantum/keyboard.c **** #include "debug.h"
  29:quantum/keyboard.c **** #include "command.h"
  30:quantum/keyboard.c **** #include "util.h"
  31:quantum/keyboard.c **** #include "sendchar.h"
  32:quantum/keyboard.c **** #include "eeconfig.h"
  33:quantum/keyboard.c **** #include "action_layer.h"
  34:quantum/keyboard.c **** #ifdef BACKLIGHT_ENABLE
  35:quantum/keyboard.c **** #    include "backlight.h"
  36:quantum/keyboard.c **** #endif
  37:quantum/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  38:quantum/keyboard.c **** #    include "mousekey.h"
  39:quantum/keyboard.c **** #endif
  40:quantum/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  41:quantum/keyboard.c **** #    include "ps2_mouse.h"
  42:quantum/keyboard.c **** #endif
  43:quantum/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  44:quantum/keyboard.c **** #    include "serial_mouse.h"
  45:quantum/keyboard.c **** #endif
  46:quantum/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  47:quantum/keyboard.c **** #    include "adb.h"
  48:quantum/keyboard.c **** #endif
  49:quantum/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  50:quantum/keyboard.c **** #    include "rgblight.h"
  51:quantum/keyboard.c **** #endif
  52:quantum/keyboard.c **** #ifdef LED_MATRIX_ENABLE
  53:quantum/keyboard.c **** #    include "led_matrix.h"
  54:quantum/keyboard.c **** #endif
  55:quantum/keyboard.c **** #ifdef RGB_MATRIX_ENABLE
  56:quantum/keyboard.c **** #    include "rgb_matrix.h"
  57:quantum/keyboard.c **** #endif
  58:quantum/keyboard.c **** #ifdef ENCODER_ENABLE
  59:quantum/keyboard.c **** #    include "encoder.h"
  60:quantum/keyboard.c **** #endif
  61:quantum/keyboard.c **** #ifdef STENO_ENABLE
  62:quantum/keyboard.c **** #    include "process_steno.h"
  63:quantum/keyboard.c **** #endif
  64:quantum/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  65:quantum/keyboard.c **** #    include "serial_link/system/serial_link.h"
  66:quantum/keyboard.c **** #endif
  67:quantum/keyboard.c **** #ifdef VISUALIZER_ENABLE
  68:quantum/keyboard.c **** #    include "visualizer/visualizer.h"
  69:quantum/keyboard.c **** #endif
  70:quantum/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
  71:quantum/keyboard.c **** #    include "pointing_device.h"
  72:quantum/keyboard.c **** #endif
  73:quantum/keyboard.c **** #ifdef MIDI_ENABLE
  74:quantum/keyboard.c **** #    include "process_midi.h"
  75:quantum/keyboard.c **** #endif
  76:quantum/keyboard.c **** #ifdef JOYSTICK_ENABLE
  77:quantum/keyboard.c **** #    include "process_joystick.h"
  78:quantum/keyboard.c **** #endif
  79:quantum/keyboard.c **** #ifdef HD44780_ENABLE
  80:quantum/keyboard.c **** #    include "hd44780.h"
  81:quantum/keyboard.c **** #endif
  82:quantum/keyboard.c **** #ifdef QWIIC_ENABLE
  83:quantum/keyboard.c **** #    include "qwiic.h"
  84:quantum/keyboard.c **** #endif
  85:quantum/keyboard.c **** #ifdef OLED_ENABLE
  86:quantum/keyboard.c **** #    include "oled_driver.h"
  87:quantum/keyboard.c **** #endif
  88:quantum/keyboard.c **** #ifdef ST7565_ENABLE
  89:quantum/keyboard.c **** #    include "st7565.h"
  90:quantum/keyboard.c **** #endif
  91:quantum/keyboard.c **** #ifdef VELOCIKEY_ENABLE
  92:quantum/keyboard.c **** #    include "velocikey.h"
  93:quantum/keyboard.c **** #endif
  94:quantum/keyboard.c **** #ifdef VIA_ENABLE
  95:quantum/keyboard.c **** #    include "via.h"
  96:quantum/keyboard.c **** #endif
  97:quantum/keyboard.c **** #ifdef DIP_SWITCH_ENABLE
  98:quantum/keyboard.c **** #    include "dip_switch.h"
  99:quantum/keyboard.c **** #endif
 100:quantum/keyboard.c **** #ifdef STM32_EEPROM_ENABLE
 101:quantum/keyboard.c **** #    include "eeprom_stm32.h"
 102:quantum/keyboard.c **** #endif
 103:quantum/keyboard.c **** #ifdef EEPROM_DRIVER
 104:quantum/keyboard.c **** #    include "eeprom_driver.h"
 105:quantum/keyboard.c **** #endif
 106:quantum/keyboard.c **** #if defined(CRC_ENABLE)
 107:quantum/keyboard.c **** #    include "crc.h"
 108:quantum/keyboard.c **** #endif
 109:quantum/keyboard.c **** #ifdef DIGITIZER_ENABLE
 110:quantum/keyboard.c **** #    include "digitizer.h"
 111:quantum/keyboard.c **** #endif
 112:quantum/keyboard.c **** 
 113:quantum/keyboard.c **** static uint32_t last_input_modification_time = 0;
 114:quantum/keyboard.c **** uint32_t        last_input_activity_time(void) { return last_input_modification_time; }
  16               		.loc 1 114 48 view -0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 00D0      		rcall .
  27 0006 00D0      		rcall .
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 8
  30 0008 CDB7      		in r28,__SP_L__
  31 000a DEB7      		in r29,__SP_H__
  32               	.LCFI3:
  33               		.cfi_def_cfa_register 28
  34               	/* prologue: function */
  35               	/* frame size = 4 */
  36               	/* stack size = 6 */
  37               	.L__stack_usage = 6
  38               		.loc 1 114 50 view .LVU1
  39               		.loc 1 114 57 is_stmt 0 view .LVU2
  40 000c 8091 0000 		lds r24,last_input_modification_time
  41 0010 9091 0000 		lds r25,last_input_modification_time+1
  42 0014 A091 0000 		lds r26,last_input_modification_time+2
  43 0018 B091 0000 		lds r27,last_input_modification_time+3
  44               		.loc 1 114 87 view .LVU3
  45 001c BC01      		movw r22,r24
  46 001e CD01      		movw r24,r26
  47               	/* epilogue start */
  48 0020 0F90      		pop __tmp_reg__
  49 0022 0F90      		pop __tmp_reg__
  50 0024 0F90      		pop __tmp_reg__
  51 0026 0F90      		pop __tmp_reg__
  52 0028 DF91      		pop r29
  53 002a CF91      		pop r28
  54 002c 0895      		ret
  55               		.cfi_endproc
  56               	.LFE107:
  58               		.section	.text.last_input_activity_elapsed,"ax",@progbits
  59               	.global	last_input_activity_elapsed
  61               	last_input_activity_elapsed:
  62               	.LFB108:
 115:quantum/keyboard.c **** uint32_t        last_input_activity_elapsed(void) { return timer_elapsed32(last_input_modification_
  63               		.loc 1 115 51 is_stmt 1 view -0
  64               		.cfi_startproc
  65 0000 CF93      		push r28
  66               	.LCFI4:
  67               		.cfi_def_cfa_offset 3
  68               		.cfi_offset 28, -2
  69 0002 DF93      		push r29
  70               	.LCFI5:
  71               		.cfi_def_cfa_offset 4
  72               		.cfi_offset 29, -3
  73 0004 00D0      		rcall .
  74 0006 00D0      		rcall .
  75               	.LCFI6:
  76               		.cfi_def_cfa_offset 8
  77 0008 CDB7      		in r28,__SP_L__
  78 000a DEB7      		in r29,__SP_H__
  79               	.LCFI7:
  80               		.cfi_def_cfa_register 28
  81               	/* prologue: function */
  82               	/* frame size = 4 */
  83               	/* stack size = 6 */
  84               	.L__stack_usage = 6
  85               		.loc 1 115 53 view .LVU5
  86               		.loc 1 115 60 is_stmt 0 view .LVU6
  87 000c 8091 0000 		lds r24,last_input_modification_time
  88 0010 9091 0000 		lds r25,last_input_modification_time+1
  89 0014 A091 0000 		lds r26,last_input_modification_time+2
  90 0018 B091 0000 		lds r27,last_input_modification_time+3
  91 001c 8983      		std Y+1,r24
  92 001e 9A83      		std Y+2,r25
  93 0020 AB83      		std Y+3,r26
  94 0022 BC83      		std Y+4,r27
  95 0024 BC01      		movw r22,r24
  96 0026 CD01      		movw r24,r26
  97               	/* epilogue start */
  98               		.loc 1 115 107 view .LVU7
  99 0028 0F90      		pop __tmp_reg__
 100 002a 0F90      		pop __tmp_reg__
 101 002c 0F90      		pop __tmp_reg__
 102 002e 0F90      		pop __tmp_reg__
 103 0030 DF91      		pop r29
 104 0032 CF91      		pop r28
 105               		.loc 1 115 60 view .LVU8
 106 0034 0C94 0000 		jmp timer_elapsed32
 107               	.LVL0:
 108               		.cfi_endproc
 109               	.LFE108:
 111               		.section	.text.last_matrix_activity_time,"ax",@progbits
 112               	.global	last_matrix_activity_time
 114               	last_matrix_activity_time:
 115               	.LFB109:
 116:quantum/keyboard.c **** 
 117:quantum/keyboard.c **** static uint32_t last_matrix_modification_time = 0;
 118:quantum/keyboard.c **** uint32_t        last_matrix_activity_time(void) { return last_matrix_modification_time; }
 116               		.loc 1 118 49 is_stmt 1 view -0
 117               		.cfi_startproc
 118 0000 CF93      		push r28
 119               	.LCFI8:
 120               		.cfi_def_cfa_offset 3
 121               		.cfi_offset 28, -2
 122 0002 DF93      		push r29
 123               	.LCFI9:
 124               		.cfi_def_cfa_offset 4
 125               		.cfi_offset 29, -3
 126 0004 00D0      		rcall .
 127 0006 00D0      		rcall .
 128               	.LCFI10:
 129               		.cfi_def_cfa_offset 8
 130 0008 CDB7      		in r28,__SP_L__
 131 000a DEB7      		in r29,__SP_H__
 132               	.LCFI11:
 133               		.cfi_def_cfa_register 28
 134               	/* prologue: function */
 135               	/* frame size = 4 */
 136               	/* stack size = 6 */
 137               	.L__stack_usage = 6
 138               		.loc 1 118 51 view .LVU10
 139               		.loc 1 118 58 is_stmt 0 view .LVU11
 140 000c 8091 0000 		lds r24,last_matrix_modification_time
 141 0010 9091 0000 		lds r25,last_matrix_modification_time+1
 142 0014 A091 0000 		lds r26,last_matrix_modification_time+2
 143 0018 B091 0000 		lds r27,last_matrix_modification_time+3
 144               		.loc 1 118 89 view .LVU12
 145 001c BC01      		movw r22,r24
 146 001e CD01      		movw r24,r26
 147               	/* epilogue start */
 148 0020 0F90      		pop __tmp_reg__
 149 0022 0F90      		pop __tmp_reg__
 150 0024 0F90      		pop __tmp_reg__
 151 0026 0F90      		pop __tmp_reg__
 152 0028 DF91      		pop r29
 153 002a CF91      		pop r28
 154 002c 0895      		ret
 155               		.cfi_endproc
 156               	.LFE109:
 158               		.section	.text.last_matrix_activity_elapsed,"ax",@progbits
 159               	.global	last_matrix_activity_elapsed
 161               	last_matrix_activity_elapsed:
 162               	.LFB110:
 119:quantum/keyboard.c **** uint32_t        last_matrix_activity_elapsed(void) { return timer_elapsed32(last_matrix_modificatio
 163               		.loc 1 119 52 is_stmt 1 view -0
 164               		.cfi_startproc
 165 0000 CF93      		push r28
 166               	.LCFI12:
 167               		.cfi_def_cfa_offset 3
 168               		.cfi_offset 28, -2
 169 0002 DF93      		push r29
 170               	.LCFI13:
 171               		.cfi_def_cfa_offset 4
 172               		.cfi_offset 29, -3
 173 0004 00D0      		rcall .
 174 0006 00D0      		rcall .
 175               	.LCFI14:
 176               		.cfi_def_cfa_offset 8
 177 0008 CDB7      		in r28,__SP_L__
 178 000a DEB7      		in r29,__SP_H__
 179               	.LCFI15:
 180               		.cfi_def_cfa_register 28
 181               	/* prologue: function */
 182               	/* frame size = 4 */
 183               	/* stack size = 6 */
 184               	.L__stack_usage = 6
 185               		.loc 1 119 54 view .LVU14
 186               		.loc 1 119 61 is_stmt 0 view .LVU15
 187 000c 8091 0000 		lds r24,last_matrix_modification_time
 188 0010 9091 0000 		lds r25,last_matrix_modification_time+1
 189 0014 A091 0000 		lds r26,last_matrix_modification_time+2
 190 0018 B091 0000 		lds r27,last_matrix_modification_time+3
 191 001c 8983      		std Y+1,r24
 192 001e 9A83      		std Y+2,r25
 193 0020 AB83      		std Y+3,r26
 194 0022 BC83      		std Y+4,r27
 195 0024 BC01      		movw r22,r24
 196 0026 CD01      		movw r24,r26
 197               	/* epilogue start */
 198               		.loc 1 119 109 view .LVU16
 199 0028 0F90      		pop __tmp_reg__
 200 002a 0F90      		pop __tmp_reg__
 201 002c 0F90      		pop __tmp_reg__
 202 002e 0F90      		pop __tmp_reg__
 203 0030 DF91      		pop r29
 204 0032 CF91      		pop r28
 205               		.loc 1 119 61 view .LVU17
 206 0034 0C94 0000 		jmp timer_elapsed32
 207               	.LVL1:
 208               		.cfi_endproc
 209               	.LFE110:
 211               		.section	.text.last_matrix_activity_trigger,"ax",@progbits
 212               	.global	last_matrix_activity_trigger
 214               	last_matrix_activity_trigger:
 215               	.LFB111:
 120:quantum/keyboard.c **** void            last_matrix_activity_trigger(void) { last_matrix_modification_time = last_input_mod
 216               		.loc 1 120 52 is_stmt 1 view -0
 217               		.cfi_startproc
 218               	/* prologue: function */
 219               	/* frame size = 0 */
 220               	/* stack size = 0 */
 221               	.L__stack_usage = 0
 222               		.loc 1 120 54 view .LVU19
 223               		.loc 1 120 117 is_stmt 0 view .LVU20
 224 0000 0E94 0000 		call timer_read32
 225               	.LVL2:
 226               		.loc 1 120 115 view .LVU21
 227 0004 6093 0000 		sts last_input_modification_time,r22
 228 0008 7093 0000 		sts last_input_modification_time+1,r23
 229 000c 8093 0000 		sts last_input_modification_time+2,r24
 230 0010 9093 0000 		sts last_input_modification_time+3,r25
 231               		.loc 1 120 84 view .LVU22
 232 0014 6093 0000 		sts last_matrix_modification_time,r22
 233 0018 7093 0000 		sts last_matrix_modification_time+1,r23
 234 001c 8093 0000 		sts last_matrix_modification_time+2,r24
 235 0020 9093 0000 		sts last_matrix_modification_time+3,r25
 236               	/* epilogue start */
 237               		.loc 1 120 133 view .LVU23
 238 0024 0895      		ret
 239               		.cfi_endproc
 240               	.LFE111:
 242               		.section	.text.last_encoder_activity_time,"ax",@progbits
 243               	.global	last_encoder_activity_time
 245               	last_encoder_activity_time:
 246               	.LFB112:
 121:quantum/keyboard.c **** 
 122:quantum/keyboard.c **** static uint32_t last_encoder_modification_time = 0;
 123:quantum/keyboard.c **** uint32_t        last_encoder_activity_time(void) { return last_encoder_modification_time; }
 247               		.loc 1 123 50 is_stmt 1 view -0
 248               		.cfi_startproc
 249 0000 CF93      		push r28
 250               	.LCFI16:
 251               		.cfi_def_cfa_offset 3
 252               		.cfi_offset 28, -2
 253 0002 DF93      		push r29
 254               	.LCFI17:
 255               		.cfi_def_cfa_offset 4
 256               		.cfi_offset 29, -3
 257 0004 00D0      		rcall .
 258 0006 00D0      		rcall .
 259               	.LCFI18:
 260               		.cfi_def_cfa_offset 8
 261 0008 CDB7      		in r28,__SP_L__
 262 000a DEB7      		in r29,__SP_H__
 263               	.LCFI19:
 264               		.cfi_def_cfa_register 28
 265               	/* prologue: function */
 266               	/* frame size = 4 */
 267               	/* stack size = 6 */
 268               	.L__stack_usage = 6
 269               		.loc 1 123 52 view .LVU25
 270               		.loc 1 123 59 is_stmt 0 view .LVU26
 271 000c 8091 0000 		lds r24,last_encoder_modification_time
 272 0010 9091 0000 		lds r25,last_encoder_modification_time+1
 273 0014 A091 0000 		lds r26,last_encoder_modification_time+2
 274 0018 B091 0000 		lds r27,last_encoder_modification_time+3
 275               		.loc 1 123 91 view .LVU27
 276 001c BC01      		movw r22,r24
 277 001e CD01      		movw r24,r26
 278               	/* epilogue start */
 279 0020 0F90      		pop __tmp_reg__
 280 0022 0F90      		pop __tmp_reg__
 281 0024 0F90      		pop __tmp_reg__
 282 0026 0F90      		pop __tmp_reg__
 283 0028 DF91      		pop r29
 284 002a CF91      		pop r28
 285 002c 0895      		ret
 286               		.cfi_endproc
 287               	.LFE112:
 289               		.section	.text.last_encoder_activity_elapsed,"ax",@progbits
 290               	.global	last_encoder_activity_elapsed
 292               	last_encoder_activity_elapsed:
 293               	.LFB113:
 124:quantum/keyboard.c **** uint32_t        last_encoder_activity_elapsed(void) { return timer_elapsed32(last_encoder_modificat
 294               		.loc 1 124 53 is_stmt 1 view -0
 295               		.cfi_startproc
 296 0000 CF93      		push r28
 297               	.LCFI20:
 298               		.cfi_def_cfa_offset 3
 299               		.cfi_offset 28, -2
 300 0002 DF93      		push r29
 301               	.LCFI21:
 302               		.cfi_def_cfa_offset 4
 303               		.cfi_offset 29, -3
 304 0004 00D0      		rcall .
 305 0006 00D0      		rcall .
 306               	.LCFI22:
 307               		.cfi_def_cfa_offset 8
 308 0008 CDB7      		in r28,__SP_L__
 309 000a DEB7      		in r29,__SP_H__
 310               	.LCFI23:
 311               		.cfi_def_cfa_register 28
 312               	/* prologue: function */
 313               	/* frame size = 4 */
 314               	/* stack size = 6 */
 315               	.L__stack_usage = 6
 316               		.loc 1 124 55 view .LVU29
 317               		.loc 1 124 62 is_stmt 0 view .LVU30
 318 000c 8091 0000 		lds r24,last_encoder_modification_time
 319 0010 9091 0000 		lds r25,last_encoder_modification_time+1
 320 0014 A091 0000 		lds r26,last_encoder_modification_time+2
 321 0018 B091 0000 		lds r27,last_encoder_modification_time+3
 322 001c 8983      		std Y+1,r24
 323 001e 9A83      		std Y+2,r25
 324 0020 AB83      		std Y+3,r26
 325 0022 BC83      		std Y+4,r27
 326 0024 BC01      		movw r22,r24
 327 0026 CD01      		movw r24,r26
 328               	/* epilogue start */
 329               		.loc 1 124 111 view .LVU31
 330 0028 0F90      		pop __tmp_reg__
 331 002a 0F90      		pop __tmp_reg__
 332 002c 0F90      		pop __tmp_reg__
 333 002e 0F90      		pop __tmp_reg__
 334 0030 DF91      		pop r29
 335 0032 CF91      		pop r28
 336               		.loc 1 124 62 view .LVU32
 337 0034 0C94 0000 		jmp timer_elapsed32
 338               	.LVL3:
 339               		.cfi_endproc
 340               	.LFE113:
 342               		.section	.text.last_encoder_activity_trigger,"ax",@progbits
 343               	.global	last_encoder_activity_trigger
 345               	last_encoder_activity_trigger:
 346               	.LFB114:
 125:quantum/keyboard.c **** void            last_encoder_activity_trigger(void) { last_encoder_modification_time = last_input_m
 347               		.loc 1 125 53 is_stmt 1 view -0
 348               		.cfi_startproc
 349               	/* prologue: function */
 350               	/* frame size = 0 */
 351               	/* stack size = 0 */
 352               	.L__stack_usage = 0
 353               		.loc 1 125 55 view .LVU34
 354               		.loc 1 125 119 is_stmt 0 view .LVU35
 355 0000 0E94 0000 		call timer_read32
 356               	.LVL4:
 357               		.loc 1 125 117 view .LVU36
 358 0004 6093 0000 		sts last_input_modification_time,r22
 359 0008 7093 0000 		sts last_input_modification_time+1,r23
 360 000c 8093 0000 		sts last_input_modification_time+2,r24
 361 0010 9093 0000 		sts last_input_modification_time+3,r25
 362               		.loc 1 125 86 view .LVU37
 363 0014 6093 0000 		sts last_encoder_modification_time,r22
 364 0018 7093 0000 		sts last_encoder_modification_time+1,r23
 365 001c 8093 0000 		sts last_encoder_modification_time+2,r24
 366 0020 9093 0000 		sts last_encoder_modification_time+3,r25
 367               	/* epilogue start */
 368               		.loc 1 125 135 view .LVU38
 369 0024 0895      		ret
 370               		.cfi_endproc
 371               	.LFE114:
 373               		.section	.text.disable_jtag,"ax",@progbits
 374               	.global	disable_jtag
 376               	disable_jtag:
 377               	.LFB115:
 126:quantum/keyboard.c **** 
 127:quantum/keyboard.c **** // Only enable this if console is enabled to print to
 128:quantum/keyboard.c **** #if defined(DEBUG_MATRIX_SCAN_RATE)
 129:quantum/keyboard.c **** static uint32_t matrix_timer           = 0;
 130:quantum/keyboard.c **** static uint32_t matrix_scan_count      = 0;
 131:quantum/keyboard.c **** static uint32_t last_matrix_scan_count = 0;
 132:quantum/keyboard.c **** 
 133:quantum/keyboard.c **** void matrix_scan_perf_task(void) {
 134:quantum/keyboard.c ****     matrix_scan_count++;
 135:quantum/keyboard.c **** 
 136:quantum/keyboard.c ****     uint32_t timer_now = timer_read32();
 137:quantum/keyboard.c ****     if (TIMER_DIFF_32(timer_now, matrix_timer) > 1000) {
 138:quantum/keyboard.c **** #    if defined(CONSOLE_ENABLE)
 139:quantum/keyboard.c ****         dprintf("matrix scan frequency: %lu\n", matrix_scan_count);
 140:quantum/keyboard.c **** #    endif
 141:quantum/keyboard.c ****         last_matrix_scan_count = matrix_scan_count;
 142:quantum/keyboard.c ****         matrix_timer           = timer_now;
 143:quantum/keyboard.c ****         matrix_scan_count      = 0;
 144:quantum/keyboard.c ****     }
 145:quantum/keyboard.c **** }
 146:quantum/keyboard.c **** 
 147:quantum/keyboard.c **** uint32_t get_matrix_scan_rate(void) { return last_matrix_scan_count; }
 148:quantum/keyboard.c **** #else
 149:quantum/keyboard.c **** #    define matrix_scan_perf_task()
 150:quantum/keyboard.c **** #endif
 151:quantum/keyboard.c **** 
 152:quantum/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 153:quantum/keyboard.c **** extern const uint16_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
 154:quantum/keyboard.c **** static matrix_row_t   get_real_keys(uint8_t row, matrix_row_t rowdata) {
 155:quantum/keyboard.c ****     matrix_row_t out = 0;
 156:quantum/keyboard.c ****     for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 157:quantum/keyboard.c ****         // read each key in the row data and check if the keymap defines it as a real key
 158:quantum/keyboard.c ****         if (pgm_read_byte(&keymaps[0][row][col]) && (rowdata & (1 << col))) {
 159:quantum/keyboard.c ****             // this creates new row data, if a key is defined in the keymap, it will be set here
 160:quantum/keyboard.c ****             out |= 1 << col;
 161:quantum/keyboard.c ****         }
 162:quantum/keyboard.c ****     }
 163:quantum/keyboard.c ****     return out;
 164:quantum/keyboard.c **** }
 165:quantum/keyboard.c **** 
 166:quantum/keyboard.c **** static inline bool popcount_more_than_one(matrix_row_t rowdata) {
 167:quantum/keyboard.c ****     rowdata &= rowdata - 1;  // if there are less than two bits (keys) set, rowdata will become zer
 168:quantum/keyboard.c ****     return rowdata;
 169:quantum/keyboard.c **** }
 170:quantum/keyboard.c **** 
 171:quantum/keyboard.c **** static inline bool has_ghost_in_row(uint8_t row, matrix_row_t rowdata) {
 172:quantum/keyboard.c ****     /* No ghost exists when less than 2 keys are down on the row.
 173:quantum/keyboard.c ****     If there are "active" blanks in the matrix, the key can't be pressed by the user,
 174:quantum/keyboard.c ****     there is no doubt as to which keys are really being pressed.
 175:quantum/keyboard.c ****     The ghosts will be ignored, they are KC_NO.   */
 176:quantum/keyboard.c ****     rowdata = get_real_keys(row, rowdata);
 177:quantum/keyboard.c ****     if ((popcount_more_than_one(rowdata)) == 0) {
 178:quantum/keyboard.c ****         return false;
 179:quantum/keyboard.c ****     }
 180:quantum/keyboard.c ****     /* Ghost occurs when the row shares a column line with other row,
 181:quantum/keyboard.c ****     and two columns are read on each row. Blanks in the matrix don't matter,
 182:quantum/keyboard.c ****     so they are filtered out.
 183:quantum/keyboard.c ****     If there are two or more real keys pressed and they match columns with
 184:quantum/keyboard.c ****     at least two of another row's real keys, the row will be ignored. Keep in mind,
 185:quantum/keyboard.c ****     we are checking one row at a time, not all of them at once.
 186:quantum/keyboard.c ****     */
 187:quantum/keyboard.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 188:quantum/keyboard.c ****         if (i != row && popcount_more_than_one(get_real_keys(i, matrix_get_row(i)) & rowdata)) {
 189:quantum/keyboard.c ****             return true;
 190:quantum/keyboard.c ****         }
 191:quantum/keyboard.c ****     }
 192:quantum/keyboard.c ****     return false;
 193:quantum/keyboard.c **** }
 194:quantum/keyboard.c **** 
 195:quantum/keyboard.c **** #endif
 196:quantum/keyboard.c **** 
 197:quantum/keyboard.c **** void disable_jtag(void) {
 378               		.loc 1 197 25 is_stmt 1 view -0
 379               		.cfi_startproc
 380               	/* prologue: function */
 381               	/* frame size = 0 */
 382               	/* stack size = 0 */
 383               	.L__stack_usage = 0
 198:quantum/keyboard.c **** // To use PF4-7 (PC2-5 on ATmega32A), disable JTAG by writing JTD bit twice within four cycles.
 199:quantum/keyboard.c **** #if (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286__) || 
 200:quantum/keyboard.c ****     MCUCR |= _BV(JTD);
 384               		.loc 1 200 5 view .LVU40
 385               		.loc 1 200 11 is_stmt 0 view .LVU41
 386 0000 85B7      		in r24,0x35
 387 0002 8068      		ori r24,lo8(-128)
 388 0004 85BF      		out 0x35,r24
 201:quantum/keyboard.c ****     MCUCR |= _BV(JTD);
 389               		.loc 1 201 5 is_stmt 1 view .LVU42
 390               		.loc 1 201 11 is_stmt 0 view .LVU43
 391 0006 85B7      		in r24,0x35
 392 0008 8068      		ori r24,lo8(-128)
 393 000a 85BF      		out 0x35,r24
 394               	/* epilogue start */
 202:quantum/keyboard.c **** #elif defined(__AVR_ATmega32A__)
 203:quantum/keyboard.c ****     MCUCSR |= _BV(JTD);
 204:quantum/keyboard.c ****     MCUCSR |= _BV(JTD);
 205:quantum/keyboard.c **** #endif
 206:quantum/keyboard.c **** }
 395               		.loc 1 206 1 view .LVU44
 396 000c 0895      		ret
 397               		.cfi_endproc
 398               	.LFE115:
 400               		.section	.text.keyboard_pre_init_user,"ax",@progbits
 401               		.weak	keyboard_pre_init_user
 403               	keyboard_pre_init_user:
 404               	.LFB117:
 207:quantum/keyboard.c **** 
 208:quantum/keyboard.c **** /** \brief matrix_setup
 209:quantum/keyboard.c ****  *
 210:quantum/keyboard.c ****  * FIXME: needs doc
 211:quantum/keyboard.c ****  */
 212:quantum/keyboard.c **** __attribute__((weak)) void matrix_setup(void) {}
 213:quantum/keyboard.c **** 
 214:quantum/keyboard.c **** /** \brief keyboard_pre_init_user
 215:quantum/keyboard.c ****  *
 216:quantum/keyboard.c ****  * FIXME: needs doc
 217:quantum/keyboard.c ****  */
 218:quantum/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_user(void) {}
 405               		.loc 1 218 57 is_stmt 1 view -0
 406               		.cfi_startproc
 407               	/* prologue: function */
 408               	/* frame size = 0 */
 409               	/* stack size = 0 */
 410               	.L__stack_usage = 0
 411               		.loc 1 218 58 view .LVU46
 412               	/* epilogue start */
 413 0000 0895      		ret
 414               		.cfi_endproc
 415               	.LFE117:
 417               		.set	keyboard_pre_init_user.localalias,keyboard_pre_init_user
 418               		.section	.text.matrix_setup,"ax",@progbits
 419               		.weak	matrix_setup
 421               	matrix_setup:
 422               	.LFB141:
 423               		.cfi_startproc
 424               	/* prologue: function */
 425               	/* frame size = 0 */
 426               	/* stack size = 0 */
 427               	.L__stack_usage = 0
 428               	/* epilogue start */
 429 0000 0895      		ret
 430               		.cfi_endproc
 431               	.LFE141:
 433               		.section	.text.keyboard_pre_init_kb,"ax",@progbits
 434               		.weak	keyboard_pre_init_kb
 436               	keyboard_pre_init_kb:
 437               	.LFB118:
 219:quantum/keyboard.c **** 
 220:quantum/keyboard.c **** /** \brief keyboard_pre_init_kb
 221:quantum/keyboard.c ****  *
 222:quantum/keyboard.c ****  * FIXME: needs doc
 223:quantum/keyboard.c ****  */
 224:quantum/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_kb(void) { keyboard_pre_init_user(); }
 438               		.loc 1 224 55 view -0
 439               		.cfi_startproc
 440               	/* prologue: function */
 441               	/* frame size = 0 */
 442               	/* stack size = 0 */
 443               	.L__stack_usage = 0
 444               		.loc 1 224 57 view .LVU48
 445 0000 0C94 0000 		jmp keyboard_pre_init_user
 446               	.LVL5:
 447               		.cfi_endproc
 448               	.LFE118:
 450               		.section	.text.keyboard_post_init_user,"ax",@progbits
 451               		.weak	keyboard_post_init_user
 453               	keyboard_post_init_user:
 454               	.LFB135:
 455               		.cfi_startproc
 456               	/* prologue: function */
 457               	/* frame size = 0 */
 458               	/* stack size = 0 */
 459               	.L__stack_usage = 0
 460               	/* epilogue start */
 461 0000 0895      		ret
 462               		.cfi_endproc
 463               	.LFE135:
 465               		.section	.text.keyboard_post_init_kb,"ax",@progbits
 466               		.weak	keyboard_post_init_kb
 468               	keyboard_post_init_kb:
 469               	.LFB120:
 225:quantum/keyboard.c **** 
 226:quantum/keyboard.c **** /** \brief keyboard_post_init_user
 227:quantum/keyboard.c ****  *
 228:quantum/keyboard.c ****  * FIXME: needs doc
 229:quantum/keyboard.c ****  */
 230:quantum/keyboard.c **** 
 231:quantum/keyboard.c **** __attribute__((weak)) void keyboard_post_init_user() {}
 232:quantum/keyboard.c **** 
 233:quantum/keyboard.c **** /** \brief keyboard_post_init_kb
 234:quantum/keyboard.c ****  *
 235:quantum/keyboard.c ****  * FIXME: needs doc
 236:quantum/keyboard.c ****  */
 237:quantum/keyboard.c **** 
 238:quantum/keyboard.c **** __attribute__((weak)) void keyboard_post_init_kb(void) { keyboard_post_init_user(); }
 470               		.loc 1 238 56 view -0
 471               		.cfi_startproc
 472               	/* prologue: function */
 473               	/* frame size = 0 */
 474               	/* stack size = 0 */
 475               	.L__stack_usage = 0
 476               		.loc 1 238 58 view .LVU50
 477 0000 0C94 0000 		jmp keyboard_post_init_user
 478               	.LVL6:
 479               		.cfi_endproc
 480               	.LFE120:
 482               		.section	.text.keyboard_setup,"ax",@progbits
 483               	.global	keyboard_setup
 485               	keyboard_setup:
 486               	.LFB121:
 239:quantum/keyboard.c **** 
 240:quantum/keyboard.c **** /** \brief keyboard_setup
 241:quantum/keyboard.c ****  *
 242:quantum/keyboard.c ****  * FIXME: needs doc
 243:quantum/keyboard.c ****  */
 244:quantum/keyboard.c **** void keyboard_setup(void) {
 487               		.loc 1 244 27 view -0
 488               		.cfi_startproc
 489               	/* prologue: function */
 490               	/* frame size = 0 */
 491               	/* stack size = 0 */
 492               	.L__stack_usage = 0
 245:quantum/keyboard.c **** #ifndef NO_JTAG_DISABLE
 246:quantum/keyboard.c ****     disable_jtag();
 493               		.loc 1 246 5 view .LVU52
 494 0000 0E94 0000 		call disable_jtag
 495               	.LVL7:
 247:quantum/keyboard.c **** #endif
 248:quantum/keyboard.c ****     print_set_sendchar(sendchar);
 496               		.loc 1 248 5 view .LVU53
 497 0004 80E0      		ldi r24,lo8(gs(sendchar))
 498 0006 90E0      		ldi r25,hi8(gs(sendchar))
 499 0008 0E94 0000 		call print_set_sendchar
 500               	.LVL8:
 249:quantum/keyboard.c **** #ifdef STM32_EEPROM_ENABLE
 250:quantum/keyboard.c ****     EEPROM_Init();
 251:quantum/keyboard.c **** #endif
 252:quantum/keyboard.c **** #ifdef EEPROM_DRIVER
 253:quantum/keyboard.c ****     eeprom_driver_init();
 254:quantum/keyboard.c **** #endif
 255:quantum/keyboard.c ****     matrix_setup();
 501               		.loc 1 255 5 view .LVU54
 502 000c 0E94 0000 		call matrix_setup
 503               	.LVL9:
 256:quantum/keyboard.c ****     keyboard_pre_init_kb();
 504               		.loc 1 256 5 view .LVU55
 505 0010 0C94 0000 		jmp keyboard_pre_init_kb
 506               	.LVL10:
 507               		.cfi_endproc
 508               	.LFE121:
 510               		.section	.text.is_keyboard_master,"ax",@progbits
 511               		.weak	is_keyboard_master
 513               	is_keyboard_master:
 514               	.LFB122:
 257:quantum/keyboard.c **** }
 258:quantum/keyboard.c **** 
 259:quantum/keyboard.c **** #ifndef SPLIT_KEYBOARD
 260:quantum/keyboard.c **** 
 261:quantum/keyboard.c **** /** \brief is_keyboard_master
 262:quantum/keyboard.c ****  *
 263:quantum/keyboard.c ****  * FIXME: needs doc
 264:quantum/keyboard.c ****  */
 265:quantum/keyboard.c **** __attribute__((weak)) bool is_keyboard_master(void) { return true; }
 515               		.loc 1 265 53 view -0
 516               		.cfi_startproc
 517               	/* prologue: function */
 518               	/* frame size = 0 */
 519               	/* stack size = 0 */
 520               	.L__stack_usage = 0
 521               		.loc 1 265 55 view .LVU57
 522               		.loc 1 265 68 is_stmt 0 view .LVU58
 523 0000 81E0      		ldi r24,lo8(1)
 524               	/* epilogue start */
 525 0002 0895      		ret
 526               		.cfi_endproc
 527               	.LFE122:
 529               		.set	is_keyboard_master.localalias,is_keyboard_master
 530               		.section	.text.is_keyboard_left,"ax",@progbits
 531               		.weak	is_keyboard_left
 533               	is_keyboard_left:
 534               	.LFB133:
 535               		.cfi_startproc
 536               	/* prologue: function */
 537               	/* frame size = 0 */
 538               	/* stack size = 0 */
 539               	.L__stack_usage = 0
 540 0000 0C94 0000 		jmp is_keyboard_master.localalias
 541               		.cfi_endproc
 542               	.LFE133:
 544               		.section	.text.should_process_keypress,"ax",@progbits
 545               		.weak	should_process_keypress
 547               	should_process_keypress:
 548               	.LFB124:
 266:quantum/keyboard.c **** 
 267:quantum/keyboard.c **** /** \brief is_keyboard_left
 268:quantum/keyboard.c ****  *
 269:quantum/keyboard.c ****  * FIXME: needs doc
 270:quantum/keyboard.c ****  */
 271:quantum/keyboard.c **** __attribute__((weak)) bool is_keyboard_left(void) { return true; }
 272:quantum/keyboard.c **** 
 273:quantum/keyboard.c **** #endif
 274:quantum/keyboard.c **** 
 275:quantum/keyboard.c **** /** \brief should_process_keypress
 276:quantum/keyboard.c ****  *
 277:quantum/keyboard.c ****  * Override this function if you have a condition where keypresses processing should change:
 278:quantum/keyboard.c ****  *   - splits where the slave side needs to process for rgb/oled functionality
 279:quantum/keyboard.c ****  */
 280:quantum/keyboard.c **** __attribute__((weak)) bool should_process_keypress(void) { return is_keyboard_master(); }
 549               		.loc 1 280 58 is_stmt 1 view -0
 550               		.cfi_startproc
 551               	/* prologue: function */
 552               	/* frame size = 0 */
 553               	/* stack size = 0 */
 554               	.L__stack_usage = 0
 555               		.loc 1 280 60 view .LVU60
 556               		.loc 1 280 67 is_stmt 0 view .LVU61
 557 0000 0C94 0000 		jmp is_keyboard_master
 558               	.LVL11:
 559               		.cfi_endproc
 560               	.LFE124:
 562               		.section	.text.housekeeping_task_kb,"ax",@progbits
 563               		.weak	housekeeping_task_kb
 565               	housekeeping_task_kb:
 566               	.LFB137:
 567               		.cfi_startproc
 568               	/* prologue: function */
 569               	/* frame size = 0 */
 570               	/* stack size = 0 */
 571               	.L__stack_usage = 0
 572               	/* epilogue start */
 573 0000 0895      		ret
 574               		.cfi_endproc
 575               	.LFE137:
 577               		.section	.text.housekeeping_task_user,"ax",@progbits
 578               		.weak	housekeeping_task_user
 580               	housekeeping_task_user:
 581               	.LFB139:
 582               		.cfi_startproc
 583               	/* prologue: function */
 584               	/* frame size = 0 */
 585               	/* stack size = 0 */
 586               	.L__stack_usage = 0
 587               	/* epilogue start */
 588 0000 0895      		ret
 589               		.cfi_endproc
 590               	.LFE139:
 592               		.section	.text.housekeeping_task,"ax",@progbits
 593               	.global	housekeeping_task
 595               	housekeeping_task:
 596               	.LFB127:
 281:quantum/keyboard.c **** 
 282:quantum/keyboard.c **** /** \brief housekeeping_task_kb
 283:quantum/keyboard.c ****  *
 284:quantum/keyboard.c ****  * Override this function if you have a need to execute code for every keyboard main loop iteration
 285:quantum/keyboard.c ****  * This is specific to keyboard-level functionality.
 286:quantum/keyboard.c ****  */
 287:quantum/keyboard.c **** __attribute__((weak)) void housekeeping_task_kb(void) {}
 288:quantum/keyboard.c **** 
 289:quantum/keyboard.c **** /** \brief housekeeping_task_user
 290:quantum/keyboard.c ****  *
 291:quantum/keyboard.c ****  * Override this function if you have a need to execute code for every keyboard main loop iteration
 292:quantum/keyboard.c ****  * This is specific to user/keymap-level functionality.
 293:quantum/keyboard.c ****  */
 294:quantum/keyboard.c **** __attribute__((weak)) void housekeeping_task_user(void) {}
 295:quantum/keyboard.c **** 
 296:quantum/keyboard.c **** /** \brief housekeeping_task
 297:quantum/keyboard.c ****  *
 298:quantum/keyboard.c ****  * Invokes hooks for executing code after QMK is done after each loop iteration.
 299:quantum/keyboard.c ****  */
 300:quantum/keyboard.c **** void housekeeping_task(void) {
 597               		.loc 1 300 30 is_stmt 1 view -0
 598               		.cfi_startproc
 599               	/* prologue: function */
 600               	/* frame size = 0 */
 601               	/* stack size = 0 */
 602               	.L__stack_usage = 0
 301:quantum/keyboard.c ****     housekeeping_task_kb();
 603               		.loc 1 301 5 view .LVU63
 604 0000 0E94 0000 		call housekeeping_task_kb
 605               	.LVL12:
 302:quantum/keyboard.c ****     housekeeping_task_user();
 606               		.loc 1 302 5 view .LVU64
 607 0004 0C94 0000 		jmp housekeeping_task_user
 608               	.LVL13:
 609               		.cfi_endproc
 610               	.LFE127:
 612               		.section	.text.keyboard_init,"ax",@progbits
 613               	.global	keyboard_init
 615               	keyboard_init:
 616               	.LFB128:
 303:quantum/keyboard.c **** }
 304:quantum/keyboard.c **** 
 305:quantum/keyboard.c **** /** \brief keyboard_init
 306:quantum/keyboard.c ****  *
 307:quantum/keyboard.c ****  * FIXME: needs doc
 308:quantum/keyboard.c ****  */
 309:quantum/keyboard.c **** void keyboard_init(void) {
 617               		.loc 1 309 26 view -0
 618               		.cfi_startproc
 619               	/* prologue: function */
 620               	/* frame size = 0 */
 621               	/* stack size = 0 */
 622               	.L__stack_usage = 0
 310:quantum/keyboard.c ****     timer_init();
 623               		.loc 1 310 5 view .LVU66
 624 0000 0E94 0000 		call timer_init
 625               	.LVL14:
 311:quantum/keyboard.c ****     sync_timer_init();
 626               		.loc 1 311 22 view .LVU67
 312:quantum/keyboard.c **** #ifdef VIA_ENABLE
 313:quantum/keyboard.c ****     via_init();
 314:quantum/keyboard.c **** #endif
 315:quantum/keyboard.c ****     matrix_init();
 627               		.loc 1 315 5 view .LVU68
 628 0004 0E94 0000 		call matrix_init
 629               	.LVL15:
 316:quantum/keyboard.c **** #if defined(CRC_ENABLE)
 317:quantum/keyboard.c ****     crc_init();
 318:quantum/keyboard.c **** #endif
 319:quantum/keyboard.c **** #ifdef QWIIC_ENABLE
 320:quantum/keyboard.c ****     qwiic_init();
 321:quantum/keyboard.c **** #endif
 322:quantum/keyboard.c **** #ifdef OLED_ENABLE
 323:quantum/keyboard.c ****     oled_init(OLED_ROTATION_0);
 324:quantum/keyboard.c **** #endif
 325:quantum/keyboard.c **** #ifdef ST7565_ENABLE
 326:quantum/keyboard.c ****     st7565_init(DISPLAY_ROTATION_0);
 327:quantum/keyboard.c **** #endif
 328:quantum/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 329:quantum/keyboard.c ****     ps2_mouse_init();
 330:quantum/keyboard.c **** #endif
 331:quantum/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 332:quantum/keyboard.c ****     serial_mouse_init();
 333:quantum/keyboard.c **** #endif
 334:quantum/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 335:quantum/keyboard.c ****     adb_mouse_init();
 336:quantum/keyboard.c **** #endif
 337:quantum/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 338:quantum/keyboard.c ****     backlight_init();
 630               		.loc 1 338 5 view .LVU69
 631 0008 0E94 0000 		call backlight_init
 632               	.LVL16:
 339:quantum/keyboard.c **** #endif
 340:quantum/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 341:quantum/keyboard.c ****     rgblight_init();
 633               		.loc 1 341 5 view .LVU70
 634 000c 0E94 0000 		call rgblight_init
 635               	.LVL17:
 342:quantum/keyboard.c **** #endif
 343:quantum/keyboard.c **** #ifdef ENCODER_ENABLE
 344:quantum/keyboard.c ****     encoder_init();
 345:quantum/keyboard.c **** #endif
 346:quantum/keyboard.c **** #ifdef STENO_ENABLE
 347:quantum/keyboard.c ****     steno_init();
 348:quantum/keyboard.c **** #endif
 349:quantum/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 350:quantum/keyboard.c ****     pointing_device_init();
 351:quantum/keyboard.c **** #endif
 352:quantum/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 353:quantum/keyboard.c ****     keymap_config.nkro = 1;
 354:quantum/keyboard.c ****     eeconfig_update_keymap(keymap_config.raw);
 355:quantum/keyboard.c **** #endif
 356:quantum/keyboard.c **** #ifdef DIP_SWITCH_ENABLE
 357:quantum/keyboard.c ****     dip_switch_init();
 358:quantum/keyboard.c **** #endif
 359:quantum/keyboard.c **** 
 360:quantum/keyboard.c **** #if defined(DEBUG_MATRIX_SCAN_RATE) && defined(CONSOLE_ENABLE)
 361:quantum/keyboard.c ****     debug_enable = true;
 362:quantum/keyboard.c **** #endif
 363:quantum/keyboard.c **** 
 364:quantum/keyboard.c ****     keyboard_post_init_kb(); /* Always keep this last */
 636               		.loc 1 364 5 view .LVU71
 637 0010 0C94 0000 		jmp keyboard_post_init_kb
 638               	.LVL18:
 639               		.cfi_endproc
 640               	.LFE128:
 642               		.section	.text.switch_events,"ax",@progbits
 643               	.global	switch_events
 645               	switch_events:
 646               	.LVL19:
 647               	.LFB129:
 365:quantum/keyboard.c **** }
 366:quantum/keyboard.c **** 
 367:quantum/keyboard.c **** /** \brief key_event_task
 368:quantum/keyboard.c ****  *
 369:quantum/keyboard.c ****  * This function is responsible for calling into other systems when they need to respond to electri
 370:quantum/keyboard.c ****  * This is differnet than keycode events as no layer processing, or filtering occurs.
 371:quantum/keyboard.c ****  */
 372:quantum/keyboard.c **** void switch_events(uint8_t row, uint8_t col, bool pressed) {
 648               		.loc 1 372 60 view -0
 649               		.cfi_startproc
 650               	/* prologue: function */
 651               	/* frame size = 0 */
 652               	/* stack size = 0 */
 653               	.L__stack_usage = 0
 373:quantum/keyboard.c **** #if defined(LED_MATRIX_ENABLE)
 374:quantum/keyboard.c ****     process_led_matrix(row, col, pressed);
 375:quantum/keyboard.c **** #endif
 376:quantum/keyboard.c **** #if defined(RGB_MATRIX_ENABLE)
 377:quantum/keyboard.c ****     process_rgb_matrix(row, col, pressed);
 378:quantum/keyboard.c **** #endif
 379:quantum/keyboard.c **** }
 654               		.loc 1 379 1 view .LVU73
 655               	/* epilogue start */
 656 0000 0895      		ret
 657               		.cfi_endproc
 658               	.LFE129:
 660               		.section	.text.keyboard_task,"ax",@progbits
 661               	.global	keyboard_task
 663               	keyboard_task:
 664               	.LFB130:
 380:quantum/keyboard.c **** 
 381:quantum/keyboard.c **** /** \brief Keyboard task: Do keyboard routine jobs
 382:quantum/keyboard.c ****  *
 383:quantum/keyboard.c ****  * Do routine keyboard jobs:
 384:quantum/keyboard.c ****  *
 385:quantum/keyboard.c ****  * * scan matrix
 386:quantum/keyboard.c ****  * * handle mouse movements
 387:quantum/keyboard.c ****  * * run visualizer code
 388:quantum/keyboard.c ****  * * handle midi commands
 389:quantum/keyboard.c ****  * * light LEDs
 390:quantum/keyboard.c ****  *
 391:quantum/keyboard.c ****  * This is repeatedly called as fast as possible.
 392:quantum/keyboard.c ****  */
 393:quantum/keyboard.c **** void keyboard_task(void) {
 665               		.loc 1 393 26 view -0
 666               		.cfi_startproc
 667 0000 FF92      		push r15
 668               	.LCFI24:
 669               		.cfi_def_cfa_offset 3
 670               		.cfi_offset 15, -2
 671 0002 0F93      		push r16
 672               	.LCFI25:
 673               		.cfi_def_cfa_offset 4
 674               		.cfi_offset 16, -3
 675 0004 1F93      		push r17
 676               	.LCFI26:
 677               		.cfi_def_cfa_offset 5
 678               		.cfi_offset 17, -4
 679 0006 CF93      		push r28
 680               	.LCFI27:
 681               		.cfi_def_cfa_offset 6
 682               		.cfi_offset 28, -5
 683 0008 DF93      		push r29
 684               	.LCFI28:
 685               		.cfi_def_cfa_offset 7
 686               		.cfi_offset 29, -6
 687 000a 00D0      		rcall .
 688 000c 00D0      		rcall .
 689 000e 0F92      		push __tmp_reg__
 690               	.LCFI29:
 691               		.cfi_def_cfa_offset 12
 692 0010 CDB7      		in r28,__SP_L__
 693 0012 DEB7      		in r29,__SP_H__
 694               	.LCFI30:
 695               		.cfi_def_cfa_register 28
 696               	/* prologue: function */
 697               	/* frame size = 5 */
 698               	/* stack size = 10 */
 699               	.L__stack_usage = 10
 394:quantum/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 700               		.loc 1 394 5 view .LVU75
 395:quantum/keyboard.c ****     static uint8_t      led_status    = 0;
 701               		.loc 1 395 5 view .LVU76
 396:quantum/keyboard.c ****     matrix_row_t        matrix_row    = 0;
 702               		.loc 1 396 5 view .LVU77
 703               	.LVL20:
 397:quantum/keyboard.c ****     matrix_row_t        matrix_change = 0;
 704               		.loc 1 397 5 view .LVU78
 398:quantum/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 399:quantum/keyboard.c ****     uint8_t keys_processed = 0;
 400:quantum/keyboard.c **** #endif
 401:quantum/keyboard.c **** #ifdef ENCODER_ENABLE
 402:quantum/keyboard.c ****     bool encoders_changed = false;
 403:quantum/keyboard.c **** #endif
 404:quantum/keyboard.c **** 
 405:quantum/keyboard.c ****     uint8_t matrix_changed = matrix_scan();
 705               		.loc 1 405 5 view .LVU79
 706               		.loc 1 405 30 is_stmt 0 view .LVU80
 707 0014 0E94 0000 		call matrix_scan
 708               	.LVL21:
 406:quantum/keyboard.c ****     if (matrix_changed) last_matrix_activity_trigger();
 709               		.loc 1 406 5 is_stmt 1 view .LVU81
 710               		.loc 1 406 8 is_stmt 0 view .LVU82
 711 0018 8111      		cpse r24,__zero_reg__
 712               		.loc 1 406 25 is_stmt 1 discriminator 1 view .LVU83
 713 001a 0E94 0000 		call last_matrix_activity_trigger
 714               	.LVL22:
 715               	.L25:
 716               	.LBB8:
 407:quantum/keyboard.c **** 
 408:quantum/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 717               		.loc 1 408 27 discriminator 1 view .LVU84
 409:quantum/keyboard.c ****         matrix_row    = matrix_get_row(r);
 718               		.loc 1 409 9 discriminator 1 view .LVU85
 719               		.loc 1 409 25 is_stmt 0 discriminator 1 view .LVU86
 720 001e 80E0      		ldi r24,0
 721 0020 0E94 0000 		call matrix_get_row
 722               	.LVL23:
 723 0024 182F      		mov r17,r24
 724               	.LVL24:
 410:quantum/keyboard.c ****         matrix_change = matrix_row ^ matrix_prev[r];
 725               		.loc 1 410 9 is_stmt 1 discriminator 1 view .LVU87
 726               		.loc 1 410 49 is_stmt 0 discriminator 1 view .LVU88
 727 0026 8091 0000 		lds r24,matrix_prev.1
 728               		.loc 1 410 23 discriminator 1 view .LVU89
 729 002a 082F      		mov r16,r24
 730 002c 0127      		eor r16,r17
 731               	.LVL25:
 411:quantum/keyboard.c ****         if (matrix_change) {
 732               		.loc 1 411 9 is_stmt 1 discriminator 1 view .LVU90
 733               		.loc 1 411 12 is_stmt 0 discriminator 1 view .LVU91
 734 002e 8113      		cpse r24,r17
 735 0030 00C0      		rjmp .L32
 736               	.L28:
 737               	.LVL26:
 738               		.loc 1 411 12 discriminator 1 view .LVU92
 739               	.LBE8:
 412:quantum/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 413:quantum/keyboard.c ****             if (has_ghost_in_row(r, matrix_row)) {
 414:quantum/keyboard.c ****                 continue;
 415:quantum/keyboard.c ****             }
 416:quantum/keyboard.c **** #endif
 417:quantum/keyboard.c ****             if (debug_matrix) matrix_print();
 418:quantum/keyboard.c ****             matrix_row_t col_mask = 1;
 419:quantum/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
 420:quantum/keyboard.c ****                 if (matrix_change & col_mask) {
 421:quantum/keyboard.c ****                     if (should_process_keypress()) {
 422:quantum/keyboard.c ****                         action_exec((keyevent_t){
 423:quantum/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & col_mas
 424:quantum/keyboard.c ****                         });
 425:quantum/keyboard.c ****                     }
 426:quantum/keyboard.c ****                     // record a processed key
 427:quantum/keyboard.c ****                     matrix_prev[r] ^= col_mask;
 428:quantum/keyboard.c **** 
 429:quantum/keyboard.c ****                     switch_events(r, c, (matrix_row & col_mask));
 430:quantum/keyboard.c **** 
 431:quantum/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 432:quantum/keyboard.c ****                     // only jump out if we have processed "enough" keys.
 433:quantum/keyboard.c ****                     if (++keys_processed >= QMK_KEYS_PER_SCAN)
 434:quantum/keyboard.c **** #endif
 435:quantum/keyboard.c ****                         // process a key per task call
 436:quantum/keyboard.c ****                         goto MATRIX_LOOP_END;
 437:quantum/keyboard.c ****                 }
 438:quantum/keyboard.c ****             }
 439:quantum/keyboard.c ****         }
 440:quantum/keyboard.c ****     }
 441:quantum/keyboard.c ****     // call with pseudo tick event when no real key event.
 442:quantum/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 443:quantum/keyboard.c ****     // we can get here with some keys processed now.
 444:quantum/keyboard.c ****     if (!keys_processed)
 445:quantum/keyboard.c **** #endif
 446:quantum/keyboard.c ****         action_exec(TICK);
 740               		.loc 1 446 9 is_stmt 1 view .LVU93
 741               		.loc 1 446 21 is_stmt 0 view .LVU94
 742 0032 8FEF      		ldi r24,lo8(-1)
 743 0034 8983      		std Y+1,r24
 744 0036 8A83      		std Y+2,r24
 745 0038 1B82      		std Y+3,__zero_reg__
 746 003a 0E94 0000 		call timer_read
 747               	.LVL27:
 748 003e 8160      		ori r24,1
 749 0040 782F      		mov r23,r24
 750 0042 9D83      		std Y+5,r25
 751 0044 8C83      		std Y+4,r24
 752               		.loc 1 446 9 view .LVU95
 753 0046 4981      		ldd r20,Y+1
 754 0048 5A81      		ldd r21,Y+2
 755 004a 6B81      		ldd r22,Y+3
 756 004c 892F      		mov r24,r25
 757 004e 0E94 0000 		call action_exec
 758               	.LVL28:
 759 0052 00C0      		rjmp .L31
 760               	.LVL29:
 761               	.L32:
 762               	.LBB14:
 763               	.LBB9:
 417:quantum/keyboard.c ****             matrix_row_t col_mask = 1;
 764               		.loc 1 417 13 is_stmt 1 view .LVU96
 417:quantum/keyboard.c ****             matrix_row_t col_mask = 1;
 765               		.loc 1 417 17 is_stmt 0 view .LVU97
 766 0054 8091 0000 		lds r24,debug_config
 417:quantum/keyboard.c ****             matrix_row_t col_mask = 1;
 767               		.loc 1 417 16 view .LVU98
 768 0058 81FD      		sbrc r24,1
 417:quantum/keyboard.c ****             matrix_row_t col_mask = 1;
 769               		.loc 1 417 31 is_stmt 1 discriminator 1 view .LVU99
 770 005a 0E94 0000 		call matrix_print
 771               	.LVL30:
 772               	.L26:
 418:quantum/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
 773               		.loc 1 418 13 view .LVU100
 419:quantum/keyboard.c ****                 if (matrix_change & col_mask) {
 774               		.loc 1 419 13 view .LVU101
 775               	.LBB10:
 419:quantum/keyboard.c ****                 if (matrix_change & col_mask) {
 776               		.loc 1 419 18 view .LVU102
 419:quantum/keyboard.c ****                 if (matrix_change & col_mask) {
 777               		.loc 1 419 35 view .LVU103
 420:quantum/keyboard.c ****                     if (should_process_keypress()) {
 778               		.loc 1 420 17 view .LVU104
 420:quantum/keyboard.c ****                     if (should_process_keypress()) {
 779               		.loc 1 420 20 is_stmt 0 view .LVU105
 780 005e 802F      		mov r24,r16
 781 0060 8170      		andi r24,lo8(1)
 782 0062 F82E      		mov r15,r24
 783 0064 00FD      		sbrc r16,0
 784 0066 00C0      		rjmp .L34
 419:quantum/keyboard.c ****                 if (matrix_change & col_mask) {
 785               		.loc 1 419 53 is_stmt 1 view .LVU106
 786               	.LVL31:
 419:quantum/keyboard.c ****                 if (matrix_change & col_mask) {
 787               		.loc 1 419 35 view .LVU107
 420:quantum/keyboard.c ****                     if (should_process_keypress()) {
 788               		.loc 1 420 17 view .LVU108
 420:quantum/keyboard.c ****                     if (should_process_keypress()) {
 789               		.loc 1 420 20 is_stmt 0 view .LVU109
 790 0068 01FD      		sbrc r16,1
 791 006a 00C0      		rjmp .L35
 419:quantum/keyboard.c ****                 if (matrix_change & col_mask) {
 792               		.loc 1 419 53 is_stmt 1 view .LVU110
 793               	.LVL32:
 419:quantum/keyboard.c ****                 if (matrix_change & col_mask) {
 794               		.loc 1 419 35 view .LVU111
 420:quantum/keyboard.c ****                     if (should_process_keypress()) {
 795               		.loc 1 420 17 view .LVU112
 420:quantum/keyboard.c ****                     if (should_process_keypress()) {
 796               		.loc 1 420 20 is_stmt 0 view .LVU113
 797 006c 02FF      		sbrs r16,2
 798 006e 00C0      		rjmp .L28
 419:quantum/keyboard.c ****                 if (matrix_change & col_mask) {
 799               		.loc 1 419 51 view .LVU114
 800 0070 02E0      		ldi r16,lo8(2)
 801               	.LVL33:
 419:quantum/keyboard.c ****                 if (matrix_change & col_mask) {
 802               		.loc 1 419 64 view .LVU115
 803 0072 94E0      		ldi r25,lo8(4)
 804 0074 F92E      		mov r15,r25
 805               	.LVL34:
 806               	.L27:
 421:quantum/keyboard.c ****                         action_exec((keyevent_t){
 807               		.loc 1 421 21 is_stmt 1 view .LVU116
 421:quantum/keyboard.c ****                         action_exec((keyevent_t){
 808               		.loc 1 421 25 is_stmt 0 view .LVU117
 809 0076 0E94 0000 		call should_process_keypress
 810               	.LVL35:
 421:quantum/keyboard.c ****                         action_exec((keyevent_t){
 811               		.loc 1 421 24 view .LVU118
 812 007a 8823      		tst r24
 813 007c 01F0      		breq .L29
 814               	.LBB11:
 422:quantum/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & col_mas
 815               		.loc 1 422 25 is_stmt 1 view .LVU119
 422:quantum/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & col_mas
 816               		.loc 1 422 49 is_stmt 0 view .LVU120
 817 007e 0983      		std Y+1,r16
 818 0080 1A82      		std Y+2,__zero_reg__
 423:quantum/keyboard.c ****                         });
 819               		.loc 1 423 91 view .LVU121
 820 0082 1F21      		and r17,r15
 821               	.LVL36:
 423:quantum/keyboard.c ****                         });
 822               		.loc 1 423 91 view .LVU122
 823 0084 81E0      		ldi r24,lo8(1)
 824 0086 01F4      		brne .L30
 825 0088 80E0      		ldi r24,0
 826               	.L30:
 422:quantum/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & col_mas
 827               		.loc 1 422 49 view .LVU123
 828 008a 8B83      		std Y+3,r24
 423:quantum/keyboard.c ****                         });
 829               		.loc 1 423 113 view .LVU124
 830 008c 0E94 0000 		call timer_read
 831               	.LVL37:
 423:quantum/keyboard.c ****                         });
 832               		.loc 1 423 126 view .LVU125
 833 0090 8160      		ori r24,1
 422:quantum/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & col_mas
 834               		.loc 1 422 49 view .LVU126
 835 0092 782F      		mov r23,r24
 836 0094 9D83      		std Y+5,r25
 837 0096 8C83      		std Y+4,r24
 422:quantum/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & col_mas
 838               		.loc 1 422 25 view .LVU127
 839 0098 4981      		ldd r20,Y+1
 840 009a 5A81      		ldd r21,Y+2
 841 009c 6B81      		ldd r22,Y+3
 842 009e 892F      		mov r24,r25
 843 00a0 0E94 0000 		call action_exec
 844               	.LVL38:
 845               	.L29:
 422:quantum/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & col_mas
 846               		.loc 1 422 25 view .LVU128
 847               	.LBE11:
 427:quantum/keyboard.c **** 
 848               		.loc 1 427 21 is_stmt 1 view .LVU129
 427:quantum/keyboard.c **** 
 849               		.loc 1 427 36 is_stmt 0 view .LVU130
 850 00a4 8091 0000 		lds r24,matrix_prev.1
 851 00a8 8F25      		eor r24,r15
 852 00aa 8093 0000 		sts matrix_prev.1,r24
 429:quantum/keyboard.c **** 
 853               		.loc 1 429 21 is_stmt 1 view .LVU131
 436:quantum/keyboard.c ****                 }
 854               		.loc 1 436 25 view .LVU132
 855               	.LVL39:
 856               	.L31:
 436:quantum/keyboard.c ****                 }
 857               		.loc 1 436 25 is_stmt 0 view .LVU133
 858               	.LBE10:
 859               	.LBE9:
 860               	.LBE14:
 447:quantum/keyboard.c **** 
 448:quantum/keyboard.c **** MATRIX_LOOP_END:
 449:quantum/keyboard.c **** 
 450:quantum/keyboard.c **** #ifdef DEBUG_MATRIX_SCAN_RATE
 451:quantum/keyboard.c ****     matrix_scan_perf_task();
 452:quantum/keyboard.c **** #endif
 453:quantum/keyboard.c **** 
 454:quantum/keyboard.c **** #if defined(RGBLIGHT_ENABLE)
 455:quantum/keyboard.c ****     rgblight_task();
 861               		.loc 1 455 5 is_stmt 1 view .LVU134
 862 00ae 0E94 0000 		call rgblight_task
 863               	.LVL40:
 456:quantum/keyboard.c **** #endif
 457:quantum/keyboard.c **** 
 458:quantum/keyboard.c **** #ifdef LED_MATRIX_ENABLE
 459:quantum/keyboard.c ****     led_matrix_task();
 460:quantum/keyboard.c **** #endif
 461:quantum/keyboard.c **** #ifdef RGB_MATRIX_ENABLE
 462:quantum/keyboard.c ****     rgb_matrix_task();
 463:quantum/keyboard.c **** #endif
 464:quantum/keyboard.c **** 
 465:quantum/keyboard.c **** #if defined(BACKLIGHT_ENABLE)
 466:quantum/keyboard.c **** #    if defined(BACKLIGHT_PIN) || defined(BACKLIGHT_PINS)
 467:quantum/keyboard.c ****     backlight_task();
 864               		.loc 1 467 5 view .LVU135
 865 00b2 0E94 0000 		call backlight_task
 866               	.LVL41:
 468:quantum/keyboard.c **** #    endif
 469:quantum/keyboard.c **** #endif
 470:quantum/keyboard.c **** 
 471:quantum/keyboard.c **** #ifdef ENCODER_ENABLE
 472:quantum/keyboard.c ****     encoders_changed = encoder_read();
 473:quantum/keyboard.c ****     if (encoders_changed) last_encoder_activity_trigger();
 474:quantum/keyboard.c **** #endif
 475:quantum/keyboard.c **** 
 476:quantum/keyboard.c **** #ifdef QWIIC_ENABLE
 477:quantum/keyboard.c ****     qwiic_task();
 478:quantum/keyboard.c **** #endif
 479:quantum/keyboard.c **** 
 480:quantum/keyboard.c **** #ifdef OLED_ENABLE
 481:quantum/keyboard.c ****     oled_task();
 482:quantum/keyboard.c **** #    if OLED_TIMEOUT > 0
 483:quantum/keyboard.c ****     // Wake up oled if user is using those fabulous keys or spinning those encoders!
 484:quantum/keyboard.c **** #        ifdef ENCODER_ENABLE
 485:quantum/keyboard.c ****     if (matrix_changed || encoders_changed) oled_on();
 486:quantum/keyboard.c **** #        else
 487:quantum/keyboard.c ****     if (matrix_changed) oled_on();
 488:quantum/keyboard.c **** #        endif
 489:quantum/keyboard.c **** #    endif
 490:quantum/keyboard.c **** #endif
 491:quantum/keyboard.c **** 
 492:quantum/keyboard.c **** #ifdef ST7565_ENABLE
 493:quantum/keyboard.c ****     st7565_task();
 494:quantum/keyboard.c **** #    if ST7565_TIMEOUT > 0
 495:quantum/keyboard.c ****     // Wake up display if user is using those fabulous keys or spinning those encoders!
 496:quantum/keyboard.c **** #        ifdef ENCODER_ENABLE
 497:quantum/keyboard.c ****     if (matrix_changed || encoders_changed) st7565_on();
 498:quantum/keyboard.c **** #        else
 499:quantum/keyboard.c ****     if (matrix_changed) st7565_on();
 500:quantum/keyboard.c **** #        endif
 501:quantum/keyboard.c **** #    endif
 502:quantum/keyboard.c **** #endif
 503:quantum/keyboard.c **** 
 504:quantum/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 505:quantum/keyboard.c ****     // mousekey repeat & acceleration
 506:quantum/keyboard.c ****     mousekey_task();
 867               		.loc 1 506 5 view .LVU136
 868 00b6 0E94 0000 		call mousekey_task
 869               	.LVL42:
 507:quantum/keyboard.c **** #endif
 508:quantum/keyboard.c **** 
 509:quantum/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 510:quantum/keyboard.c ****     ps2_mouse_task();
 511:quantum/keyboard.c **** #endif
 512:quantum/keyboard.c **** 
 513:quantum/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 514:quantum/keyboard.c ****     serial_mouse_task();
 515:quantum/keyboard.c **** #endif
 516:quantum/keyboard.c **** 
 517:quantum/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 518:quantum/keyboard.c ****     adb_mouse_task();
 519:quantum/keyboard.c **** #endif
 520:quantum/keyboard.c **** 
 521:quantum/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 522:quantum/keyboard.c ****     serial_link_update();
 523:quantum/keyboard.c **** #endif
 524:quantum/keyboard.c **** 
 525:quantum/keyboard.c **** #ifdef VISUALIZER_ENABLE
 526:quantum/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 527:quantum/keyboard.c **** #endif
 528:quantum/keyboard.c **** 
 529:quantum/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 530:quantum/keyboard.c ****     pointing_device_task();
 531:quantum/keyboard.c **** #endif
 532:quantum/keyboard.c **** 
 533:quantum/keyboard.c **** #ifdef MIDI_ENABLE
 534:quantum/keyboard.c ****     midi_task();
 535:quantum/keyboard.c **** #endif
 536:quantum/keyboard.c **** 
 537:quantum/keyboard.c **** #ifdef VELOCIKEY_ENABLE
 538:quantum/keyboard.c ****     if (velocikey_enabled()) {
 539:quantum/keyboard.c ****         velocikey_decelerate();
 540:quantum/keyboard.c ****     }
 541:quantum/keyboard.c **** #endif
 542:quantum/keyboard.c **** 
 543:quantum/keyboard.c **** #ifdef JOYSTICK_ENABLE
 544:quantum/keyboard.c ****     joystick_task();
 545:quantum/keyboard.c **** #endif
 546:quantum/keyboard.c **** 
 547:quantum/keyboard.c **** #ifdef DIGITIZER_ENABLE
 548:quantum/keyboard.c ****     digitizer_task();
 549:quantum/keyboard.c **** #endif
 550:quantum/keyboard.c **** 
 551:quantum/keyboard.c ****     // update LED
 552:quantum/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 870               		.loc 1 552 5 view .LVU137
 871               		.loc 1 552 23 is_stmt 0 view .LVU138
 872 00ba 0E94 0000 		call host_keyboard_leds
 873               	.LVL43:
 874               		.loc 1 552 8 view .LVU139
 875 00be 9091 0000 		lds r25,led_status.0
 876 00c2 8917      		cp r24,r25
 877 00c4 01F0      		breq .L24
 553:quantum/keyboard.c ****         led_status = host_keyboard_leds();
 878               		.loc 1 553 9 is_stmt 1 view .LVU140
 879               		.loc 1 553 22 is_stmt 0 view .LVU141
 880 00c6 0E94 0000 		call host_keyboard_leds
 881               	.LVL44:
 882               		.loc 1 553 20 view .LVU142
 883 00ca 8093 0000 		sts led_status.0,r24
 554:quantum/keyboard.c ****         keyboard_set_leds(led_status);
 884               		.loc 1 554 9 is_stmt 1 view .LVU143
 885               	.LVL45:
 886               	.LBB15:
 887               	.LBI15:
 555:quantum/keyboard.c ****     }
 556:quantum/keyboard.c **** }
 557:quantum/keyboard.c **** 
 558:quantum/keyboard.c **** /** \brief keyboard set leds
 559:quantum/keyboard.c ****  *
 560:quantum/keyboard.c ****  * FIXME: needs doc
 561:quantum/keyboard.c ****  */
 562:quantum/keyboard.c **** void keyboard_set_leds(uint8_t leds) {
 888               		.loc 1 562 6 view .LVU144
 889               	.LBB16:
 563:quantum/keyboard.c ****     if (debug_keyboard) {
 890               		.loc 1 563 5 view .LVU145
 564:quantum/keyboard.c ****         debug("keyboard_set_led: ");
 891               		.loc 1 564 36 view .LVU146
 565:quantum/keyboard.c ****         debug_hex8(leds);
 892               		.loc 1 565 25 view .LVU147
 566:quantum/keyboard.c ****         debug("\n");
 893               		.loc 1 566 20 view .LVU148
 567:quantum/keyboard.c ****     }
 568:quantum/keyboard.c ****     led_set(leds);
 894               		.loc 1 568 5 view .LVU149
 895               	/* epilogue start */
 896               	.LBE16:
 897               	.LBE15:
 556:quantum/keyboard.c **** 
 898               		.loc 1 556 1 is_stmt 0 view .LVU150
 899 00ce 0F90      		pop __tmp_reg__
 900 00d0 0F90      		pop __tmp_reg__
 901 00d2 0F90      		pop __tmp_reg__
 902 00d4 0F90      		pop __tmp_reg__
 903 00d6 0F90      		pop __tmp_reg__
 904 00d8 DF91      		pop r29
 905 00da CF91      		pop r28
 906 00dc 1F91      		pop r17
 907 00de 0F91      		pop r16
 908 00e0 FF90      		pop r15
 909               	.LBB18:
 910               	.LBB17:
 911               		.loc 1 568 5 view .LVU151
 912 00e2 0C94 0000 		jmp led_set
 913               	.LVL46:
 914               	.L34:
 915               		.loc 1 568 5 view .LVU152
 916               	.LBE17:
 917               	.LBE18:
 918               	.LBB19:
 919               	.LBB13:
 920               	.LBB12:
 419:quantum/keyboard.c ****                 if (matrix_change & col_mask) {
 921               		.loc 1 419 26 view .LVU153
 922 00e6 00E0      		ldi r16,0
 923               	.LVL47:
 419:quantum/keyboard.c ****                 if (matrix_change & col_mask) {
 924               		.loc 1 419 26 view .LVU154
 925 00e8 00C0      		rjmp .L27
 926               	.LVL48:
 927               	.L35:
 419:quantum/keyboard.c ****                 if (matrix_change & col_mask) {
 928               		.loc 1 419 51 view .LVU155
 929 00ea 01E0      		ldi r16,lo8(1)
 930               	.LVL49:
 419:quantum/keyboard.c ****                 if (matrix_change & col_mask) {
 931               		.loc 1 419 64 view .LVU156
 932 00ec 82E0      		ldi r24,lo8(2)
 933 00ee F82E      		mov r15,r24
 934 00f0 00C0      		rjmp .L27
 935               	.LVL50:
 936               	.L24:
 937               	/* epilogue start */
 419:quantum/keyboard.c ****                 if (matrix_change & col_mask) {
 938               		.loc 1 419 64 view .LVU157
 939               	.LBE12:
 940               	.LBE13:
 941               	.LBE19:
 556:quantum/keyboard.c **** 
 942               		.loc 1 556 1 view .LVU158
 943 00f2 0F90      		pop __tmp_reg__
 944 00f4 0F90      		pop __tmp_reg__
 945 00f6 0F90      		pop __tmp_reg__
 946 00f8 0F90      		pop __tmp_reg__
 947 00fa 0F90      		pop __tmp_reg__
 948 00fc DF91      		pop r29
 949 00fe CF91      		pop r28
 950 0100 1F91      		pop r17
 951 0102 0F91      		pop r16
 952 0104 FF90      		pop r15
 953 0106 0895      		ret
 954               		.cfi_endproc
 955               	.LFE130:
 957               		.section	.text.keyboard_set_leds,"ax",@progbits
 958               	.global	keyboard_set_leds
 960               	keyboard_set_leds:
 961               	.LVL51:
 962               	.LFB131:
 562:quantum/keyboard.c ****     if (debug_keyboard) {
 963               		.loc 1 562 38 is_stmt 1 view -0
 964               		.cfi_startproc
 965               	/* prologue: function */
 966               	/* frame size = 0 */
 967               	/* stack size = 0 */
 968               	.L__stack_usage = 0
 563:quantum/keyboard.c ****         debug("keyboard_set_led: ");
 969               		.loc 1 563 5 view .LVU160
 564:quantum/keyboard.c ****         debug_hex8(leds);
 970               		.loc 1 564 36 view .LVU161
 565:quantum/keyboard.c ****         debug("\n");
 971               		.loc 1 565 25 view .LVU162
 566:quantum/keyboard.c ****     }
 972               		.loc 1 566 20 view .LVU163
 973               		.loc 1 568 5 view .LVU164
 974 0000 0C94 0000 		jmp led_set
 975               	.LVL52:
 976               		.loc 1 568 5 is_stmt 0 view .LVU165
 977               		.cfi_endproc
 978               	.LFE131:
 980               		.section	.bss.led_status.0,"aw",@nobits
 983               	led_status.0:
 984 0000 00        		.zero	1
 985               		.section	.bss.matrix_prev.1,"aw",@nobits
 988               	matrix_prev.1:
 989 0000 00        		.zero	1
 990               		.section	.bss.last_encoder_modification_time,"aw",@nobits
 993               	last_encoder_modification_time:
 994 0000 0000 0000 		.zero	4
 995               		.section	.bss.last_matrix_modification_time,"aw",@nobits
 998               	last_matrix_modification_time:
 999 0000 0000 0000 		.zero	4
 1000               		.section	.bss.last_input_modification_time,"aw",@nobits
 1003               	last_input_modification_time:
 1004 0000 0000 0000 		.zero	4
 1005               		.text
 1006               	.Letext0:
 1007               		.file 2 "/usr/avr/include/stdint.h"
 1008               		.file 3 "quantum/keyboard.h"
 1009               		.file 4 "quantum/matrix.h"
 1010               		.file 5 "quantum/logging/sendchar.h"
 1011               		.file 6 "quantum/logging/debug.h"
 1012               		.file 7 "quantum/mousekey.h"
 1013               		.file 8 "quantum/backlight/backlight.h"
 1014               		.file 9 "quantum/rgblight/rgblight.h"
 1015               		.file 10 "quantum/led.h"
 1016               		.file 11 "quantum/action.h"
 1017               		.file 12 "tmk_core/common/host.h"
 1018               		.file 13 "tmk_core/common/timer.h"
 1019               		.file 14 "quantum/logging/print.h"
 1020               		.file 15 "quantum/sequencer/sequencer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
     /tmp/cchr0UgF.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cchr0UgF.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cchr0UgF.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cchr0UgF.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cchr0UgF.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cchr0UgF.s:13     .text.last_input_activity_time:0000000000000000 last_input_activity_time
     /tmp/cchr0UgF.s:1003   .bss.last_input_modification_time:0000000000000000 last_input_modification_time
     /tmp/cchr0UgF.s:61     .text.last_input_activity_elapsed:0000000000000000 last_input_activity_elapsed
     /tmp/cchr0UgF.s:114    .text.last_matrix_activity_time:0000000000000000 last_matrix_activity_time
     /tmp/cchr0UgF.s:998    .bss.last_matrix_modification_time:0000000000000000 last_matrix_modification_time
     /tmp/cchr0UgF.s:161    .text.last_matrix_activity_elapsed:0000000000000000 last_matrix_activity_elapsed
     /tmp/cchr0UgF.s:214    .text.last_matrix_activity_trigger:0000000000000000 last_matrix_activity_trigger
     /tmp/cchr0UgF.s:245    .text.last_encoder_activity_time:0000000000000000 last_encoder_activity_time
     /tmp/cchr0UgF.s:993    .bss.last_encoder_modification_time:0000000000000000 last_encoder_modification_time
     /tmp/cchr0UgF.s:292    .text.last_encoder_activity_elapsed:0000000000000000 last_encoder_activity_elapsed
     /tmp/cchr0UgF.s:345    .text.last_encoder_activity_trigger:0000000000000000 last_encoder_activity_trigger
     /tmp/cchr0UgF.s:376    .text.disable_jtag:0000000000000000 disable_jtag
     /tmp/cchr0UgF.s:403    .text.keyboard_pre_init_user:0000000000000000 keyboard_pre_init_user
     /tmp/cchr0UgF.s:403    .text.keyboard_pre_init_user:0000000000000000 keyboard_pre_init_user.localalias
     /tmp/cchr0UgF.s:421    .text.matrix_setup:0000000000000000 matrix_setup
     /tmp/cchr0UgF.s:436    .text.keyboard_pre_init_kb:0000000000000000 keyboard_pre_init_kb
     /tmp/cchr0UgF.s:453    .text.keyboard_post_init_user:0000000000000000 keyboard_post_init_user
     /tmp/cchr0UgF.s:468    .text.keyboard_post_init_kb:0000000000000000 keyboard_post_init_kb
     /tmp/cchr0UgF.s:485    .text.keyboard_setup:0000000000000000 keyboard_setup
     /tmp/cchr0UgF.s:513    .text.is_keyboard_master:0000000000000000 is_keyboard_master
     /tmp/cchr0UgF.s:513    .text.is_keyboard_master:0000000000000000 is_keyboard_master.localalias
     /tmp/cchr0UgF.s:533    .text.is_keyboard_left:0000000000000000 is_keyboard_left
     /tmp/cchr0UgF.s:547    .text.should_process_keypress:0000000000000000 should_process_keypress
     /tmp/cchr0UgF.s:565    .text.housekeeping_task_kb:0000000000000000 housekeeping_task_kb
     /tmp/cchr0UgF.s:580    .text.housekeeping_task_user:0000000000000000 housekeeping_task_user
     /tmp/cchr0UgF.s:595    .text.housekeeping_task:0000000000000000 housekeeping_task
     /tmp/cchr0UgF.s:615    .text.keyboard_init:0000000000000000 keyboard_init
     /tmp/cchr0UgF.s:645    .text.switch_events:0000000000000000 switch_events
     /tmp/cchr0UgF.s:663    .text.keyboard_task:0000000000000000 keyboard_task
     /tmp/cchr0UgF.s:988    .bss.matrix_prev.1:0000000000000000 matrix_prev.1
     /tmp/cchr0UgF.s:983    .bss.led_status.0:0000000000000000 led_status.0
     /tmp/cchr0UgF.s:960    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds

UNDEFINED SYMBOLS
timer_elapsed32
timer_read32
sendchar
print_set_sendchar
timer_init
matrix_init
backlight_init
rgblight_init
matrix_scan
matrix_get_row
timer_read
action_exec
debug_config
matrix_print
rgblight_task
backlight_task
mousekey_task
host_keyboard_leds
led_set
__do_clear_bss
