   1               		.file	"suspend.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.suspend_idle,"ax",@progbits
  11               	.global	suspend_idle
  13               	suspend_idle:
  14               	.LVL0:
  15               	.LFB112:
  16               		.file 1 "tmk_core/common/avr/suspend.c"
   1:tmk_core/common/avr/suspend.c **** #include <stdbool.h>
   2:tmk_core/common/avr/suspend.c **** #include <avr/sleep.h>
   3:tmk_core/common/avr/suspend.c **** #include <avr/wdt.h>
   4:tmk_core/common/avr/suspend.c **** #include <avr/interrupt.h>
   5:tmk_core/common/avr/suspend.c **** #include "matrix.h"
   6:tmk_core/common/avr/suspend.c **** #include "action.h"
   7:tmk_core/common/avr/suspend.c **** #include "suspend.h"
   8:tmk_core/common/avr/suspend.c **** #include "timer.h"
   9:tmk_core/common/avr/suspend.c **** #include "led.h"
  10:tmk_core/common/avr/suspend.c **** #include "host.h"
  11:tmk_core/common/avr/suspend.c **** 
  12:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  13:tmk_core/common/avr/suspend.c **** #    include "lufa.h"
  14:tmk_core/common/avr/suspend.c **** #endif
  15:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_VUSB
  16:tmk_core/common/avr/suspend.c **** #    include "vusb.h"
  17:tmk_core/common/avr/suspend.c **** #endif
  18:tmk_core/common/avr/suspend.c **** 
  19:tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
  20:tmk_core/common/avr/suspend.c **** #    include "backlight.h"
  21:tmk_core/common/avr/suspend.c **** #endif
  22:tmk_core/common/avr/suspend.c **** 
  23:tmk_core/common/avr/suspend.c **** #ifdef AUDIO_ENABLE
  24:tmk_core/common/avr/suspend.c **** #    include "audio.h"
  25:tmk_core/common/avr/suspend.c **** #endif /* AUDIO_ENABLE */
  26:tmk_core/common/avr/suspend.c **** 
  27:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
  28:tmk_core/common/avr/suspend.c **** #    include "rgblight.h"
  29:tmk_core/common/avr/suspend.c **** #endif
  30:tmk_core/common/avr/suspend.c **** 
  31:tmk_core/common/avr/suspend.c **** #ifdef LED_MATRIX_ENABLE
  32:tmk_core/common/avr/suspend.c **** #    include "led_matrix.h"
  33:tmk_core/common/avr/suspend.c **** #endif
  34:tmk_core/common/avr/suspend.c **** #ifdef RGB_MATRIX_ENABLE
  35:tmk_core/common/avr/suspend.c **** #    include "rgb_matrix.h"
  36:tmk_core/common/avr/suspend.c **** #endif
  37:tmk_core/common/avr/suspend.c **** 
  38:tmk_core/common/avr/suspend.c **** /** \brief Suspend idle
  39:tmk_core/common/avr/suspend.c ****  *
  40:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  41:tmk_core/common/avr/suspend.c ****  */
  42:tmk_core/common/avr/suspend.c **** void suspend_idle(uint8_t time) {
  17               		.loc 1 42 33 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  43:tmk_core/common/avr/suspend.c ****     cli();
  23               		.loc 1 43 5 view .LVU1
  24               	/* #APP */
  25               	 ;  43 "tmk_core/common/avr/suspend.c" 1
  26 0000 F894      		cli
  27               	 ;  0 "" 2
  44:tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_IDLE);
  28               		.loc 1 44 5 view .LVU2
  29               		.loc 1 44 5 view .LVU3
  30               	/* #NOAPP */
  31 0002 83B7      		in r24,0x33
  32               	.LVL1:
  33               		.loc 1 44 5 is_stmt 0 view .LVU4
  34 0004 817F      		andi r24,lo8(-15)
  35 0006 83BF      		out 0x33,r24
  36               		.loc 1 44 5 is_stmt 1 view .LVU5
  45:tmk_core/common/avr/suspend.c ****     sleep_enable();
  37               		.loc 1 45 5 view .LVU6
  38               		.loc 1 45 5 view .LVU7
  39 0008 83B7      		in r24,0x33
  40 000a 8160      		ori r24,lo8(1)
  41 000c 83BF      		out 0x33,r24
  42               		.loc 1 45 5 view .LVU8
  46:tmk_core/common/avr/suspend.c ****     sei();
  43               		.loc 1 46 5 view .LVU9
  44               	/* #APP */
  45               	 ;  46 "tmk_core/common/avr/suspend.c" 1
  46 000e 7894      		sei
  47               	 ;  0 "" 2
  47:tmk_core/common/avr/suspend.c ****     sleep_cpu();
  48               		.loc 1 47 5 view .LVU10
  49               		.loc 1 47 5 view .LVU11
  50               	 ;  47 "tmk_core/common/avr/suspend.c" 1
  51 0010 8895      		sleep
  52               		
  53               	 ;  0 "" 2
  54               		.loc 1 47 5 view .LVU12
  48:tmk_core/common/avr/suspend.c ****     sleep_disable();
  55               		.loc 1 48 5 view .LVU13
  56               		.loc 1 48 5 view .LVU14
  57               	/* #NOAPP */
  58 0012 83B7      		in r24,0x33
  59 0014 8E7F      		andi r24,lo8(-2)
  60 0016 83BF      		out 0x33,r24
  61               		.loc 1 48 5 view .LVU15
  62               	/* epilogue start */
  49:tmk_core/common/avr/suspend.c **** }
  63               		.loc 1 49 1 is_stmt 0 view .LVU16
  64 0018 0895      		ret
  65               		.cfi_endproc
  66               	.LFE112:
  68               		.section	.text.matrix_power_up,"ax",@progbits
  69               		.weak	matrix_power_up
  71               	matrix_power_up:
  72               	.LFB117:
  50:tmk_core/common/avr/suspend.c **** 
  51:tmk_core/common/avr/suspend.c **** // TODO: This needs some cleanup
  52:tmk_core/common/avr/suspend.c **** 
  53:tmk_core/common/avr/suspend.c **** /** \brief Run keyboard level Power down
  54:tmk_core/common/avr/suspend.c ****  *
  55:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  56:tmk_core/common/avr/suspend.c ****  */
  57:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_power_down_user(void) {}
  58:tmk_core/common/avr/suspend.c **** /** \brief Run keyboard level Power down
  59:tmk_core/common/avr/suspend.c ****  *
  60:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  61:tmk_core/common/avr/suspend.c ****  */
  62:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_power_down_kb(void) { suspend_power_down_user(); }
  63:tmk_core/common/avr/suspend.c **** 
  64:tmk_core/common/avr/suspend.c **** #if !defined(NO_SUSPEND_POWER_DOWN) && defined(WDT_vect)
  65:tmk_core/common/avr/suspend.c **** 
  66:tmk_core/common/avr/suspend.c **** // clang-format off
  67:tmk_core/common/avr/suspend.c **** #define wdt_intr_enable(value) \
  68:tmk_core/common/avr/suspend.c **** __asm__ __volatile__ ( \
  69:tmk_core/common/avr/suspend.c ****     "in __tmp_reg__,__SREG__" "\n\t" \
  70:tmk_core/common/avr/suspend.c ****     "cli" "\n\t" \
  71:tmk_core/common/avr/suspend.c ****     "wdr" "\n\t" \
  72:tmk_core/common/avr/suspend.c ****     "sts %0,%1" "\n\t" \
  73:tmk_core/common/avr/suspend.c ****     "out __SREG__,__tmp_reg__" "\n\t" \
  74:tmk_core/common/avr/suspend.c ****     "sts %0,%2" "\n\t" \
  75:tmk_core/common/avr/suspend.c ****     : /* no outputs */ \
  76:tmk_core/common/avr/suspend.c ****     : "M" (_SFR_MEM_ADDR(_WD_CONTROL_REG)), \
  77:tmk_core/common/avr/suspend.c ****     "r" (_BV(_WD_CHANGE_BIT) | _BV(WDE)), \
  78:tmk_core/common/avr/suspend.c ****     "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) | _BV(WDIE) | (value & 0x07))) \
  79:tmk_core/common/avr/suspend.c ****     : "r0" \
  80:tmk_core/common/avr/suspend.c **** )
  81:tmk_core/common/avr/suspend.c **** // clang-format on
  82:tmk_core/common/avr/suspend.c **** 
  83:tmk_core/common/avr/suspend.c **** /** \brief Power down MCU with watchdog timer
  84:tmk_core/common/avr/suspend.c ****  *
  85:tmk_core/common/avr/suspend.c ****  * wdto: watchdog timer timeout defined in <avr/wdt.h>
  86:tmk_core/common/avr/suspend.c ****  *          WDTO_15MS
  87:tmk_core/common/avr/suspend.c ****  *          WDTO_30MS
  88:tmk_core/common/avr/suspend.c ****  *          WDTO_60MS
  89:tmk_core/common/avr/suspend.c ****  *          WDTO_120MS
  90:tmk_core/common/avr/suspend.c ****  *          WDTO_250MS
  91:tmk_core/common/avr/suspend.c ****  *          WDTO_500MS
  92:tmk_core/common/avr/suspend.c ****  *          WDTO_1S
  93:tmk_core/common/avr/suspend.c ****  *          WDTO_2S
  94:tmk_core/common/avr/suspend.c ****  *          WDTO_4S
  95:tmk_core/common/avr/suspend.c ****  *          WDTO_8S
  96:tmk_core/common/avr/suspend.c ****  */
  97:tmk_core/common/avr/suspend.c **** static uint8_t wdt_timeout = 0;
  98:tmk_core/common/avr/suspend.c **** 
  99:tmk_core/common/avr/suspend.c **** /** \brief Power down
 100:tmk_core/common/avr/suspend.c ****  *
 101:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 102:tmk_core/common/avr/suspend.c ****  */
 103:tmk_core/common/avr/suspend.c **** static void power_down(uint8_t wdto) {
 104:tmk_core/common/avr/suspend.c ****     wdt_timeout = wdto;
 105:tmk_core/common/avr/suspend.c **** 
 106:tmk_core/common/avr/suspend.c ****     // Watchdog Interrupt Mode
 107:tmk_core/common/avr/suspend.c ****     wdt_intr_enable(wdto);
 108:tmk_core/common/avr/suspend.c **** 
 109:tmk_core/common/avr/suspend.c ****     // TODO: more power saving
 110:tmk_core/common/avr/suspend.c ****     // See PicoPower application note
 111:tmk_core/common/avr/suspend.c ****     // - I/O port input with pullup
 112:tmk_core/common/avr/suspend.c ****     // - prescale clock
 113:tmk_core/common/avr/suspend.c ****     // - BOD disable
 114:tmk_core/common/avr/suspend.c ****     // - Power Reduction Register PRR
 115:tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 116:tmk_core/common/avr/suspend.c ****     sleep_enable();
 117:tmk_core/common/avr/suspend.c ****     sei();
 118:tmk_core/common/avr/suspend.c ****     sleep_cpu();
 119:tmk_core/common/avr/suspend.c ****     sleep_disable();
 120:tmk_core/common/avr/suspend.c **** 
 121:tmk_core/common/avr/suspend.c ****     // Disable watchdog after sleep
 122:tmk_core/common/avr/suspend.c ****     wdt_disable();
 123:tmk_core/common/avr/suspend.c **** }
 124:tmk_core/common/avr/suspend.c **** #endif
 125:tmk_core/common/avr/suspend.c **** 
 126:tmk_core/common/avr/suspend.c **** /** \brief Suspend power down
 127:tmk_core/common/avr/suspend.c ****  *
 128:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 129:tmk_core/common/avr/suspend.c ****  */
 130:tmk_core/common/avr/suspend.c **** void suspend_power_down(void) {
 131:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
 132:tmk_core/common/avr/suspend.c ****     if (USB_DeviceState == DEVICE_STATE_Configured) return;
 133:tmk_core/common/avr/suspend.c **** #endif
 134:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_VUSB
 135:tmk_core/common/avr/suspend.c ****     if (!vusb_suspended) return;
 136:tmk_core/common/avr/suspend.c **** #endif
 137:tmk_core/common/avr/suspend.c **** 
 138:tmk_core/common/avr/suspend.c ****     suspend_power_down_kb();
 139:tmk_core/common/avr/suspend.c **** 
 140:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 141:tmk_core/common/avr/suspend.c ****     // Turn off backlight
 142:tmk_core/common/avr/suspend.c **** #    ifdef BACKLIGHT_ENABLE
 143:tmk_core/common/avr/suspend.c ****     backlight_set(0);
 144:tmk_core/common/avr/suspend.c **** #    endif
 145:tmk_core/common/avr/suspend.c **** 
 146:tmk_core/common/avr/suspend.c ****     // Turn off LED indicators
 147:tmk_core/common/avr/suspend.c ****     uint8_t leds_off = 0;
 148:tmk_core/common/avr/suspend.c **** #    if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
 149:tmk_core/common/avr/suspend.c ****     if (is_backlight_enabled()) {
 150:tmk_core/common/avr/suspend.c ****         // Don't try to turn off Caps Lock indicator as it is backlight and backlight is already of
 151:tmk_core/common/avr/suspend.c ****         leds_off |= (1 << USB_LED_CAPS_LOCK);
 152:tmk_core/common/avr/suspend.c ****     }
 153:tmk_core/common/avr/suspend.c **** #    endif
 154:tmk_core/common/avr/suspend.c ****     led_set(leds_off);
 155:tmk_core/common/avr/suspend.c **** 
 156:tmk_core/common/avr/suspend.c ****     // Turn off audio
 157:tmk_core/common/avr/suspend.c **** #    ifdef AUDIO_ENABLE
 158:tmk_core/common/avr/suspend.c ****     stop_all_notes();
 159:tmk_core/common/avr/suspend.c **** #    endif
 160:tmk_core/common/avr/suspend.c **** 
 161:tmk_core/common/avr/suspend.c ****     // Turn off underglow
 162:tmk_core/common/avr/suspend.c **** #    if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
 163:tmk_core/common/avr/suspend.c ****     rgblight_suspend();
 164:tmk_core/common/avr/suspend.c **** #    endif
 165:tmk_core/common/avr/suspend.c **** 
 166:tmk_core/common/avr/suspend.c **** #    if defined(LED_MATRIX_ENABLE)
 167:tmk_core/common/avr/suspend.c ****     led_matrix_set_suspend_state(true);
 168:tmk_core/common/avr/suspend.c **** #    endif
 169:tmk_core/common/avr/suspend.c **** #    if defined(RGB_MATRIX_ENABLE)
 170:tmk_core/common/avr/suspend.c ****     rgb_matrix_set_suspend_state(true);
 171:tmk_core/common/avr/suspend.c **** #    endif
 172:tmk_core/common/avr/suspend.c **** 
 173:tmk_core/common/avr/suspend.c ****     // Enter sleep state if possible (ie, the MCU has a watchdog timeout interrupt)
 174:tmk_core/common/avr/suspend.c **** #    if defined(WDT_vect)
 175:tmk_core/common/avr/suspend.c ****     power_down(WDTO_15MS);
 176:tmk_core/common/avr/suspend.c **** #    endif
 177:tmk_core/common/avr/suspend.c **** #endif
 178:tmk_core/common/avr/suspend.c **** }
 179:tmk_core/common/avr/suspend.c **** 
 180:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void matrix_power_up(void) {}
  73               		.loc 1 180 50 is_stmt 1 view -0
  74               		.cfi_startproc
  75               	/* prologue: function */
  76               	/* frame size = 0 */
  77               	/* stack size = 0 */
  78               	.L__stack_usage = 0
  79               		.loc 1 180 51 view .LVU18
  80               	/* epilogue start */
  81 0000 0895      		ret
  82               		.cfi_endproc
  83               	.LFE117:
  85               		.set	matrix_power_up.localalias,matrix_power_up
  86               		.section	.text.suspend_power_down_user,"ax",@progbits
  87               		.weak	suspend_power_down_user
  89               	suspend_power_down_user:
  90               	.LFB129:
  91               		.cfi_startproc
  92               	/* prologue: function */
  93               	/* frame size = 0 */
  94               	/* stack size = 0 */
  95               	.L__stack_usage = 0
  96               	/* epilogue start */
  97 0000 0895      		ret
  98               		.cfi_endproc
  99               	.LFE129:
 101               		.section	.text.suspend_power_down_kb,"ax",@progbits
 102               		.weak	suspend_power_down_kb
 104               	suspend_power_down_kb:
 105               	.LFB114:
  62:tmk_core/common/avr/suspend.c **** 
 106               		.loc 1 62 56 view -0
 107               		.cfi_startproc
 108               	/* prologue: function */
 109               	/* frame size = 0 */
 110               	/* stack size = 0 */
 111               	.L__stack_usage = 0
  62:tmk_core/common/avr/suspend.c **** 
 112               		.loc 1 62 58 view .LVU20
 113 0000 0C94 0000 		jmp suspend_power_down_user
 114               	.LVL2:
 115               		.cfi_endproc
 116               	.LFE114:
 118               		.section	.text.suspend_power_down,"ax",@progbits
 119               	.global	suspend_power_down
 121               	suspend_power_down:
 122               	.LFB116:
 130:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
 123               		.loc 1 130 31 view -0
 124               		.cfi_startproc
 125               	/* prologue: function */
 126               	/* frame size = 0 */
 127               	/* stack size = 0 */
 128               	.L__stack_usage = 0
 132:tmk_core/common/avr/suspend.c **** #endif
 129               		.loc 1 132 5 view .LVU22
 132:tmk_core/common/avr/suspend.c **** #endif
 130               		.loc 1 132 25 is_stmt 0 view .LVU23
 131 0000 8091 0000 		lds r24,USB_DeviceState
 132:tmk_core/common/avr/suspend.c **** #endif
 132               		.loc 1 132 8 view .LVU24
 133 0004 8430      		cpi r24,lo8(4)
 134 0006 01F0      		breq .L5
 138:tmk_core/common/avr/suspend.c **** 
 135               		.loc 1 138 5 is_stmt 1 view .LVU25
 136 0008 0E94 0000 		call suspend_power_down_kb
 137               	.LVL3:
 143:tmk_core/common/avr/suspend.c **** #    endif
 138               		.loc 1 143 5 view .LVU26
 139 000c 80E0      		ldi r24,0
 140 000e 0E94 0000 		call backlight_set
 141               	.LVL4:
 147:tmk_core/common/avr/suspend.c **** #    if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
 142               		.loc 1 147 5 view .LVU27
 154:tmk_core/common/avr/suspend.c **** 
 143               		.loc 1 154 5 view .LVU28
 144 0012 80E0      		ldi r24,0
 145 0014 0E94 0000 		call led_set
 146               	.LVL5:
 175:tmk_core/common/avr/suspend.c **** #    endif
 147               		.loc 1 175 5 view .LVU29
 148               	.LBB11:
 149               	.LBI11:
 103:tmk_core/common/avr/suspend.c ****     wdt_timeout = wdto;
 150               		.loc 1 103 13 view .LVU30
 151               	.LBB12:
 104:tmk_core/common/avr/suspend.c **** 
 152               		.loc 1 104 5 view .LVU31
 104:tmk_core/common/avr/suspend.c **** 
 153               		.loc 1 104 17 is_stmt 0 view .LVU32
 154 0018 1092 0000 		sts wdt_timeout,__zero_reg__
 107:tmk_core/common/avr/suspend.c **** 
 155               		.loc 1 107 5 is_stmt 1 view .LVU33
 156 001c 88E1      		ldi r24,lo8(24)
 157 001e 90E0      		ldi r25,0
 158 0020 20E4      		ldi r18,lo8(64)
 159               	/* #APP */
 160               	 ;  107 "tmk_core/common/avr/suspend.c" 1
 161 0022 0FB6      		in __tmp_reg__,__SREG__
 162 0024 F894      		cli
 163 0026 A895      		wdr
 164 0028 8093 6000 		sts 96,r24
 165 002c 0FBE      		out __SREG__,__tmp_reg__
 166 002e 2093 6000 		sts 96,r18
 167               		
 168               	 ;  0 "" 2
 115:tmk_core/common/avr/suspend.c ****     sleep_enable();
 169               		.loc 1 115 5 view .LVU34
 115:tmk_core/common/avr/suspend.c ****     sleep_enable();
 170               		.loc 1 115 5 view .LVU35
 171               	/* #NOAPP */
 172 0032 83B7      		in r24,0x33
 173 0034 817F      		andi r24,lo8(-15)
 174 0036 8460      		ori r24,lo8(4)
 175 0038 83BF      		out 0x33,r24
 115:tmk_core/common/avr/suspend.c ****     sleep_enable();
 176               		.loc 1 115 5 view .LVU36
 116:tmk_core/common/avr/suspend.c ****     sei();
 177               		.loc 1 116 5 view .LVU37
 116:tmk_core/common/avr/suspend.c ****     sei();
 178               		.loc 1 116 5 view .LVU38
 179 003a 83B7      		in r24,0x33
 180 003c 8160      		ori r24,lo8(1)
 181 003e 83BF      		out 0x33,r24
 116:tmk_core/common/avr/suspend.c ****     sei();
 182               		.loc 1 116 5 view .LVU39
 117:tmk_core/common/avr/suspend.c ****     sleep_cpu();
 183               		.loc 1 117 5 view .LVU40
 184               	/* #APP */
 185               	 ;  117 "tmk_core/common/avr/suspend.c" 1
 186 0040 7894      		sei
 187               	 ;  0 "" 2
 118:tmk_core/common/avr/suspend.c ****     sleep_disable();
 188               		.loc 1 118 5 view .LVU41
 118:tmk_core/common/avr/suspend.c ****     sleep_disable();
 189               		.loc 1 118 5 view .LVU42
 190               	 ;  118 "tmk_core/common/avr/suspend.c" 1
 191 0042 8895      		sleep
 192               		
 193               	 ;  0 "" 2
 118:tmk_core/common/avr/suspend.c ****     sleep_disable();
 194               		.loc 1 118 5 view .LVU43
 119:tmk_core/common/avr/suspend.c **** 
 195               		.loc 1 119 5 view .LVU44
 119:tmk_core/common/avr/suspend.c **** 
 196               		.loc 1 119 5 view .LVU45
 197               	/* #NOAPP */
 198 0044 83B7      		in r24,0x33
 199 0046 8E7F      		andi r24,lo8(-2)
 200 0048 83BF      		out 0x33,r24
 119:tmk_core/common/avr/suspend.c **** 
 201               		.loc 1 119 5 view .LVU46
 122:tmk_core/common/avr/suspend.c **** }
 202               		.loc 1 122 5 view .LVU47
 203               	.LBB13:
 204               	.LBI13:
 205               		.file 2 "/usr/avr/include/avr/wdt.h"
   1:/usr/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/avr/include/avr/wdt.h **** 
   5:/usr/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/avr/include/avr/wdt.h **** 
   8:/usr/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/avr/include/avr/wdt.h **** 
  11:/usr/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/avr/include/avr/wdt.h ****      distribution.
  15:/usr/avr/include/avr/wdt.h **** 
  16:/usr/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/avr/include/avr/wdt.h **** 
  20:/usr/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/avr/include/avr/wdt.h **** 
  32:/usr/avr/include/avr/wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:/usr/avr/include/avr/wdt.h **** 
  34:/usr/avr/include/avr/wdt.h **** /*
  35:/usr/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/avr/include/avr/wdt.h ****  */
  37:/usr/avr/include/avr/wdt.h **** 
  38:/usr/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/avr/include/avr/wdt.h **** 
  41:/usr/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/avr/include/avr/wdt.h **** 
  44:/usr/avr/include/avr/wdt.h **** /** \file */
  45:/usr/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/avr/include/avr/wdt.h **** 
  48:/usr/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/avr/include/avr/wdt.h **** 
  57:/usr/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/avr/include/avr/wdt.h **** 
  61:/usr/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/avr/include/avr/wdt.h ****     the following:
  68:/usr/avr/include/avr/wdt.h **** 
  69:/usr/avr/include/avr/wdt.h ****     \code
  70:/usr/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/avr/include/avr/wdt.h **** 
  73:/usr/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/avr/include/avr/wdt.h **** 
  75:/usr/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/avr/include/avr/wdt.h ****     {
  80:/usr/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/avr/include/avr/wdt.h ****     }
  84:/usr/avr/include/avr/wdt.h ****     \endcode
  85:/usr/avr/include/avr/wdt.h **** 
  86:/usr/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/avr/include/avr/wdt.h **** */
  91:/usr/avr/include/avr/wdt.h **** 
  92:/usr/avr/include/avr/wdt.h **** /**
  93:/usr/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/avr/include/avr/wdt.h **** */
  98:/usr/avr/include/avr/wdt.h **** 
  99:/usr/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/avr/include/avr/wdt.h **** 
 101:/usr/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/avr/include/avr/wdt.h **** 
 103:/usr/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/avr/include/avr/wdt.h **** #else
 106:/usr/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/avr/include/avr/wdt.h **** #endif
 108:/usr/avr/include/avr/wdt.h **** 
 109:/usr/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/avr/include/avr/wdt.h **** #else
 114:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/avr/include/avr/wdt.h **** #endif
 116:/usr/avr/include/avr/wdt.h **** 
 117:/usr/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/avr/include/avr/wdt.h **** #else
 120:/usr/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/avr/include/avr/wdt.h **** #endif
 122:/usr/avr/include/avr/wdt.h **** 
 123:/usr/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/avr/include/avr/wdt.h **** 
 125:/usr/avr/include/avr/wdt.h **** 
 126:/usr/avr/include/avr/wdt.h **** /**
 127:/usr/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/avr/include/avr/wdt.h **** 
 134:/usr/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/avr/include/avr/wdt.h **** */
 136:/usr/avr/include/avr/wdt.h **** 
 137:/usr/avr/include/avr/wdt.h **** 
 138:/usr/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/avr/include/avr/wdt.h **** 
 140:/usr/avr/include/avr/wdt.h **** /*
 141:/usr/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 142:/usr/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:/usr/avr/include/avr/wdt.h ****    registers to the CCP register
 144:/usr/avr/include/avr/wdt.h **** ** At the same time,
 145:/usr/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:/usr/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:/usr/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 148:/usr/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:/usr/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:/usr/avr/include/avr/wdt.h ****    sync is finished).
 151:/usr/avr/include/avr/wdt.h **** */
 152:/usr/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 153:/usr/avr/include/avr/wdt.h **** do { \
 154:/usr/avr/include/avr/wdt.h **** uint8_t temp; \
 155:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 156:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:/usr/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:/usr/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:/usr/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:/usr/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:/usr/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:/usr/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 165:/usr/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:/usr/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:/usr/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:/usr/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:/usr/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:/usr/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:/usr/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:/usr/avr/include/avr/wdt.h ****     : "r0" \
 173:/usr/avr/include/avr/wdt.h **** ); \
 174:/usr/avr/include/avr/wdt.h **** } while(0)
 175:/usr/avr/include/avr/wdt.h **** 
 176:/usr/avr/include/avr/wdt.h **** #define wdt_disable() \
 177:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 178:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:/usr/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:/usr/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:/usr/avr/include/avr/wdt.h ****     : \
 184:/usr/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:/usr/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:/usr/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:/usr/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:/usr/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:/usr/avr/include/avr/wdt.h ****     : "r0" \
 190:/usr/avr/include/avr/wdt.h **** );
 191:/usr/avr/include/avr/wdt.h **** 
 192:/usr/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 193:/usr/avr/include/avr/wdt.h **** 
 194:/usr/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 195:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 196:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:/usr/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 198:/usr/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 199:/usr/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:/usr/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:/usr/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:/usr/avr/include/avr/wdt.h ****     : /* no outputs */  \
 203:/usr/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:/usr/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:/usr/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:/usr/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:/usr/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:/usr/avr/include/avr/wdt.h ****     : "r16" \
 209:/usr/avr/include/avr/wdt.h **** )
 210:/usr/avr/include/avr/wdt.h **** 
 211:/usr/avr/include/avr/wdt.h **** #define wdt_disable() \
 212:/usr/avr/include/avr/wdt.h **** do { \
 213:/usr/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 214:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 215:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:/usr/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 217:/usr/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 218:/usr/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:/usr/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:/usr/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:/usr/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:/usr/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:/usr/avr/include/avr/wdt.h ****     : /*no output */ \
 224:/usr/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:/usr/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:/usr/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:/usr/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:/usr/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:/usr/avr/include/avr/wdt.h ****     : "r16" \
 230:/usr/avr/include/avr/wdt.h **** ); \
 231:/usr/avr/include/avr/wdt.h **** }while(0)
 232:/usr/avr/include/avr/wdt.h **** 
 233:/usr/avr/include/avr/wdt.h **** #elif defined(CCP)
 234:/usr/avr/include/avr/wdt.h **** 
 235:/usr/avr/include/avr/wdt.h **** static __inline__
 236:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 237:/usr/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 238:/usr/avr/include/avr/wdt.h **** {
 239:/usr/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:/usr/avr/include/avr/wdt.h **** 	{
 241:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 242:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 244:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 245:/usr/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:/usr/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 249:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:/usr/avr/include/avr/wdt.h **** 			: "r0"
 255:/usr/avr/include/avr/wdt.h **** 			);
 256:/usr/avr/include/avr/wdt.h **** 	}
 257:/usr/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:/usr/avr/include/avr/wdt.h **** 	{
 259:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 260:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 262:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 263:/usr/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:/usr/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 267:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:/usr/avr/include/avr/wdt.h **** 			: "r0"
 273:/usr/avr/include/avr/wdt.h **** 			);
 274:/usr/avr/include/avr/wdt.h **** 	}
 275:/usr/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:/usr/avr/include/avr/wdt.h **** 	{
 277:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 278:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 280:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 281:/usr/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:/usr/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 285:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:/usr/avr/include/avr/wdt.h **** 			: "r0"
 291:/usr/avr/include/avr/wdt.h **** 			);
 292:/usr/avr/include/avr/wdt.h **** 	}
 293:/usr/avr/include/avr/wdt.h **** 	else
 294:/usr/avr/include/avr/wdt.h ****  	{
 295:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 296:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 298:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 299:/usr/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:/usr/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 303:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:/usr/avr/include/avr/wdt.h **** 			: "r0"
 309:/usr/avr/include/avr/wdt.h **** 			);
 310:/usr/avr/include/avr/wdt.h **** 	}
 311:/usr/avr/include/avr/wdt.h **** }
 312:/usr/avr/include/avr/wdt.h **** 
 313:/usr/avr/include/avr/wdt.h **** static __inline__
 314:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 315:/usr/avr/include/avr/wdt.h **** void wdt_disable (void)
 316:/usr/avr/include/avr/wdt.h **** {
 317:/usr/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:/usr/avr/include/avr/wdt.h **** 	{
 319:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 320:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 321:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 323:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 324:/usr/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:/usr/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:/usr/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 330:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:/usr/avr/include/avr/wdt.h **** 				: "r0"
 336:/usr/avr/include/avr/wdt.h **** 				);
 337:/usr/avr/include/avr/wdt.h **** 	}
 338:/usr/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:/usr/avr/include/avr/wdt.h **** 	{
 340:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 341:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 342:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 344:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 345:/usr/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:/usr/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 351:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:/usr/avr/include/avr/wdt.h **** 				: "r0"
 357:/usr/avr/include/avr/wdt.h **** 				);
 358:/usr/avr/include/avr/wdt.h **** 	}
 359:/usr/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:/usr/avr/include/avr/wdt.h **** 	{
 361:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 362:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 363:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 365:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 366:/usr/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:/usr/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:/usr/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 372:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:/usr/avr/include/avr/wdt.h **** 				: "r0"
 378:/usr/avr/include/avr/wdt.h **** 				);
 379:/usr/avr/include/avr/wdt.h **** 	}
 380:/usr/avr/include/avr/wdt.h **** 	else
 381:/usr/avr/include/avr/wdt.h **** 	{
 382:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 383:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 384:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 386:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 387:/usr/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:/usr/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 393:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:/usr/avr/include/avr/wdt.h **** 				: "r0"
 399:/usr/avr/include/avr/wdt.h **** 				);
 400:/usr/avr/include/avr/wdt.h **** 	}
 401:/usr/avr/include/avr/wdt.h **** }
 402:/usr/avr/include/avr/wdt.h **** 
 403:/usr/avr/include/avr/wdt.h **** #else
 404:/usr/avr/include/avr/wdt.h **** 
 405:/usr/avr/include/avr/wdt.h **** static __inline__
 406:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 407:/usr/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 408:/usr/avr/include/avr/wdt.h **** {
 409:/usr/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:/usr/avr/include/avr/wdt.h **** 	{
 411:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 412:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 414:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 415:/usr/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 416:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:/usr/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 418:/usr/avr/include/avr/wdt.h **** 				: /* no outputs */
 419:/usr/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:/usr/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:/usr/avr/include/avr/wdt.h **** 				: "r0"
 424:/usr/avr/include/avr/wdt.h **** 		);
 425:/usr/avr/include/avr/wdt.h **** 	}
 426:/usr/avr/include/avr/wdt.h **** 	else
 427:/usr/avr/include/avr/wdt.h **** 	{
 428:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 429:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 433:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:/usr/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 435:/usr/avr/include/avr/wdt.h **** 				: /* no outputs */
 436:/usr/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:/usr/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:/usr/avr/include/avr/wdt.h **** 				: "r0"
 441:/usr/avr/include/avr/wdt.h **** 		);
 442:/usr/avr/include/avr/wdt.h **** 	}
 443:/usr/avr/include/avr/wdt.h **** }
 444:/usr/avr/include/avr/wdt.h **** 
 445:/usr/avr/include/avr/wdt.h **** static __inline__
 446:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 447:/usr/avr/include/avr/wdt.h **** void wdt_disable (void)
 206               		.loc 2 447 6 view .LVU48
 448:/usr/avr/include/avr/wdt.h **** {
 449:/usr/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 207               		.loc 2 449 2 view .LVU49
 208               	.LBB14:
 450:/usr/avr/include/avr/wdt.h **** 	{
 451:/usr/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 452:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 453:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:/usr/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 455:/usr/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 456:/usr/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:/usr/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:/usr/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:/usr/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:/usr/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:/usr/avr/include/avr/wdt.h **** 				: "r0"
 465:/usr/avr/include/avr/wdt.h **** 		);
 466:/usr/avr/include/avr/wdt.h **** 	}
 467:/usr/avr/include/avr/wdt.h **** 	else
 468:/usr/avr/include/avr/wdt.h **** 	{
 469:/usr/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 209               		.loc 2 469 9 view .LVU50
 470:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 210               		.loc 2 470 3 view .LVU51
 211               	/* #APP */
 212               	 ;  470 "/usr/avr/include/avr/wdt.h" 1
 213 004a 0FB6      		in __tmp_reg__,__SREG__
 214 004c F894      		cli
 215 004e A895      		wdr
 216 0050 8091 6000 		lds r24,96
 217 0054 8861      		ori r24,24
 218 0056 8093 6000 		sts 96,r24
 219 005a 1092 6000 		sts 96,__zero_reg__
 220 005e 0FBE      		out __SREG__,__tmp_reg__
 221               		
 222               	 ;  0 "" 2
 223               	.LVL6:
 224               	/* #NOAPP */
 225               	.L5:
 226               	/* epilogue start */
 227               		.loc 2 470 3 is_stmt 0 view .LVU52
 228               	.LBE14:
 229               	.LBE13:
 230               	.LBE12:
 231               	.LBE11:
 178:tmk_core/common/avr/suspend.c **** 
 232               		.loc 1 178 1 view .LVU53
 233 0060 0895      		ret
 234               		.cfi_endproc
 235               	.LFE116:
 237               		.section	.text.matrix_power_down,"ax",@progbits
 238               		.weak	matrix_power_down
 240               	matrix_power_down:
 241               	.LFB125:
 242               		.cfi_startproc
 243               	/* prologue: function */
 244               	/* frame size = 0 */
 245               	/* stack size = 0 */
 246               	.L__stack_usage = 0
 247               	/* epilogue start */
 248 0000 0895      		ret
 249               		.cfi_endproc
 250               	.LFE125:
 252               		.section	.text.suspend_wakeup_condition,"ax",@progbits
 253               	.global	suspend_wakeup_condition
 255               	suspend_wakeup_condition:
 256               	.LFB119:
 181:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void matrix_power_down(void) {}
 182:tmk_core/common/avr/suspend.c **** bool                       suspend_wakeup_condition(void) {
 257               		.loc 1 182 59 is_stmt 1 view -0
 258               		.cfi_startproc
 259               	/* prologue: function */
 260               	/* frame size = 0 */
 261               	/* stack size = 0 */
 262               	.L__stack_usage = 0
 183:tmk_core/common/avr/suspend.c ****     matrix_power_up();
 263               		.loc 1 183 5 view .LVU55
 264 0000 0E94 0000 		call matrix_power_up
 265               	.LVL7:
 184:tmk_core/common/avr/suspend.c ****     matrix_scan();
 266               		.loc 1 184 5 view .LVU56
 267 0004 0E94 0000 		call matrix_scan
 268               	.LVL8:
 185:tmk_core/common/avr/suspend.c ****     matrix_power_down();
 269               		.loc 1 185 5 view .LVU57
 270 0008 0E94 0000 		call matrix_power_down
 271               	.LVL9:
 186:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 272               		.loc 1 186 5 view .LVU58
 273               	.LBB15:
 274               		.loc 1 186 10 view .LVU59
 275               		.loc 1 186 27 view .LVU60
 187:tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 276               		.loc 1 187 9 view .LVU61
 277               		.loc 1 187 13 is_stmt 0 view .LVU62
 278 000c 80E0      		ldi r24,0
 279 000e 0E94 0000 		call matrix_get_row
 280               	.LVL10:
 281 0012 982F      		mov r25,r24
 282               		.loc 1 187 12 view .LVU63
 283 0014 81E0      		ldi r24,lo8(1)
 284 0016 9111      		cpse r25,__zero_reg__
 285 0018 00C0      		rjmp .L12
 286 001a 80E0      		ldi r24,0
 287               	.L12:
 288               	/* epilogue start */
 289               	.LBE15:
 188:tmk_core/common/avr/suspend.c ****     }
 189:tmk_core/common/avr/suspend.c ****     return false;
 190:tmk_core/common/avr/suspend.c **** }
 290               		.loc 1 190 1 view .LVU64
 291 001c 0895      		ret
 292               		.cfi_endproc
 293               	.LFE119:
 295               		.section	.text.suspend_wakeup_init_user,"ax",@progbits
 296               		.weak	suspend_wakeup_init_user
 298               	suspend_wakeup_init_user:
 299               	.LFB127:
 300               		.cfi_startproc
 301               	/* prologue: function */
 302               	/* frame size = 0 */
 303               	/* stack size = 0 */
 304               	.L__stack_usage = 0
 305               	/* epilogue start */
 306 0000 0895      		ret
 307               		.cfi_endproc
 308               	.LFE127:
 310               		.section	.text.suspend_wakeup_init_kb,"ax",@progbits
 311               		.weak	suspend_wakeup_init_kb
 313               	suspend_wakeup_init_kb:
 314               	.LFB121:
 191:tmk_core/common/avr/suspend.c **** 
 192:tmk_core/common/avr/suspend.c **** /** \brief run user level code immediately after wakeup
 193:tmk_core/common/avr/suspend.c ****  *
 194:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 195:tmk_core/common/avr/suspend.c ****  */
 196:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_wakeup_init_user(void) {}
 197:tmk_core/common/avr/suspend.c **** 
 198:tmk_core/common/avr/suspend.c **** /** \brief run keyboard level code immediately after wakeup
 199:tmk_core/common/avr/suspend.c ****  *
 200:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 201:tmk_core/common/avr/suspend.c ****  */
 202:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_wakeup_init_kb(void) { suspend_wakeup_init_user(); }
 315               		.loc 1 202 57 is_stmt 1 view -0
 316               		.cfi_startproc
 317               	/* prologue: function */
 318               	/* frame size = 0 */
 319               	/* stack size = 0 */
 320               	.L__stack_usage = 0
 321               		.loc 1 202 59 view .LVU66
 322 0000 0C94 0000 		jmp suspend_wakeup_init_user
 323               	.LVL11:
 324               		.cfi_endproc
 325               	.LFE121:
 327               		.section	.text.suspend_wakeup_init,"ax",@progbits
 328               	.global	suspend_wakeup_init
 330               	suspend_wakeup_init:
 331               	.LFB122:
 203:tmk_core/common/avr/suspend.c **** 
 204:tmk_core/common/avr/suspend.c **** /** \brief run immediately after wakeup
 205:tmk_core/common/avr/suspend.c ****  *
 206:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 207:tmk_core/common/avr/suspend.c ****  */
 208:tmk_core/common/avr/suspend.c **** void suspend_wakeup_init(void) {
 332               		.loc 1 208 32 view -0
 333               		.cfi_startproc
 334               	/* prologue: function */
 335               	/* frame size = 0 */
 336               	/* stack size = 0 */
 337               	.L__stack_usage = 0
 209:tmk_core/common/avr/suspend.c ****     // clear keyboard state
 210:tmk_core/common/avr/suspend.c ****     clear_keyboard();
 338               		.loc 1 210 5 view .LVU68
 339 0000 0E94 0000 		call clear_keyboard
 340               	.LVL12:
 211:tmk_core/common/avr/suspend.c **** 
 212:tmk_core/common/avr/suspend.c ****     // Turn on backlight
 213:tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
 214:tmk_core/common/avr/suspend.c ****     backlight_init();
 341               		.loc 1 214 5 view .LVU69
 342 0004 0E94 0000 		call backlight_init
 343               	.LVL13:
 215:tmk_core/common/avr/suspend.c **** #endif
 216:tmk_core/common/avr/suspend.c **** 
 217:tmk_core/common/avr/suspend.c ****     // Restore LED indicators
 218:tmk_core/common/avr/suspend.c ****     led_set(host_keyboard_leds());
 344               		.loc 1 218 5 view .LVU70
 345 0008 0E94 0000 		call host_keyboard_leds
 346               	.LVL14:
 347 000c 0E94 0000 		call led_set
 348               	.LVL15:
 219:tmk_core/common/avr/suspend.c **** 
 220:tmk_core/common/avr/suspend.c ****     // Wake up underglow
 221:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
 222:tmk_core/common/avr/suspend.c ****     rgblight_wakeup();
 223:tmk_core/common/avr/suspend.c **** #endif
 224:tmk_core/common/avr/suspend.c **** 
 225:tmk_core/common/avr/suspend.c **** #if defined(LED_MATRIX_ENABLE)
 226:tmk_core/common/avr/suspend.c ****     led_matrix_set_suspend_state(false);
 227:tmk_core/common/avr/suspend.c **** #endif
 228:tmk_core/common/avr/suspend.c **** #if defined(RGB_MATRIX_ENABLE)
 229:tmk_core/common/avr/suspend.c ****     rgb_matrix_set_suspend_state(false);
 230:tmk_core/common/avr/suspend.c **** #endif
 231:tmk_core/common/avr/suspend.c **** 
 232:tmk_core/common/avr/suspend.c ****     suspend_wakeup_init_kb();
 349               		.loc 1 232 5 view .LVU71
 350 0010 0C94 0000 		jmp suspend_wakeup_init_kb
 351               	.LVL16:
 352               		.cfi_endproc
 353               	.LFE122:
 355               		.section	.text.__vector_12,"ax",@progbits
 356               	.global	__vector_12
 358               	__vector_12:
 359               	.LFB123:
 233:tmk_core/common/avr/suspend.c **** }
 234:tmk_core/common/avr/suspend.c **** 
 235:tmk_core/common/avr/suspend.c **** #if !defined(NO_SUSPEND_POWER_DOWN) && defined(WDT_vect)
 236:tmk_core/common/avr/suspend.c **** /* watchdog timeout */
 237:tmk_core/common/avr/suspend.c **** ISR(WDT_vect) {
 360               		.loc 1 237 15 view -0
 361               		.cfi_startproc
 362 0000 1F92 1FB6 		__gcc_isr 1
 362      1F92 1124 
 362      8F93 
 363 000a 9F93      		push r25
 364               	.LCFI0:
 365               		.cfi_def_cfa_offset 3
 366               		.cfi_offset 25, -2
 367 000c AF93      		push r26
 368               	.LCFI1:
 369               		.cfi_def_cfa_offset 4
 370               		.cfi_offset 26, -3
 371 000e BF93      		push r27
 372               	.LCFI2:
 373               		.cfi_def_cfa_offset 5
 374               		.cfi_offset 27, -4
 375               	/* prologue: Signal */
 376               	/* frame size = 0 */
 377               	/* stack size = 3...7 */
 378               	.L__stack_usage = 3 + __gcc_isr.n_pushed
 238:tmk_core/common/avr/suspend.c ****     // compensate timer for sleep
 239:tmk_core/common/avr/suspend.c ****     switch (wdt_timeout) {
 379               		.loc 1 239 5 view .LVU73
 380 0010 8091 0000 		lds r24,wdt_timeout
 381 0014 8111      		cpse r24,__zero_reg__
 382 0016 00C0      		rjmp .L16
 240:tmk_core/common/avr/suspend.c ****         case WDTO_15MS:
 241:tmk_core/common/avr/suspend.c ****             timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
 383               		.loc 1 241 13 view .LVU74
 384               		.loc 1 241 25 is_stmt 0 view .LVU75
 385 0018 8091 0000 		lds r24,timer_count
 386 001c 9091 0000 		lds r25,timer_count+1
 387 0020 A091 0000 		lds r26,timer_count+2
 388 0024 B091 0000 		lds r27,timer_count+3
 389 0028 4196      		adiw r24,17
 390 002a A11D      		adc r26,__zero_reg__
 391 002c B11D      		adc r27,__zero_reg__
 392 002e 8093 0000 		sts timer_count,r24
 393 0032 9093 0000 		sts timer_count+1,r25
 394 0036 A093 0000 		sts timer_count+2,r26
 395 003a B093 0000 		sts timer_count+3,r27
 242:tmk_core/common/avr/suspend.c ****             break;
 396               		.loc 1 242 13 is_stmt 1 view .LVU76
 243:tmk_core/common/avr/suspend.c ****         default:;
 397               		.loc 1 243 17 view .LVU77
 398               	.L16:
 399               	/* epilogue start */
 244:tmk_core/common/avr/suspend.c ****     }
 245:tmk_core/common/avr/suspend.c **** }
 400               		.loc 1 245 1 is_stmt 0 view .LVU78
 401 003e BF91      		pop r27
 402 0040 AF91      		pop r26
 403 0042 9F91      		pop r25
 404 0044 8F91 1F90 		__gcc_isr 2
 404      1FBE 1F90 
 405 004c 1895      		reti
 406               		__gcc_isr 0,r24
 407               		.cfi_endproc
 408               	.LFE123:
 410               		.section	.bss.wdt_timeout,"aw",@nobits
 413               	wdt_timeout:
 414 0000 00        		.zero	1
 415               		.text
 416               	.Letext0:
 417               		.file 3 "/usr/avr/include/stdint.h"
 418               		.file 4 "quantum/matrix.h"
 419               		.file 5 "tmk_core/common/timer.h"
 420               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 421               		.file 7 "quantum/backlight/backlight.h"
 422               		.file 8 "quantum/action.h"
 423               		.file 9 "tmk_core/common/host.h"
 424               		.file 10 "quantum/led.h"
 425               		.file 11 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 suspend.c
     /tmp/ccNntJLl.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccNntJLl.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccNntJLl.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccNntJLl.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccNntJLl.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccNntJLl.s:13     .text.suspend_idle:0000000000000000 suspend_idle
     /tmp/ccNntJLl.s:71     .text.matrix_power_up:0000000000000000 matrix_power_up
     /tmp/ccNntJLl.s:71     .text.matrix_power_up:0000000000000000 matrix_power_up.localalias
     /tmp/ccNntJLl.s:89     .text.suspend_power_down_user:0000000000000000 suspend_power_down_user
     /tmp/ccNntJLl.s:104    .text.suspend_power_down_kb:0000000000000000 suspend_power_down_kb
     /tmp/ccNntJLl.s:121    .text.suspend_power_down:0000000000000000 suspend_power_down
     /tmp/ccNntJLl.s:413    .bss.wdt_timeout:0000000000000000 wdt_timeout
     /tmp/ccNntJLl.s:240    .text.matrix_power_down:0000000000000000 matrix_power_down
     /tmp/ccNntJLl.s:255    .text.suspend_wakeup_condition:0000000000000000 suspend_wakeup_condition
     /tmp/ccNntJLl.s:298    .text.suspend_wakeup_init_user:0000000000000000 suspend_wakeup_init_user
     /tmp/ccNntJLl.s:313    .text.suspend_wakeup_init_kb:0000000000000000 suspend_wakeup_init_kb
     /tmp/ccNntJLl.s:330    .text.suspend_wakeup_init:0000000000000000 suspend_wakeup_init
     /tmp/ccNntJLl.s:358    .text.__vector_12:0000000000000000 __vector_12
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001

UNDEFINED SYMBOLS
USB_DeviceState
backlight_set
led_set
matrix_scan
matrix_get_row
clear_keyboard
backlight_init
host_keyboard_leds
timer_count
__do_clear_bss
