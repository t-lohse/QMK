   1               		.file	"transport.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.transport_master_init,"ax",@progbits
  11               	.global	transport_master_init
  13               	transport_master_init:
  14               	.LFB30:
  15               		.file 1 "quantum/split_common/transport.c"
   1:quantum/split_common/transport.c **** /* Copyright 2021 QMK
   2:quantum/split_common/transport.c ****  *
   3:quantum/split_common/transport.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/split_common/transport.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/split_common/transport.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/split_common/transport.c ****  * (at your option) any later version.
   7:quantum/split_common/transport.c ****  *
   8:quantum/split_common/transport.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/split_common/transport.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/split_common/transport.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/split_common/transport.c ****  * GNU General Public License for more details.
  12:quantum/split_common/transport.c ****  *
  13:quantum/split_common/transport.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/split_common/transport.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/split_common/transport.c ****  */
  16:quantum/split_common/transport.c **** 
  17:quantum/split_common/transport.c **** #include <string.h>
  18:quantum/split_common/transport.c **** #include <debug.h>
  19:quantum/split_common/transport.c **** 
  20:quantum/split_common/transport.c **** #include "transactions.h"
  21:quantum/split_common/transport.c **** #include "transport.h"
  22:quantum/split_common/transport.c **** #include "transaction_id_define.h"
  23:quantum/split_common/transport.c **** #include "atomic_util.h"
  24:quantum/split_common/transport.c **** 
  25:quantum/split_common/transport.c **** #ifdef USE_I2C
  26:quantum/split_common/transport.c **** 
  27:quantum/split_common/transport.c **** #    ifndef SLAVE_I2C_TIMEOUT
  28:quantum/split_common/transport.c **** #        define SLAVE_I2C_TIMEOUT 100
  29:quantum/split_common/transport.c **** #    endif  // SLAVE_I2C_TIMEOUT
  30:quantum/split_common/transport.c **** 
  31:quantum/split_common/transport.c **** #    ifndef SLAVE_I2C_ADDRESS
  32:quantum/split_common/transport.c **** #        define SLAVE_I2C_ADDRESS 0x32
  33:quantum/split_common/transport.c **** #    endif
  34:quantum/split_common/transport.c **** 
  35:quantum/split_common/transport.c **** #    include "i2c_master.h"
  36:quantum/split_common/transport.c **** #    include "i2c_slave.h"
  37:quantum/split_common/transport.c **** 
  38:quantum/split_common/transport.c **** // Ensure the I2C buffer has enough space
  39:quantum/split_common/transport.c **** _Static_assert(sizeof(split_shared_memory_t) <= I2C_SLAVE_REG_COUNT, "split_shared_memory_t too lar
  40:quantum/split_common/transport.c **** 
  41:quantum/split_common/transport.c **** split_shared_memory_t *const split_shmem = (split_shared_memory_t *)i2c_slave_reg;
  42:quantum/split_common/transport.c **** 
  43:quantum/split_common/transport.c **** void transport_master_init(void) { i2c_init(); }
  44:quantum/split_common/transport.c **** void transport_slave_init(void) { i2c_slave_init(SLAVE_I2C_ADDRESS); }
  45:quantum/split_common/transport.c **** 
  46:quantum/split_common/transport.c **** i2c_status_t transport_trigger_callback(int8_t id) {
  47:quantum/split_common/transport.c ****     // If there's no callback, indicate that we were successful
  48:quantum/split_common/transport.c ****     if (!split_transaction_table[id].slave_callback) {
  49:quantum/split_common/transport.c ****         return I2C_STATUS_SUCCESS;
  50:quantum/split_common/transport.c ****     }
  51:quantum/split_common/transport.c **** 
  52:quantum/split_common/transport.c ****     // Kick off the "callback executor", now that data has been written to the slave
  53:quantum/split_common/transport.c ****     split_shmem->transaction_id     = id;
  54:quantum/split_common/transport.c ****     split_transaction_desc_t *trans = &split_transaction_table[I2C_EXECUTE_CALLBACK];
  55:quantum/split_common/transport.c ****     return i2c_writeReg(SLAVE_I2C_ADDRESS, trans->initiator2target_offset, split_trans_initiator2ta
  56:quantum/split_common/transport.c **** }
  57:quantum/split_common/transport.c **** 
  58:quantum/split_common/transport.c **** bool transport_execute_transaction(int8_t id, const void *initiator2target_buf, uint16_t initiator2
  59:quantum/split_common/transport.c ****     i2c_status_t              status;
  60:quantum/split_common/transport.c ****     split_transaction_desc_t *trans = &split_transaction_table[id];
  61:quantum/split_common/transport.c ****     if (initiator2target_length > 0) {
  62:quantum/split_common/transport.c ****         size_t len = trans->initiator2target_buffer_size < initiator2target_length ? trans->initiat
  63:quantum/split_common/transport.c ****         memcpy(split_trans_initiator2target_buffer(trans), initiator2target_buf, len);
  64:quantum/split_common/transport.c ****         if ((status = i2c_writeReg(SLAVE_I2C_ADDRESS, trans->initiator2target_offset, split_trans_i
  65:quantum/split_common/transport.c ****             return false;
  66:quantum/split_common/transport.c ****         }
  67:quantum/split_common/transport.c ****     }
  68:quantum/split_common/transport.c **** 
  69:quantum/split_common/transport.c ****     // If we need to execute a callback on the slave, do so
  70:quantum/split_common/transport.c ****     if ((status = transport_trigger_callback(id)) < 0) {
  71:quantum/split_common/transport.c ****         return false;
  72:quantum/split_common/transport.c ****     }
  73:quantum/split_common/transport.c **** 
  74:quantum/split_common/transport.c ****     if (target2initiator_length > 0) {
  75:quantum/split_common/transport.c ****         size_t len = trans->target2initiator_buffer_size < target2initiator_length ? trans->target2
  76:quantum/split_common/transport.c ****         if ((status = i2c_readReg(SLAVE_I2C_ADDRESS, trans->target2initiator_offset, split_trans_ta
  77:quantum/split_common/transport.c ****             return false;
  78:quantum/split_common/transport.c ****         }
  79:quantum/split_common/transport.c ****         memcpy(target2initiator_buf, split_trans_target2initiator_buffer(trans), len);
  80:quantum/split_common/transport.c ****     }
  81:quantum/split_common/transport.c **** 
  82:quantum/split_common/transport.c ****     return true;
  83:quantum/split_common/transport.c **** }
  84:quantum/split_common/transport.c **** 
  85:quantum/split_common/transport.c **** #else  // USE_I2C
  86:quantum/split_common/transport.c **** 
  87:quantum/split_common/transport.c **** #    include "serial.h"
  88:quantum/split_common/transport.c **** 
  89:quantum/split_common/transport.c **** static split_shared_memory_t shared_memory;
  90:quantum/split_common/transport.c **** split_shared_memory_t *const split_shmem = &shared_memory;
  91:quantum/split_common/transport.c **** 
  92:quantum/split_common/transport.c **** void transport_master_init(void) { soft_serial_initiator_init(); }
  16               		.loc 1 92 34 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               		.loc 1 92 36 view .LVU1
  23 0000 0C94 0000 		jmp soft_serial_initiator_init
  24               	.LVL0:
  25               		.cfi_endproc
  26               	.LFE30:
  28               		.section	.text.transport_slave_init,"ax",@progbits
  29               	.global	transport_slave_init
  31               	transport_slave_init:
  32               	.LFB31:
  93:quantum/split_common/transport.c **** void transport_slave_init(void) { soft_serial_target_init(); }
  33               		.loc 1 93 33 view -0
  34               		.cfi_startproc
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 0 */
  38               	.L__stack_usage = 0
  39               		.loc 1 93 35 view .LVU3
  40 0000 0C94 0000 		jmp soft_serial_target_init
  41               	.LVL1:
  42               		.cfi_endproc
  43               	.LFE31:
  45               		.section	.text.transport_execute_transaction,"ax",@progbits
  46               	.global	transport_execute_transaction
  48               	transport_execute_transaction:
  49               	.LVL2:
  50               	.LFB32:
  94:quantum/split_common/transport.c **** 
  95:quantum/split_common/transport.c **** bool transport_execute_transaction(int8_t id, const void *initiator2target_buf, uint16_t initiator2
  51               		.loc 1 95 177 view -0
  52               		.cfi_startproc
  53               		.loc 1 95 177 is_stmt 0 view .LVU5
  54 0000 CF92      		push r12
  55               	.LCFI0:
  56               		.cfi_def_cfa_offset 3
  57               		.cfi_offset 12, -2
  58 0002 DF92      		push r13
  59               	.LCFI1:
  60               		.cfi_def_cfa_offset 4
  61               		.cfi_offset 13, -3
  62 0004 EF92      		push r14
  63               	.LCFI2:
  64               		.cfi_def_cfa_offset 5
  65               		.cfi_offset 14, -4
  66 0006 FF92      		push r15
  67               	.LCFI3:
  68               		.cfi_def_cfa_offset 6
  69               		.cfi_offset 15, -5
  70 0008 0F93      		push r16
  71               	.LCFI4:
  72               		.cfi_def_cfa_offset 7
  73               		.cfi_offset 16, -6
  74 000a 1F93      		push r17
  75               	.LCFI5:
  76               		.cfi_def_cfa_offset 8
  77               		.cfi_offset 17, -7
  78 000c CF93      		push r28
  79               	.LCFI6:
  80               		.cfi_def_cfa_offset 9
  81               		.cfi_offset 28, -8
  82 000e DF93      		push r29
  83               	.LCFI7:
  84               		.cfi_def_cfa_offset 10
  85               		.cfi_offset 29, -9
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 8 */
  89               	.L__stack_usage = 8
  90 0010 FA01      		movw r30,r20
  91 0012 6901      		movw r12,r18
  92 0014 7801      		movw r14,r16
  96:quantum/split_common/transport.c ****     split_transaction_desc_t *trans = &split_transaction_table[id];
  93               		.loc 1 96 5 is_stmt 1 view .LVU6
  94               		.loc 1 96 63 is_stmt 0 view .LVU7
  95 0016 C82F      		mov r28,r24
  96 0018 880F      		lsl r24
  97 001a DD0B      		sbc r29,r29
  98               	.LVL3:
  97:quantum/split_common/transport.c ****     if (initiator2target_length > 0) {
  99               		.loc 1 97 5 is_stmt 1 view .LVU8
 100               		.loc 1 97 8 is_stmt 0 view .LVU9
 101 001c 3097      		sbiw r30,0
 102 001e 01F0      		breq .L4
 103               	.LBB2:
  98:quantum/split_common/transport.c ****         size_t len = trans->initiator2target_buffer_size < initiator2target_length ? trans->initiat
 104               		.loc 1 98 9 is_stmt 1 view .LVU10
 105               	.LVL4:
  99:quantum/split_common/transport.c ****         memcpy(split_trans_initiator2target_buffer(trans), initiator2target_buf, len);
 106               		.loc 1 99 9 view .LVU11
 107               		.loc 1 99 16 is_stmt 0 view .LVU12
 108 0020 8AE0      		ldi r24,lo8(10)
 109               	.LVL5:
 110               		.loc 1 99 16 view .LVU13
 111 0022 8C9F      		mul r24,r28
 112 0024 D001      		movw r26,r0
 113 0026 8D9F      		mul r24,r29
 114 0028 B00D      		add r27,r0
 115 002a 1124      		clr __zero_reg__
 116 002c A050      		subi r26,lo8(-(split_transaction_table))
 117 002e B040      		sbci r27,hi8(-(split_transaction_table))
 118               		.loc 1 99 9 view .LVU14
 119 0030 1396      		adiw r26,3
 120 0032 8D91      		ld r24,X+
 121 0034 9C91      		ld r25,X
 122 0036 1497      		sbiw r26,3+1
 123 0038 8050      		subi r24,lo8(-(shared_memory))
 124 003a 9040      		sbci r25,hi8(-(shared_memory))
  98:quantum/split_common/transport.c ****         size_t len = trans->initiator2target_buffer_size < initiator2target_length ? trans->initiat
 125               		.loc 1 98 27 view .LVU15
 126 003c 1296      		adiw r26,2
 127 003e 4C91      		ld r20,X
 128               	.LVL6:
  98:quantum/split_common/transport.c ****         size_t len = trans->initiator2target_buffer_size < initiator2target_length ? trans->initiat
 129               		.loc 1 98 27 view .LVU16
 130 0040 50E0      		ldi r21,0
  98:quantum/split_common/transport.c ****         size_t len = trans->initiator2target_buffer_size < initiator2target_length ? trans->initiat
 131               		.loc 1 98 16 view .LVU17
 132 0042 E417      		cp r30,r20
 133 0044 F507      		cpc r31,r21
 134 0046 00F4      		brsh .L5
 135 0048 AF01      		movw r20,r30
 136               	.L5:
 137               		.loc 1 99 9 view .LVU18
 138 004a 0E94 0000 		call memcpy
 139               	.LVL7:
 140               	.L4:
 141               		.loc 1 99 9 view .LVU19
 142               	.LBE2:
 100:quantum/split_common/transport.c ****     }
 101:quantum/split_common/transport.c **** 
 102:quantum/split_common/transport.c ****     if (soft_serial_transaction(id) != TRANSACTION_END) {
 143               		.loc 1 102 5 is_stmt 1 view .LVU20
 144               		.loc 1 102 9 is_stmt 0 view .LVU21
 145 004e CE01      		movw r24,r28
 146 0050 0E94 0000 		call soft_serial_transaction
 147               	.LVL8:
 148               		.loc 1 102 8 view .LVU22
 149 0054 892B      		or r24,r25
 150 0056 01F4      		brne .L8
 103:quantum/split_common/transport.c ****         return false;
 104:quantum/split_common/transport.c ****     }
 105:quantum/split_common/transport.c **** 
 106:quantum/split_common/transport.c ****     if (target2initiator_length > 0) {
 151               		.loc 1 106 5 is_stmt 1 view .LVU23
 152               		.loc 1 106 8 is_stmt 0 view .LVU24
 153 0058 E114      		cp r14,__zero_reg__
 154 005a F104      		cpc r15,__zero_reg__
 155 005c 01F0      		breq .L9
 156               	.LBB3:
 107:quantum/split_common/transport.c ****         size_t len = trans->target2initiator_buffer_size < target2initiator_length ? trans->target2
 157               		.loc 1 107 9 is_stmt 1 view .LVU25
 158               	.LVL9:
 108:quantum/split_common/transport.c ****         memcpy(target2initiator_buf, split_trans_target2initiator_buffer(trans), len);
 159               		.loc 1 108 9 view .LVU26
 107:quantum/split_common/transport.c ****         size_t len = trans->target2initiator_buffer_size < target2initiator_length ? trans->target2
 160               		.loc 1 107 27 is_stmt 0 view .LVU27
 161 005e 8AE0      		ldi r24,lo8(10)
 162 0060 8C9F      		mul r24,r28
 163 0062 F001      		movw r30,r0
 164 0064 8D9F      		mul r24,r29
 165 0066 F00D      		add r31,r0
 166 0068 1124      		clr __zero_reg__
 167 006a E050      		subi r30,lo8(-(split_transaction_table))
 168 006c F040      		sbci r31,hi8(-(split_transaction_table))
 169 006e 4581      		ldd r20,Z+5
 170 0070 50E0      		ldi r21,0
 107:quantum/split_common/transport.c ****         size_t len = trans->target2initiator_buffer_size < target2initiator_length ? trans->target2
 171               		.loc 1 107 16 view .LVU28
 172 0072 E416      		cp r14,r20
 173 0074 F506      		cpc r15,r21
 174 0076 00F4      		brsh .L7
 175 0078 A701      		movw r20,r14
 176               	.L7:
 177               		.loc 1 108 38 view .LVU29
 178 007a 8AE0      		ldi r24,lo8(10)
 179 007c 8C9F      		mul r24,r28
 180 007e F001      		movw r30,r0
 181 0080 8D9F      		mul r24,r29
 182 0082 F00D      		add r31,r0
 183 0084 1124      		clr __zero_reg__
 184 0086 E050      		subi r30,lo8(-(split_transaction_table))
 185 0088 F040      		sbci r31,hi8(-(split_transaction_table))
 186               		.loc 1 108 9 view .LVU30
 187 008a 6681      		ldd r22,Z+6
 188 008c 7781      		ldd r23,Z+7
 189 008e 6050      		subi r22,lo8(-(shared_memory))
 190 0090 7040      		sbci r23,hi8(-(shared_memory))
 191 0092 C601      		movw r24,r12
 192 0094 0E94 0000 		call memcpy
 193               	.LVL10:
 194               	.L9:
 195               		.loc 1 108 9 view .LVU31
 196               	.LBE3:
 109:quantum/split_common/transport.c ****     }
 110:quantum/split_common/transport.c **** 
 111:quantum/split_common/transport.c ****     return true;
 197               		.loc 1 111 12 view .LVU32
 198 0098 81E0      		ldi r24,lo8(1)
 199 009a 00C0      		rjmp .L3
 200               	.L8:
 103:quantum/split_common/transport.c ****     }
 201               		.loc 1 103 16 view .LVU33
 202 009c 80E0      		ldi r24,0
 203               	.L3:
 204               	/* epilogue start */
 112:quantum/split_common/transport.c **** }
 205               		.loc 1 112 1 view .LVU34
 206 009e DF91      		pop r29
 207 00a0 CF91      		pop r28
 208               	.LVL11:
 209               		.loc 1 112 1 view .LVU35
 210 00a2 1F91      		pop r17
 211 00a4 0F91      		pop r16
 212 00a6 FF90      		pop r15
 213 00a8 EF90      		pop r14
 214               	.LVL12:
 215               		.loc 1 112 1 view .LVU36
 216 00aa DF90      		pop r13
 217 00ac CF90      		pop r12
 218               	.LVL13:
 219               		.loc 1 112 1 view .LVU37
 220 00ae 0895      		ret
 221               		.cfi_endproc
 222               	.LFE32:
 224               		.section	.text.transport_master,"ax",@progbits
 225               	.global	transport_master
 227               	transport_master:
 228               	.LVL14:
 229               	.LFB33:
 113:quantum/split_common/transport.c **** 
 114:quantum/split_common/transport.c **** #endif  // USE_I2C
 115:quantum/split_common/transport.c **** 
 116:quantum/split_common/transport.c **** bool transport_master(matrix_row_t master_matrix[], matrix_row_t slave_matrix[]) { return transacti
 230               		.loc 1 116 82 is_stmt 1 view -0
 231               		.cfi_startproc
 232               	/* prologue: function */
 233               	/* frame size = 0 */
 234               	/* stack size = 0 */
 235               	.L__stack_usage = 0
 236               		.loc 1 116 84 view .LVU39
 237               		.loc 1 116 91 is_stmt 0 view .LVU40
 238 0000 0C94 0000 		jmp transactions_master
 239               	.LVL15:
 240               		.loc 1 116 91 view .LVU41
 241               		.cfi_endproc
 242               	.LFE33:
 244               		.section	.text.transport_slave,"ax",@progbits
 245               	.global	transport_slave
 247               	transport_slave:
 248               	.LVL16:
 249               	.LFB34:
 117:quantum/split_common/transport.c **** 
 118:quantum/split_common/transport.c **** void transport_slave(matrix_row_t master_matrix[], matrix_row_t slave_matrix[]) { transactions_slav
 250               		.loc 1 118 81 is_stmt 1 view -0
 251               		.cfi_startproc
 252               	/* prologue: function */
 253               	/* frame size = 0 */
 254               	/* stack size = 0 */
 255               	.L__stack_usage = 0
 256               		.loc 1 118 83 view .LVU43
 257 0000 0C94 0000 		jmp transactions_slave
 258               	.LVL17:
 259               		.loc 1 118 83 is_stmt 0 view .LVU44
 260               		.cfi_endproc
 261               	.LFE34:
 263               	.global	split_shmem
 264               		.section	.rodata.split_shmem,"a"
 267               	split_shmem:
 268 0000 0000      		.word	shared_memory
 269               		.section	.bss.shared_memory,"aw",@nobits
 272               	shared_memory:
 273 0000 0000 0000 		.zero	12
 273      0000 0000 
 273      0000 0000 
 274               		.text
 275               	.Letext0:
 276               		.file 2 "/usr/avr/include/stdint.h"
 277               		.file 3 "/usr/lib/gcc/avr/11.3.0/include/stddef.h"
 278               		.file 4 "quantum/matrix.h"
 279               		.file 5 "tmk_core/common/avr/gpio.h"
 280               		.file 6 "quantum/split_common/transport.h"
 281               		.file 7 "quantum/split_common/transactions.h"
 282               		.file 8 "drivers/serial.h"
 283               		.file 9 "/usr/avr/include/string.h"
 284               		.file 10 "quantum/split_common/transaction_id_define.h"
 285               		.file 11 "quantum/sequencer/sequencer.h"
 286               		.file 12 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 transport.c
     /tmp/ccYK2xhB.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccYK2xhB.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccYK2xhB.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccYK2xhB.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccYK2xhB.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccYK2xhB.s:13     .text.transport_master_init:0000000000000000 transport_master_init
     /tmp/ccYK2xhB.s:31     .text.transport_slave_init:0000000000000000 transport_slave_init
     /tmp/ccYK2xhB.s:48     .text.transport_execute_transaction:0000000000000000 transport_execute_transaction
     /tmp/ccYK2xhB.s:272    .bss.shared_memory:0000000000000000 shared_memory
     /tmp/ccYK2xhB.s:227    .text.transport_master:0000000000000000 transport_master
     /tmp/ccYK2xhB.s:247    .text.transport_slave:0000000000000000 transport_slave
     /tmp/ccYK2xhB.s:267    .rodata.split_shmem:0000000000000000 split_shmem

UNDEFINED SYMBOLS
soft_serial_initiator_init
soft_serial_target_init
split_transaction_table
memcpy
soft_serial_transaction
transactions_master
transactions_slave
__do_copy_data
__do_clear_bss
