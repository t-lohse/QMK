   1               		.file	"ssd1306_sh1106.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.i2c_transmit_P.constprop.0,"ax",@progbits
  12               	i2c_transmit_P.constprop.0:
  13               	.LVL0:
  14               	.LFB46:
  15               		.file 1 "drivers/oled/ssd1306_sh1106.c"
   1:drivers/oled/ssd1306_sh1106.c **** /*
   2:drivers/oled/ssd1306_sh1106.c **** Copyright 2019 Ryan Caltabiano <https://github.com/XScorpion2>
   3:drivers/oled/ssd1306_sh1106.c **** 
   4:drivers/oled/ssd1306_sh1106.c **** This program is free software: you can redistribute it and/or modify
   5:drivers/oled/ssd1306_sh1106.c **** it under the terms of the GNU General Public License as published by
   6:drivers/oled/ssd1306_sh1106.c **** the Free Software Foundation, either version 2 of the License, or
   7:drivers/oled/ssd1306_sh1106.c **** (at your option) any later version.
   8:drivers/oled/ssd1306_sh1106.c **** 
   9:drivers/oled/ssd1306_sh1106.c **** This program is distributed in the hope that it will be useful,
  10:drivers/oled/ssd1306_sh1106.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:drivers/oled/ssd1306_sh1106.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:drivers/oled/ssd1306_sh1106.c **** GNU General Public License for more details.
  13:drivers/oled/ssd1306_sh1106.c **** 
  14:drivers/oled/ssd1306_sh1106.c **** You should have received a copy of the GNU General Public License
  15:drivers/oled/ssd1306_sh1106.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:drivers/oled/ssd1306_sh1106.c **** */
  17:drivers/oled/ssd1306_sh1106.c **** #include "i2c_master.h"
  18:drivers/oled/ssd1306_sh1106.c **** #include "oled_driver.h"
  19:drivers/oled/ssd1306_sh1106.c **** #include OLED_FONT_H
  20:drivers/oled/ssd1306_sh1106.c **** #include "timer.h"
  21:drivers/oled/ssd1306_sh1106.c **** #include "print.h"
  22:drivers/oled/ssd1306_sh1106.c **** 
  23:drivers/oled/ssd1306_sh1106.c **** #include <string.h>
  24:drivers/oled/ssd1306_sh1106.c **** 
  25:drivers/oled/ssd1306_sh1106.c **** #include "progmem.h"
  26:drivers/oled/ssd1306_sh1106.c **** 
  27:drivers/oled/ssd1306_sh1106.c **** #include "keyboard.h"
  28:drivers/oled/ssd1306_sh1106.c **** 
  29:drivers/oled/ssd1306_sh1106.c **** // Used commands from spec sheet: https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf
  30:drivers/oled/ssd1306_sh1106.c **** // for SH1106: https://www.velleman.eu/downloads/29/infosheets/sh1106_datasheet.pdf
  31:drivers/oled/ssd1306_sh1106.c **** 
  32:drivers/oled/ssd1306_sh1106.c **** // Fundamental Commands
  33:drivers/oled/ssd1306_sh1106.c **** #define CONTRAST 0x81
  34:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_ALL_ON 0xA5
  35:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_ALL_ON_RESUME 0xA4
  36:drivers/oled/ssd1306_sh1106.c **** #define NORMAL_DISPLAY 0xA6
  37:drivers/oled/ssd1306_sh1106.c **** #define INVERT_DISPLAY 0xA7
  38:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_ON 0xAF
  39:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_OFF 0xAE
  40:drivers/oled/ssd1306_sh1106.c **** #define NOP 0xE3
  41:drivers/oled/ssd1306_sh1106.c **** 
  42:drivers/oled/ssd1306_sh1106.c **** // Scrolling Commands
  43:drivers/oled/ssd1306_sh1106.c **** #define ACTIVATE_SCROLL 0x2F
  44:drivers/oled/ssd1306_sh1106.c **** #define DEACTIVATE_SCROLL 0x2E
  45:drivers/oled/ssd1306_sh1106.c **** #define SCROLL_RIGHT 0x26
  46:drivers/oled/ssd1306_sh1106.c **** #define SCROLL_LEFT 0x27
  47:drivers/oled/ssd1306_sh1106.c **** #define SCROLL_RIGHT_UP 0x29
  48:drivers/oled/ssd1306_sh1106.c **** #define SCROLL_LEFT_UP 0x2A
  49:drivers/oled/ssd1306_sh1106.c **** 
  50:drivers/oled/ssd1306_sh1106.c **** // Addressing Setting Commands
  51:drivers/oled/ssd1306_sh1106.c **** #define MEMORY_MODE 0x20
  52:drivers/oled/ssd1306_sh1106.c **** #define COLUMN_ADDR 0x21
  53:drivers/oled/ssd1306_sh1106.c **** #define PAGE_ADDR 0x22
  54:drivers/oled/ssd1306_sh1106.c **** #define PAM_SETCOLUMN_LSB 0x00
  55:drivers/oled/ssd1306_sh1106.c **** #define PAM_SETCOLUMN_MSB 0x10
  56:drivers/oled/ssd1306_sh1106.c **** #define PAM_PAGE_ADDR 0xB0  // 0xb0 -- 0xb7
  57:drivers/oled/ssd1306_sh1106.c **** 
  58:drivers/oled/ssd1306_sh1106.c **** // Hardware Configuration Commands
  59:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_START_LINE 0x40
  60:drivers/oled/ssd1306_sh1106.c **** #define SEGMENT_REMAP 0xA0
  61:drivers/oled/ssd1306_sh1106.c **** #define SEGMENT_REMAP_INV 0xA1
  62:drivers/oled/ssd1306_sh1106.c **** #define MULTIPLEX_RATIO 0xA8
  63:drivers/oled/ssd1306_sh1106.c **** #define COM_SCAN_INC 0xC0
  64:drivers/oled/ssd1306_sh1106.c **** #define COM_SCAN_DEC 0xC8
  65:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_OFFSET 0xD3
  66:drivers/oled/ssd1306_sh1106.c **** #define COM_PINS 0xDA
  67:drivers/oled/ssd1306_sh1106.c **** #define COM_PINS_SEQ 0x02
  68:drivers/oled/ssd1306_sh1106.c **** #define COM_PINS_ALT 0x12
  69:drivers/oled/ssd1306_sh1106.c **** #define COM_PINS_SEQ_LR 0x22
  70:drivers/oled/ssd1306_sh1106.c **** #define COM_PINS_ALT_LR 0x32
  71:drivers/oled/ssd1306_sh1106.c **** 
  72:drivers/oled/ssd1306_sh1106.c **** // Timing & Driving Commands
  73:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_CLOCK 0xD5
  74:drivers/oled/ssd1306_sh1106.c **** #define PRE_CHARGE_PERIOD 0xD9
  75:drivers/oled/ssd1306_sh1106.c **** #define VCOM_DETECT 0xDB
  76:drivers/oled/ssd1306_sh1106.c **** 
  77:drivers/oled/ssd1306_sh1106.c **** // Advance Graphic Commands
  78:drivers/oled/ssd1306_sh1106.c **** #define FADE_BLINK 0x23
  79:drivers/oled/ssd1306_sh1106.c **** #define ENABLE_FADE 0x20
  80:drivers/oled/ssd1306_sh1106.c **** #define ENABLE_BLINK 0x30
  81:drivers/oled/ssd1306_sh1106.c **** 
  82:drivers/oled/ssd1306_sh1106.c **** // Charge Pump Commands
  83:drivers/oled/ssd1306_sh1106.c **** #define CHARGE_PUMP 0x8D
  84:drivers/oled/ssd1306_sh1106.c **** 
  85:drivers/oled/ssd1306_sh1106.c **** // Misc defines
  86:drivers/oled/ssd1306_sh1106.c **** #ifndef OLED_BLOCK_COUNT
  87:drivers/oled/ssd1306_sh1106.c **** #    define OLED_BLOCK_COUNT (sizeof(OLED_BLOCK_TYPE) * 8)
  88:drivers/oled/ssd1306_sh1106.c **** #endif
  89:drivers/oled/ssd1306_sh1106.c **** #ifndef OLED_BLOCK_SIZE
  90:drivers/oled/ssd1306_sh1106.c **** #    define OLED_BLOCK_SIZE (OLED_MATRIX_SIZE / OLED_BLOCK_COUNT)
  91:drivers/oled/ssd1306_sh1106.c **** #endif
  92:drivers/oled/ssd1306_sh1106.c **** 
  93:drivers/oled/ssd1306_sh1106.c **** #define OLED_ALL_BLOCKS_MASK (((((OLED_BLOCK_TYPE)1 << (OLED_BLOCK_COUNT - 1)) - 1) << 1) | 1)
  94:drivers/oled/ssd1306_sh1106.c **** 
  95:drivers/oled/ssd1306_sh1106.c **** // i2c defines
  96:drivers/oled/ssd1306_sh1106.c **** #define I2C_CMD 0x00
  97:drivers/oled/ssd1306_sh1106.c **** #define I2C_DATA 0x40
  98:drivers/oled/ssd1306_sh1106.c **** #if defined(__AVR__)
  99:drivers/oled/ssd1306_sh1106.c **** #    define I2C_TRANSMIT_P(data) i2c_transmit_P((OLED_DISPLAY_ADDRESS << 1), &data[0], sizeof(data)
 100:drivers/oled/ssd1306_sh1106.c **** #else  // defined(__AVR__)
 101:drivers/oled/ssd1306_sh1106.c **** #    define I2C_TRANSMIT_P(data) i2c_transmit((OLED_DISPLAY_ADDRESS << 1), &data[0], sizeof(data), 
 102:drivers/oled/ssd1306_sh1106.c **** #endif  // defined(__AVR__)
 103:drivers/oled/ssd1306_sh1106.c **** #define I2C_TRANSMIT(data) i2c_transmit((OLED_DISPLAY_ADDRESS << 1), &data[0], sizeof(data), OLED_I
 104:drivers/oled/ssd1306_sh1106.c **** #define I2C_WRITE_REG(mode, data, size) i2c_writeReg((OLED_DISPLAY_ADDRESS << 1), mode, data, size,
 105:drivers/oled/ssd1306_sh1106.c **** 
 106:drivers/oled/ssd1306_sh1106.c **** #define HAS_FLAGS(bits, flags) ((bits & flags) == flags)
 107:drivers/oled/ssd1306_sh1106.c **** 
 108:drivers/oled/ssd1306_sh1106.c **** // Display buffer's is the same as the OLED memory layout
 109:drivers/oled/ssd1306_sh1106.c **** // this is so we don't end up with rounding errors with
 110:drivers/oled/ssd1306_sh1106.c **** // parts of the display unusable or don't get cleared correctly
 111:drivers/oled/ssd1306_sh1106.c **** // and also allows for drawing & inverting
 112:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_buffer[OLED_MATRIX_SIZE];
 113:drivers/oled/ssd1306_sh1106.c **** uint8_t *       oled_cursor;
 114:drivers/oled/ssd1306_sh1106.c **** OLED_BLOCK_TYPE oled_dirty          = 0;
 115:drivers/oled/ssd1306_sh1106.c **** bool            oled_initialized    = false;
 116:drivers/oled/ssd1306_sh1106.c **** bool            oled_active         = false;
 117:drivers/oled/ssd1306_sh1106.c **** bool            oled_scrolling      = false;
 118:drivers/oled/ssd1306_sh1106.c **** bool            oled_inverted       = false;
 119:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_brightness     = OLED_BRIGHTNESS;
 120:drivers/oled/ssd1306_sh1106.c **** oled_rotation_t oled_rotation       = 0;
 121:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_rotation_width = 0;
 122:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_scroll_speed   = 0;  // this holds the speed after being remapped to ssd1306 i
 123:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_scroll_start   = 0;
 124:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_scroll_end     = 7;
 125:drivers/oled/ssd1306_sh1106.c **** #if OLED_TIMEOUT > 0
 126:drivers/oled/ssd1306_sh1106.c **** uint32_t oled_timeout;
 127:drivers/oled/ssd1306_sh1106.c **** #endif
 128:drivers/oled/ssd1306_sh1106.c **** #if OLED_SCROLL_TIMEOUT > 0
 129:drivers/oled/ssd1306_sh1106.c **** uint32_t oled_scroll_timeout;
 130:drivers/oled/ssd1306_sh1106.c **** #endif
 131:drivers/oled/ssd1306_sh1106.c **** #if OLED_UPDATE_INTERVAL > 0
 132:drivers/oled/ssd1306_sh1106.c **** uint16_t oled_update_timeout;
 133:drivers/oled/ssd1306_sh1106.c **** #endif
 134:drivers/oled/ssd1306_sh1106.c **** 
 135:drivers/oled/ssd1306_sh1106.c **** // Internal variables to reduce math instructions
 136:drivers/oled/ssd1306_sh1106.c **** 
 137:drivers/oled/ssd1306_sh1106.c **** #if defined(__AVR__)
 138:drivers/oled/ssd1306_sh1106.c **** // identical to i2c_transmit, but for PROGMEM since all initialization is in PROGMEM arrays current
 139:drivers/oled/ssd1306_sh1106.c **** // probably should move this into i2c_master...
 140:drivers/oled/ssd1306_sh1106.c **** static i2c_status_t i2c_transmit_P(uint8_t address, const uint8_t *data, uint16_t length, uint16_t 
  16               		.loc 1 140 21 view -0
  17               		.cfi_startproc
  18               		.loc 1 140 21 is_stmt 0 view .LVU1
  19 0000 CF92      		push r12
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 12, -2
  23 0002 DF92      		push r13
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 13, -3
  27 0004 EF92      		push r14
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 14, -4
  31 0006 FF92      		push r15
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 15, -5
  35 0008 0F93      		push r16
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 16, -6
  39 000a 1F93      		push r17
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 17, -7
  43 000c CF93      		push r28
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 28, -8
  47 000e DF93      		push r29
  48               	.LCFI7:
  49               		.cfi_def_cfa_offset 10
  50               		.cfi_offset 29, -9
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 8 */
  54               	.L__stack_usage = 8
  55 0010 6C01      		movw r12,r24
  56 0012 7B01      		movw r14,r22
  57               	.LVL1:
 141:drivers/oled/ssd1306_sh1106.c ****     i2c_status_t status = i2c_start(address | I2C_WRITE, timeout);
  58               		.loc 1 141 5 is_stmt 1 view .LVU2
  59               		.loc 1 141 27 is_stmt 0 view .LVU3
  60 0014 64E6      		ldi r22,lo8(100)
  61 0016 70E0      		ldi r23,0
  62               	.LVL2:
  63               		.loc 1 141 27 view .LVU4
  64 0018 88E7      		ldi r24,lo8(120)
  65               	.LVL3:
  66               		.loc 1 141 27 view .LVU5
  67 001a 0E94 0000 		call i2c_start
  68               	.LVL4:
  69 001e EC01      		movw r28,r24
  70               	.LVL5:
 142:drivers/oled/ssd1306_sh1106.c **** 
 143:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = 0; i < length && status >= 0; i++) {
  71               		.loc 1 143 5 is_stmt 1 view .LVU6
  72               	.LBB4:
  73               		.loc 1 143 10 view .LVU7
  74               		.loc 1 143 37 view .LVU8
  75 0020 8601      		movw r16,r12
  76 0022 EC0C      		add r14,r12
  77 0024 FD1C      		adc r15,r13
  78               	.LVL6:
  79               		.loc 1 143 37 is_stmt 0 view .LVU9
  80 0026 97FD      		sbrc r25,7
  81 0028 00C0      		rjmp .L2
  82               	.LVL7:
  83               	.L3:
 144:drivers/oled/ssd1306_sh1106.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
  84               		.loc 1 144 9 is_stmt 1 view .LVU10
  85               	.LBB5:
  86               		.loc 1 144 28 view .LVU11
  87               		.loc 1 144 28 view .LVU12
  88               		.loc 1 144 28 view .LVU13
  89 002a F801      		movw r30,r16
  90               	/* #APP */
  91               	 ;  144 "drivers/oled/ssd1306_sh1106.c" 1
  92 002c 8491      		lpm r24, Z
  93               		
  94               	 ;  0 "" 2
  95               	.LVL8:
  96               		.loc 1 144 28 view .LVU14
  97               	/* #NOAPP */
  98               	.LBE5:
  99               		.loc 1 144 18 is_stmt 0 view .LVU15
 100 002e 64E6      		ldi r22,lo8(100)
 101 0030 70E0      		ldi r23,0
 102 0032 0E94 0000 		call i2c_write
 103               	.LVL9:
 104               		.loc 1 144 18 view .LVU16
 105 0036 EC01      		movw r28,r24
 106               	.LVL10:
 145:drivers/oled/ssd1306_sh1106.c ****         if (status) break;
 107               		.loc 1 145 9 is_stmt 1 view .LVU17
 108               		.loc 1 145 12 is_stmt 0 view .LVU18
 109 0038 892B      		or r24,r25
 110 003a 01F4      		brne .L2
 143:drivers/oled/ssd1306_sh1106.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 111               		.loc 1 143 54 is_stmt 1 view .LVU19
 112               	.LVL11:
 143:drivers/oled/ssd1306_sh1106.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 113               		.loc 1 143 37 view .LVU20
 114 003c 0F5F      		subi r16,-1
 115 003e 1F4F      		sbci r17,-1
 116               	.LVL12:
 143:drivers/oled/ssd1306_sh1106.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 117               		.loc 1 143 37 is_stmt 0 view .LVU21
 118 0040 E016      		cp r14,r16
 119 0042 F106      		cpc r15,r17
 120 0044 01F4      		brne .L3
 121               	.LVL13:
 122               	.L2:
 143:drivers/oled/ssd1306_sh1106.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 123               		.loc 1 143 37 view .LVU22
 124               	.LBE4:
 146:drivers/oled/ssd1306_sh1106.c ****     }
 147:drivers/oled/ssd1306_sh1106.c **** 
 148:drivers/oled/ssd1306_sh1106.c ****     i2c_stop();
 125               		.loc 1 148 5 is_stmt 1 view .LVU23
 126 0046 0E94 0000 		call i2c_stop
 127               	.LVL14:
 149:drivers/oled/ssd1306_sh1106.c **** 
 150:drivers/oled/ssd1306_sh1106.c ****     return status;
 128               		.loc 1 150 5 view .LVU24
 151:drivers/oled/ssd1306_sh1106.c **** }
 129               		.loc 1 151 1 is_stmt 0 view .LVU25
 130 004a CE01      		movw r24,r28
 131               	/* epilogue start */
 132 004c DF91      		pop r29
 133 004e CF91      		pop r28
 134               	.LVL15:
 135               		.loc 1 151 1 view .LVU26
 136 0050 1F91      		pop r17
 137 0052 0F91      		pop r16
 138 0054 FF90      		pop r15
 139 0056 EF90      		pop r14
 140 0058 DF90      		pop r13
 141 005a CF90      		pop r12
 142 005c 0895      		ret
 143               		.cfi_endproc
 144               	.LFE46:
 146               		.section	.text.oled_init_user,"ax",@progbits
 147               		.weak	oled_init_user
 149               	oled_init_user:
 150               	.LVL16:
 151               	.LFB9:
 152:drivers/oled/ssd1306_sh1106.c **** #endif
 153:drivers/oled/ssd1306_sh1106.c **** 
 154:drivers/oled/ssd1306_sh1106.c **** // Flips the rendering bits for a character at the current cursor position
 155:drivers/oled/ssd1306_sh1106.c **** static void InvertCharacter(uint8_t *cursor) {
 156:drivers/oled/ssd1306_sh1106.c ****     const uint8_t *end = cursor + OLED_FONT_WIDTH;
 157:drivers/oled/ssd1306_sh1106.c ****     while (cursor < end) {
 158:drivers/oled/ssd1306_sh1106.c ****         *cursor = ~(*cursor);
 159:drivers/oled/ssd1306_sh1106.c ****         cursor++;
 160:drivers/oled/ssd1306_sh1106.c ****     }
 161:drivers/oled/ssd1306_sh1106.c **** }
 162:drivers/oled/ssd1306_sh1106.c **** 
 163:drivers/oled/ssd1306_sh1106.c **** bool oled_init(oled_rotation_t rotation) {
 164:drivers/oled/ssd1306_sh1106.c **** #if defined(USE_I2C) && defined(SPLIT_KEYBOARD)
 165:drivers/oled/ssd1306_sh1106.c ****     if (!is_keyboard_master()) {
 166:drivers/oled/ssd1306_sh1106.c ****         return true;
 167:drivers/oled/ssd1306_sh1106.c ****     }
 168:drivers/oled/ssd1306_sh1106.c **** #endif
 169:drivers/oled/ssd1306_sh1106.c **** 
 170:drivers/oled/ssd1306_sh1106.c ****     oled_rotation = oled_init_user(rotation);
 171:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 172:drivers/oled/ssd1306_sh1106.c ****         oled_rotation_width = OLED_DISPLAY_WIDTH;
 173:drivers/oled/ssd1306_sh1106.c ****     } else {
 174:drivers/oled/ssd1306_sh1106.c ****         oled_rotation_width = OLED_DISPLAY_HEIGHT;
 175:drivers/oled/ssd1306_sh1106.c ****     }
 176:drivers/oled/ssd1306_sh1106.c ****     i2c_init();
 177:drivers/oled/ssd1306_sh1106.c **** 
 178:drivers/oled/ssd1306_sh1106.c ****     static const uint8_t PROGMEM display_setup1[] = {
 179:drivers/oled/ssd1306_sh1106.c ****         I2C_CMD,
 180:drivers/oled/ssd1306_sh1106.c ****         DISPLAY_OFF,
 181:drivers/oled/ssd1306_sh1106.c ****         DISPLAY_CLOCK,
 182:drivers/oled/ssd1306_sh1106.c ****         0x80,
 183:drivers/oled/ssd1306_sh1106.c ****         MULTIPLEX_RATIO,
 184:drivers/oled/ssd1306_sh1106.c ****         OLED_DISPLAY_HEIGHT - 1,
 185:drivers/oled/ssd1306_sh1106.c ****         DISPLAY_OFFSET,
 186:drivers/oled/ssd1306_sh1106.c ****         0x00,
 187:drivers/oled/ssd1306_sh1106.c ****         DISPLAY_START_LINE | 0x00,
 188:drivers/oled/ssd1306_sh1106.c ****         CHARGE_PUMP,
 189:drivers/oled/ssd1306_sh1106.c ****         0x14,
 190:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC != OLED_IC_SH1106)
 191:drivers/oled/ssd1306_sh1106.c ****         // MEMORY_MODE is unsupported on SH1106 (Page Addressing only)
 192:drivers/oled/ssd1306_sh1106.c ****         MEMORY_MODE,
 193:drivers/oled/ssd1306_sh1106.c ****         0x00,  // Horizontal addressing mode
 194:drivers/oled/ssd1306_sh1106.c **** #endif
 195:drivers/oled/ssd1306_sh1106.c ****     };
 196:drivers/oled/ssd1306_sh1106.c ****     if (I2C_TRANSMIT_P(display_setup1) != I2C_STATUS_SUCCESS) {
 197:drivers/oled/ssd1306_sh1106.c ****         print("oled_init cmd set 1 failed\n");
 198:drivers/oled/ssd1306_sh1106.c ****         return false;
 199:drivers/oled/ssd1306_sh1106.c ****     }
 200:drivers/oled/ssd1306_sh1106.c **** 
 201:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_180)) {
 202:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 203:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 204:drivers/oled/ssd1306_sh1106.c ****             print("oled_init cmd normal rotation failed\n");
 205:drivers/oled/ssd1306_sh1106.c ****             return false;
 206:drivers/oled/ssd1306_sh1106.c ****         }
 207:drivers/oled/ssd1306_sh1106.c ****     } else {
 208:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_flipped[] = {I2C_CMD, SEGMENT_REMAP, COM_SCAN_INC};
 209:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_flipped) != I2C_STATUS_SUCCESS) {
 210:drivers/oled/ssd1306_sh1106.c ****             print("display_flipped failed\n");
 211:drivers/oled/ssd1306_sh1106.c ****             return false;
 212:drivers/oled/ssd1306_sh1106.c ****         }
 213:drivers/oled/ssd1306_sh1106.c ****     }
 214:drivers/oled/ssd1306_sh1106.c **** 
 215:drivers/oled/ssd1306_sh1106.c ****     static const uint8_t PROGMEM display_setup2[] = {I2C_CMD, COM_PINS, OLED_COM_PINS, CONTRAST, OL
 216:drivers/oled/ssd1306_sh1106.c ****     if (I2C_TRANSMIT_P(display_setup2) != I2C_STATUS_SUCCESS) {
 217:drivers/oled/ssd1306_sh1106.c ****         print("display_setup2 failed\n");
 218:drivers/oled/ssd1306_sh1106.c ****         return false;
 219:drivers/oled/ssd1306_sh1106.c ****     }
 220:drivers/oled/ssd1306_sh1106.c **** 
 221:drivers/oled/ssd1306_sh1106.c **** #if OLED_TIMEOUT > 0
 222:drivers/oled/ssd1306_sh1106.c ****     oled_timeout = timer_read32() + OLED_TIMEOUT;
 223:drivers/oled/ssd1306_sh1106.c **** #endif
 224:drivers/oled/ssd1306_sh1106.c **** #if OLED_SCROLL_TIMEOUT > 0
 225:drivers/oled/ssd1306_sh1106.c ****     oled_scroll_timeout = timer_read32() + OLED_SCROLL_TIMEOUT;
 226:drivers/oled/ssd1306_sh1106.c **** #endif
 227:drivers/oled/ssd1306_sh1106.c **** 
 228:drivers/oled/ssd1306_sh1106.c ****     oled_clear();
 229:drivers/oled/ssd1306_sh1106.c ****     oled_initialized = true;
 230:drivers/oled/ssd1306_sh1106.c ****     oled_active      = true;
 231:drivers/oled/ssd1306_sh1106.c ****     oled_scrolling   = false;
 232:drivers/oled/ssd1306_sh1106.c ****     return true;
 233:drivers/oled/ssd1306_sh1106.c **** }
 234:drivers/oled/ssd1306_sh1106.c **** 
 235:drivers/oled/ssd1306_sh1106.c **** __attribute__((weak)) oled_rotation_t oled_init_user(oled_rotation_t rotation) { return rotation; }
 152               		.loc 1 235 80 is_stmt 1 view -0
 153               		.cfi_startproc
 154               	/* prologue: function */
 155               	/* frame size = 0 */
 156               	/* stack size = 0 */
 157               	.L__stack_usage = 0
 158               		.loc 1 235 82 view .LVU28
 159               	/* epilogue start */
 160               		.loc 1 235 99 is_stmt 0 view .LVU29
 161 0000 0895      		ret
 162               		.cfi_endproc
 163               	.LFE9:
 165               		.section	.text.oled_clear,"ax",@progbits
 166               	.global	oled_clear
 168               	oled_clear:
 169               	.LFB10:
 236:drivers/oled/ssd1306_sh1106.c **** 
 237:drivers/oled/ssd1306_sh1106.c **** void oled_clear(void) {
 170               		.loc 1 237 23 is_stmt 1 view -0
 171               		.cfi_startproc
 172               	/* prologue: function */
 173               	/* frame size = 0 */
 174               	/* stack size = 0 */
 175               	.L__stack_usage = 0
 238:drivers/oled/ssd1306_sh1106.c ****     memset(oled_buffer, 0, sizeof(oled_buffer));
 176               		.loc 1 238 5 view .LVU31
 177 0000 E0E0      		ldi r30,lo8(oled_buffer)
 178 0002 F0E0      		ldi r31,hi8(oled_buffer)
 179 0004 80E0      		ldi r24,0
 180 0006 92E0      		ldi r25,lo8(2)
 181 0008 DF01      		movw r26,r30
 182 000a 9C01      		movw r18,r24
 183               		0:
 184 000c 1D92      		st X+,__zero_reg__
 185 000e 2150      		subi r18,1
 186 0010 3040      		sbci r19,0
 187 0012 01F4      		brne 0b
 239:drivers/oled/ssd1306_sh1106.c ****     oled_cursor = &oled_buffer[0];
 188               		.loc 1 239 5 view .LVU32
 189               		.loc 1 239 17 is_stmt 0 view .LVU33
 190 0014 F093 0000 		sts oled_cursor+1,r31
 191 0018 E093 0000 		sts oled_cursor,r30
 240:drivers/oled/ssd1306_sh1106.c ****     oled_dirty  = OLED_ALL_BLOCKS_MASK;
 192               		.loc 1 240 5 is_stmt 1 view .LVU34
 193               		.loc 1 240 17 is_stmt 0 view .LVU35
 194 001c 8FEF      		ldi r24,lo8(-1)
 195 001e 9FEF      		ldi r25,lo8(-1)
 196 0020 9093 0000 		sts oled_dirty+1,r25
 197 0024 8093 0000 		sts oled_dirty,r24
 198               	/* epilogue start */
 241:drivers/oled/ssd1306_sh1106.c **** }
 199               		.loc 1 241 1 view .LVU36
 200 0028 0895      		ret
 201               		.cfi_endproc
 202               	.LFE10:
 204               		.section	.text.oled_init,"ax",@progbits
 205               	.global	oled_init
 207               	oled_init:
 208               	.LVL17:
 209               	.LFB8:
 163:drivers/oled/ssd1306_sh1106.c **** #if defined(USE_I2C) && defined(SPLIT_KEYBOARD)
 210               		.loc 1 163 42 is_stmt 1 view -0
 211               		.cfi_startproc
 163:drivers/oled/ssd1306_sh1106.c **** #if defined(USE_I2C) && defined(SPLIT_KEYBOARD)
 212               		.loc 1 163 42 is_stmt 0 view .LVU38
 213 0000 CF93      		push r28
 214               	.LCFI8:
 215               		.cfi_def_cfa_offset 3
 216               		.cfi_offset 28, -2
 217 0002 DF93      		push r29
 218               	.LCFI9:
 219               		.cfi_def_cfa_offset 4
 220               		.cfi_offset 29, -3
 221 0004 00D0      		rcall .
 222 0006 00D0      		rcall .
 223               	.LCFI10:
 224               		.cfi_def_cfa_offset 8
 225 0008 CDB7      		in r28,__SP_L__
 226 000a DEB7      		in r29,__SP_H__
 227               	.LCFI11:
 228               		.cfi_def_cfa_register 28
 229               	/* prologue: function */
 230               	/* frame size = 4 */
 231               	/* stack size = 6 */
 232               	.L__stack_usage = 6
 170:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 233               		.loc 1 170 5 is_stmt 1 view .LVU39
 170:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 234               		.loc 1 170 21 is_stmt 0 view .LVU40
 235 000c 0E94 0000 		call oled_init_user
 236               	.LVL18:
 171:drivers/oled/ssd1306_sh1106.c ****         oled_rotation_width = OLED_DISPLAY_WIDTH;
 237               		.loc 1 171 5 is_stmt 1 view .LVU41
 171:drivers/oled/ssd1306_sh1106.c ****         oled_rotation_width = OLED_DISPLAY_WIDTH;
 238               		.loc 1 171 8 is_stmt 0 view .LVU42
 239 0010 90E2      		ldi r25,lo8(32)
 240 0012 80FF      		sbrs r24,0
 241 0014 90E8      		ldi r25,lo8(-128)
 242               	.L8:
 170:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 243               		.loc 1 170 19 view .LVU43
 244 0016 8093 0000 		sts oled_rotation,r24
 172:drivers/oled/ssd1306_sh1106.c ****     } else {
 245               		.loc 1 172 29 view .LVU44
 246 001a 9093 0000 		sts oled_rotation_width,r25
 176:drivers/oled/ssd1306_sh1106.c **** 
 247               		.loc 1 176 5 is_stmt 1 view .LVU45
 248 001e 0E94 0000 		call i2c_init
 249               	.LVL19:
 178:drivers/oled/ssd1306_sh1106.c ****         I2C_CMD,
 250               		.loc 1 178 5 view .LVU46
 196:drivers/oled/ssd1306_sh1106.c ****         print("oled_init cmd set 1 failed\n");
 251               		.loc 1 196 5 view .LVU47
 196:drivers/oled/ssd1306_sh1106.c ****         print("oled_init cmd set 1 failed\n");
 252               		.loc 1 196 9 is_stmt 0 view .LVU48
 253 0022 6DE0      		ldi r22,lo8(13)
 254 0024 70E0      		ldi r23,0
 255 0026 80E0      		ldi r24,lo8(display_setup1.14)
 256 0028 90E0      		ldi r25,hi8(display_setup1.14)
 257 002a 0E94 0000 		call i2c_transmit_P.constprop.0
 258               	.LVL20:
 196:drivers/oled/ssd1306_sh1106.c ****         print("oled_init cmd set 1 failed\n");
 259               		.loc 1 196 8 view .LVU49
 260 002e 892B      		or r24,r25
 261 0030 01F0      		breq .L9
 262               	.L12:
 198:drivers/oled/ssd1306_sh1106.c ****     }
 263               		.loc 1 198 16 view .LVU50
 264 0032 80E0      		ldi r24,0
 265               	.L7:
 266               	/* epilogue start */
 233:drivers/oled/ssd1306_sh1106.c **** 
 267               		.loc 1 233 1 view .LVU51
 268 0034 0F90      		pop __tmp_reg__
 269 0036 0F90      		pop __tmp_reg__
 270 0038 0F90      		pop __tmp_reg__
 271 003a 0F90      		pop __tmp_reg__
 272 003c DF91      		pop r29
 273 003e CF91      		pop r28
 274 0040 0895      		ret
 275               	.L9:
 201:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 276               		.loc 1 201 5 is_stmt 1 view .LVU52
 201:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 277               		.loc 1 201 8 is_stmt 0 view .LVU53
 278 0042 8091 0000 		lds r24,oled_rotation
 279               	.LBB6:
 203:drivers/oled/ssd1306_sh1106.c ****             print("oled_init cmd normal rotation failed\n");
 280               		.loc 1 203 13 view .LVU54
 281 0046 63E0      		ldi r22,lo8(3)
 282 0048 70E0      		ldi r23,0
 283               	.LBE6:
 201:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 284               		.loc 1 201 8 view .LVU55
 285 004a 81FD      		sbrc r24,1
 286 004c 00C0      		rjmp .L11
 287               	.LBB7:
 202:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 288               		.loc 1 202 9 is_stmt 1 view .LVU56
 203:drivers/oled/ssd1306_sh1106.c ****             print("oled_init cmd normal rotation failed\n");
 289               		.loc 1 203 9 view .LVU57
 203:drivers/oled/ssd1306_sh1106.c ****             print("oled_init cmd normal rotation failed\n");
 290               		.loc 1 203 13 is_stmt 0 view .LVU58
 291 004e 80E0      		ldi r24,lo8(display_normal.13)
 292 0050 90E0      		ldi r25,hi8(display_normal.13)
 293               	.L17:
 294               	.LBE7:
 295               	.LBB8:
 209:drivers/oled/ssd1306_sh1106.c ****             print("display_flipped failed\n");
 296               		.loc 1 209 13 view .LVU59
 297 0052 0E94 0000 		call i2c_transmit_P.constprop.0
 298               	.LVL21:
 209:drivers/oled/ssd1306_sh1106.c ****             print("display_flipped failed\n");
 299               		.loc 1 209 12 view .LVU60
 300 0056 892B      		or r24,r25
 301 0058 01F4      		brne .L12
 302               	.LBE8:
 215:drivers/oled/ssd1306_sh1106.c ****     if (I2C_TRANSMIT_P(display_setup2) != I2C_STATUS_SUCCESS) {
 303               		.loc 1 215 5 is_stmt 1 view .LVU61
 216:drivers/oled/ssd1306_sh1106.c ****         print("display_setup2 failed\n");
 304               		.loc 1 216 5 view .LVU62
 216:drivers/oled/ssd1306_sh1106.c ****         print("display_setup2 failed\n");
 305               		.loc 1 216 9 is_stmt 0 view .LVU63
 306 005a 6DE0      		ldi r22,lo8(13)
 307 005c 70E0      		ldi r23,0
 308 005e 80E0      		ldi r24,lo8(display_setup2.11)
 309 0060 90E0      		ldi r25,hi8(display_setup2.11)
 310 0062 0E94 0000 		call i2c_transmit_P.constprop.0
 311               	.LVL22:
 216:drivers/oled/ssd1306_sh1106.c ****         print("display_setup2 failed\n");
 312               		.loc 1 216 8 view .LVU64
 313 0066 892B      		or r24,r25
 314 0068 01F4      		brne .L12
 222:drivers/oled/ssd1306_sh1106.c **** #endif
 315               		.loc 1 222 5 is_stmt 1 view .LVU65
 222:drivers/oled/ssd1306_sh1106.c **** #endif
 316               		.loc 1 222 20 is_stmt 0 view .LVU66
 317 006a 0E94 0000 		call timer_read32
 318               	.LVL23:
 222:drivers/oled/ssd1306_sh1106.c **** #endif
 319               		.loc 1 222 35 view .LVU67
 320 006e DC01      		movw r26,r24
 321 0070 CB01      		movw r24,r22
 322 0072 805A      		subi r24,-96
 323 0074 9541      		sbci r25,21
 324 0076 AF4F      		sbci r26,-1
 325 0078 BF4F      		sbci r27,-1
 222:drivers/oled/ssd1306_sh1106.c **** #endif
 326               		.loc 1 222 18 view .LVU68
 327 007a 8093 0000 		sts oled_timeout,r24
 328 007e 9093 0000 		sts oled_timeout+1,r25
 329 0082 A093 0000 		sts oled_timeout+2,r26
 330 0086 B093 0000 		sts oled_timeout+3,r27
 228:drivers/oled/ssd1306_sh1106.c ****     oled_initialized = true;
 331               		.loc 1 228 5 is_stmt 1 view .LVU69
 332 008a 0E94 0000 		call oled_clear
 333               	.LVL24:
 229:drivers/oled/ssd1306_sh1106.c ****     oled_active      = true;
 334               		.loc 1 229 5 view .LVU70
 229:drivers/oled/ssd1306_sh1106.c ****     oled_active      = true;
 335               		.loc 1 229 22 is_stmt 0 view .LVU71
 336 008e 81E0      		ldi r24,lo8(1)
 337 0090 8093 0000 		sts oled_initialized,r24
 230:drivers/oled/ssd1306_sh1106.c ****     oled_scrolling   = false;
 338               		.loc 1 230 5 is_stmt 1 view .LVU72
 230:drivers/oled/ssd1306_sh1106.c ****     oled_scrolling   = false;
 339               		.loc 1 230 22 is_stmt 0 view .LVU73
 340 0094 8093 0000 		sts oled_active,r24
 231:drivers/oled/ssd1306_sh1106.c ****     return true;
 341               		.loc 1 231 5 is_stmt 1 view .LVU74
 231:drivers/oled/ssd1306_sh1106.c ****     return true;
 342               		.loc 1 231 22 is_stmt 0 view .LVU75
 343 0098 1092 0000 		sts oled_scrolling,__zero_reg__
 232:drivers/oled/ssd1306_sh1106.c **** }
 344               		.loc 1 232 5 is_stmt 1 view .LVU76
 232:drivers/oled/ssd1306_sh1106.c **** }
 345               		.loc 1 232 12 is_stmt 0 view .LVU77
 346 009c 00C0      		rjmp .L7
 347               	.L11:
 348               	.LBB9:
 208:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_flipped) != I2C_STATUS_SUCCESS) {
 349               		.loc 1 208 9 is_stmt 1 view .LVU78
 209:drivers/oled/ssd1306_sh1106.c ****             print("display_flipped failed\n");
 350               		.loc 1 209 9 view .LVU79
 209:drivers/oled/ssd1306_sh1106.c ****             print("display_flipped failed\n");
 351               		.loc 1 209 13 is_stmt 0 view .LVU80
 352 009e 80E0      		ldi r24,lo8(display_flipped.12)
 353 00a0 90E0      		ldi r25,hi8(display_flipped.12)
 354 00a2 00C0      		rjmp .L17
 355               	.LBE9:
 356               		.cfi_endproc
 357               	.LFE8:
 359               		.section	.text.crot,"ax",@progbits
 360               	.global	crot
 362               	crot:
 363               	.LVL25:
 364               	.LFB13:
 242:drivers/oled/ssd1306_sh1106.c **** 
 243:drivers/oled/ssd1306_sh1106.c **** static void calc_bounds(uint8_t update_start, uint8_t *cmd_array) {
 244:drivers/oled/ssd1306_sh1106.c ****     // Calculate commands to set memory addressing bounds.
 245:drivers/oled/ssd1306_sh1106.c ****     uint8_t start_page   = OLED_BLOCK_SIZE * update_start / OLED_DISPLAY_WIDTH;
 246:drivers/oled/ssd1306_sh1106.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 247:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC == OLED_IC_SH1106)
 248:drivers/oled/ssd1306_sh1106.c ****     // Commands for Page Addressing Mode. Sets starting page and column; has no end bound.
 249:drivers/oled/ssd1306_sh1106.c ****     // Column value must be split into high and low nybble and sent as two commands.
 250:drivers/oled/ssd1306_sh1106.c ****     cmd_array[0] = PAM_PAGE_ADDR | start_page;
 251:drivers/oled/ssd1306_sh1106.c ****     cmd_array[1] = PAM_SETCOLUMN_LSB | ((OLED_COLUMN_OFFSET + start_column) & 0x0f);
 252:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = PAM_SETCOLUMN_MSB | ((OLED_COLUMN_OFFSET + start_column) >> 4 & 0x0f);
 253:drivers/oled/ssd1306_sh1106.c ****     cmd_array[3] = NOP;
 254:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = NOP;
 255:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = NOP;
 256:drivers/oled/ssd1306_sh1106.c **** #else
 257:drivers/oled/ssd1306_sh1106.c ****     // Commands for use in Horizontal Addressing mode.
 258:drivers/oled/ssd1306_sh1106.c ****     cmd_array[1] = start_column;
 259:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = start_page;
 260:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) % OLED_DISPLAY_WIDTH + cmd_array[1];
 261:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 262:drivers/oled/ssd1306_sh1106.c **** #endif
 263:drivers/oled/ssd1306_sh1106.c **** }
 264:drivers/oled/ssd1306_sh1106.c **** 
 265:drivers/oled/ssd1306_sh1106.c **** static void calc_bounds_90(uint8_t update_start, uint8_t *cmd_array) {
 266:drivers/oled/ssd1306_sh1106.c ****     cmd_array[1] = OLED_BLOCK_SIZE * update_start / OLED_DISPLAY_HEIGHT * 8;
 267:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 268:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) / OLED_DISPLAY_HEIGHT * 8 - 1 + cmd_
 269:drivers/oled/ssd1306_sh1106.c ****     ;
 270:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) % OLED_DISPLAY_HEIGHT / 8;
 271:drivers/oled/ssd1306_sh1106.c **** }
 272:drivers/oled/ssd1306_sh1106.c **** 
 273:drivers/oled/ssd1306_sh1106.c **** uint8_t crot(uint8_t a, int8_t n) {
 365               		.loc 1 273 35 is_stmt 1 view -0
 366               		.cfi_startproc
 367               	/* prologue: function */
 368               	/* frame size = 0 */
 369               	/* stack size = 0 */
 370               	.L__stack_usage = 0
 371               		.loc 1 273 35 is_stmt 0 view .LVU82
 372 0000 982F      		mov r25,r24
 274:drivers/oled/ssd1306_sh1106.c ****     const uint8_t mask = 0x7;
 373               		.loc 1 274 5 is_stmt 1 view .LVU83
 374               	.LVL26:
 275:drivers/oled/ssd1306_sh1106.c ****     n &= mask;
 375               		.loc 1 275 5 view .LVU84
 276:drivers/oled/ssd1306_sh1106.c ****     return a << n | a >> (-n & mask);
 376               		.loc 1 276 5 view .LVU85
 275:drivers/oled/ssd1306_sh1106.c ****     n &= mask;
 377               		.loc 1 275 7 is_stmt 0 view .LVU86
 378 0002 6770      		andi r22,lo8(7)
 379               	.LVL27:
 380               		.loc 1 276 14 view .LVU87
 381 0004 262F      		mov r18,r22
 382 0006 062E      		mov __tmp_reg__,r22
 383 0008 000C      		lsl r0
 384 000a 330B      		sbc r19,r19
 385               		.loc 1 276 19 view .LVU88
 386 000c 00C0      		rjmp 2f
 387               		1:
 388 000e 880F      		lsl r24
 389               		2:
 390 0010 6A95      		dec r22
 391 0012 02F4      		brpl 1b
 392               	.LVL28:
 393               		.loc 1 276 19 view .LVU89
 394 0014 3195      		neg r19
 395 0016 2195      		neg r18
 396 0018 3109      		sbc r19,__zero_reg__
 397 001a 2770      		andi r18,7
 398 001c 3327      		clr r19
 399 001e 00C0      		rjmp 2f
 400               		1:
 401 0020 9695      		lsr r25
 402               		2:
 403 0022 2A95      		dec r18
 404 0024 02F4      		brpl 1b
 405               	.LVL29:
 277:drivers/oled/ssd1306_sh1106.c **** }
 406               		.loc 1 277 1 view .LVU90
 407 0026 892B      		or r24,r25
 408               	/* epilogue start */
 409 0028 0895      		ret
 410               		.cfi_endproc
 411               	.LFE13:
 413               		.section	.text.oled_set_cursor,"ax",@progbits
 414               	.global	oled_set_cursor
 416               	oled_set_cursor:
 417               	.LVL30:
 418               	.LFB16:
 278:drivers/oled/ssd1306_sh1106.c **** 
 279:drivers/oled/ssd1306_sh1106.c **** static void rotate_90(const uint8_t *src, uint8_t *dest) {
 280:drivers/oled/ssd1306_sh1106.c ****     for (uint8_t i = 0, shift = 7; i < 8; ++i, --shift) {
 281:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 282:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t j = 0; j < 8; ++j) {
 283:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 284:drivers/oled/ssd1306_sh1106.c ****         }
 285:drivers/oled/ssd1306_sh1106.c ****     }
 286:drivers/oled/ssd1306_sh1106.c **** }
 287:drivers/oled/ssd1306_sh1106.c **** 
 288:drivers/oled/ssd1306_sh1106.c **** void oled_render(void) {
 289:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 290:drivers/oled/ssd1306_sh1106.c ****         return;
 291:drivers/oled/ssd1306_sh1106.c ****     }
 292:drivers/oled/ssd1306_sh1106.c **** 
 293:drivers/oled/ssd1306_sh1106.c ****     // Do we have work to do?
 294:drivers/oled/ssd1306_sh1106.c ****     oled_dirty &= OLED_ALL_BLOCKS_MASK;
 295:drivers/oled/ssd1306_sh1106.c ****     if (!oled_dirty || oled_scrolling) {
 296:drivers/oled/ssd1306_sh1106.c ****         return;
 297:drivers/oled/ssd1306_sh1106.c ****     }
 298:drivers/oled/ssd1306_sh1106.c **** 
 299:drivers/oled/ssd1306_sh1106.c ****     // Find first dirty block
 300:drivers/oled/ssd1306_sh1106.c ****     uint8_t update_start = 0;
 301:drivers/oled/ssd1306_sh1106.c ****     while (!(oled_dirty & ((OLED_BLOCK_TYPE)1 << update_start))) {
 302:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 303:drivers/oled/ssd1306_sh1106.c ****     }
 304:drivers/oled/ssd1306_sh1106.c **** 
 305:drivers/oled/ssd1306_sh1106.c ****     // Set column & page position
 306:drivers/oled/ssd1306_sh1106.c ****     static uint8_t display_start[] = {I2C_CMD, COLUMN_ADDR, 0, OLED_DISPLAY_WIDTH - 1, PAGE_ADDR, 0
 307:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 308:drivers/oled/ssd1306_sh1106.c ****         calc_bounds(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 309:drivers/oled/ssd1306_sh1106.c ****     } else {
 310:drivers/oled/ssd1306_sh1106.c ****         calc_bounds_90(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 311:drivers/oled/ssd1306_sh1106.c ****     }
 312:drivers/oled/ssd1306_sh1106.c **** 
 313:drivers/oled/ssd1306_sh1106.c ****     // Send column & page position
 314:drivers/oled/ssd1306_sh1106.c ****     if (I2C_TRANSMIT(display_start) != I2C_STATUS_SUCCESS) {
 315:drivers/oled/ssd1306_sh1106.c ****         print("oled_render offset command failed\n");
 316:drivers/oled/ssd1306_sh1106.c ****         return;
 317:drivers/oled/ssd1306_sh1106.c ****     }
 318:drivers/oled/ssd1306_sh1106.c **** 
 319:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 320:drivers/oled/ssd1306_sh1106.c ****         // Send render data chunk as is
 321:drivers/oled/ssd1306_sh1106.c ****         if (I2C_WRITE_REG(I2C_DATA, &oled_buffer[OLED_BLOCK_SIZE * update_start], OLED_BLOCK_SIZE) 
 322:drivers/oled/ssd1306_sh1106.c ****             print("oled_render data failed\n");
 323:drivers/oled/ssd1306_sh1106.c ****             return;
 324:drivers/oled/ssd1306_sh1106.c ****         }
 325:drivers/oled/ssd1306_sh1106.c ****     } else {
 326:drivers/oled/ssd1306_sh1106.c ****         // Rotate the render chunks
 327:drivers/oled/ssd1306_sh1106.c ****         const static uint8_t source_map[] = OLED_SOURCE_MAP;
 328:drivers/oled/ssd1306_sh1106.c ****         const static uint8_t target_map[] = OLED_TARGET_MAP;
 329:drivers/oled/ssd1306_sh1106.c **** 
 330:drivers/oled/ssd1306_sh1106.c ****         static uint8_t temp_buffer[OLED_BLOCK_SIZE];
 331:drivers/oled/ssd1306_sh1106.c ****         memset(temp_buffer, 0, sizeof(temp_buffer));
 332:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t i = 0; i < sizeof(source_map); ++i) {
 333:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 334:drivers/oled/ssd1306_sh1106.c ****         }
 335:drivers/oled/ssd1306_sh1106.c **** 
 336:drivers/oled/ssd1306_sh1106.c ****         // Send render data chunk after rotating
 337:drivers/oled/ssd1306_sh1106.c ****         if (I2C_WRITE_REG(I2C_DATA, &temp_buffer[0], OLED_BLOCK_SIZE) != I2C_STATUS_SUCCESS) {
 338:drivers/oled/ssd1306_sh1106.c ****             print("oled_render90 data failed\n");
 339:drivers/oled/ssd1306_sh1106.c ****             return;
 340:drivers/oled/ssd1306_sh1106.c ****         }
 341:drivers/oled/ssd1306_sh1106.c ****     }
 342:drivers/oled/ssd1306_sh1106.c **** 
 343:drivers/oled/ssd1306_sh1106.c ****     // Turn on display if it is off
 344:drivers/oled/ssd1306_sh1106.c ****     oled_on();
 345:drivers/oled/ssd1306_sh1106.c **** 
 346:drivers/oled/ssd1306_sh1106.c ****     // Clear dirty flag
 347:drivers/oled/ssd1306_sh1106.c ****     oled_dirty &= ~((OLED_BLOCK_TYPE)1 << update_start);
 348:drivers/oled/ssd1306_sh1106.c **** }
 349:drivers/oled/ssd1306_sh1106.c **** 
 350:drivers/oled/ssd1306_sh1106.c **** void oled_set_cursor(uint8_t col, uint8_t line) {
 419               		.loc 1 350 49 is_stmt 1 view -0
 420               		.cfi_startproc
 421               	/* prologue: function */
 422               	/* frame size = 0 */
 423               	/* stack size = 0 */
 424               	.L__stack_usage = 0
 351:drivers/oled/ssd1306_sh1106.c ****     uint16_t index = line * oled_rotation_width + col * OLED_FONT_WIDTH;
 425               		.loc 1 351 5 view .LVU92
 426               		.loc 1 351 27 is_stmt 0 view .LVU93
 427 0000 2091 0000 		lds r18,oled_rotation_width
 428               		.loc 1 351 55 view .LVU94
 429 0004 36E0      		ldi r19,lo8(6)
 430 0006 839F      		mul r24,r19
 431 0008 C001      		movw r24,r0
 432 000a 1124      		clr __zero_reg__
 433               	.LVL31:
 434               		.loc 1 351 49 view .LVU95
 435 000c 629F      		mul r22,r18
 436 000e 800D      		add r24,r0
 437 0010 911D      		adc r25,r1
 438 0012 1124      		clr __zero_reg__
 439               	.LVL32:
 352:drivers/oled/ssd1306_sh1106.c **** 
 353:drivers/oled/ssd1306_sh1106.c ****     // Out of bounds?
 354:drivers/oled/ssd1306_sh1106.c ****     if (index >= OLED_MATRIX_SIZE) {
 440               		.loc 1 354 5 is_stmt 1 view .LVU96
 441               		.loc 1 354 8 is_stmt 0 view .LVU97
 442 0014 8115      		cp r24,__zero_reg__
 443 0016 22E0      		ldi r18,2
 444 0018 9207      		cpc r25,r18
 445 001a 04F0      		brlt .L20
 446 001c 90E0      		ldi r25,0
 447 001e 80E0      		ldi r24,0
 448               	.LVL33:
 449               	.L20:
 355:drivers/oled/ssd1306_sh1106.c ****         index = 0;
 356:drivers/oled/ssd1306_sh1106.c ****     }
 357:drivers/oled/ssd1306_sh1106.c **** 
 358:drivers/oled/ssd1306_sh1106.c ****     oled_cursor = &oled_buffer[index];
 450               		.loc 1 358 5 is_stmt 1 view .LVU98
 451               		.loc 1 358 19 is_stmt 0 view .LVU99
 452 0020 8050      		subi r24,lo8(-(oled_buffer))
 453 0022 9040      		sbci r25,hi8(-(oled_buffer))
 454               	.LVL34:
 455               		.loc 1 358 17 view .LVU100
 456 0024 9093 0000 		sts oled_cursor+1,r25
 457 0028 8093 0000 		sts oled_cursor,r24
 458               	/* epilogue start */
 359:drivers/oled/ssd1306_sh1106.c **** }
 459               		.loc 1 359 1 view .LVU101
 460 002c 0895      		ret
 461               		.cfi_endproc
 462               	.LFE16:
 464               		.section	.text.oled_advance_char,"ax",@progbits
 465               	.global	oled_advance_char
 467               	oled_advance_char:
 468               	.LFB18:
 360:drivers/oled/ssd1306_sh1106.c **** 
 361:drivers/oled/ssd1306_sh1106.c **** void oled_advance_page(bool clearPageRemainder) {
 362:drivers/oled/ssd1306_sh1106.c ****     uint16_t index     = oled_cursor - &oled_buffer[0];
 363:drivers/oled/ssd1306_sh1106.c ****     uint8_t  remaining = oled_rotation_width - (index % oled_rotation_width);
 364:drivers/oled/ssd1306_sh1106.c **** 
 365:drivers/oled/ssd1306_sh1106.c ****     if (clearPageRemainder) {
 366:drivers/oled/ssd1306_sh1106.c ****         // Remaining Char count
 367:drivers/oled/ssd1306_sh1106.c ****         remaining = remaining / OLED_FONT_WIDTH;
 368:drivers/oled/ssd1306_sh1106.c **** 
 369:drivers/oled/ssd1306_sh1106.c ****         // Write empty character until next line
 370:drivers/oled/ssd1306_sh1106.c ****         while (remaining--) oled_write_char(' ', false);
 371:drivers/oled/ssd1306_sh1106.c ****     } else {
 372:drivers/oled/ssd1306_sh1106.c ****         // Next page index out of bounds?
 373:drivers/oled/ssd1306_sh1106.c ****         if (index + remaining >= OLED_MATRIX_SIZE) {
 374:drivers/oled/ssd1306_sh1106.c ****             index     = 0;
 375:drivers/oled/ssd1306_sh1106.c ****             remaining = 0;
 376:drivers/oled/ssd1306_sh1106.c ****         }
 377:drivers/oled/ssd1306_sh1106.c **** 
 378:drivers/oled/ssd1306_sh1106.c ****         oled_cursor = &oled_buffer[index + remaining];
 379:drivers/oled/ssd1306_sh1106.c ****     }
 380:drivers/oled/ssd1306_sh1106.c **** }
 381:drivers/oled/ssd1306_sh1106.c **** 
 382:drivers/oled/ssd1306_sh1106.c **** void oled_advance_char(void) {
 469               		.loc 1 382 30 is_stmt 1 view -0
 470               		.cfi_startproc
 471               	/* prologue: function */
 472               	/* frame size = 0 */
 473               	/* stack size = 0 */
 474               	.L__stack_usage = 0
 383:drivers/oled/ssd1306_sh1106.c ****     uint16_t nextIndex      = oled_cursor - &oled_buffer[0] + OLED_FONT_WIDTH;
 475               		.loc 1 383 5 view .LVU103
 476               		.loc 1 383 43 is_stmt 0 view .LVU104
 477 0000 2091 0000 		lds r18,oled_cursor
 478 0004 3091 0000 		lds r19,oled_cursor+1
 479               		.loc 1 383 61 view .LVU105
 480 0008 2050      		subi r18,lo8(oled_buffer-6)
 481 000a 3040      		sbci r19,hi8(oled_buffer-6)
 482               	.LVL35:
 384:drivers/oled/ssd1306_sh1106.c ****     uint8_t  remainingSpace = oled_rotation_width - (nextIndex % oled_rotation_width);
 483               		.loc 1 384 5 is_stmt 1 view .LVU106
 484               		.loc 1 384 51 is_stmt 0 view .LVU107
 485 000c 4091 0000 		lds r20,oled_rotation_width
 486               		.loc 1 384 64 view .LVU108
 487 0010 642F      		mov r22,r20
 488 0012 70E0      		ldi r23,0
 489 0014 C901      		movw r24,r18
 490 0016 0E94 0000 		call __udivmodhi4
 491               		.loc 1 384 14 view .LVU109
 492 001a 481B      		sub r20,r24
 493               	.LVL36:
 385:drivers/oled/ssd1306_sh1106.c **** 
 386:drivers/oled/ssd1306_sh1106.c ****     // Do we have enough space on the current line for the next character
 387:drivers/oled/ssd1306_sh1106.c ****     if (remainingSpace < OLED_FONT_WIDTH) {
 494               		.loc 1 387 5 is_stmt 1 view .LVU110
 495               		.loc 1 387 8 is_stmt 0 view .LVU111
 496 001c 4630      		cpi r20,lo8(6)
 497 001e 00F4      		brsh .L22
 388:drivers/oled/ssd1306_sh1106.c ****         nextIndex += remainingSpace;
 498               		.loc 1 388 9 is_stmt 1 view .LVU112
 499               		.loc 1 388 19 is_stmt 0 view .LVU113
 500 0020 240F      		add r18,r20
 501 0022 311D      		adc r19,__zero_reg__
 502               	.LVL37:
 503               	.L22:
 389:drivers/oled/ssd1306_sh1106.c ****     }
 390:drivers/oled/ssd1306_sh1106.c **** 
 391:drivers/oled/ssd1306_sh1106.c ****     // Did we go out of bounds
 392:drivers/oled/ssd1306_sh1106.c ****     if (nextIndex >= OLED_MATRIX_SIZE) {
 504               		.loc 1 392 5 is_stmt 1 view .LVU114
 505               		.loc 1 392 8 is_stmt 0 view .LVU115
 506 0024 2115      		cp r18,__zero_reg__
 507 0026 82E0      		ldi r24,2
 508 0028 3807      		cpc r19,r24
 509 002a 00F0      		brlo .L23
 393:drivers/oled/ssd1306_sh1106.c ****         nextIndex = 0;
 510               		.loc 1 393 19 view .LVU116
 511 002c 30E0      		ldi r19,0
 512 002e 20E0      		ldi r18,0
 513               	.LVL38:
 514               	.L23:
 394:drivers/oled/ssd1306_sh1106.c ****     }
 395:drivers/oled/ssd1306_sh1106.c **** 
 396:drivers/oled/ssd1306_sh1106.c ****     // Update cursor position
 397:drivers/oled/ssd1306_sh1106.c ****     oled_cursor = &oled_buffer[nextIndex];
 515               		.loc 1 397 5 is_stmt 1 view .LVU117
 516               		.loc 1 397 19 is_stmt 0 view .LVU118
 517 0030 2050      		subi r18,lo8(-(oled_buffer))
 518 0032 3040      		sbci r19,hi8(-(oled_buffer))
 519               	.LVL39:
 520               		.loc 1 397 17 view .LVU119
 521 0034 3093 0000 		sts oled_cursor+1,r19
 522 0038 2093 0000 		sts oled_cursor,r18
 523               	/* epilogue start */
 398:drivers/oled/ssd1306_sh1106.c **** }
 524               		.loc 1 398 1 view .LVU120
 525 003c 0895      		ret
 526               		.cfi_endproc
 527               	.LFE18:
 529               		.section	.text.oled_write_char,"ax",@progbits
 530               	.global	oled_write_char
 532               	oled_write_char:
 533               	.LVL40:
 534               	.LFB19:
 399:drivers/oled/ssd1306_sh1106.c **** 
 400:drivers/oled/ssd1306_sh1106.c **** // Main handler that writes character data to the display buffer
 401:drivers/oled/ssd1306_sh1106.c **** void oled_write_char(const char data, bool invert) {
 535               		.loc 1 401 52 is_stmt 1 view -0
 536               		.cfi_startproc
 537               		.loc 1 401 52 is_stmt 0 view .LVU122
 538 0000 1F93      		push r17
 539               	.LCFI12:
 540               		.cfi_def_cfa_offset 3
 541               		.cfi_offset 17, -2
 542 0002 CF93      		push r28
 543               	.LCFI13:
 544               		.cfi_def_cfa_offset 4
 545               		.cfi_offset 28, -3
 546 0004 DF93      		push r29
 547               	.LCFI14:
 548               		.cfi_def_cfa_offset 5
 549               		.cfi_offset 29, -4
 550               	/* prologue: function */
 551               	/* frame size = 0 */
 552               	/* stack size = 3 */
 553               	.L__stack_usage = 3
 554 0006 982F      		mov r25,r24
 555 0008 162F      		mov r17,r22
 402:drivers/oled/ssd1306_sh1106.c ****     // Advance to the next line if newline
 403:drivers/oled/ssd1306_sh1106.c ****     if (data == '\n') {
 556               		.loc 1 403 5 is_stmt 1 view .LVU123
 404:drivers/oled/ssd1306_sh1106.c ****         // Old source wrote ' ' until end of line...
 405:drivers/oled/ssd1306_sh1106.c ****         oled_advance_page(true);
 557               		.loc 1 405 9 is_stmt 0 view .LVU124
 558 000a 81E0      		ldi r24,lo8(1)
 559               	.LVL41:
 403:drivers/oled/ssd1306_sh1106.c ****         // Old source wrote ' ' until end of line...
 560               		.loc 1 403 8 view .LVU125
 561 000c 9A30      		cpi r25,lo8(10)
 562 000e 01F0      		breq .L35
 406:drivers/oled/ssd1306_sh1106.c ****         return;
 407:drivers/oled/ssd1306_sh1106.c ****     }
 408:drivers/oled/ssd1306_sh1106.c **** 
 409:drivers/oled/ssd1306_sh1106.c ****     if (data == '\r') {
 563               		.loc 1 409 5 is_stmt 1 view .LVU126
 564               		.loc 1 409 8 is_stmt 0 view .LVU127
 565 0010 9D30      		cpi r25,lo8(13)
 566 0012 01F4      		brne .L26
 410:drivers/oled/ssd1306_sh1106.c ****         oled_advance_page(false);
 567               		.loc 1 410 9 is_stmt 1 view .LVU128
 568 0014 80E0      		ldi r24,0
 569               	.L35:
 570               	/* epilogue start */
 411:drivers/oled/ssd1306_sh1106.c ****         return;
 412:drivers/oled/ssd1306_sh1106.c ****     }
 413:drivers/oled/ssd1306_sh1106.c **** 
 414:drivers/oled/ssd1306_sh1106.c ****     // copy the current render buffer to check for dirty after
 415:drivers/oled/ssd1306_sh1106.c ****     static uint8_t oled_temp_buffer[OLED_FONT_WIDTH];
 416:drivers/oled/ssd1306_sh1106.c ****     memcpy(&oled_temp_buffer, oled_cursor, OLED_FONT_WIDTH);
 417:drivers/oled/ssd1306_sh1106.c **** 
 418:drivers/oled/ssd1306_sh1106.c ****     _Static_assert(sizeof(font) >= ((OLED_FONT_END + 1 - OLED_FONT_START) * OLED_FONT_WIDTH), "OLED
 419:drivers/oled/ssd1306_sh1106.c **** 
 420:drivers/oled/ssd1306_sh1106.c ****     // set the reder buffer data
 421:drivers/oled/ssd1306_sh1106.c ****     uint8_t cast_data = (uint8_t)data;  // font based on unsigned type for index
 422:drivers/oled/ssd1306_sh1106.c ****     if (cast_data < OLED_FONT_START || cast_data > OLED_FONT_END) {
 423:drivers/oled/ssd1306_sh1106.c ****         memset(oled_cursor, 0x00, OLED_FONT_WIDTH);
 424:drivers/oled/ssd1306_sh1106.c ****     } else {
 425:drivers/oled/ssd1306_sh1106.c ****         const uint8_t *glyph = &font[(cast_data - OLED_FONT_START) * OLED_FONT_WIDTH];
 426:drivers/oled/ssd1306_sh1106.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 427:drivers/oled/ssd1306_sh1106.c ****     }
 428:drivers/oled/ssd1306_sh1106.c **** 
 429:drivers/oled/ssd1306_sh1106.c ****     // Invert if needed
 430:drivers/oled/ssd1306_sh1106.c ****     if (invert) {
 431:drivers/oled/ssd1306_sh1106.c ****         InvertCharacter(oled_cursor);
 432:drivers/oled/ssd1306_sh1106.c ****     }
 433:drivers/oled/ssd1306_sh1106.c **** 
 434:drivers/oled/ssd1306_sh1106.c ****     // Dirty check
 435:drivers/oled/ssd1306_sh1106.c ****     if (memcmp(&oled_temp_buffer, oled_cursor, OLED_FONT_WIDTH)) {
 436:drivers/oled/ssd1306_sh1106.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 437:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 438:drivers/oled/ssd1306_sh1106.c ****         // Edgecase check if the written data spans the 2 chunks
 439:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << ((index + OLED_FONT_WIDTH - 1) / OLED_BLOCK_SIZE));
 440:drivers/oled/ssd1306_sh1106.c ****     }
 441:drivers/oled/ssd1306_sh1106.c **** 
 442:drivers/oled/ssd1306_sh1106.c ****     // Finally move to the next char
 443:drivers/oled/ssd1306_sh1106.c ****     oled_advance_char();
 444:drivers/oled/ssd1306_sh1106.c **** }
 571               		.loc 1 444 1 is_stmt 0 view .LVU129
 572 0016 DF91      		pop r29
 573 0018 CF91      		pop r28
 574 001a 1F91      		pop r17
 410:drivers/oled/ssd1306_sh1106.c ****         oled_advance_page(false);
 575               		.loc 1 410 9 view .LVU130
 576 001c 0C94 0000 		jmp oled_advance_page
 577               	.LVL42:
 578               	.L26:
 415:drivers/oled/ssd1306_sh1106.c ****     memcpy(&oled_temp_buffer, oled_cursor, OLED_FONT_WIDTH);
 579               		.loc 1 415 5 is_stmt 1 view .LVU131
 416:drivers/oled/ssd1306_sh1106.c **** 
 580               		.loc 1 416 5 view .LVU132
 581 0020 C091 0000 		lds r28,oled_cursor
 582 0024 D091 0000 		lds r29,oled_cursor+1
 583 0028 86E0      		ldi r24,lo8(6)
 584 002a FE01      		movw r30,r28
 585 002c A0E0      		ldi r26,lo8(oled_temp_buffer.6)
 586 002e B0E0      		ldi r27,hi8(oled_temp_buffer.6)
 587               		0:
 588 0030 0190      		ld r0,Z+
 589 0032 0D92      		st X+,r0
 590 0034 8A95      		dec r24
 591 0036 01F4      		brne 0b
 418:drivers/oled/ssd1306_sh1106.c **** 
 592               		.loc 1 418 5 view .LVU133
 421:drivers/oled/ssd1306_sh1106.c ****     if (cast_data < OLED_FONT_START || cast_data > OLED_FONT_END) {
 593               		.loc 1 421 5 view .LVU134
 594               	.LVL43:
 422:drivers/oled/ssd1306_sh1106.c ****         memset(oled_cursor, 0x00, OLED_FONT_WIDTH);
 595               		.loc 1 422 5 view .LVU135
 422:drivers/oled/ssd1306_sh1106.c ****         memset(oled_cursor, 0x00, OLED_FONT_WIDTH);
 596               		.loc 1 422 8 is_stmt 0 view .LVU136
 597 0038 903E      		cpi r25,lo8(-32)
 598 003a 00F0      		brlo .L27
 423:drivers/oled/ssd1306_sh1106.c ****     } else {
 599               		.loc 1 423 9 is_stmt 1 view .LVU137
 600 003c 86E0      		ldi r24,lo8(6)
 601 003e FE01      		movw r30,r28
 602               		0:
 603 0040 1192      		st Z+,__zero_reg__
 604 0042 8A95      		dec r24
 605 0044 01F4      		brne 0b
 606               	.LVL44:
 607               	.L28:
 430:drivers/oled/ssd1306_sh1106.c ****         InvertCharacter(oled_cursor);
 608               		.loc 1 430 5 view .LVU138
 430:drivers/oled/ssd1306_sh1106.c ****         InvertCharacter(oled_cursor);
 609               		.loc 1 430 8 is_stmt 0 view .LVU139
 610 0046 1111      		cpse r17,__zero_reg__
 611 0048 00C0      		rjmp .L29
 612               	.L34:
 435:drivers/oled/ssd1306_sh1106.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 613               		.loc 1 435 5 is_stmt 1 view .LVU140
 435:drivers/oled/ssd1306_sh1106.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 614               		.loc 1 435 9 is_stmt 0 view .LVU141
 615 004a C091 0000 		lds r28,oled_cursor
 616 004e D091 0000 		lds r29,oled_cursor+1
 617 0052 46E0      		ldi r20,lo8(6)
 618 0054 50E0      		ldi r21,0
 619 0056 BE01      		movw r22,r28
 620 0058 80E0      		ldi r24,lo8(oled_temp_buffer.6)
 621 005a 90E0      		ldi r25,hi8(oled_temp_buffer.6)
 622 005c 0E94 0000 		call memcmp
 623               	.LVL45:
 435:drivers/oled/ssd1306_sh1106.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 624               		.loc 1 435 8 view .LVU142
 625 0060 892B      		or r24,r25
 626 0062 01F4      		brne .L30
 627               	.L31:
 443:drivers/oled/ssd1306_sh1106.c **** }
 628               		.loc 1 443 5 is_stmt 1 view .LVU143
 629               	/* epilogue start */
 630               		.loc 1 444 1 is_stmt 0 view .LVU144
 631 0064 DF91      		pop r29
 632 0066 CF91      		pop r28
 633 0068 1F91      		pop r17
 634               	.LVL46:
 443:drivers/oled/ssd1306_sh1106.c **** }
 635               		.loc 1 443 5 view .LVU145
 636 006a 0C94 0000 		jmp oled_advance_char
 637               	.LVL47:
 638               	.L27:
 639               	.LBB14:
 425:drivers/oled/ssd1306_sh1106.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 640               		.loc 1 425 9 is_stmt 1 view .LVU146
 426:drivers/oled/ssd1306_sh1106.c ****     }
 641               		.loc 1 426 9 view .LVU147
 425:drivers/oled/ssd1306_sh1106.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 642               		.loc 1 425 68 is_stmt 0 view .LVU148
 643 006e F6E0      		ldi r31,lo8(6)
 644 0070 9F9F      		mul r25,r31
 645 0072 B001      		movw r22,r0
 646 0074 1124      		clr __zero_reg__
 425:drivers/oled/ssd1306_sh1106.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 647               		.loc 1 425 24 view .LVU149
 648 0076 6050      		subi r22,lo8(-(font))
 649 0078 7040      		sbci r23,hi8(-(font))
 426:drivers/oled/ssd1306_sh1106.c ****     }
 650               		.loc 1 426 9 view .LVU150
 651 007a 46E0      		ldi r20,lo8(6)
 652 007c 50E0      		ldi r21,0
 653 007e CE01      		movw r24,r28
 654 0080 0E94 0000 		call memcpy_P
 655               	.LVL48:
 426:drivers/oled/ssd1306_sh1106.c ****     }
 656               		.loc 1 426 9 view .LVU151
 657 0084 00C0      		rjmp .L28
 658               	.LVL49:
 659               	.L29:
 426:drivers/oled/ssd1306_sh1106.c ****     }
 660               		.loc 1 426 9 view .LVU152
 661               	.LBE14:
 431:drivers/oled/ssd1306_sh1106.c ****     }
 662               		.loc 1 431 9 view .LVU153
 663 0086 E091 0000 		lds r30,oled_cursor
 664 008a F091 0000 		lds r31,oled_cursor+1
 431:drivers/oled/ssd1306_sh1106.c ****     }
 665               		.loc 1 431 9 is_stmt 1 view .LVU154
 666               	.LVL50:
 667               	.LBB15:
 668               	.LBI15:
 155:drivers/oled/ssd1306_sh1106.c ****     const uint8_t *end = cursor + OLED_FONT_WIDTH;
 669               		.loc 1 155 13 view .LVU155
 670               	.LBB16:
 156:drivers/oled/ssd1306_sh1106.c ****     while (cursor < end) {
 671               		.loc 1 156 5 view .LVU156
 156:drivers/oled/ssd1306_sh1106.c ****     while (cursor < end) {
 672               		.loc 1 156 20 is_stmt 0 view .LVU157
 673 008e 9F01      		movw r18,r30
 674 0090 2A5F      		subi r18,-6
 675 0092 3F4F      		sbci r19,-1
 676               	.LVL51:
 157:drivers/oled/ssd1306_sh1106.c ****         *cursor = ~(*cursor);
 677               		.loc 1 157 5 is_stmt 1 view .LVU158
 678               	.L32:
 157:drivers/oled/ssd1306_sh1106.c ****         *cursor = ~(*cursor);
 679               		.loc 1 157 19 view .LVU159
 680 0094 2E17      		cp r18,r30
 681 0096 3F07      		cpc r19,r31
 682 0098 01F0      		breq .L34
 158:drivers/oled/ssd1306_sh1106.c ****         cursor++;
 683               		.loc 1 158 9 view .LVU160
 158:drivers/oled/ssd1306_sh1106.c ****         cursor++;
 684               		.loc 1 158 17 is_stmt 0 view .LVU161
 685 009a 8081      		ld r24,Z
 686 009c 8095      		com r24
 687 009e 8193      		st Z+,r24
 688               	.LVL52:
 159:drivers/oled/ssd1306_sh1106.c ****     }
 689               		.loc 1 159 9 is_stmt 1 view .LVU162
 159:drivers/oled/ssd1306_sh1106.c ****     }
 690               		.loc 1 159 9 is_stmt 0 view .LVU163
 691 00a0 00C0      		rjmp .L32
 692               	.LVL53:
 693               	.L30:
 159:drivers/oled/ssd1306_sh1106.c ****     }
 694               		.loc 1 159 9 view .LVU164
 695               	.LBE16:
 696               	.LBE15:
 697               	.LBB17:
 436:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 698               		.loc 1 436 9 is_stmt 1 view .LVU165
 436:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 699               		.loc 1 436 38 is_stmt 0 view .LVU166
 700 00a2 C050      		subi r28,lo8(oled_buffer)
 701 00a4 D040      		sbci r29,hi8(oled_buffer)
 702               	.LVL54:
 437:drivers/oled/ssd1306_sh1106.c ****         // Edgecase check if the written data spans the 2 chunks
 703               		.loc 1 437 9 is_stmt 1 view .LVU167
 439:drivers/oled/ssd1306_sh1106.c ****     }
 704               		.loc 1 439 9 view .LVU168
 437:drivers/oled/ssd1306_sh1106.c ****         // Edgecase check if the written data spans the 2 chunks
 705               		.loc 1 437 53 is_stmt 0 view .LVU169
 706 00a6 CE01      		movw r24,r28
 707 00a8 25E0      		ldi r18,5
 708               		1:
 709 00aa 9695      		lsr r25
 710 00ac 8795      		ror r24
 711 00ae 2A95      		dec r18
 712 00b0 01F4      		brne 1b
 437:drivers/oled/ssd1306_sh1106.c ****         // Edgecase check if the written data spans the 2 chunks
 713               		.loc 1 437 43 view .LVU170
 714 00b2 21E0      		ldi r18,lo8(1)
 715 00b4 30E0      		ldi r19,0
 716 00b6 A901      		movw r20,r18
 717 00b8 00C0      		rjmp 2f
 718               		1:
 719 00ba 440F      		lsl r20
 720 00bc 551F      		rol r21
 721               		2:
 722 00be 8A95      		dec r24
 723 00c0 02F4      		brpl 1b
 724 00c2 CA01      		movw r24,r20
 437:drivers/oled/ssd1306_sh1106.c ****         // Edgecase check if the written data spans the 2 chunks
 725               		.loc 1 437 20 view .LVU171
 726 00c4 4091 0000 		lds r20,oled_dirty
 727 00c8 5091 0000 		lds r21,oled_dirty+1
 728 00cc 842B      		or r24,r20
 729 00ce 952B      		or r25,r21
 439:drivers/oled/ssd1306_sh1106.c ****     }
 730               		.loc 1 439 72 view .LVU172
 731 00d0 2596      		adiw r28,5
 732               	.LVL55:
 439:drivers/oled/ssd1306_sh1106.c ****     }
 733               		.loc 1 439 77 view .LVU173
 734 00d2 45E0      		ldi r20,5
 735               		1:
 736 00d4 D695      		lsr r29
 737 00d6 C795      		ror r28
 738 00d8 4A95      		dec r20
 739 00da 01F4      		brne 1b
 740               	.LVL56:
 439:drivers/oled/ssd1306_sh1106.c ****     }
 741               		.loc 1 439 43 view .LVU174
 742 00dc 00C0      		rjmp 2f
 743               		1:
 744 00de 220F      		lsl r18
 745 00e0 331F      		rol r19
 746               		2:
 747 00e2 CA95      		dec r28
 748 00e4 02F4      		brpl 1b
 439:drivers/oled/ssd1306_sh1106.c ****     }
 749               		.loc 1 439 20 view .LVU175
 750 00e6 822B      		or r24,r18
 751 00e8 932B      		or r25,r19
 752 00ea 9093 0000 		sts oled_dirty+1,r25
 753 00ee 8093 0000 		sts oled_dirty,r24
 754 00f2 00C0      		rjmp .L31
 755               	.LBE17:
 756               		.cfi_endproc
 757               	.LFE19:
 759               		.section	.text.oled_advance_page,"ax",@progbits
 760               	.global	oled_advance_page
 762               	oled_advance_page:
 763               	.LVL57:
 764               	.LFB17:
 361:drivers/oled/ssd1306_sh1106.c ****     uint16_t index     = oled_cursor - &oled_buffer[0];
 765               		.loc 1 361 49 is_stmt 1 view -0
 766               		.cfi_startproc
 361:drivers/oled/ssd1306_sh1106.c ****     uint16_t index     = oled_cursor - &oled_buffer[0];
 767               		.loc 1 361 49 is_stmt 0 view .LVU177
 768 0000 CF93      		push r28
 769               	.LCFI15:
 770               		.cfi_def_cfa_offset 3
 771               		.cfi_offset 28, -2
 772               	/* prologue: function */
 773               	/* frame size = 0 */
 774               	/* stack size = 1 */
 775               	.L__stack_usage = 1
 776 0002 E82F      		mov r30,r24
 362:drivers/oled/ssd1306_sh1106.c ****     uint8_t  remaining = oled_rotation_width - (index % oled_rotation_width);
 777               		.loc 1 362 5 is_stmt 1 view .LVU178
 362:drivers/oled/ssd1306_sh1106.c ****     uint8_t  remaining = oled_rotation_width - (index % oled_rotation_width);
 778               		.loc 1 362 38 is_stmt 0 view .LVU179
 779 0004 2091 0000 		lds r18,oled_cursor
 780 0008 3091 0000 		lds r19,oled_cursor+1
 781 000c 2050      		subi r18,lo8(oled_buffer)
 782 000e 3040      		sbci r19,hi8(oled_buffer)
 783               	.LVL58:
 363:drivers/oled/ssd1306_sh1106.c **** 
 784               		.loc 1 363 5 is_stmt 1 view .LVU180
 363:drivers/oled/ssd1306_sh1106.c **** 
 785               		.loc 1 363 46 is_stmt 0 view .LVU181
 786 0010 4091 0000 		lds r20,oled_rotation_width
 363:drivers/oled/ssd1306_sh1106.c **** 
 787               		.loc 1 363 55 view .LVU182
 788 0014 642F      		mov r22,r20
 789 0016 70E0      		ldi r23,0
 790 0018 C901      		movw r24,r18
 791               	.LVL59:
 363:drivers/oled/ssd1306_sh1106.c **** 
 792               		.loc 1 363 55 view .LVU183
 793 001a 0E94 0000 		call __udivmodhi4
 363:drivers/oled/ssd1306_sh1106.c **** 
 794               		.loc 1 363 14 view .LVU184
 795 001e 481B      		sub r20,r24
 796 0020 842F      		mov r24,r20
 797               	.LVL60:
 365:drivers/oled/ssd1306_sh1106.c ****         // Remaining Char count
 798               		.loc 1 365 5 is_stmt 1 view .LVU185
 365:drivers/oled/ssd1306_sh1106.c ****         // Remaining Char count
 799               		.loc 1 365 8 is_stmt 0 view .LVU186
 800 0022 EE23      		tst r30
 801 0024 01F0      		breq .L37
 367:drivers/oled/ssd1306_sh1106.c **** 
 802               		.loc 1 367 9 is_stmt 1 view .LVU187
 367:drivers/oled/ssd1306_sh1106.c **** 
 803               		.loc 1 367 19 is_stmt 0 view .LVU188
 804 0026 66E0      		ldi r22,lo8(6)
 805 0028 0E94 0000 		call __udivmodqi4
 806 002c C82F      		mov r28,r24
 807               	.LVL61:
 370:drivers/oled/ssd1306_sh1106.c ****     } else {
 808               		.loc 1 370 9 is_stmt 1 view .LVU189
 809               	.L38:
 370:drivers/oled/ssd1306_sh1106.c ****     } else {
 810               		.loc 1 370 16 discriminator 1 view .LVU190
 370:drivers/oled/ssd1306_sh1106.c ****     } else {
 811               		.loc 1 370 25 is_stmt 0 discriminator 1 view .LVU191
 812               	.LVL62:
 813 002e C150      		subi r28,1
 814 0030 00F4      		brcc .L39
 815               	.L36:
 816               	/* epilogue start */
 380:drivers/oled/ssd1306_sh1106.c **** 
 817               		.loc 1 380 1 view .LVU192
 818 0032 CF91      		pop r28
 819 0034 0895      		ret
 820               	.LVL63:
 821               	.L39:
 370:drivers/oled/ssd1306_sh1106.c ****     } else {
 822               		.loc 1 370 29 is_stmt 1 discriminator 2 view .LVU193
 823 0036 60E0      		ldi r22,0
 824 0038 80E2      		ldi r24,lo8(32)
 825 003a 0E94 0000 		call oled_write_char
 826               	.LVL64:
 827 003e 00C0      		rjmp .L38
 828               	.LVL65:
 829               	.L37:
 373:drivers/oled/ssd1306_sh1106.c ****             index     = 0;
 830               		.loc 1 373 9 view .LVU194
 373:drivers/oled/ssd1306_sh1106.c ****             index     = 0;
 831               		.loc 1 373 19 is_stmt 0 view .LVU195
 832 0040 A901      		movw r20,r18
 833               	.LVL66:
 373:drivers/oled/ssd1306_sh1106.c ****             index     = 0;
 834               		.loc 1 373 19 view .LVU196
 835 0042 480F      		add r20,r24
 836 0044 511D      		adc r21,__zero_reg__
 373:drivers/oled/ssd1306_sh1106.c ****             index     = 0;
 837               		.loc 1 373 12 view .LVU197
 838 0046 4115      		cp r20,__zero_reg__
 839 0048 5240      		sbci r21,2
 840 004a 00F0      		brlo .L41
 375:drivers/oled/ssd1306_sh1106.c ****         }
 841               		.loc 1 375 23 view .LVU198
 842 004c 80E0      		ldi r24,0
 843               	.LVL67:
 374:drivers/oled/ssd1306_sh1106.c ****             remaining = 0;
 844               		.loc 1 374 23 view .LVU199
 845 004e 30E0      		ldi r19,0
 846 0050 20E0      		ldi r18,0
 847               	.LVL68:
 848               	.L41:
 378:drivers/oled/ssd1306_sh1106.c ****     }
 849               		.loc 1 378 9 is_stmt 1 view .LVU200
 378:drivers/oled/ssd1306_sh1106.c ****     }
 850               		.loc 1 378 42 is_stmt 0 view .LVU201
 851 0052 280F      		add r18,r24
 852 0054 311D      		adc r19,__zero_reg__
 853               	.LVL69:
 378:drivers/oled/ssd1306_sh1106.c ****     }
 854               		.loc 1 378 23 view .LVU202
 855 0056 2050      		subi r18,lo8(-(oled_buffer))
 856 0058 3040      		sbci r19,hi8(-(oled_buffer))
 378:drivers/oled/ssd1306_sh1106.c ****     }
 857               		.loc 1 378 21 view .LVU203
 858 005a 3093 0000 		sts oled_cursor+1,r19
 859 005e 2093 0000 		sts oled_cursor,r18
 380:drivers/oled/ssd1306_sh1106.c **** 
 860               		.loc 1 380 1 view .LVU204
 861 0062 00C0      		rjmp .L36
 862               		.cfi_endproc
 863               	.LFE17:
 865               		.section	.text.oled_write,"ax",@progbits
 866               	.global	oled_write
 868               	oled_write:
 869               	.LVL70:
 870               	.LFB20:
 445:drivers/oled/ssd1306_sh1106.c **** 
 446:drivers/oled/ssd1306_sh1106.c **** void oled_write(const char *data, bool invert) {
 871               		.loc 1 446 48 is_stmt 1 view -0
 872               		.cfi_startproc
 873               		.loc 1 446 48 is_stmt 0 view .LVU206
 874 0000 FF92      		push r15
 875               	.LCFI16:
 876               		.cfi_def_cfa_offset 3
 877               		.cfi_offset 15, -2
 878 0002 0F93      		push r16
 879               	.LCFI17:
 880               		.cfi_def_cfa_offset 4
 881               		.cfi_offset 16, -3
 882 0004 1F93      		push r17
 883               	.LCFI18:
 884               		.cfi_def_cfa_offset 5
 885               		.cfi_offset 17, -4
 886 0006 CF93      		push r28
 887               	.LCFI19:
 888               		.cfi_def_cfa_offset 6
 889               		.cfi_offset 28, -5
 890 0008 DF93      		push r29
 891               	.LCFI20:
 892               		.cfi_def_cfa_offset 7
 893               		.cfi_offset 29, -6
 894               	/* prologue: function */
 895               	/* frame size = 0 */
 896               	/* stack size = 5 */
 897               	.L__stack_usage = 5
 898 000a EC01      		movw r28,r24
 899 000c F62E      		mov r15,r22
 447:drivers/oled/ssd1306_sh1106.c ****     const char *end = data + strlen(data);
 900               		.loc 1 447 5 is_stmt 1 view .LVU207
 901               		.loc 1 447 30 is_stmt 0 view .LVU208
 902 000e FC01      		movw r30,r24
 903               		0:
 904 0010 0190      		ld __tmp_reg__,Z+
 905 0012 0020      		tst __tmp_reg__
 906 0014 01F4      		brne 0b
 907               		.loc 1 447 17 view .LVU209
 908 0016 8F01      		movw r16,r30
 909 0018 0150      		subi r16,1
 910 001a 1109      		sbc r17,__zero_reg__
 911               	.LVL71:
 448:drivers/oled/ssd1306_sh1106.c ****     while (data < end) {
 912               		.loc 1 448 5 is_stmt 1 view .LVU210
 913               	.L43:
 914               		.loc 1 448 17 view .LVU211
 915 001c C017      		cp r28,r16
 916 001e D107      		cpc r29,r17
 917 0020 00F0      		brlo .L44
 918               	/* epilogue start */
 449:drivers/oled/ssd1306_sh1106.c ****         oled_write_char(*data, invert);
 450:drivers/oled/ssd1306_sh1106.c ****         data++;
 451:drivers/oled/ssd1306_sh1106.c ****     }
 452:drivers/oled/ssd1306_sh1106.c **** }
 919               		.loc 1 452 1 is_stmt 0 view .LVU212
 920 0022 DF91      		pop r29
 921 0024 CF91      		pop r28
 922               	.LVL72:
 923               		.loc 1 452 1 view .LVU213
 924 0026 1F91      		pop r17
 925 0028 0F91      		pop r16
 926               	.LVL73:
 927               		.loc 1 452 1 view .LVU214
 928 002a FF90      		pop r15
 929               	.LVL74:
 930               		.loc 1 452 1 view .LVU215
 931 002c 0895      		ret
 932               	.LVL75:
 933               	.L44:
 449:drivers/oled/ssd1306_sh1106.c ****         oled_write_char(*data, invert);
 934               		.loc 1 449 9 is_stmt 1 view .LVU216
 935 002e 6F2D      		mov r22,r15
 936 0030 8991      		ld r24,Y+
 937               	.LVL76:
 449:drivers/oled/ssd1306_sh1106.c ****         oled_write_char(*data, invert);
 938               		.loc 1 449 9 is_stmt 0 view .LVU217
 939 0032 0E94 0000 		call oled_write_char
 940               	.LVL77:
 450:drivers/oled/ssd1306_sh1106.c ****     }
 941               		.loc 1 450 9 is_stmt 1 view .LVU218
 450:drivers/oled/ssd1306_sh1106.c ****     }
 942               		.loc 1 450 9 is_stmt 0 view .LVU219
 943 0036 00C0      		rjmp .L43
 944               		.cfi_endproc
 945               	.LFE20:
 947               		.section	.text.oled_write_ln,"ax",@progbits
 948               	.global	oled_write_ln
 950               	oled_write_ln:
 951               	.LVL78:
 952               	.LFB21:
 453:drivers/oled/ssd1306_sh1106.c **** 
 454:drivers/oled/ssd1306_sh1106.c **** void oled_write_ln(const char *data, bool invert) {
 953               		.loc 1 454 51 is_stmt 1 view -0
 954               		.cfi_startproc
 955               	/* prologue: function */
 956               	/* frame size = 0 */
 957               	/* stack size = 0 */
 958               	.L__stack_usage = 0
 455:drivers/oled/ssd1306_sh1106.c ****     oled_write(data, invert);
 959               		.loc 1 455 5 view .LVU221
 960 0000 0E94 0000 		call oled_write
 961               	.LVL79:
 456:drivers/oled/ssd1306_sh1106.c ****     oled_advance_page(true);
 962               		.loc 1 456 5 view .LVU222
 963 0004 81E0      		ldi r24,lo8(1)
 964 0006 0C94 0000 		jmp oled_advance_page
 965               	.LVL80:
 966               		.cfi_endproc
 967               	.LFE21:
 969               		.section	.text.oled_pan,"ax",@progbits
 970               	.global	oled_pan
 972               	oled_pan:
 973               	.LVL81:
 974               	.LFB22:
 457:drivers/oled/ssd1306_sh1106.c **** }
 458:drivers/oled/ssd1306_sh1106.c **** 
 459:drivers/oled/ssd1306_sh1106.c **** void oled_pan(bool left) {
 975               		.loc 1 459 26 view -0
 976               		.cfi_startproc
 977               		.loc 1 459 26 is_stmt 0 view .LVU224
 978 0000 EF92      		push r14
 979               	.LCFI21:
 980               		.cfi_def_cfa_offset 3
 981               		.cfi_offset 14, -2
 982 0002 FF92      		push r15
 983               	.LCFI22:
 984               		.cfi_def_cfa_offset 4
 985               		.cfi_offset 15, -3
 986 0004 1F93      		push r17
 987               	.LCFI23:
 988               		.cfi_def_cfa_offset 5
 989               		.cfi_offset 17, -4
 990 0006 CF93      		push r28
 991               	.LCFI24:
 992               		.cfi_def_cfa_offset 6
 993               		.cfi_offset 28, -5
 994 0008 DF93      		push r29
 995               	.LCFI25:
 996               		.cfi_def_cfa_offset 7
 997               		.cfi_offset 29, -6
 998               	/* prologue: function */
 999               	/* frame size = 0 */
 1000               	/* stack size = 5 */
 1001               	.L__stack_usage = 5
 1002 000a 182F      		mov r17,r24
 460:drivers/oled/ssd1306_sh1106.c ****     uint16_t i = 0;
 1003               		.loc 1 460 5 is_stmt 1 view .LVU225
 1004               	.LVL82:
 461:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t y = 0; y < OLED_DISPLAY_HEIGHT / 8; y++) {
 1005               		.loc 1 461 5 view .LVU226
 1006               	.LBB18:
 1007               		.loc 1 461 10 view .LVU227
 1008               		.loc 1 461 28 view .LVU228
 1009 000c C0E0      		ldi r28,lo8(oled_buffer)
 1010 000e D0E0      		ldi r29,hi8(oled_buffer)
 1011 0010 80E0      		ldi r24,lo8(oled_buffer+512)
 1012 0012 E82E      		mov r14,r24
 1013 0014 80E0      		ldi r24,hi8(oled_buffer+512)
 1014 0016 F82E      		mov r15,r24
 1015               	.LVL83:
 1016               	.L48:
 462:drivers/oled/ssd1306_sh1106.c ****         if (left) {
 1017               		.loc 1 462 9 view .LVU229
 1018 0018 CE01      		movw r24,r28
 1019 001a 0196      		adiw r24,1
 1020               	.LBB19:
 463:drivers/oled/ssd1306_sh1106.c ****             for (uint16_t x = 0; x < OLED_DISPLAY_WIDTH - 1; x++) {
 464:drivers/oled/ssd1306_sh1106.c ****                 i              = y * OLED_DISPLAY_WIDTH + x;
 465:drivers/oled/ssd1306_sh1106.c ****                 oled_buffer[i] = oled_buffer[i + 1];
 1021               		.loc 1 465 32 is_stmt 0 view .LVU230
 1022 001c 4FE7      		ldi r20,lo8(127)
 1023 001e 50E0      		ldi r21,0
 1024               	.LBE19:
 1025               	.LBB20:
 466:drivers/oled/ssd1306_sh1106.c ****             }
 467:drivers/oled/ssd1306_sh1106.c ****         } else {
 468:drivers/oled/ssd1306_sh1106.c ****             for (uint16_t x = OLED_DISPLAY_WIDTH - 1; x > 0; x--) {
 469:drivers/oled/ssd1306_sh1106.c ****                 i              = y * OLED_DISPLAY_WIDTH + x;
 470:drivers/oled/ssd1306_sh1106.c ****                 oled_buffer[i] = oled_buffer[i - 1];
 1026               		.loc 1 470 32 view .LVU231
 1027 0020 BE01      		movw r22,r28
 1028               	.LBE20:
 462:drivers/oled/ssd1306_sh1106.c ****             for (uint16_t x = 0; x < OLED_DISPLAY_WIDTH - 1; x++) {
 1029               		.loc 1 462 12 view .LVU232
 1030 0022 1123      		tst r17
 1031 0024 01F0      		breq .L53
 1032               	.LBB21:
 465:drivers/oled/ssd1306_sh1106.c ****             }
 1033               		.loc 1 465 32 view .LVU233
 1034 0026 BC01      		movw r22,r24
 1035 0028 CE01      		movw r24,r28
 1036               	.L53:
 1037 002a 0E94 0000 		call memmove
 1038               	.LVL84:
 1039               	.LBE21:
 461:drivers/oled/ssd1306_sh1106.c ****         if (left) {
 1040               		.loc 1 461 56 is_stmt 1 view .LVU234
 461:drivers/oled/ssd1306_sh1106.c ****         if (left) {
 1041               		.loc 1 461 28 view .LVU235
 1042 002e C058      		subi r28,-128
 1043 0030 DF4F      		sbci r29,-1
 1044 0032 EC16      		cp r14,r28
 1045 0034 FD06      		cpc r15,r29
 1046 0036 01F4      		brne .L48
 1047               	.LBE18:
 471:drivers/oled/ssd1306_sh1106.c ****             }
 472:drivers/oled/ssd1306_sh1106.c ****         }
 473:drivers/oled/ssd1306_sh1106.c ****     }
 474:drivers/oled/ssd1306_sh1106.c ****     oled_dirty = OLED_ALL_BLOCKS_MASK;
 1048               		.loc 1 474 5 view .LVU236
 1049               		.loc 1 474 16 is_stmt 0 view .LVU237
 1050 0038 8FEF      		ldi r24,lo8(-1)
 1051 003a 9FEF      		ldi r25,lo8(-1)
 1052 003c 9093 0000 		sts oled_dirty+1,r25
 1053 0040 8093 0000 		sts oled_dirty,r24
 1054               	/* epilogue start */
 475:drivers/oled/ssd1306_sh1106.c **** }
 1055               		.loc 1 475 1 view .LVU238
 1056 0044 DF91      		pop r29
 1057 0046 CF91      		pop r28
 1058 0048 1F91      		pop r17
 1059               	.LVL85:
 1060               		.loc 1 475 1 view .LVU239
 1061 004a FF90      		pop r15
 1062 004c EF90      		pop r14
 1063 004e 0895      		ret
 1064               		.cfi_endproc
 1065               	.LFE22:
 1067               		.section	.text.oled_read_raw,"ax",@progbits
 1068               	.global	oled_read_raw
 1070               	oled_read_raw:
 1071               	.LVL86:
 1072               	.LFB23:
 476:drivers/oled/ssd1306_sh1106.c **** 
 477:drivers/oled/ssd1306_sh1106.c **** oled_buffer_reader_t oled_read_raw(uint16_t start_index) {
 1073               		.loc 1 477 58 is_stmt 1 view -0
 1074               		.cfi_startproc
 1075               		.loc 1 477 58 is_stmt 0 view .LVU241
 1076 0000 CF93      		push r28
 1077               	.LCFI26:
 1078               		.cfi_def_cfa_offset 3
 1079               		.cfi_offset 28, -2
 1080 0002 DF93      		push r29
 1081               	.LCFI27:
 1082               		.cfi_def_cfa_offset 4
 1083               		.cfi_offset 29, -3
 1084 0004 00D0      		rcall .
 1085 0006 00D0      		rcall .
 1086               	.LCFI28:
 1087               		.cfi_def_cfa_offset 8
 1088 0008 CDB7      		in r28,__SP_L__
 1089 000a DEB7      		in r29,__SP_H__
 1090               	.LCFI29:
 1091               		.cfi_def_cfa_register 28
 1092               	/* prologue: function */
 1093               	/* frame size = 4 */
 1094               	/* stack size = 6 */
 1095               	.L__stack_usage = 6
 1096 000c 9C01      		movw r18,r24
 478:drivers/oled/ssd1306_sh1106.c ****     if (start_index > OLED_MATRIX_SIZE) start_index = OLED_MATRIX_SIZE;
 1097               		.loc 1 478 5 is_stmt 1 view .LVU242
 1098 000e 8130      		cpi r24,1
 1099 0010 9240      		sbci r25,2
 1100 0012 00F0      		brlo .L55
 1101 0014 20E0      		ldi r18,0
 1102 0016 32E0      		ldi r19,lo8(2)
 1103               	.L55:
 1104               	.LVL87:
 479:drivers/oled/ssd1306_sh1106.c ****     oled_buffer_reader_t ret_reader;
 1105               		.loc 1 479 5 view .LVU243
 480:drivers/oled/ssd1306_sh1106.c ****     ret_reader.current_element         = &oled_buffer[start_index];
 1106               		.loc 1 480 5 view .LVU244
 481:drivers/oled/ssd1306_sh1106.c ****     ret_reader.remaining_element_count = OLED_MATRIX_SIZE - start_index;
 1107               		.loc 1 481 5 view .LVU245
 482:drivers/oled/ssd1306_sh1106.c ****     return ret_reader;
 1108               		.loc 1 482 5 view .LVU246
 1109               		.loc 1 482 12 is_stmt 0 view .LVU247
 1110 0018 C901      		movw r24,r18
 1111 001a 8050      		subi r24,lo8(-(oled_buffer))
 1112 001c 9040      		sbci r25,hi8(-(oled_buffer))
 1113               	.LVL88:
 1114               		.loc 1 482 12 view .LVU248
 1115 001e 9A83      		std Y+2,r25
 1116 0020 8983      		std Y+1,r24
 1117 0022 80E0      		ldi r24,0
 1118 0024 92E0      		ldi r25,lo8(2)
 1119               	.LVL89:
 1120               		.loc 1 482 12 view .LVU249
 1121 0026 AC01      		movw r20,r24
 1122 0028 421B      		sub r20,r18
 1123 002a 530B      		sbc r21,r19
 1124               	.LVL90:
 1125               		.loc 1 482 12 view .LVU250
 1126 002c 5C83      		std Y+4,r21
 1127 002e 4B83      		std Y+3,r20
 1128               	.LVL91:
 483:drivers/oled/ssd1306_sh1106.c **** }
 1129               		.loc 1 483 1 view .LVU251
 1130 0030 6981      		ldd r22,Y+1
 1131 0032 7A81      		ldd r23,Y+2
 1132 0034 8B81      		ldd r24,Y+3
 1133 0036 9C81      		ldd r25,Y+4
 1134               	/* epilogue start */
 1135 0038 0F90      		pop __tmp_reg__
 1136 003a 0F90      		pop __tmp_reg__
 1137 003c 0F90      		pop __tmp_reg__
 1138 003e 0F90      		pop __tmp_reg__
 1139 0040 DF91      		pop r29
 1140 0042 CF91      		pop r28
 1141 0044 0895      		ret
 1142               		.cfi_endproc
 1143               	.LFE23:
 1145               		.section	.text.oled_write_raw_byte,"ax",@progbits
 1146               	.global	oled_write_raw_byte
 1148               	oled_write_raw_byte:
 1149               	.LVL92:
 1150               	.LFB24:
 484:drivers/oled/ssd1306_sh1106.c **** 
 485:drivers/oled/ssd1306_sh1106.c **** void oled_write_raw_byte(const char data, uint16_t index) {
 1151               		.loc 1 485 59 is_stmt 1 view -0
 1152               		.cfi_startproc
 1153               	/* prologue: function */
 1154               	/* frame size = 0 */
 1155               	/* stack size = 0 */
 1156               	.L__stack_usage = 0
 1157               		.loc 1 485 59 is_stmt 0 view .LVU253
 1158 0000 9B01      		movw r18,r22
 486:drivers/oled/ssd1306_sh1106.c ****     if (index > OLED_MATRIX_SIZE) index = OLED_MATRIX_SIZE;
 1159               		.loc 1 486 5 is_stmt 1 view .LVU254
 1160 0002 6130      		cpi r22,1
 1161 0004 7240      		sbci r23,2
 1162 0006 00F0      		brlo .L57
 1163 0008 20E0      		ldi r18,0
 1164 000a 32E0      		ldi r19,lo8(2)
 1165               	.L57:
 1166               	.LVL93:
 487:drivers/oled/ssd1306_sh1106.c ****     if (oled_buffer[index] == data) return;
 1167               		.loc 1 487 5 view .LVU255
 1168               		.loc 1 487 20 is_stmt 0 view .LVU256
 1169 000c F901      		movw r30,r18
 1170 000e E050      		subi r30,lo8(-(oled_buffer))
 1171 0010 F040      		sbci r31,hi8(-(oled_buffer))
 1172               		.loc 1 487 8 view .LVU257
 1173 0012 9081      		ld r25,Z
 1174 0014 9817      		cp r25,r24
 1175 0016 01F0      		breq .L56
 488:drivers/oled/ssd1306_sh1106.c ****     oled_buffer[index] = data;
 1176               		.loc 1 488 5 is_stmt 1 view .LVU258
 1177               		.loc 1 488 24 is_stmt 0 view .LVU259
 1178 0018 8083      		st Z,r24
 489:drivers/oled/ssd1306_sh1106.c ****     oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 1179               		.loc 1 489 5 is_stmt 1 view .LVU260
 1180               		.loc 1 489 49 is_stmt 0 view .LVU261
 1181 001a 85E0      		ldi r24,5
 1182               		1:
 1183 001c 3695      		lsr r19
 1184 001e 2795      		ror r18
 1185 0020 8A95      		dec r24
 1186 0022 01F4      		brne 1b
 1187               	.LVL94:
 1188               		.loc 1 489 39 view .LVU262
 1189 0024 81E0      		ldi r24,lo8(1)
 1190 0026 90E0      		ldi r25,0
 1191 0028 AC01      		movw r20,r24
 1192 002a 00C0      		rjmp 2f
 1193               		1:
 1194 002c 440F      		lsl r20
 1195 002e 551F      		rol r21
 1196               		2:
 1197 0030 2A95      		dec r18
 1198 0032 02F4      		brpl 1b
 1199 0034 9A01      		movw r18,r20
 1200               		.loc 1 489 16 view .LVU263
 1201 0036 8091 0000 		lds r24,oled_dirty
 1202 003a 9091 0000 		lds r25,oled_dirty+1
 1203 003e 842B      		or r24,r20
 1204 0040 932B      		or r25,r19
 1205 0042 9093 0000 		sts oled_dirty+1,r25
 1206 0046 8093 0000 		sts oled_dirty,r24
 1207               	.LVL95:
 1208               	.L56:
 1209               	/* epilogue start */
 490:drivers/oled/ssd1306_sh1106.c **** }
 1210               		.loc 1 490 1 view .LVU264
 1211 004a 0895      		ret
 1212               		.cfi_endproc
 1213               	.LFE24:
 1215               		.section	.text.oled_write_raw,"ax",@progbits
 1216               	.global	oled_write_raw
 1218               	oled_write_raw:
 1219               	.LVL96:
 1220               	.LFB25:
 491:drivers/oled/ssd1306_sh1106.c **** 
 492:drivers/oled/ssd1306_sh1106.c **** void oled_write_raw(const char *data, uint16_t size) {
 1221               		.loc 1 492 54 is_stmt 1 view -0
 1222               		.cfi_startproc
 1223               	/* prologue: function */
 1224               	/* frame size = 0 */
 1225               	/* stack size = 0 */
 1226               	.L__stack_usage = 0
 1227               		.loc 1 492 54 is_stmt 0 view .LVU266
 1228 0000 AB01      		movw r20,r22
 493:drivers/oled/ssd1306_sh1106.c ****     uint16_t cursor_start_index = oled_cursor - &oled_buffer[0];
 1229               		.loc 1 493 5 is_stmt 1 view .LVU267
 1230               		.loc 1 493 47 is_stmt 0 view .LVU268
 1231 0002 2091 0000 		lds r18,oled_cursor
 1232 0006 3091 0000 		lds r19,oled_cursor+1
 1233 000a 2050      		subi r18,lo8(oled_buffer)
 1234 000c 3040      		sbci r19,hi8(oled_buffer)
 1235               	.LVL97:
 494:drivers/oled/ssd1306_sh1106.c ****     if ((size + cursor_start_index) > OLED_MATRIX_SIZE) size = OLED_MATRIX_SIZE - cursor_start_inde
 1236               		.loc 1 494 5 is_stmt 1 view .LVU269
 1237               		.loc 1 494 15 is_stmt 0 view .LVU270
 1238 000e B901      		movw r22,r18
 1239               	.LVL98:
 1240               		.loc 1 494 15 view .LVU271
 1241 0010 640F      		add r22,r20
 1242 0012 751F      		adc r23,r21
 1243               		.loc 1 494 8 view .LVU272
 1244 0014 6130      		cpi r22,1
 1245 0016 7240      		sbci r23,2
 1246 0018 00F0      		brlo .L60
 1247               		.loc 1 494 57 is_stmt 1 discriminator 1 view .LVU273
 1248               		.loc 1 494 62 is_stmt 0 discriminator 1 view .LVU274
 1249 001a 40E0      		ldi r20,0
 1250 001c 52E0      		ldi r21,lo8(2)
 1251               	.LVL99:
 1252               		.loc 1 494 62 discriminator 1 view .LVU275
 1253 001e 421B      		sub r20,r18
 1254 0020 530B      		sbc r21,r19
 1255               	.LVL100:
 1256               	.L60:
 495:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1257               		.loc 1 495 5 is_stmt 1 view .LVU276
 1258               	.LBB22:
 1259               		.loc 1 495 10 view .LVU277
 1260               		.loc 1 495 66 is_stmt 0 view .LVU278
 1261 0022 420F      		add r20,r18
 1262 0024 531F      		adc r21,r19
 1263               	.LVL101:
 1264               	.LBB23:
 496:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = *data++;
 497:drivers/oled/ssd1306_sh1106.c ****         if (oled_buffer[i] == c) continue;
 498:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 499:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1265               		.loc 1 499 43 view .LVU279
 1266 0026 61E0      		ldi r22,lo8(1)
 1267 0028 70E0      		ldi r23,0
 1268               	.LVL102:
 1269               	.L61:
 1270               		.loc 1 499 43 view .LVU280
 1271               	.LBE23:
 495:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1272               		.loc 1 495 45 is_stmt 1 discriminator 1 view .LVU281
 1273 002a 2417      		cp r18,r20
 1274 002c 3507      		cpc r19,r21
 1275 002e 00F0      		brlo .L63
 1276               	/* epilogue start */
 495:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1277               		.loc 1 495 45 is_stmt 0 discriminator 1 view .LVU282
 1278               	.LBE22:
 500:drivers/oled/ssd1306_sh1106.c ****     }
 501:drivers/oled/ssd1306_sh1106.c **** }
 1279               		.loc 1 501 1 view .LVU283
 1280 0030 0895      		ret
 1281               	.L63:
 1282               	.LBB26:
 1283               	.LBB24:
 496:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = *data++;
 1284               		.loc 1 496 9 is_stmt 1 view .LVU284
 496:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = *data++;
 1285               		.loc 1 496 26 is_stmt 0 view .LVU285
 1286 0032 FC01      		movw r30,r24
 1287               	.LVL103:
 496:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = *data++;
 1288               		.loc 1 496 17 view .LVU286
 1289 0034 8191      		ld r24,Z+
 1290               	.LVL104:
 497:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 1291               		.loc 1 497 9 is_stmt 1 view .LVU287
 1292 0036 D901      		movw r26,r18
 1293 0038 A050      		subi r26,lo8(-(oled_buffer))
 1294 003a B040      		sbci r27,hi8(-(oled_buffer))
 497:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 1295               		.loc 1 497 12 is_stmt 0 view .LVU288
 1296 003c 9C91      		ld r25,X
 1297 003e 9817      		cp r25,r24
 1298 0040 01F0      		breq .L62
 498:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1299               		.loc 1 498 9 is_stmt 1 view .LVU289
 498:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1300               		.loc 1 498 24 is_stmt 0 view .LVU290
 1301 0042 8C93      		st X,r24
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1302               		.loc 1 499 9 is_stmt 1 view .LVU291
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1303               		.loc 1 499 49 is_stmt 0 view .LVU292
 1304 0044 C901      		movw r24,r18
 1305               	.LVL105:
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1306               		.loc 1 499 49 view .LVU293
 1307 0046 A5E0      		ldi r26,5
 1308               		1:
 1309 0048 9695      		lsr r25
 1310 004a 8795      		ror r24
 1311 004c AA95      		dec r26
 1312 004e 01F4      		brne 1b
 1313               	.LVL106:
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1314               		.loc 1 499 43 view .LVU294
 1315 0050 DB01      		movw r26,r22
 1316 0052 00C0      		rjmp 2f
 1317               		1:
 1318 0054 AA0F      		lsl r26
 1319 0056 BB1F      		rol r27
 1320               		2:
 1321 0058 8A95      		dec r24
 1322 005a 02F4      		brpl 1b
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1323               		.loc 1 499 20 view .LVU295
 1324 005c 8091 0000 		lds r24,oled_dirty
 1325 0060 9091 0000 		lds r25,oled_dirty+1
 1326 0064 8A2B      		or r24,r26
 1327 0066 9B2B      		or r25,r27
 1328 0068 9093 0000 		sts oled_dirty+1,r25
 1329 006c 8093 0000 		sts oled_dirty,r24
 1330               	.LVL107:
 1331               	.L62:
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1332               		.loc 1 499 20 view .LVU296
 1333               	.LBE24:
 495:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = *data++;
 1334               		.loc 1 495 75 is_stmt 1 discriminator 2 view .LVU297
 1335 0070 2F5F      		subi r18,-1
 1336 0072 3F4F      		sbci r19,-1
 1337               	.LVL108:
 1338               	.LBB25:
 496:drivers/oled/ssd1306_sh1106.c ****         if (oled_buffer[i] == c) continue;
 1339               		.loc 1 496 26 is_stmt 0 discriminator 2 view .LVU298
 1340 0074 CF01      		movw r24,r30
 1341 0076 00C0      		rjmp .L61
 1342               	.LBE25:
 1343               	.LBE26:
 1344               		.cfi_endproc
 1345               	.LFE25:
 1347               		.section	.text.oled_write_pixel,"ax",@progbits
 1348               	.global	oled_write_pixel
 1350               	oled_write_pixel:
 1351               	.LVL109:
 1352               	.LFB26:
 502:drivers/oled/ssd1306_sh1106.c **** 
 503:drivers/oled/ssd1306_sh1106.c **** void oled_write_pixel(uint8_t x, uint8_t y, bool on) {
 1353               		.loc 1 503 54 is_stmt 1 view -0
 1354               		.cfi_startproc
 1355               	/* prologue: function */
 1356               	/* frame size = 0 */
 1357               	/* stack size = 0 */
 1358               	.L__stack_usage = 0
 504:drivers/oled/ssd1306_sh1106.c ****     if (x >= oled_rotation_width) {
 1359               		.loc 1 504 5 view .LVU300
 1360               		.loc 1 504 11 is_stmt 0 view .LVU301
 1361 0000 3091 0000 		lds r19,oled_rotation_width
 1362               		.loc 1 504 8 view .LVU302
 1363 0004 8317      		cp r24,r19
 1364 0006 00F4      		brsh .L64
 505:drivers/oled/ssd1306_sh1106.c ****         return;
 506:drivers/oled/ssd1306_sh1106.c ****     }
 507:drivers/oled/ssd1306_sh1106.c ****     uint16_t index = x + (y / 8) * oled_rotation_width;
 1365               		.loc 1 507 5 is_stmt 1 view .LVU303
 1366               		.loc 1 507 24 is_stmt 0 view .LVU304
 1367 0008 90E0      		ldi r25,0
 1368 000a 262F      		mov r18,r22
 1369 000c 2695      		lsr r18
 1370 000e 2695      		lsr r18
 1371 0010 2695      		lsr r18
 1372 0012 239F      		mul r18,r19
 1373 0014 800D      		add r24,r0
 1374 0016 911D      		adc r25,r1
 1375 0018 1124      		clr __zero_reg__
 1376               	.LVL110:
 508:drivers/oled/ssd1306_sh1106.c ****     if (index >= OLED_MATRIX_SIZE) {
 1377               		.loc 1 508 5 is_stmt 1 view .LVU305
 1378               		.loc 1 508 8 is_stmt 0 view .LVU306
 1379 001a 8115      		cp r24,__zero_reg__
 1380 001c 22E0      		ldi r18,2
 1381 001e 9207      		cpc r25,r18
 1382 0020 04F4      		brge .L64
 509:drivers/oled/ssd1306_sh1106.c ****         return;
 510:drivers/oled/ssd1306_sh1106.c ****     }
 511:drivers/oled/ssd1306_sh1106.c ****     uint8_t data = oled_buffer[index];
 1383               		.loc 1 511 5 is_stmt 1 view .LVU307
 1384               		.loc 1 511 13 is_stmt 0 view .LVU308
 1385 0022 FC01      		movw r30,r24
 1386 0024 E050      		subi r30,lo8(-(oled_buffer))
 1387 0026 F040      		sbci r31,hi8(-(oled_buffer))
 1388 0028 5081      		ld r21,Z
 1389               	.LVL111:
 512:drivers/oled/ssd1306_sh1106.c ****     if (on) {
 1390               		.loc 1 512 5 is_stmt 1 view .LVU309
 513:drivers/oled/ssd1306_sh1106.c ****         data |= (1 << (y % 8));
 1391               		.loc 1 513 26 is_stmt 0 view .LVU310
 1392 002a 6770      		andi r22,lo8(7)
 1393               	.LVL112:
 1394               		.loc 1 513 20 view .LVU311
 1395 002c 21E0      		ldi r18,lo8(1)
 1396 002e 30E0      		ldi r19,0
 1397 0030 00C0      		rjmp 2f
 1398               		1:
 1399 0032 220F      		lsl r18
 1400               		2:
 1401 0034 6A95      		dec r22
 1402 0036 02F4      		brpl 1b
 512:drivers/oled/ssd1306_sh1106.c ****     if (on) {
 1403               		.loc 1 512 8 view .LVU312
 1404 0038 4423      		tst r20
 1405 003a 01F0      		breq .L66
 1406               		.loc 1 513 9 is_stmt 1 view .LVU313
 1407               		.loc 1 513 14 is_stmt 0 view .LVU314
 1408 003c 252B      		or r18,r21
 1409               	.LVL113:
 1410               	.L67:
 514:drivers/oled/ssd1306_sh1106.c ****     } else {
 515:drivers/oled/ssd1306_sh1106.c ****         data &= ~(1 << (y % 8));
 516:drivers/oled/ssd1306_sh1106.c ****     }
 517:drivers/oled/ssd1306_sh1106.c ****     if (oled_buffer[index] != data) {
 1411               		.loc 1 517 5 is_stmt 1 view .LVU315
 1412               		.loc 1 517 8 is_stmt 0 view .LVU316
 1413 003e 2517      		cp r18,r21
 1414 0040 01F0      		breq .L64
 518:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[index] = data;
 1415               		.loc 1 518 9 is_stmt 1 view .LVU317
 1416               		.loc 1 518 28 is_stmt 0 view .LVU318
 1417 0042 2083      		st Z,r18
 519:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 1418               		.loc 1 519 9 is_stmt 1 view .LVU319
 1419               		.loc 1 519 53 is_stmt 0 view .LVU320
 1420 0044 25E0      		ldi r18,5
 1421               		1:
 1422 0046 9695      		lsr r25
 1423 0048 8795      		ror r24
 1424 004a 2A95      		dec r18
 1425 004c 01F4      		brne 1b
 1426               	.LVL114:
 1427               		.loc 1 519 43 view .LVU321
 1428 004e 21E0      		ldi r18,lo8(1)
 1429 0050 30E0      		ldi r19,0
 1430 0052 00C0      		rjmp 2f
 1431               		1:
 1432 0054 220F      		lsl r18
 1433 0056 331F      		rol r19
 1434               		2:
 1435 0058 8A95      		dec r24
 1436 005a 02F4      		brpl 1b
 1437               		.loc 1 519 20 view .LVU322
 1438 005c 8091 0000 		lds r24,oled_dirty
 1439 0060 9091 0000 		lds r25,oled_dirty+1
 1440 0064 822B      		or r24,r18
 1441 0066 932B      		or r25,r19
 1442 0068 9093 0000 		sts oled_dirty+1,r25
 1443 006c 8093 0000 		sts oled_dirty,r24
 1444               	.LVL115:
 1445               	.L64:
 1446               	/* epilogue start */
 520:drivers/oled/ssd1306_sh1106.c ****     }
 521:drivers/oled/ssd1306_sh1106.c **** }
 1447               		.loc 1 521 1 view .LVU323
 1448 0070 0895      		ret
 1449               	.LVL116:
 1450               	.L66:
 515:drivers/oled/ssd1306_sh1106.c ****     }
 1451               		.loc 1 515 9 is_stmt 1 view .LVU324
 515:drivers/oled/ssd1306_sh1106.c ****     }
 1452               		.loc 1 515 14 is_stmt 0 view .LVU325
 1453 0072 2095      		com r18
 1454 0074 2523      		and r18,r21
 1455               	.LVL117:
 515:drivers/oled/ssd1306_sh1106.c ****     }
 1456               		.loc 1 515 14 view .LVU326
 1457 0076 00C0      		rjmp .L67
 1458               		.cfi_endproc
 1459               	.LFE26:
 1461               		.section	.text.oled_write_P,"ax",@progbits
 1462               	.global	oled_write_P
 1464               	oled_write_P:
 1465               	.LVL118:
 1466               	.LFB27:
 522:drivers/oled/ssd1306_sh1106.c **** 
 523:drivers/oled/ssd1306_sh1106.c **** #if defined(__AVR__)
 524:drivers/oled/ssd1306_sh1106.c **** void oled_write_P(const char *data, bool invert) {
 1467               		.loc 1 524 50 is_stmt 1 view -0
 1468               		.cfi_startproc
 1469               		.loc 1 524 50 is_stmt 0 view .LVU328
 1470 0000 1F93      		push r17
 1471               	.LCFI30:
 1472               		.cfi_def_cfa_offset 3
 1473               		.cfi_offset 17, -2
 1474 0002 CF93      		push r28
 1475               	.LCFI31:
 1476               		.cfi_def_cfa_offset 4
 1477               		.cfi_offset 28, -3
 1478 0004 DF93      		push r29
 1479               	.LCFI32:
 1480               		.cfi_def_cfa_offset 5
 1481               		.cfi_offset 29, -4
 1482               	/* prologue: function */
 1483               	/* frame size = 0 */
 1484               	/* stack size = 3 */
 1485               	.L__stack_usage = 3
 1486 0006 EC01      		movw r28,r24
 1487 0008 162F      		mov r17,r22
 525:drivers/oled/ssd1306_sh1106.c ****     uint8_t c = pgm_read_byte(data);
 1488               		.loc 1 525 5 is_stmt 1 view .LVU329
 1489               	.LBB27:
 1490               		.loc 1 525 17 view .LVU330
 1491               	.LVL119:
 1492               		.loc 1 525 17 view .LVU331
 1493               		.loc 1 525 17 view .LVU332
 1494               	.L71:
 1495               		.loc 1 525 17 is_stmt 0 view .LVU333
 1496               	.LBE27:
 1497               	.LBB28:
 526:drivers/oled/ssd1306_sh1106.c ****     while (c != 0) {
 527:drivers/oled/ssd1306_sh1106.c ****         oled_write_char(c, invert);
 528:drivers/oled/ssd1306_sh1106.c ****         c = pgm_read_byte(++data);
 1498               		.loc 1 528 13 is_stmt 1 view .LVU334
 1499               		.loc 1 528 13 view .LVU335
 1500 000a FE01      		movw r30,r28
 1501               	/* #APP */
 1502               	 ;  528 "drivers/oled/ssd1306_sh1106.c" 1
 1503 000c 8491      		lpm r24, Z
 1504               		
 1505               	 ;  0 "" 2
 1506               	.LVL120:
 1507               		.loc 1 528 13 view .LVU336
 1508               		.loc 1 528 13 is_stmt 0 view .LVU337
 1509               	/* #NOAPP */
 1510               	.LBE28:
 526:drivers/oled/ssd1306_sh1106.c ****     while (c != 0) {
 1511               		.loc 1 526 14 is_stmt 1 view .LVU338
 1512 000e 8111      		cpse r24,__zero_reg__
 1513 0010 00C0      		rjmp .L70
 1514               	/* epilogue start */
 529:drivers/oled/ssd1306_sh1106.c ****     }
 530:drivers/oled/ssd1306_sh1106.c **** }
 1515               		.loc 1 530 1 is_stmt 0 view .LVU339
 1516 0012 DF91      		pop r29
 1517 0014 CF91      		pop r28
 1518               	.LVL121:
 1519               		.loc 1 530 1 view .LVU340
 1520 0016 1F91      		pop r17
 1521               	.LVL122:
 1522               		.loc 1 530 1 view .LVU341
 1523 0018 0895      		ret
 1524               	.LVL123:
 1525               	.L70:
 527:drivers/oled/ssd1306_sh1106.c ****         c = pgm_read_byte(++data);
 1526               		.loc 1 527 9 is_stmt 1 view .LVU342
 1527 001a 612F      		mov r22,r17
 1528 001c 0E94 0000 		call oled_write_char
 1529               	.LVL124:
 528:drivers/oled/ssd1306_sh1106.c ****     }
 1530               		.loc 1 528 9 view .LVU343
 1531               	.LBB29:
 528:drivers/oled/ssd1306_sh1106.c ****     }
 1532               		.loc 1 528 13 view .LVU344
 1533 0020 2196      		adiw r28,1
 1534               	.LVL125:
 528:drivers/oled/ssd1306_sh1106.c ****     }
 1535               		.loc 1 528 13 is_stmt 0 view .LVU345
 1536 0022 00C0      		rjmp .L71
 1537               	.LBE29:
 1538               		.cfi_endproc
 1539               	.LFE27:
 1541               		.section	.text.oled_write_ln_P,"ax",@progbits
 1542               	.global	oled_write_ln_P
 1544               	oled_write_ln_P:
 1545               	.LVL126:
 1546               	.LFB28:
 531:drivers/oled/ssd1306_sh1106.c **** 
 532:drivers/oled/ssd1306_sh1106.c **** void oled_write_ln_P(const char *data, bool invert) {
 1547               		.loc 1 532 53 is_stmt 1 view -0
 1548               		.cfi_startproc
 1549               	/* prologue: function */
 1550               	/* frame size = 0 */
 1551               	/* stack size = 0 */
 1552               	.L__stack_usage = 0
 533:drivers/oled/ssd1306_sh1106.c ****     oled_write_P(data, invert);
 1553               		.loc 1 533 5 view .LVU347
 1554 0000 0E94 0000 		call oled_write_P
 1555               	.LVL127:
 534:drivers/oled/ssd1306_sh1106.c ****     oled_advance_page(true);
 1556               		.loc 1 534 5 view .LVU348
 1557 0004 81E0      		ldi r24,lo8(1)
 1558 0006 0C94 0000 		jmp oled_advance_page
 1559               	.LVL128:
 1560               		.cfi_endproc
 1561               	.LFE28:
 1563               		.section	.text.oled_write_raw_P,"ax",@progbits
 1564               	.global	oled_write_raw_P
 1566               	oled_write_raw_P:
 1567               	.LVL129:
 1568               	.LFB29:
 535:drivers/oled/ssd1306_sh1106.c **** }
 536:drivers/oled/ssd1306_sh1106.c **** 
 537:drivers/oled/ssd1306_sh1106.c **** void oled_write_raw_P(const char *data, uint16_t size) {
 1569               		.loc 1 537 56 view -0
 1570               		.cfi_startproc
 1571               		.loc 1 537 56 is_stmt 0 view .LVU350
 1572 0000 CF93      		push r28
 1573               	.LCFI33:
 1574               		.cfi_def_cfa_offset 3
 1575               		.cfi_offset 28, -2
 1576 0002 DF93      		push r29
 1577               	.LCFI34:
 1578               		.cfi_def_cfa_offset 4
 1579               		.cfi_offset 29, -3
 1580               	/* prologue: function */
 1581               	/* frame size = 0 */
 1582               	/* stack size = 2 */
 1583               	.L__stack_usage = 2
 1584 0004 B82F      		mov r27,r24
 1585 0006 A92F      		mov r26,r25
 1586 0008 9B01      		movw r18,r22
 538:drivers/oled/ssd1306_sh1106.c ****     uint16_t cursor_start_index = oled_cursor - &oled_buffer[0];
 1587               		.loc 1 538 5 is_stmt 1 view .LVU351
 1588               		.loc 1 538 47 is_stmt 0 view .LVU352
 1589 000a 8091 0000 		lds r24,oled_cursor
 1590 000e 9091 0000 		lds r25,oled_cursor+1
 1591               	.LVL130:
 1592               		.loc 1 538 47 view .LVU353
 1593 0012 8050      		subi r24,lo8(oled_buffer)
 1594 0014 9040      		sbci r25,hi8(oled_buffer)
 1595               	.LVL131:
 539:drivers/oled/ssd1306_sh1106.c ****     if ((size + cursor_start_index) > OLED_MATRIX_SIZE) size = OLED_MATRIX_SIZE - cursor_start_inde
 1596               		.loc 1 539 5 is_stmt 1 view .LVU354
 1597               		.loc 1 539 15 is_stmt 0 view .LVU355
 1598 0016 AC01      		movw r20,r24
 1599 0018 460F      		add r20,r22
 1600 001a 571F      		adc r21,r23
 1601               		.loc 1 539 8 view .LVU356
 1602 001c 4130      		cpi r20,1
 1603 001e 5240      		sbci r21,2
 1604               	.LVL132:
 1605               		.loc 1 539 8 view .LVU357
 1606 0020 00F0      		brlo .L74
 1607               		.loc 1 539 57 is_stmt 1 discriminator 1 view .LVU358
 1608               		.loc 1 539 62 is_stmt 0 discriminator 1 view .LVU359
 1609 0022 20E0      		ldi r18,0
 1610 0024 32E0      		ldi r19,lo8(2)
 1611               	.LVL133:
 1612               		.loc 1 539 62 discriminator 1 view .LVU360
 1613 0026 281B      		sub r18,r24
 1614 0028 390B      		sbc r19,r25
 1615               	.LVL134:
 1616               	.L74:
 540:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1617               		.loc 1 540 5 is_stmt 1 view .LVU361
 1618               	.LBB30:
 1619               		.loc 1 540 10 view .LVU362
 1620               		.loc 1 540 10 is_stmt 0 view .LVU363
 1621 002a 4091 0000 		lds r20,oled_dirty
 1622 002e 5091 0000 		lds r21,oled_dirty+1
 1623 0032 EB2F      		mov r30,r27
 1624 0034 FA2F      		mov r31,r26
 1625               		.loc 1 540 66 view .LVU364
 1626 0036 280F      		add r18,r24
 1627 0038 391F      		adc r19,r25
 1628               	.LVL135:
 1629               	.LBB31:
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 542:drivers/oled/ssd1306_sh1106.c ****         if (oled_buffer[i] == c) continue;
 543:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 544:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1630               		.loc 1 544 43 view .LVU365
 1631 003a C1E0      		ldi r28,lo8(1)
 1632 003c D0E0      		ldi r29,0
 1633               	.LVL136:
 1634               	.L75:
 1635               		.loc 1 544 43 view .LVU366
 1636               	.LBE31:
 540:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1637               		.loc 1 540 45 is_stmt 1 discriminator 1 view .LVU367
 1638 003e 8217      		cp r24,r18
 1639 0040 9307      		cpc r25,r19
 1640 0042 00F0      		brlo .L77
 540:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1641               		.loc 1 540 45 is_stmt 0 discriminator 1 view .LVU368
 1642 0044 5093 0000 		sts oled_dirty+1,r21
 1643 0048 4093 0000 		sts oled_dirty,r20
 1644               	/* epilogue start */
 1645               	.LBE30:
 545:drivers/oled/ssd1306_sh1106.c ****     }
 546:drivers/oled/ssd1306_sh1106.c **** }
 1646               		.loc 1 546 1 view .LVU369
 1647 004c DF91      		pop r29
 1648 004e CF91      		pop r28
 1649 0050 0895      		ret
 1650               	.L77:
 1651               	.LBB34:
 1652               	.LBB33:
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1653               		.loc 1 541 9 is_stmt 1 view .LVU370
 1654               	.LBB32:
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1655               		.loc 1 541 21 view .LVU371
 1656               	.LVL137:
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1657               		.loc 1 541 21 view .LVU372
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1658               		.loc 1 541 21 view .LVU373
 1659               	/* #APP */
 1660               	 ;  541 "drivers/oled/ssd1306_sh1106.c" 1
 1661 0052 6491      		lpm r22, Z
 1662               		
 1663               	 ;  0 "" 2
 1664               	.LVL138:
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1665               		.loc 1 541 21 view .LVU374
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1666               		.loc 1 541 21 is_stmt 0 view .LVU375
 1667               	/* #NOAPP */
 1668               	.LBE32:
 542:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 1669               		.loc 1 542 9 is_stmt 1 view .LVU376
 1670 0054 DC01      		movw r26,r24
 1671 0056 A050      		subi r26,lo8(-(oled_buffer))
 1672 0058 B040      		sbci r27,hi8(-(oled_buffer))
 542:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 1673               		.loc 1 542 12 is_stmt 0 view .LVU377
 1674 005a 7C91      		ld r23,X
 1675 005c 7617      		cp r23,r22
 1676 005e 01F0      		breq .L76
 543:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1677               		.loc 1 543 9 is_stmt 1 view .LVU378
 543:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1678               		.loc 1 543 24 is_stmt 0 view .LVU379
 1679 0060 6C93      		st X,r22
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1680               		.loc 1 544 9 is_stmt 1 view .LVU380
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1681               		.loc 1 544 49 is_stmt 0 view .LVU381
 1682 0062 BC01      		movw r22,r24
 1683               	.LVL139:
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1684               		.loc 1 544 49 view .LVU382
 1685 0064 A5E0      		ldi r26,5
 1686               		1:
 1687 0066 7695      		lsr r23
 1688 0068 6795      		ror r22
 1689 006a AA95      		dec r26
 1690 006c 01F4      		brne 1b
 1691               	.LVL140:
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1692               		.loc 1 544 43 view .LVU383
 1693 006e DE01      		movw r26,r28
 1694 0070 00C0      		rjmp 2f
 1695               		1:
 1696 0072 AA0F      		lsl r26
 1697 0074 BB1F      		rol r27
 1698               		2:
 1699 0076 6A95      		dec r22
 1700 0078 02F4      		brpl 1b
 1701 007a BD01      		movw r22,r26
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1702               		.loc 1 544 20 view .LVU384
 1703 007c 4A2B      		or r20,r26
 1704 007e 572B      		or r21,r23
 1705               	.LVL141:
 1706               	.L76:
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1707               		.loc 1 544 20 view .LVU385
 1708               	.LBE33:
 540:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1709               		.loc 1 540 75 is_stmt 1 discriminator 2 view .LVU386
 1710 0080 0196      		adiw r24,1
 1711               	.LVL142:
 540:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1712               		.loc 1 540 75 is_stmt 0 discriminator 2 view .LVU387
 1713 0082 3196      		adiw r30,1
 1714               	.LVL143:
 540:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1715               		.loc 1 540 75 discriminator 2 view .LVU388
 1716 0084 00C0      		rjmp .L75
 1717               	.LBE34:
 1718               		.cfi_endproc
 1719               	.LFE29:
 1721               		.section	.text.oled_on,"ax",@progbits
 1722               	.global	oled_on
 1724               	oled_on:
 1725               	.LFB30:
 547:drivers/oled/ssd1306_sh1106.c **** #endif  // defined(__AVR__)
 548:drivers/oled/ssd1306_sh1106.c **** 
 549:drivers/oled/ssd1306_sh1106.c **** bool oled_on(void) {
 1726               		.loc 1 549 20 is_stmt 1 view -0
 1727               		.cfi_startproc
 1728 0000 CF93      		push r28
 1729               	.LCFI35:
 1730               		.cfi_def_cfa_offset 3
 1731               		.cfi_offset 28, -2
 1732 0002 DF93      		push r29
 1733               	.LCFI36:
 1734               		.cfi_def_cfa_offset 4
 1735               		.cfi_offset 29, -3
 1736 0004 00D0      		rcall .
 1737 0006 00D0      		rcall .
 1738               	.LCFI37:
 1739               		.cfi_def_cfa_offset 8
 1740 0008 CDB7      		in r28,__SP_L__
 1741 000a DEB7      		in r29,__SP_H__
 1742               	.LCFI38:
 1743               		.cfi_def_cfa_register 28
 1744               	/* prologue: function */
 1745               	/* frame size = 4 */
 1746               	/* stack size = 6 */
 1747               	.L__stack_usage = 6
 550:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 1748               		.loc 1 550 5 view .LVU390
 1749               		.loc 1 550 8 is_stmt 0 view .LVU391
 1750 000c 8091 0000 		lds r24,oled_initialized
 1751 0010 8111      		cpse r24,__zero_reg__
 1752 0012 00C0      		rjmp .L79
 1753               	.L81:
 551:drivers/oled/ssd1306_sh1106.c ****         return oled_active;
 552:drivers/oled/ssd1306_sh1106.c ****     }
 553:drivers/oled/ssd1306_sh1106.c **** 
 554:drivers/oled/ssd1306_sh1106.c **** #if OLED_TIMEOUT > 0
 555:drivers/oled/ssd1306_sh1106.c ****     oled_timeout = timer_read32() + OLED_TIMEOUT;
 556:drivers/oled/ssd1306_sh1106.c **** #endif
 557:drivers/oled/ssd1306_sh1106.c **** 
 558:drivers/oled/ssd1306_sh1106.c ****     static const uint8_t PROGMEM display_on[] =
 559:drivers/oled/ssd1306_sh1106.c **** #ifdef OLED_FADE_OUT
 560:drivers/oled/ssd1306_sh1106.c ****         {I2C_CMD, FADE_BLINK, 0x00};
 561:drivers/oled/ssd1306_sh1106.c **** #else
 562:drivers/oled/ssd1306_sh1106.c ****         {I2C_CMD, DISPLAY_ON};
 563:drivers/oled/ssd1306_sh1106.c **** #endif
 564:drivers/oled/ssd1306_sh1106.c **** 
 565:drivers/oled/ssd1306_sh1106.c ****     if (!oled_active) {
 566:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_on) != I2C_STATUS_SUCCESS) {
 567:drivers/oled/ssd1306_sh1106.c ****             print("oled_on cmd failed\n");
 568:drivers/oled/ssd1306_sh1106.c ****             return oled_active;
 569:drivers/oled/ssd1306_sh1106.c ****         }
 570:drivers/oled/ssd1306_sh1106.c ****         oled_active = true;
 571:drivers/oled/ssd1306_sh1106.c ****     }
 572:drivers/oled/ssd1306_sh1106.c ****     return oled_active;
 1754               		.loc 1 572 5 is_stmt 1 view .LVU392
 1755               		.loc 1 572 12 is_stmt 0 view .LVU393
 1756 0014 8091 0000 		lds r24,oled_active
 1757               	/* epilogue start */
 573:drivers/oled/ssd1306_sh1106.c **** }
 1758               		.loc 1 573 1 view .LVU394
 1759 0018 0F90      		pop __tmp_reg__
 1760 001a 0F90      		pop __tmp_reg__
 1761 001c 0F90      		pop __tmp_reg__
 1762 001e 0F90      		pop __tmp_reg__
 1763 0020 DF91      		pop r29
 1764 0022 CF91      		pop r28
 1765 0024 0895      		ret
 1766               	.L79:
 555:drivers/oled/ssd1306_sh1106.c **** #endif
 1767               		.loc 1 555 5 is_stmt 1 view .LVU395
 555:drivers/oled/ssd1306_sh1106.c **** #endif
 1768               		.loc 1 555 20 is_stmt 0 view .LVU396
 1769 0026 0E94 0000 		call timer_read32
 1770               	.LVL144:
 555:drivers/oled/ssd1306_sh1106.c **** #endif
 1771               		.loc 1 555 35 view .LVU397
 1772 002a DC01      		movw r26,r24
 1773 002c CB01      		movw r24,r22
 1774 002e 805A      		subi r24,-96
 1775 0030 9541      		sbci r25,21
 1776 0032 AF4F      		sbci r26,-1
 1777 0034 BF4F      		sbci r27,-1
 555:drivers/oled/ssd1306_sh1106.c **** #endif
 1778               		.loc 1 555 18 view .LVU398
 1779 0036 8093 0000 		sts oled_timeout,r24
 1780 003a 9093 0000 		sts oled_timeout+1,r25
 1781 003e A093 0000 		sts oled_timeout+2,r26
 1782 0042 B093 0000 		sts oled_timeout+3,r27
 558:drivers/oled/ssd1306_sh1106.c **** #ifdef OLED_FADE_OUT
 1783               		.loc 1 558 5 is_stmt 1 view .LVU399
 565:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_on) != I2C_STATUS_SUCCESS) {
 1784               		.loc 1 565 5 view .LVU400
 565:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_on) != I2C_STATUS_SUCCESS) {
 1785               		.loc 1 565 8 is_stmt 0 view .LVU401
 1786 0046 8091 0000 		lds r24,oled_active
 1787 004a 8111      		cpse r24,__zero_reg__
 1788 004c 00C0      		rjmp .L81
 566:drivers/oled/ssd1306_sh1106.c ****             print("oled_on cmd failed\n");
 1789               		.loc 1 566 9 is_stmt 1 view .LVU402
 566:drivers/oled/ssd1306_sh1106.c ****             print("oled_on cmd failed\n");
 1790               		.loc 1 566 13 is_stmt 0 view .LVU403
 1791 004e 62E0      		ldi r22,lo8(2)
 1792 0050 70E0      		ldi r23,0
 1793 0052 80E0      		ldi r24,lo8(display_on.5)
 1794 0054 90E0      		ldi r25,hi8(display_on.5)
 1795 0056 0E94 0000 		call i2c_transmit_P.constprop.0
 1796               	.LVL145:
 566:drivers/oled/ssd1306_sh1106.c ****             print("oled_on cmd failed\n");
 1797               		.loc 1 566 12 view .LVU404
 1798 005a 892B      		or r24,r25
 1799 005c 01F4      		brne .L81
 570:drivers/oled/ssd1306_sh1106.c ****     }
 1800               		.loc 1 570 9 is_stmt 1 view .LVU405
 570:drivers/oled/ssd1306_sh1106.c ****     }
 1801               		.loc 1 570 21 is_stmt 0 view .LVU406
 1802 005e 81E0      		ldi r24,lo8(1)
 1803 0060 8093 0000 		sts oled_active,r24
 1804 0064 00C0      		rjmp .L81
 1805               		.cfi_endproc
 1806               	.LFE30:
 1808               		.section	.text.oled_render,"ax",@progbits
 1809               	.global	oled_render
 1811               	oled_render:
 1812               	.LFB15:
 288:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 1813               		.loc 1 288 24 is_stmt 1 view -0
 1814               		.cfi_startproc
 1815 0000 2F92      		push r2
 1816               	.LCFI39:
 1817               		.cfi_def_cfa_offset 3
 1818               		.cfi_offset 2, -2
 1819 0002 3F92      		push r3
 1820               	.LCFI40:
 1821               		.cfi_def_cfa_offset 4
 1822               		.cfi_offset 3, -3
 1823 0004 5F92      		push r5
 1824               	.LCFI41:
 1825               		.cfi_def_cfa_offset 5
 1826               		.cfi_offset 5, -4
 1827 0006 6F92      		push r6
 1828               	.LCFI42:
 1829               		.cfi_def_cfa_offset 6
 1830               		.cfi_offset 6, -5
 1831 0008 7F92      		push r7
 1832               	.LCFI43:
 1833               		.cfi_def_cfa_offset 7
 1834               		.cfi_offset 7, -6
 1835 000a 8F92      		push r8
 1836               	.LCFI44:
 1837               		.cfi_def_cfa_offset 8
 1838               		.cfi_offset 8, -7
 1839 000c 9F92      		push r9
 1840               	.LCFI45:
 1841               		.cfi_def_cfa_offset 9
 1842               		.cfi_offset 9, -8
 1843 000e AF92      		push r10
 1844               	.LCFI46:
 1845               		.cfi_def_cfa_offset 10
 1846               		.cfi_offset 10, -9
 1847 0010 BF92      		push r11
 1848               	.LCFI47:
 1849               		.cfi_def_cfa_offset 11
 1850               		.cfi_offset 11, -10
 1851 0012 CF92      		push r12
 1852               	.LCFI48:
 1853               		.cfi_def_cfa_offset 12
 1854               		.cfi_offset 12, -11
 1855 0014 DF92      		push r13
 1856               	.LCFI49:
 1857               		.cfi_def_cfa_offset 13
 1858               		.cfi_offset 13, -12
 1859 0016 EF92      		push r14
 1860               	.LCFI50:
 1861               		.cfi_def_cfa_offset 14
 1862               		.cfi_offset 14, -13
 1863 0018 FF92      		push r15
 1864               	.LCFI51:
 1865               		.cfi_def_cfa_offset 15
 1866               		.cfi_offset 15, -14
 1867 001a 0F93      		push r16
 1868               	.LCFI52:
 1869               		.cfi_def_cfa_offset 16
 1870               		.cfi_offset 16, -15
 1871 001c 1F93      		push r17
 1872               	.LCFI53:
 1873               		.cfi_def_cfa_offset 17
 1874               		.cfi_offset 17, -16
 1875 001e CF93      		push r28
 1876               	.LCFI54:
 1877               		.cfi_def_cfa_offset 18
 1878               		.cfi_offset 28, -17
 1879 0020 DF93      		push r29
 1880               	.LCFI55:
 1881               		.cfi_def_cfa_offset 19
 1882               		.cfi_offset 29, -18
 1883               	/* prologue: function */
 1884               	/* frame size = 0 */
 1885               	/* stack size = 17 */
 1886               	.L__stack_usage = 17
 289:drivers/oled/ssd1306_sh1106.c ****         return;
 1887               		.loc 1 289 5 view .LVU408
 289:drivers/oled/ssd1306_sh1106.c ****         return;
 1888               		.loc 1 289 8 is_stmt 0 view .LVU409
 1889 0022 8091 0000 		lds r24,oled_initialized
 1890 0026 8823      		tst r24
 1891 0028 01F0      		breq .L83
 294:drivers/oled/ssd1306_sh1106.c ****     if (!oled_dirty || oled_scrolling) {
 1892               		.loc 1 294 5 is_stmt 1 view .LVU410
 294:drivers/oled/ssd1306_sh1106.c ****     if (!oled_dirty || oled_scrolling) {
 1893               		.loc 1 294 16 is_stmt 0 view .LVU411
 1894 002a 2091 0000 		lds r18,oled_dirty
 1895 002e 3091 0000 		lds r19,oled_dirty+1
 295:drivers/oled/ssd1306_sh1106.c ****         return;
 1896               		.loc 1 295 5 is_stmt 1 view .LVU412
 295:drivers/oled/ssd1306_sh1106.c ****         return;
 1897               		.loc 1 295 8 is_stmt 0 view .LVU413
 1898 0032 2115      		cp r18,__zero_reg__
 1899 0034 3105      		cpc r19,__zero_reg__
 1900 0036 01F0      		breq .L83
 295:drivers/oled/ssd1306_sh1106.c ****         return;
 1901               		.loc 1 295 21 discriminator 1 view .LVU414
 1902 0038 8091 0000 		lds r24,oled_scrolling
 301:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 1903               		.loc 1 301 47 discriminator 1 view .LVU415
 1904 003c 61E0      		ldi r22,lo8(1)
 1905 003e 70E0      		ldi r23,0
 295:drivers/oled/ssd1306_sh1106.c ****         return;
 1906               		.loc 1 295 21 discriminator 1 view .LVU416
 1907 0040 8823      		tst r24
 1908 0042 01F0      		breq .L87
 1909               	.L83:
 1910               	/* epilogue start */
 348:drivers/oled/ssd1306_sh1106.c **** 
 1911               		.loc 1 348 1 view .LVU417
 1912 0044 DF91      		pop r29
 1913 0046 CF91      		pop r28
 1914 0048 1F91      		pop r17
 1915 004a 0F91      		pop r16
 1916 004c FF90      		pop r15
 1917 004e EF90      		pop r14
 1918 0050 DF90      		pop r13
 1919 0052 CF90      		pop r12
 1920 0054 BF90      		pop r11
 1921 0056 AF90      		pop r10
 1922 0058 9F90      		pop r9
 1923 005a 8F90      		pop r8
 1924 005c 7F90      		pop r7
 1925 005e 6F90      		pop r6
 1926 0060 5F90      		pop r5
 1927 0062 3F90      		pop r3
 1928 0064 2F90      		pop r2
 1929 0066 0895      		ret
 1930               	.LVL146:
 1931               	.L88:
 302:drivers/oled/ssd1306_sh1106.c ****     }
 1932               		.loc 1 302 9 is_stmt 1 view .LVU418
 1933 0068 8F5F      		subi r24,lo8(-(1))
 1934               	.LVL147:
 1935               	.L87:
 301:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 1936               		.loc 1 301 12 view .LVU419
 301:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 1937               		.loc 1 301 47 is_stmt 0 view .LVU420
 1938 006a 082F      		mov r16,r24
 1939 006c 10E0      		ldi r17,0
 1940 006e 1B01      		movw r2,r22
 1941 0070 082E      		mov r0,r24
 1942 0072 00C0      		rjmp 2f
 1943               		1:
 1944 0074 220C      		lsl r2
 1945 0076 331C      		rol r3
 1946               		2:
 1947 0078 0A94      		dec r0
 1948 007a 02F4      		brpl 1b
 301:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 1949               		.loc 1 301 25 view .LVU421
 1950 007c A901      		movw r20,r18
 1951 007e 4221      		and r20,r2
 1952 0080 5321      		and r21,r3
 301:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 1953               		.loc 1 301 12 view .LVU422
 1954 0082 452B      		or r20,r21
 1955 0084 01F0      		breq .L88
 306:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 1956               		.loc 1 306 5 is_stmt 1 view .LVU423
 307:drivers/oled/ssd1306_sh1106.c ****         calc_bounds(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 1957               		.loc 1 307 5 view .LVU424
 1958 0086 2091 0000 		lds r18,oled_rotation
 307:drivers/oled/ssd1306_sh1106.c ****         calc_bounds(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 1959               		.loc 1 307 8 is_stmt 0 view .LVU425
 1960 008a 922F      		mov r25,r18
 1961 008c 9170      		andi r25,lo8(1)
 1962 008e 20FD      		sbrc r18,0
 1963 0090 00C0      		rjmp .L89
 308:drivers/oled/ssd1306_sh1106.c ****     } else {
 1964               		.loc 1 308 9 is_stmt 1 view .LVU426
 1965               	.LVL148:
 1966               	.LBB48:
 1967               	.LBI48:
 243:drivers/oled/ssd1306_sh1106.c ****     // Calculate commands to set memory addressing bounds.
 1968               		.loc 1 243 13 view .LVU427
 1969               	.LBB49:
 245:drivers/oled/ssd1306_sh1106.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 1970               		.loc 1 245 5 view .LVU428
 245:drivers/oled/ssd1306_sh1106.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 1971               		.loc 1 245 59 is_stmt 0 view .LVU429
 1972 0092 9801      		movw r18,r16
 1973 0094 3695      		lsr r19
 1974 0096 2795      		ror r18
 1975 0098 3695      		lsr r19
 1976 009a 2795      		ror r18
 1977               	.LVL149:
 246:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC == OLED_IC_SH1106)
 1978               		.loc 1 246 5 is_stmt 1 view .LVU430
 246:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC == OLED_IC_SH1106)
 1979               		.loc 1 246 44 is_stmt 0 view .LVU431
 1980 009c 8295      		swap r24
 1981               	.LVL150:
 246:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC == OLED_IC_SH1106)
 1982               		.loc 1 246 44 view .LVU432
 1983 009e 880F      		lsl r24
 246:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC == OLED_IC_SH1106)
 1984               		.loc 1 246 13 view .LVU433
 1985 00a0 8076      		andi r24,lo8(96)
 1986               	.LVL151:
 258:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = start_page;
 1987               		.loc 1 258 5 is_stmt 1 view .LVU434
 259:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) % OLED_DISPLAY_WIDTH + cmd_array[1];
 1988               		.loc 1 259 5 view .LVU435
 260:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 1989               		.loc 1 260 5 view .LVU436
 260:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 1990               		.loc 1 260 84 is_stmt 0 view .LVU437
 1991 00a2 3FE1      		ldi r19,lo8(31)
 1992 00a4 380F      		add r19,r24
 261:drivers/oled/ssd1306_sh1106.c **** #endif
 1993               		.loc 1 261 5 is_stmt 1 view .LVU438
 1994               	.LVL152:
 1995               	.L90:
 258:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = start_page;
 1996               		.loc 1 258 18 is_stmt 0 view .LVU439
 1997 00a6 8093 0000 		sts display_start.10+2,r24
 259:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) % OLED_DISPLAY_WIDTH + cmd_array[1];
 1998               		.loc 1 259 18 view .LVU440
 1999 00aa 2093 0000 		sts display_start.10+5,r18
 260:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 2000               		.loc 1 260 18 view .LVU441
 2001 00ae 3093 0000 		sts display_start.10+3,r19
 261:drivers/oled/ssd1306_sh1106.c **** #endif
 2002               		.loc 1 261 18 view .LVU442
 2003 00b2 9093 0000 		sts display_start.10+6,r25
 2004               	.LBE49:
 2005               	.LBE48:
 314:drivers/oled/ssd1306_sh1106.c ****         print("oled_render offset command failed\n");
 2006               		.loc 1 314 5 is_stmt 1 view .LVU443
 314:drivers/oled/ssd1306_sh1106.c ****         print("oled_render offset command failed\n");
 2007               		.loc 1 314 9 is_stmt 0 view .LVU444
 2008 00b6 24E6      		ldi r18,lo8(100)
 2009 00b8 30E0      		ldi r19,0
 2010 00ba 47E0      		ldi r20,lo8(7)
 2011 00bc 50E0      		ldi r21,0
 2012 00be 60E0      		ldi r22,lo8(display_start.10)
 2013 00c0 70E0      		ldi r23,hi8(display_start.10)
 2014 00c2 88E7      		ldi r24,lo8(120)
 2015 00c4 0E94 0000 		call i2c_transmit
 2016               	.LVL153:
 314:drivers/oled/ssd1306_sh1106.c ****         print("oled_render offset command failed\n");
 2017               		.loc 1 314 8 view .LVU445
 2018 00c8 892B      		or r24,r25
 2019 00ca 01F0      		breq .+2
 2020 00cc 00C0      		rjmp .L83
 319:drivers/oled/ssd1306_sh1106.c ****         // Send render data chunk as is
 2021               		.loc 1 319 5 is_stmt 1 view .LVU446
 2022               	.LBB51:
 2023               	.LBB50:
 245:drivers/oled/ssd1306_sh1106.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 2024               		.loc 1 245 44 is_stmt 0 view .LVU447
 2025 00ce A801      		movw r20,r16
 2026 00d0 25E0      		ldi r18,5
 2027               		1:
 2028 00d2 440F      		lsl r20
 2029 00d4 551F      		rol r21
 2030 00d6 2A95      		dec r18
 2031 00d8 01F4      		brne 1b
 2032               	.LBE50:
 2033               	.LBE51:
 319:drivers/oled/ssd1306_sh1106.c ****         // Send render data chunk as is
 2034               		.loc 1 319 8 view .LVU448
 2035 00da 8091 0000 		lds r24,oled_rotation
 2036 00de 80FD      		sbrc r24,0
 2037 00e0 00C0      		rjmp .L91
 321:drivers/oled/ssd1306_sh1106.c ****             print("oled_render data failed\n");
 2038               		.loc 1 321 9 is_stmt 1 view .LVU449
 321:drivers/oled/ssd1306_sh1106.c ****             print("oled_render data failed\n");
 2039               		.loc 1 321 13 is_stmt 0 view .LVU450
 2040 00e2 4050      		subi r20,lo8(-(oled_buffer))
 2041 00e4 5040      		sbci r21,hi8(-(oled_buffer))
 2042 00e6 04E6      		ldi r16,lo8(100)
 2043 00e8 10E0      		ldi r17,0
 2044               	.LVL154:
 321:drivers/oled/ssd1306_sh1106.c ****             print("oled_render data failed\n");
 2045               		.loc 1 321 13 view .LVU451
 2046 00ea 20E2      		ldi r18,lo8(32)
 2047 00ec 30E0      		ldi r19,0
 2048               	.L102:
 2049 00ee 60E4      		ldi r22,lo8(64)
 2050 00f0 88E7      		ldi r24,lo8(120)
 2051 00f2 0E94 0000 		call i2c_writeReg
 2052               	.LVL155:
 321:drivers/oled/ssd1306_sh1106.c ****             print("oled_render data failed\n");
 2053               		.loc 1 321 12 view .LVU452
 2054 00f6 892B      		or r24,r25
 2055 00f8 01F0      		breq .+2
 2056 00fa 00C0      		rjmp .L83
 344:drivers/oled/ssd1306_sh1106.c **** 
 2057               		.loc 1 344 5 is_stmt 1 view .LVU453
 2058 00fc 0E94 0000 		call oled_on
 2059               	.LVL156:
 347:drivers/oled/ssd1306_sh1106.c **** }
 2060               		.loc 1 347 5 view .LVU454
 347:drivers/oled/ssd1306_sh1106.c **** }
 2061               		.loc 1 347 19 is_stmt 0 view .LVU455
 2062 0100 E101      		movw r28,r2
 2063 0102 C095      		com r28
 2064 0104 D095      		com r29
 347:drivers/oled/ssd1306_sh1106.c **** }
 2065               		.loc 1 347 16 view .LVU456
 2066 0106 8091 0000 		lds r24,oled_dirty
 2067 010a 9091 0000 		lds r25,oled_dirty+1
 2068 010e C823      		and r28,r24
 2069 0110 D923      		and r29,r25
 2070 0112 D093 0000 		sts oled_dirty+1,r29
 2071 0116 C093 0000 		sts oled_dirty,r28
 2072 011a 00C0      		rjmp .L83
 2073               	.LVL157:
 2074               	.L89:
 310:drivers/oled/ssd1306_sh1106.c ****     }
 2075               		.loc 1 310 9 is_stmt 1 view .LVU457
 2076               	.LBB52:
 2077               	.LBI52:
 265:drivers/oled/ssd1306_sh1106.c ****     cmd_array[1] = OLED_BLOCK_SIZE * update_start / OLED_DISPLAY_HEIGHT * 8;
 2078               		.loc 1 265 13 view .LVU458
 2079               	.LBB53:
 266:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 2080               		.loc 1 266 5 view .LVU459
 266:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 2081               		.loc 1 266 73 is_stmt 0 view .LVU460
 2082 011c 880F      		lsl r24
 2083 011e 880F      		lsl r24
 2084 0120 880F      		lsl r24
 267:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) / OLED_DISPLAY_HEIGHT * 8 - 1 + cmd_
 2085               		.loc 1 267 5 is_stmt 1 view .LVU461
 268:drivers/oled/ssd1306_sh1106.c ****     ;
 2086               		.loc 1 268 5 view .LVU462
 268:drivers/oled/ssd1306_sh1106.c ****     ;
 2087               		.loc 1 268 94 is_stmt 0 view .LVU463
 2088 0122 37E0      		ldi r19,lo8(7)
 2089 0124 380F      		add r19,r24
 269:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) % OLED_DISPLAY_HEIGHT / 8;
 2090               		.loc 1 269 5 is_stmt 1 view .LVU464
 270:drivers/oled/ssd1306_sh1106.c **** }
 2091               		.loc 1 270 5 view .LVU465
 271:drivers/oled/ssd1306_sh1106.c **** 
 2092               		.loc 1 271 1 is_stmt 0 view .LVU466
 2093 0126 20E0      		ldi r18,0
 2094 0128 93E0      		ldi r25,lo8(3)
 2095 012a 00C0      		rjmp .L90
 2096               	.LVL158:
 2097               	.L91:
 271:drivers/oled/ssd1306_sh1106.c **** 
 2098               		.loc 1 271 1 view .LVU467
 2099               	.LBE53:
 2100               	.LBE52:
 2101               	.LBB54:
 327:drivers/oled/ssd1306_sh1106.c ****         const static uint8_t target_map[] = OLED_TARGET_MAP;
 2102               		.loc 1 327 9 is_stmt 1 view .LVU468
 328:drivers/oled/ssd1306_sh1106.c **** 
 2103               		.loc 1 328 9 view .LVU469
 330:drivers/oled/ssd1306_sh1106.c ****         memset(temp_buffer, 0, sizeof(temp_buffer));
 2104               		.loc 1 330 9 view .LVU470
 331:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t i = 0; i < sizeof(source_map); ++i) {
 2105               		.loc 1 331 9 view .LVU471
 2106 012c E0E0      		ldi r30,lo8(temp_buffer.9)
 2107 012e F0E0      		ldi r31,hi8(temp_buffer.9)
 2108 0130 80E2      		ldi r24,lo8(32)
 2109 0132 DF01      		movw r26,r30
 2110               		0:
 2111 0134 1D92      		st X+,__zero_reg__
 2112 0136 8A95      		dec r24
 2113 0138 01F4      		brne 0b
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2114               		.loc 1 332 9 view .LVU472
 2115               	.LBB55:
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2116               		.loc 1 332 14 view .LVU473
 2117               	.LVL159:
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2118               		.loc 1 332 31 view .LVU474
 2119 013a A0E0      		ldi r26,lo8(target_map.8)
 2120 013c B0E0      		ldi r27,hi8(target_map.8)
 2121 013e 00E0      		ldi r16,lo8(source_map.7)
 2122 0140 10E0      		ldi r17,hi8(source_map.7)
 2123               	.LVL160:
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2124               		.loc 1 332 31 is_stmt 0 view .LVU475
 2125 0142 80E0      		ldi r24,lo8(target_map.8+4)
 2126 0144 C82E      		mov r12,r24
 2127 0146 80E0      		ldi r24,hi8(target_map.8+4)
 2128 0148 D82E      		mov r13,r24
 2129 014a 97E0      		ldi r25,lo8(7)
 2130 014c 592E      		mov r5,r25
 2131               	.LBB56:
 2132               	.LBB57:
 2133               	.LBB58:
 281:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2134               		.loc 1 281 31 view .LVU476
 2135 014e 7724      		clr r7
 2136 0150 7394      		inc r7
 2137               	.LVL161:
 2138               	.L94:
 281:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2139               		.loc 1 281 31 view .LVU477
 2140               	.LBE58:
 2141               	.LBE57:
 2142               	.LBE56:
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2143               		.loc 1 333 13 is_stmt 1 discriminator 3 view .LVU478
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2144               		.loc 1 333 108 is_stmt 0 discriminator 3 view .LVU479
 2145 0152 9D91      		ld r25,X+
 2146               	.LVL162:
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2147               		.loc 1 333 79 discriminator 3 view .LVU480
 2148 0154 E801      		movw r28,r16
 2149 0156 8991      		ld r24,Y+
 2150 0158 8E01      		movw r16,r28
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2151               		.loc 1 333 67 discriminator 3 view .LVU481
 2152 015a BA01      		movw r22,r20
 2153 015c 680F      		add r22,r24
 2154 015e 711D      		adc r23,__zero_reg__
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2155               		.loc 1 333 23 discriminator 3 view .LVU482
 2156 0160 6050      		subi r22,lo8(-(oled_buffer))
 2157 0162 7040      		sbci r23,hi8(-(oled_buffer))
 2158               	.LVL163:
 2159               	.LBB67:
 2160               	.LBI56:
 279:drivers/oled/ssd1306_sh1106.c ****     for (uint8_t i = 0, shift = 7; i < 8; ++i, --shift) {
 2161               		.loc 1 279 13 is_stmt 1 discriminator 3 view .LVU483
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2162               		.loc 1 280 5 discriminator 3 view .LVU484
 2163               	.LBB65:
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2164               		.loc 1 280 10 discriminator 3 view .LVU485
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2165               		.loc 1 280 38 discriminator 3 view .LVU486
 2166               	.LBE65:
 2167               	.LBE67:
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2168               		.loc 1 333 13 is_stmt 0 discriminator 3 view .LVU487
 2169 0164 E92F      		mov r30,r25
 2170 0166 F0E0      		ldi r31,0
 2171 0168 E050      		subi r30,lo8(-(temp_buffer.9))
 2172 016a F040      		sbci r31,hi8(-(temp_buffer.9))
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2173               		.loc 1 333 23 discriminator 3 view .LVU488
 2174 016c 90E0      		ldi r25,0
 2175               	.LVL164:
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2176               		.loc 1 333 23 discriminator 3 view .LVU489
 2177 016e 80E0      		ldi r24,0
 2178               	.LVL165:
 2179               	.L93:
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2180               		.loc 1 333 23 discriminator 3 view .LVU490
 2181 0170 652C      		mov r6,r5
 2182 0172 681A      		sub r6,r24
 2183               	.LVL166:
 2184               	.LBB68:
 2185               	.LBB66:
 2186               	.LBB64:
 281:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2187               		.loc 1 281 9 is_stmt 1 view .LVU491
 281:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2188               		.loc 1 281 17 is_stmt 0 view .LVU492
 2189 0174 872C      		mov r8,r7
 2190 0176 082E      		mov r0,r24
 2191 0178 00C0      		rjmp 2f
 2192               		1:
 2193 017a 880C      		lsl r8
 2194               		2:
 2195 017c 0A94      		dec r0
 2196 017e 02F4      		brpl 1b
 2197               	.LVL167:
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2198               		.loc 1 282 9 is_stmt 1 view .LVU493
 2199               	.LBB59:
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2200               		.loc 1 282 14 view .LVU494
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2201               		.loc 1 282 31 view .LVU495
 2202 0180 7B01      		movw r14,r22
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2203               		.loc 1 282 22 is_stmt 0 view .LVU496
 2204 0182 A12C      		mov r10,__zero_reg__
 2205               	.LVL168:
 2206               	.L92:
 283:drivers/oled/ssd1306_sh1106.c ****         }
 2207               		.loc 1 283 13 is_stmt 1 view .LVU497
 283:drivers/oled/ssd1306_sh1106.c ****         }
 2208               		.loc 1 283 32 is_stmt 0 view .LVU498
 2209 0184 E701      		movw r28,r14
 2210 0186 B990      		ld r11,Y+
 2211 0188 7E01      		movw r14,r28
 2212               	.LVL169:
 2213               	.LBB60:
 2214               	.LBI60:
 273:drivers/oled/ssd1306_sh1106.c ****     const uint8_t mask = 0x7;
 2215               		.loc 1 273 9 is_stmt 1 view .LVU499
 2216               	.LBB61:
 274:drivers/oled/ssd1306_sh1106.c ****     n &= mask;
 2217               		.loc 1 274 5 view .LVU500
 275:drivers/oled/ssd1306_sh1106.c ****     return a << n | a >> (-n & mask);
 2218               		.loc 1 275 5 view .LVU501
 276:drivers/oled/ssd1306_sh1106.c **** }
 2219               		.loc 1 276 5 view .LVU502
 276:drivers/oled/ssd1306_sh1106.c **** }
 2220               		.loc 1 276 5 is_stmt 0 view .LVU503
 2221               	.LBE61:
 2222               	.LBE60:
 283:drivers/oled/ssd1306_sh1106.c ****         }
 2223               		.loc 1 283 24 view .LVU504
 2224 018a B820      		and r11,r8
 2225               	.LBB63:
 2226               	.LBB62:
 275:drivers/oled/ssd1306_sh1106.c ****     return a << n | a >> (-n & mask);
 2227               		.loc 1 275 7 view .LVU505
 2228 018c 262D      		mov r18,r6
 2229 018e 2A19      		sub r18,r10
 2230 0190 2770      		andi r18,lo8(7)
 2231 0192 922E      		mov r9,r18
 276:drivers/oled/ssd1306_sh1106.c **** }
 2232               		.loc 1 276 14 view .LVU506
 2233 0194 022E      		mov __tmp_reg__,r18
 2234 0196 000C      		lsl r0
 2235 0198 330B      		sbc r19,r19
 2236               	.LBE62:
 2237               	.LBE63:
 283:drivers/oled/ssd1306_sh1106.c ****         }
 2238               		.loc 1 283 21 view .LVU507
 2239 019a DB2D      		mov r29,r11
 2240 019c 00C0      		rjmp 2f
 2241               		1:
 2242 019e DD0F      		lsl r29
 2243               		2:
 2244 01a0 9A94      		dec r9
 2245 01a2 02F4      		brpl 1b
 2246 01a4 9D2E      		mov r9,r29
 2247 01a6 3195      		neg r19
 2248 01a8 2195      		neg r18
 2249 01aa 3109      		sbc r19,__zero_reg__
 2250 01ac 2770      		andi r18,7
 2251 01ae 3327      		clr r19
 2252 01b0 00C0      		rjmp 2f
 2253               		1:
 2254 01b2 B694      		lsr r11
 2255               		2:
 2256 01b4 2A95      		dec r18
 2257 01b6 02F4      		brpl 1b
 2258 01b8 9B28      		or r9,r11
 2259 01ba 2081      		ld r18,Z
 2260 01bc 922A      		or r9,r18
 2261 01be 9082      		st Z,r9
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2262               		.loc 1 282 36 is_stmt 1 view .LVU508
 2263 01c0 A394      		inc r10
 2264               	.LVL170:
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2265               		.loc 1 282 31 view .LVU509
 2266 01c2 28E0      		ldi r18,lo8(8)
 2267 01c4 A212      		cpse r10,r18
 2268 01c6 00C0      		rjmp .L92
 2269               	.LBE59:
 2270               	.LBE64:
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2271               		.loc 1 280 46 view .LVU510
 2272               	.LVL171:
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2273               		.loc 1 280 38 view .LVU511
 2274 01c8 0196      		adiw r24,1
 2275               	.LVL172:
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2276               		.loc 1 280 38 is_stmt 0 view .LVU512
 2277 01ca 3196      		adiw r30,1
 2278 01cc 8830      		cpi r24,8
 2279 01ce 9105      		cpc r25,__zero_reg__
 2280 01d0 01F4      		brne .L93
 2281               	.LVL173:
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2282               		.loc 1 280 38 view .LVU513
 2283               	.LBE66:
 2284               	.LBE68:
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2285               		.loc 1 332 53 is_stmt 1 discriminator 3 view .LVU514
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2286               		.loc 1 332 31 discriminator 3 view .LVU515
 2287 01d2 CA16      		cp r12,r26
 2288 01d4 DB06      		cpc r13,r27
 2289 01d6 01F0      		breq .+2
 2290 01d8 00C0      		rjmp .L94
 2291               	.LBE55:
 337:drivers/oled/ssd1306_sh1106.c ****             print("oled_render90 data failed\n");
 2292               		.loc 1 337 9 view .LVU516
 337:drivers/oled/ssd1306_sh1106.c ****             print("oled_render90 data failed\n");
 2293               		.loc 1 337 13 is_stmt 0 view .LVU517
 2294 01da 04E6      		ldi r16,lo8(100)
 2295 01dc 10E0      		ldi r17,0
 2296 01de 20E2      		ldi r18,lo8(32)
 2297 01e0 30E0      		ldi r19,0
 2298 01e2 40E0      		ldi r20,lo8(temp_buffer.9)
 2299 01e4 50E0      		ldi r21,hi8(temp_buffer.9)
 2300 01e6 00C0      		rjmp .L102
 2301               	.LBE54:
 2302               		.cfi_endproc
 2303               	.LFE15:
 2305               		.section	.text.oled_off,"ax",@progbits
 2306               	.global	oled_off
 2308               	oled_off:
 2309               	.LFB31:
 574:drivers/oled/ssd1306_sh1106.c **** 
 575:drivers/oled/ssd1306_sh1106.c **** bool oled_off(void) {
 2310               		.loc 1 575 21 is_stmt 1 view -0
 2311               		.cfi_startproc
 2312               	/* prologue: function */
 2313               	/* frame size = 0 */
 2314               	/* stack size = 0 */
 2315               	.L__stack_usage = 0
 576:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2316               		.loc 1 576 5 view .LVU519
 577:drivers/oled/ssd1306_sh1106.c ****         return !oled_active;
 2317               		.loc 1 577 9 is_stmt 0 view .LVU520
 2318 0000 8091 0000 		lds r24,oled_active
 576:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2319               		.loc 1 576 8 view .LVU521
 2320 0004 9091 0000 		lds r25,oled_initialized
 2321 0008 9111      		cpse r25,__zero_reg__
 2322 000a 00C0      		rjmp .L104
 2323               	.L111:
 578:drivers/oled/ssd1306_sh1106.c ****     }
 579:drivers/oled/ssd1306_sh1106.c **** 
 580:drivers/oled/ssd1306_sh1106.c ****     static const uint8_t PROGMEM display_off[] =
 581:drivers/oled/ssd1306_sh1106.c **** #ifdef OLED_FADE_OUT
 582:drivers/oled/ssd1306_sh1106.c ****         {I2C_CMD, FADE_BLINK, ENABLE_FADE | OLED_FADE_OUT_INTERVAL};
 583:drivers/oled/ssd1306_sh1106.c **** #else
 584:drivers/oled/ssd1306_sh1106.c ****         {I2C_CMD, DISPLAY_OFF};
 585:drivers/oled/ssd1306_sh1106.c **** #endif
 586:drivers/oled/ssd1306_sh1106.c **** 
 587:drivers/oled/ssd1306_sh1106.c ****     if (oled_active) {
 588:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_off) != I2C_STATUS_SUCCESS) {
 589:drivers/oled/ssd1306_sh1106.c ****             print("oled_off cmd failed\n");
 590:drivers/oled/ssd1306_sh1106.c ****             return oled_active;
 591:drivers/oled/ssd1306_sh1106.c ****         }
 592:drivers/oled/ssd1306_sh1106.c ****         oled_active = false;
 593:drivers/oled/ssd1306_sh1106.c ****     }
 594:drivers/oled/ssd1306_sh1106.c ****     return !oled_active;
 2324               		.loc 1 594 5 view .LVU522
 2325 000c 91E0      		ldi r25,lo8(1)
 2326 000e 8927      		eor r24,r25
 2327               	/* epilogue start */
 595:drivers/oled/ssd1306_sh1106.c **** }
 2328               		.loc 1 595 1 view .LVU523
 2329 0010 0895      		ret
 2330               	.L104:
 580:drivers/oled/ssd1306_sh1106.c **** #ifdef OLED_FADE_OUT
 2331               		.loc 1 580 5 is_stmt 1 view .LVU524
 587:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_off) != I2C_STATUS_SUCCESS) {
 2332               		.loc 1 587 5 view .LVU525
 587:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_off) != I2C_STATUS_SUCCESS) {
 2333               		.loc 1 587 8 is_stmt 0 view .LVU526
 2334 0012 8823      		tst r24
 2335 0014 01F0      		breq .L106
 588:drivers/oled/ssd1306_sh1106.c ****             print("oled_off cmd failed\n");
 2336               		.loc 1 588 9 is_stmt 1 view .LVU527
 588:drivers/oled/ssd1306_sh1106.c ****             print("oled_off cmd failed\n");
 2337               		.loc 1 588 13 is_stmt 0 view .LVU528
 2338 0016 62E0      		ldi r22,lo8(2)
 2339 0018 70E0      		ldi r23,0
 2340 001a 80E0      		ldi r24,lo8(display_off.4)
 2341 001c 90E0      		ldi r25,hi8(display_off.4)
 2342 001e 0E94 0000 		call i2c_transmit_P.constprop.0
 2343               	.LVL174:
 588:drivers/oled/ssd1306_sh1106.c ****             print("oled_off cmd failed\n");
 2344               		.loc 1 588 12 view .LVU529
 2345 0022 892B      		or r24,r25
 2346 0024 01F0      		breq .L107
 589:drivers/oled/ssd1306_sh1106.c ****             return oled_active;
 2347               		.loc 1 589 43 is_stmt 1 view .LVU530
 590:drivers/oled/ssd1306_sh1106.c ****         }
 2348               		.loc 1 590 13 view .LVU531
 590:drivers/oled/ssd1306_sh1106.c ****         }
 2349               		.loc 1 590 20 is_stmt 0 view .LVU532
 2350 0026 8091 0000 		lds r24,oled_active
 2351 002a 0895      		ret
 2352               	.L107:
 592:drivers/oled/ssd1306_sh1106.c ****     }
 2353               		.loc 1 592 9 is_stmt 1 view .LVU533
 592:drivers/oled/ssd1306_sh1106.c ****     }
 2354               		.loc 1 592 21 is_stmt 0 view .LVU534
 2355 002c 1092 0000 		sts oled_active,__zero_reg__
 2356               	.L106:
 594:drivers/oled/ssd1306_sh1106.c **** }
 2357               		.loc 1 594 5 is_stmt 1 view .LVU535
 2358 0030 8091 0000 		lds r24,oled_active
 2359 0034 00C0      		rjmp .L111
 2360               		.cfi_endproc
 2361               	.LFE31:
 2363               		.section	.text.is_oled_on,"ax",@progbits
 2364               	.global	is_oled_on
 2366               	is_oled_on:
 2367               	.LFB32:
 596:drivers/oled/ssd1306_sh1106.c **** 
 597:drivers/oled/ssd1306_sh1106.c **** bool is_oled_on(void) { return oled_active; }
 2368               		.loc 1 597 23 view -0
 2369               		.cfi_startproc
 2370               	/* prologue: function */
 2371               	/* frame size = 0 */
 2372               	/* stack size = 0 */
 2373               	.L__stack_usage = 0
 2374               		.loc 1 597 25 view .LVU537
 2375               		.loc 1 597 45 is_stmt 0 view .LVU538
 2376 0000 8091 0000 		lds r24,oled_active
 2377               	/* epilogue start */
 2378 0004 0895      		ret
 2379               		.cfi_endproc
 2380               	.LFE32:
 2382               		.section	.text.oled_set_brightness,"ax",@progbits
 2383               	.global	oled_set_brightness
 2385               	oled_set_brightness:
 2386               	.LVL175:
 2387               	.LFB33:
 598:drivers/oled/ssd1306_sh1106.c **** 
 599:drivers/oled/ssd1306_sh1106.c **** uint8_t oled_set_brightness(uint8_t level) {
 2388               		.loc 1 599 44 is_stmt 1 view -0
 2389               		.cfi_startproc
 2390               		.loc 1 599 44 is_stmt 0 view .LVU540
 2391 0000 1F93      		push r17
 2392               	.LCFI56:
 2393               		.cfi_def_cfa_offset 3
 2394               		.cfi_offset 17, -2
 2395 0002 CF93      		push r28
 2396               	.LCFI57:
 2397               		.cfi_def_cfa_offset 4
 2398               		.cfi_offset 28, -3
 2399 0004 DF93      		push r29
 2400               	.LCFI58:
 2401               		.cfi_def_cfa_offset 5
 2402               		.cfi_offset 29, -4
 2403 0006 00D0      		rcall .
 2404 0008 0F92      		push __tmp_reg__
 2405               	.LCFI59:
 2406               		.cfi_def_cfa_offset 8
 2407 000a CDB7      		in r28,__SP_L__
 2408 000c DEB7      		in r29,__SP_H__
 2409               	.LCFI60:
 2410               		.cfi_def_cfa_register 28
 2411               	/* prologue: function */
 2412               	/* frame size = 3 */
 2413               	/* stack size = 6 */
 2414               	.L__stack_usage = 6
 2415 000e 182F      		mov r17,r24
 600:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2416               		.loc 1 600 5 is_stmt 1 view .LVU541
 601:drivers/oled/ssd1306_sh1106.c ****         return oled_brightness;
 2417               		.loc 1 601 16 is_stmt 0 view .LVU542
 2418 0010 8091 0000 		lds r24,oled_brightness
 2419               	.LVL176:
 600:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2420               		.loc 1 600 8 view .LVU543
 2421 0014 9091 0000 		lds r25,oled_initialized
 2422 0018 9923      		tst r25
 2423 001a 01F0      		breq .L113
 602:drivers/oled/ssd1306_sh1106.c ****     }
 603:drivers/oled/ssd1306_sh1106.c **** 
 604:drivers/oled/ssd1306_sh1106.c ****     uint8_t set_contrast[] = {I2C_CMD, CONTRAST, level};
 2424               		.loc 1 604 5 is_stmt 1 view .LVU544
 2425               		.loc 1 604 13 is_stmt 0 view .LVU545
 2426 001c 1982      		std Y+1,__zero_reg__
 2427 001e 91E8      		ldi r25,lo8(-127)
 2428 0020 9A83      		std Y+2,r25
 2429 0022 1B83      		std Y+3,r17
 605:drivers/oled/ssd1306_sh1106.c ****     if (oled_brightness != level) {
 2430               		.loc 1 605 5 is_stmt 1 view .LVU546
 2431               		.loc 1 605 8 is_stmt 0 view .LVU547
 2432 0024 1817      		cp r17,r24
 2433 0026 01F0      		breq .L115
 606:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT(set_contrast) != I2C_STATUS_SUCCESS) {
 2434               		.loc 1 606 9 is_stmt 1 view .LVU548
 2435               		.loc 1 606 13 is_stmt 0 view .LVU549
 2436 0028 24E6      		ldi r18,lo8(100)
 2437 002a 30E0      		ldi r19,0
 2438 002c 43E0      		ldi r20,lo8(3)
 2439 002e 50E0      		ldi r21,0
 2440 0030 BE01      		movw r22,r28
 2441 0032 6F5F      		subi r22,-1
 2442 0034 7F4F      		sbci r23,-1
 2443 0036 88E7      		ldi r24,lo8(120)
 2444 0038 0E94 0000 		call i2c_transmit
 2445               	.LVL177:
 2446               		.loc 1 606 12 view .LVU550
 2447 003c 892B      		or r24,r25
 2448 003e 01F0      		breq .L116
 2449               	.L115:
 607:drivers/oled/ssd1306_sh1106.c ****             print("set_brightness cmd failed\n");
 608:drivers/oled/ssd1306_sh1106.c ****             return oled_brightness;
 609:drivers/oled/ssd1306_sh1106.c ****         }
 610:drivers/oled/ssd1306_sh1106.c ****         oled_brightness = level;
 611:drivers/oled/ssd1306_sh1106.c ****     }
 612:drivers/oled/ssd1306_sh1106.c ****     return oled_brightness;
 2450               		.loc 1 612 5 is_stmt 1 view .LVU551
 2451               		.loc 1 612 12 is_stmt 0 view .LVU552
 2452 0040 8091 0000 		lds r24,oled_brightness
 2453               	.L113:
 2454               	/* epilogue start */
 613:drivers/oled/ssd1306_sh1106.c **** }
 2455               		.loc 1 613 1 view .LVU553
 2456 0044 0F90      		pop __tmp_reg__
 2457 0046 0F90      		pop __tmp_reg__
 2458 0048 0F90      		pop __tmp_reg__
 2459 004a DF91      		pop r29
 2460 004c CF91      		pop r28
 2461 004e 1F91      		pop r17
 2462               	.LVL178:
 2463               		.loc 1 613 1 view .LVU554
 2464 0050 0895      		ret
 2465               	.LVL179:
 2466               	.L116:
 610:drivers/oled/ssd1306_sh1106.c ****     }
 2467               		.loc 1 610 9 is_stmt 1 view .LVU555
 610:drivers/oled/ssd1306_sh1106.c ****     }
 2468               		.loc 1 610 25 is_stmt 0 view .LVU556
 2469 0052 1093 0000 		sts oled_brightness,r17
 2470 0056 00C0      		rjmp .L115
 2471               		.cfi_endproc
 2472               	.LFE33:
 2474               		.section	.text.oled_get_brightness,"ax",@progbits
 2475               	.global	oled_get_brightness
 2477               	oled_get_brightness:
 2478               	.LFB34:
 614:drivers/oled/ssd1306_sh1106.c **** 
 615:drivers/oled/ssd1306_sh1106.c **** uint8_t oled_get_brightness(void) { return oled_brightness; }
 2479               		.loc 1 615 35 is_stmt 1 view -0
 2480               		.cfi_startproc
 2481               	/* prologue: function */
 2482               	/* frame size = 0 */
 2483               	/* stack size = 0 */
 2484               	.L__stack_usage = 0
 2485               		.loc 1 615 37 view .LVU558
 2486               		.loc 1 615 61 is_stmt 0 view .LVU559
 2487 0000 8091 0000 		lds r24,oled_brightness
 2488               	/* epilogue start */
 2489 0004 0895      		ret
 2490               		.cfi_endproc
 2491               	.LFE34:
 2493               		.section	.text.oled_scroll_set_area,"ax",@progbits
 2494               	.global	oled_scroll_set_area
 2496               	oled_scroll_set_area:
 2497               	.LVL180:
 2498               	.LFB35:
 616:drivers/oled/ssd1306_sh1106.c **** 
 617:drivers/oled/ssd1306_sh1106.c **** // Set the specific 8 lines rows of the screen to scroll.
 618:drivers/oled/ssd1306_sh1106.c **** // 0 is the default for start, and 7 for end, which is the entire
 619:drivers/oled/ssd1306_sh1106.c **** // height of the screen.  For 128x32 screens, rows 4-7 are not used.
 620:drivers/oled/ssd1306_sh1106.c **** void oled_scroll_set_area(uint8_t start_line, uint8_t end_line) {
 2499               		.loc 1 620 65 is_stmt 1 view -0
 2500               		.cfi_startproc
 2501               	/* prologue: function */
 2502               	/* frame size = 0 */
 2503               	/* stack size = 0 */
 2504               	.L__stack_usage = 0
 621:drivers/oled/ssd1306_sh1106.c ****     oled_scroll_start = start_line;
 2505               		.loc 1 621 5 view .LVU561
 2506               		.loc 1 621 23 is_stmt 0 view .LVU562
 2507 0000 8093 0000 		sts oled_scroll_start,r24
 622:drivers/oled/ssd1306_sh1106.c ****     oled_scroll_end   = end_line;
 2508               		.loc 1 622 5 is_stmt 1 view .LVU563
 2509               		.loc 1 622 23 is_stmt 0 view .LVU564
 2510 0004 6093 0000 		sts oled_scroll_end,r22
 2511               	/* epilogue start */
 623:drivers/oled/ssd1306_sh1106.c **** }
 2512               		.loc 1 623 1 view .LVU565
 2513 0008 0895      		ret
 2514               		.cfi_endproc
 2515               	.LFE35:
 2517               		.section	.text.oled_scroll_set_speed,"ax",@progbits
 2518               	.global	oled_scroll_set_speed
 2520               	oled_scroll_set_speed:
 2521               	.LVL181:
 2522               	.LFB36:
 624:drivers/oled/ssd1306_sh1106.c **** 
 625:drivers/oled/ssd1306_sh1106.c **** void oled_scroll_set_speed(uint8_t speed) {
 2523               		.loc 1 625 43 is_stmt 1 view -0
 2524               		.cfi_startproc
 2525               	/* prologue: function */
 2526               	/* frame size = 0 */
 2527               	/* stack size = 0 */
 2528               	.L__stack_usage = 0
 626:drivers/oled/ssd1306_sh1106.c ****     // Sets the speed for scrolling... does not take effect
 627:drivers/oled/ssd1306_sh1106.c ****     // until scrolling is either started or restarted
 628:drivers/oled/ssd1306_sh1106.c ****     // the ssd1306 supports 8 speeds
 629:drivers/oled/ssd1306_sh1106.c ****     // FrameRate2   speed = 7
 630:drivers/oled/ssd1306_sh1106.c ****     // FrameRate3   speed = 4
 631:drivers/oled/ssd1306_sh1106.c ****     // FrameRate4   speed = 5
 632:drivers/oled/ssd1306_sh1106.c ****     // FrameRate5   speed = 0
 633:drivers/oled/ssd1306_sh1106.c ****     // FrameRate25  speed = 6
 634:drivers/oled/ssd1306_sh1106.c ****     // FrameRate64  speed = 1
 635:drivers/oled/ssd1306_sh1106.c ****     // FrameRate128 speed = 2
 636:drivers/oled/ssd1306_sh1106.c ****     // FrameRate256 speed = 3
 637:drivers/oled/ssd1306_sh1106.c ****     // for ease of use these are remaped here to be in order
 638:drivers/oled/ssd1306_sh1106.c ****     static const uint8_t scroll_remap[8] = {7, 4, 5, 0, 6, 1, 2, 3};
 2529               		.loc 1 638 5 view .LVU567
 639:drivers/oled/ssd1306_sh1106.c ****     oled_scroll_speed                    = scroll_remap[speed];
 2530               		.loc 1 639 5 view .LVU568
 2531               		.loc 1 639 56 is_stmt 0 view .LVU569
 2532 0000 E82F      		mov r30,r24
 2533 0002 F0E0      		ldi r31,0
 2534 0004 E050      		subi r30,lo8(-(scroll_remap.3))
 2535 0006 F040      		sbci r31,hi8(-(scroll_remap.3))
 2536               		.loc 1 639 42 view .LVU570
 2537 0008 8081      		ld r24,Z
 2538               	.LVL182:
 2539               		.loc 1 639 42 view .LVU571
 2540 000a 8093 0000 		sts oled_scroll_speed,r24
 2541               	/* epilogue start */
 640:drivers/oled/ssd1306_sh1106.c **** }
 2542               		.loc 1 640 1 view .LVU572
 2543 000e 0895      		ret
 2544               		.cfi_endproc
 2545               	.LFE36:
 2547               		.section	.text.oled_scroll_right,"ax",@progbits
 2548               	.global	oled_scroll_right
 2550               	oled_scroll_right:
 2551               	.LFB37:
 641:drivers/oled/ssd1306_sh1106.c **** 
 642:drivers/oled/ssd1306_sh1106.c **** bool oled_scroll_right(void) {
 2552               		.loc 1 642 30 is_stmt 1 view -0
 2553               		.cfi_startproc
 2554 0000 CF93      		push r28
 2555               	.LCFI61:
 2556               		.cfi_def_cfa_offset 3
 2557               		.cfi_offset 28, -2
 2558 0002 DF93      		push r29
 2559               	.LCFI62:
 2560               		.cfi_def_cfa_offset 4
 2561               		.cfi_offset 29, -3
 2562 0004 CDB7      		in r28,__SP_L__
 2563 0006 DEB7      		in r29,__SP_H__
 2564               	.LCFI63:
 2565               		.cfi_def_cfa_register 28
 2566 0008 2997      		sbiw r28,9
 2567               	.LCFI64:
 2568               		.cfi_def_cfa_offset 13
 2569 000a 0FB6      		in __tmp_reg__,__SREG__
 2570 000c F894      		cli
 2571 000e DEBF      		out __SP_H__,r29
 2572 0010 0FBE      		out __SREG__,__tmp_reg__
 2573 0012 CDBF      		out __SP_L__,r28
 2574               	/* prologue: function */
 2575               	/* frame size = 9 */
 2576               	/* stack size = 11 */
 2577               	.L__stack_usage = 11
 643:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2578               		.loc 1 643 5 view .LVU574
 644:drivers/oled/ssd1306_sh1106.c ****         return oled_scrolling;
 2579               		.loc 1 644 16 is_stmt 0 view .LVU575
 2580 0014 8091 0000 		lds r24,oled_scrolling
 643:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2581               		.loc 1 643 8 view .LVU576
 2582 0018 9091 0000 		lds r25,oled_initialized
 2583 001c 9923      		tst r25
 2584 001e 01F0      		breq .L123
 645:drivers/oled/ssd1306_sh1106.c ****     }
 646:drivers/oled/ssd1306_sh1106.c **** 
 647:drivers/oled/ssd1306_sh1106.c ****     // Dont enable scrolling if we need to update the display
 648:drivers/oled/ssd1306_sh1106.c ****     // This prevents scrolling of bad data from starting the scroll too early after init
 649:drivers/oled/ssd1306_sh1106.c ****     if (!oled_dirty && !oled_scrolling) {
 2585               		.loc 1 649 5 is_stmt 1 view .LVU577
 2586               		.loc 1 649 8 is_stmt 0 view .LVU578
 2587 0020 2091 0000 		lds r18,oled_dirty
 2588 0024 3091 0000 		lds r19,oled_dirty+1
 2589 0028 232B      		or r18,r19
 2590 002a 01F4      		brne .L125
 2591               		.loc 1 649 21 discriminator 1 view .LVU579
 2592 002c 8111      		cpse r24,__zero_reg__
 2593 002e 00C0      		rjmp .L125
 2594               	.LBB69:
 650:drivers/oled/ssd1306_sh1106.c ****         uint8_t display_scroll_right[] = {I2C_CMD, SCROLL_RIGHT, 0x00, oled_scroll_start, oled_scro
 2595               		.loc 1 650 9 is_stmt 1 view .LVU580
 2596               		.loc 1 650 17 is_stmt 0 view .LVU581
 2597 0030 1982      		std Y+1,__zero_reg__
 2598 0032 86E2      		ldi r24,lo8(38)
 2599 0034 8A83      		std Y+2,r24
 2600 0036 1B82      		std Y+3,__zero_reg__
 2601 0038 8091 0000 		lds r24,oled_scroll_start
 2602 003c 8C83      		std Y+4,r24
 2603 003e 8091 0000 		lds r24,oled_scroll_speed
 2604 0042 8D83      		std Y+5,r24
 2605 0044 8091 0000 		lds r24,oled_scroll_end
 2606 0048 8E83      		std Y+6,r24
 2607 004a 1F82      		std Y+7,__zero_reg__
 2608 004c 8FEF      		ldi r24,lo8(-1)
 2609 004e 8887      		std Y+8,r24
 2610 0050 8FE2      		ldi r24,lo8(47)
 2611 0052 8987      		std Y+9,r24
 651:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT(display_scroll_right) != I2C_STATUS_SUCCESS) {
 2612               		.loc 1 651 9 is_stmt 1 view .LVU582
 2613               		.loc 1 651 13 is_stmt 0 view .LVU583
 2614 0054 24E6      		ldi r18,lo8(100)
 2615 0056 30E0      		ldi r19,0
 2616 0058 49E0      		ldi r20,lo8(9)
 2617 005a 50E0      		ldi r21,0
 2618 005c BE01      		movw r22,r28
 2619 005e 6F5F      		subi r22,-1
 2620 0060 7F4F      		sbci r23,-1
 2621 0062 88E7      		ldi r24,lo8(120)
 2622 0064 0E94 0000 		call i2c_transmit
 2623               	.LVL183:
 2624               		.loc 1 651 12 view .LVU584
 2625 0068 892B      		or r24,r25
 2626 006a 01F0      		breq .L126
 2627               	.L125:
 2628               	.LBE69:
 652:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_right cmd failed\n");
 653:drivers/oled/ssd1306_sh1106.c ****             return oled_scrolling;
 654:drivers/oled/ssd1306_sh1106.c ****         }
 655:drivers/oled/ssd1306_sh1106.c ****         oled_scrolling = true;
 656:drivers/oled/ssd1306_sh1106.c ****     }
 657:drivers/oled/ssd1306_sh1106.c ****     return oled_scrolling;
 2629               		.loc 1 657 5 is_stmt 1 view .LVU585
 2630               		.loc 1 657 12 is_stmt 0 view .LVU586
 2631 006c 8091 0000 		lds r24,oled_scrolling
 2632               	.L123:
 2633               	/* epilogue start */
 658:drivers/oled/ssd1306_sh1106.c **** }
 2634               		.loc 1 658 1 view .LVU587
 2635 0070 2996      		adiw r28,9
 2636 0072 0FB6      		in __tmp_reg__,__SREG__
 2637 0074 F894      		cli
 2638 0076 DEBF      		out __SP_H__,r29
 2639 0078 0FBE      		out __SREG__,__tmp_reg__
 2640 007a CDBF      		out __SP_L__,r28
 2641 007c DF91      		pop r29
 2642 007e CF91      		pop r28
 2643 0080 0895      		ret
 2644               	.L126:
 2645               	.LBB70:
 655:drivers/oled/ssd1306_sh1106.c ****     }
 2646               		.loc 1 655 9 is_stmt 1 view .LVU588
 655:drivers/oled/ssd1306_sh1106.c ****     }
 2647               		.loc 1 655 24 is_stmt 0 view .LVU589
 2648 0082 81E0      		ldi r24,lo8(1)
 2649 0084 8093 0000 		sts oled_scrolling,r24
 2650 0088 00C0      		rjmp .L125
 2651               	.LBE70:
 2652               		.cfi_endproc
 2653               	.LFE37:
 2655               		.section	.text.oled_scroll_left,"ax",@progbits
 2656               	.global	oled_scroll_left
 2658               	oled_scroll_left:
 2659               	.LFB38:
 659:drivers/oled/ssd1306_sh1106.c **** 
 660:drivers/oled/ssd1306_sh1106.c **** bool oled_scroll_left(void) {
 2660               		.loc 1 660 29 is_stmt 1 view -0
 2661               		.cfi_startproc
 2662 0000 CF93      		push r28
 2663               	.LCFI65:
 2664               		.cfi_def_cfa_offset 3
 2665               		.cfi_offset 28, -2
 2666 0002 DF93      		push r29
 2667               	.LCFI66:
 2668               		.cfi_def_cfa_offset 4
 2669               		.cfi_offset 29, -3
 2670 0004 CDB7      		in r28,__SP_L__
 2671 0006 DEB7      		in r29,__SP_H__
 2672               	.LCFI67:
 2673               		.cfi_def_cfa_register 28
 2674 0008 2997      		sbiw r28,9
 2675               	.LCFI68:
 2676               		.cfi_def_cfa_offset 13
 2677 000a 0FB6      		in __tmp_reg__,__SREG__
 2678 000c F894      		cli
 2679 000e DEBF      		out __SP_H__,r29
 2680 0010 0FBE      		out __SREG__,__tmp_reg__
 2681 0012 CDBF      		out __SP_L__,r28
 2682               	/* prologue: function */
 2683               	/* frame size = 9 */
 2684               	/* stack size = 11 */
 2685               	.L__stack_usage = 11
 661:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2686               		.loc 1 661 5 view .LVU591
 662:drivers/oled/ssd1306_sh1106.c ****         return oled_scrolling;
 2687               		.loc 1 662 16 is_stmt 0 view .LVU592
 2688 0014 8091 0000 		lds r24,oled_scrolling
 661:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2689               		.loc 1 661 8 view .LVU593
 2690 0018 9091 0000 		lds r25,oled_initialized
 2691 001c 9923      		tst r25
 2692 001e 01F0      		breq .L130
 663:drivers/oled/ssd1306_sh1106.c ****     }
 664:drivers/oled/ssd1306_sh1106.c **** 
 665:drivers/oled/ssd1306_sh1106.c ****     // Dont enable scrolling if we need to update the display
 666:drivers/oled/ssd1306_sh1106.c ****     // This prevents scrolling of bad data from starting the scroll too early after init
 667:drivers/oled/ssd1306_sh1106.c ****     if (!oled_dirty && !oled_scrolling) {
 2693               		.loc 1 667 5 is_stmt 1 view .LVU594
 2694               		.loc 1 667 8 is_stmt 0 view .LVU595
 2695 0020 2091 0000 		lds r18,oled_dirty
 2696 0024 3091 0000 		lds r19,oled_dirty+1
 2697 0028 232B      		or r18,r19
 2698 002a 01F4      		brne .L132
 2699               		.loc 1 667 21 discriminator 1 view .LVU596
 2700 002c 8111      		cpse r24,__zero_reg__
 2701 002e 00C0      		rjmp .L132
 2702               	.LBB71:
 668:drivers/oled/ssd1306_sh1106.c ****         uint8_t display_scroll_left[] = {I2C_CMD, SCROLL_LEFT, 0x00, oled_scroll_start, oled_scroll
 2703               		.loc 1 668 9 is_stmt 1 view .LVU597
 2704               		.loc 1 668 17 is_stmt 0 view .LVU598
 2705 0030 1982      		std Y+1,__zero_reg__
 2706 0032 87E2      		ldi r24,lo8(39)
 2707 0034 8A83      		std Y+2,r24
 2708 0036 1B82      		std Y+3,__zero_reg__
 2709 0038 8091 0000 		lds r24,oled_scroll_start
 2710 003c 8C83      		std Y+4,r24
 2711 003e 8091 0000 		lds r24,oled_scroll_speed
 2712 0042 8D83      		std Y+5,r24
 2713 0044 8091 0000 		lds r24,oled_scroll_end
 2714 0048 8E83      		std Y+6,r24
 2715 004a 1F82      		std Y+7,__zero_reg__
 2716 004c 8FEF      		ldi r24,lo8(-1)
 2717 004e 8887      		std Y+8,r24
 2718 0050 8FE2      		ldi r24,lo8(47)
 2719 0052 8987      		std Y+9,r24
 669:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT(display_scroll_left) != I2C_STATUS_SUCCESS) {
 2720               		.loc 1 669 9 is_stmt 1 view .LVU599
 2721               		.loc 1 669 13 is_stmt 0 view .LVU600
 2722 0054 24E6      		ldi r18,lo8(100)
 2723 0056 30E0      		ldi r19,0
 2724 0058 49E0      		ldi r20,lo8(9)
 2725 005a 50E0      		ldi r21,0
 2726 005c BE01      		movw r22,r28
 2727 005e 6F5F      		subi r22,-1
 2728 0060 7F4F      		sbci r23,-1
 2729 0062 88E7      		ldi r24,lo8(120)
 2730 0064 0E94 0000 		call i2c_transmit
 2731               	.LVL184:
 2732               		.loc 1 669 12 view .LVU601
 2733 0068 892B      		or r24,r25
 2734 006a 01F0      		breq .L133
 2735               	.L132:
 2736               	.LBE71:
 670:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_left cmd failed\n");
 671:drivers/oled/ssd1306_sh1106.c ****             return oled_scrolling;
 672:drivers/oled/ssd1306_sh1106.c ****         }
 673:drivers/oled/ssd1306_sh1106.c ****         oled_scrolling = true;
 674:drivers/oled/ssd1306_sh1106.c ****     }
 675:drivers/oled/ssd1306_sh1106.c ****     return oled_scrolling;
 2737               		.loc 1 675 5 is_stmt 1 view .LVU602
 2738               		.loc 1 675 12 is_stmt 0 view .LVU603
 2739 006c 8091 0000 		lds r24,oled_scrolling
 2740               	.L130:
 2741               	/* epilogue start */
 676:drivers/oled/ssd1306_sh1106.c **** }
 2742               		.loc 1 676 1 view .LVU604
 2743 0070 2996      		adiw r28,9
 2744 0072 0FB6      		in __tmp_reg__,__SREG__
 2745 0074 F894      		cli
 2746 0076 DEBF      		out __SP_H__,r29
 2747 0078 0FBE      		out __SREG__,__tmp_reg__
 2748 007a CDBF      		out __SP_L__,r28
 2749 007c DF91      		pop r29
 2750 007e CF91      		pop r28
 2751 0080 0895      		ret
 2752               	.L133:
 2753               	.LBB72:
 673:drivers/oled/ssd1306_sh1106.c ****     }
 2754               		.loc 1 673 9 is_stmt 1 view .LVU605
 673:drivers/oled/ssd1306_sh1106.c ****     }
 2755               		.loc 1 673 24 is_stmt 0 view .LVU606
 2756 0082 81E0      		ldi r24,lo8(1)
 2757 0084 8093 0000 		sts oled_scrolling,r24
 2758 0088 00C0      		rjmp .L132
 2759               	.LBE72:
 2760               		.cfi_endproc
 2761               	.LFE38:
 2763               		.section	.text.oled_scroll_off,"ax",@progbits
 2764               	.global	oled_scroll_off
 2766               	oled_scroll_off:
 2767               	.LFB39:
 677:drivers/oled/ssd1306_sh1106.c **** 
 678:drivers/oled/ssd1306_sh1106.c **** bool oled_scroll_off(void) {
 2768               		.loc 1 678 28 is_stmt 1 view -0
 2769               		.cfi_startproc
 2770               	/* prologue: function */
 2771               	/* frame size = 0 */
 2772               	/* stack size = 0 */
 2773               	.L__stack_usage = 0
 679:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2774               		.loc 1 679 5 view .LVU608
 680:drivers/oled/ssd1306_sh1106.c ****         return !oled_scrolling;
 2775               		.loc 1 680 9 is_stmt 0 view .LVU609
 2776 0000 8091 0000 		lds r24,oled_scrolling
 679:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2777               		.loc 1 679 8 view .LVU610
 2778 0004 9091 0000 		lds r25,oled_initialized
 2779 0008 9111      		cpse r25,__zero_reg__
 2780 000a 00C0      		rjmp .L138
 2781               	.L145:
 681:drivers/oled/ssd1306_sh1106.c ****     }
 682:drivers/oled/ssd1306_sh1106.c **** 
 683:drivers/oled/ssd1306_sh1106.c ****     if (oled_scrolling) {
 684:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_scroll_off[] = {I2C_CMD, DEACTIVATE_SCROLL};
 685:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_scroll_off) != I2C_STATUS_SUCCESS) {
 686:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_off cmd failed\n");
 687:drivers/oled/ssd1306_sh1106.c ****             return oled_scrolling;
 688:drivers/oled/ssd1306_sh1106.c ****         }
 689:drivers/oled/ssd1306_sh1106.c ****         oled_scrolling = false;
 690:drivers/oled/ssd1306_sh1106.c ****         oled_dirty     = OLED_ALL_BLOCKS_MASK;
 691:drivers/oled/ssd1306_sh1106.c ****     }
 692:drivers/oled/ssd1306_sh1106.c ****     return !oled_scrolling;
 2782               		.loc 1 692 5 view .LVU611
 2783 000c 91E0      		ldi r25,lo8(1)
 2784 000e 8927      		eor r24,r25
 2785               	/* epilogue start */
 693:drivers/oled/ssd1306_sh1106.c **** }
 2786               		.loc 1 693 1 view .LVU612
 2787 0010 0895      		ret
 2788               	.L138:
 683:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_scroll_off[] = {I2C_CMD, DEACTIVATE_SCROLL};
 2789               		.loc 1 683 5 is_stmt 1 view .LVU613
 683:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_scroll_off[] = {I2C_CMD, DEACTIVATE_SCROLL};
 2790               		.loc 1 683 8 is_stmt 0 view .LVU614
 2791 0012 8823      		tst r24
 2792 0014 01F0      		breq .L140
 2793               	.LBB73:
 684:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_scroll_off) != I2C_STATUS_SUCCESS) {
 2794               		.loc 1 684 9 is_stmt 1 view .LVU615
 685:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_off cmd failed\n");
 2795               		.loc 1 685 9 view .LVU616
 685:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_off cmd failed\n");
 2796               		.loc 1 685 13 is_stmt 0 view .LVU617
 2797 0016 62E0      		ldi r22,lo8(2)
 2798 0018 70E0      		ldi r23,0
 2799 001a 80E0      		ldi r24,lo8(display_scroll_off.2)
 2800 001c 90E0      		ldi r25,hi8(display_scroll_off.2)
 2801 001e 0E94 0000 		call i2c_transmit_P.constprop.0
 2802               	.LVL185:
 685:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_off cmd failed\n");
 2803               		.loc 1 685 12 view .LVU618
 2804 0022 892B      		or r24,r25
 2805 0024 01F0      		breq .L141
 686:drivers/oled/ssd1306_sh1106.c ****             return oled_scrolling;
 2806               		.loc 1 686 50 is_stmt 1 view .LVU619
 687:drivers/oled/ssd1306_sh1106.c ****         }
 2807               		.loc 1 687 13 view .LVU620
 687:drivers/oled/ssd1306_sh1106.c ****         }
 2808               		.loc 1 687 20 is_stmt 0 view .LVU621
 2809 0026 8091 0000 		lds r24,oled_scrolling
 2810 002a 0895      		ret
 2811               	.L141:
 689:drivers/oled/ssd1306_sh1106.c ****         oled_dirty     = OLED_ALL_BLOCKS_MASK;
 2812               		.loc 1 689 9 is_stmt 1 view .LVU622
 689:drivers/oled/ssd1306_sh1106.c ****         oled_dirty     = OLED_ALL_BLOCKS_MASK;
 2813               		.loc 1 689 24 is_stmt 0 view .LVU623
 2814 002c 1092 0000 		sts oled_scrolling,__zero_reg__
 690:drivers/oled/ssd1306_sh1106.c ****     }
 2815               		.loc 1 690 9 is_stmt 1 view .LVU624
 690:drivers/oled/ssd1306_sh1106.c ****     }
 2816               		.loc 1 690 24 is_stmt 0 view .LVU625
 2817 0030 8FEF      		ldi r24,lo8(-1)
 2818 0032 9FEF      		ldi r25,lo8(-1)
 2819 0034 9093 0000 		sts oled_dirty+1,r25
 2820 0038 8093 0000 		sts oled_dirty,r24
 2821               	.L140:
 2822               	.LBE73:
 692:drivers/oled/ssd1306_sh1106.c **** }
 2823               		.loc 1 692 5 is_stmt 1 view .LVU626
 2824 003c 8091 0000 		lds r24,oled_scrolling
 2825 0040 00C0      		rjmp .L145
 2826               		.cfi_endproc
 2827               	.LFE39:
 2829               		.section	.text.is_oled_scrolling,"ax",@progbits
 2830               	.global	is_oled_scrolling
 2832               	is_oled_scrolling:
 2833               	.LFB40:
 694:drivers/oled/ssd1306_sh1106.c **** 
 695:drivers/oled/ssd1306_sh1106.c **** bool is_oled_scrolling(void) { return oled_scrolling; }
 2834               		.loc 1 695 30 view -0
 2835               		.cfi_startproc
 2836               	/* prologue: function */
 2837               	/* frame size = 0 */
 2838               	/* stack size = 0 */
 2839               	.L__stack_usage = 0
 2840               		.loc 1 695 32 view .LVU628
 2841               		.loc 1 695 55 is_stmt 0 view .LVU629
 2842 0000 8091 0000 		lds r24,oled_scrolling
 2843               	/* epilogue start */
 2844 0004 0895      		ret
 2845               		.cfi_endproc
 2846               	.LFE40:
 2848               		.section	.text.oled_invert,"ax",@progbits
 2849               	.global	oled_invert
 2851               	oled_invert:
 2852               	.LVL186:
 2853               	.LFB41:
 696:drivers/oled/ssd1306_sh1106.c **** 
 697:drivers/oled/ssd1306_sh1106.c **** bool oled_invert(bool invert) {
 2854               		.loc 1 697 31 is_stmt 1 view -0
 2855               		.cfi_startproc
 2856               	/* prologue: function */
 2857               	/* frame size = 0 */
 2858               	/* stack size = 0 */
 2859               	.L__stack_usage = 0
 2860               		.loc 1 697 31 is_stmt 0 view .LVU631
 2861 0000 982F      		mov r25,r24
 698:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2862               		.loc 1 698 5 is_stmt 1 view .LVU632
 699:drivers/oled/ssd1306_sh1106.c ****         return oled_inverted;
 2863               		.loc 1 699 16 is_stmt 0 view .LVU633
 2864 0002 8091 0000 		lds r24,oled_inverted
 2865               	.LVL187:
 698:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2866               		.loc 1 698 8 view .LVU634
 2867 0006 2091 0000 		lds r18,oled_initialized
 2868 000a 2223      		tst r18
 2869 000c 01F0      		breq .L147
 700:drivers/oled/ssd1306_sh1106.c ****     }
 701:drivers/oled/ssd1306_sh1106.c **** 
 702:drivers/oled/ssd1306_sh1106.c ****     if (invert && !oled_inverted) {
 2870               		.loc 1 702 5 is_stmt 1 view .LVU635
 2871               		.loc 1 702 8 is_stmt 0 view .LVU636
 2872 000e 9923      		tst r25
 2873 0010 01F0      		breq .L149
 2874               		.loc 1 702 16 discriminator 1 view .LVU637
 2875 0012 8111      		cpse r24,__zero_reg__
 2876 0014 00C0      		rjmp .L150
 2877               	.LBB74:
 703:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_inverted[] = {I2C_CMD, INVERT_DISPLAY};
 2878               		.loc 1 703 9 is_stmt 1 view .LVU638
 704:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_inverted) != I2C_STATUS_SUCCESS) {
 2879               		.loc 1 704 9 view .LVU639
 2880               		.loc 1 704 13 is_stmt 0 view .LVU640
 2881 0016 62E0      		ldi r22,lo8(2)
 2882 0018 70E0      		ldi r23,0
 2883 001a 80E0      		ldi r24,lo8(display_inverted.1)
 2884 001c 90E0      		ldi r25,hi8(display_inverted.1)
 2885 001e 0E94 0000 		call i2c_transmit_P.constprop.0
 2886               	.LVL188:
 2887               		.loc 1 704 12 view .LVU641
 2888 0022 892B      		or r24,r25
 2889 0024 01F0      		breq .L151
 2890               	.L150:
 2891               	.LBE74:
 705:drivers/oled/ssd1306_sh1106.c ****             print("oled_invert cmd failed\n");
 706:drivers/oled/ssd1306_sh1106.c ****             return oled_inverted;
 707:drivers/oled/ssd1306_sh1106.c ****         }
 708:drivers/oled/ssd1306_sh1106.c ****         oled_inverted = true;
 709:drivers/oled/ssd1306_sh1106.c ****     } else if (!invert && oled_inverted) {
 710:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, NORMAL_DISPLAY};
 711:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 712:drivers/oled/ssd1306_sh1106.c ****             print("oled_invert cmd failed\n");
 713:drivers/oled/ssd1306_sh1106.c ****             return oled_inverted;
 714:drivers/oled/ssd1306_sh1106.c ****         }
 715:drivers/oled/ssd1306_sh1106.c ****         oled_inverted = false;
 716:drivers/oled/ssd1306_sh1106.c ****     }
 717:drivers/oled/ssd1306_sh1106.c **** 
 718:drivers/oled/ssd1306_sh1106.c ****     return oled_inverted;
 2892               		.loc 1 718 5 is_stmt 1 view .LVU642
 2893               		.loc 1 718 12 is_stmt 0 view .LVU643
 2894 0026 8091 0000 		lds r24,oled_inverted
 2895               	.L147:
 2896               	/* epilogue start */
 719:drivers/oled/ssd1306_sh1106.c **** }
 2897               		.loc 1 719 1 view .LVU644
 2898 002a 0895      		ret
 2899               	.L151:
 2900               	.LBB75:
 708:drivers/oled/ssd1306_sh1106.c ****     } else if (!invert && oled_inverted) {
 2901               		.loc 1 708 9 is_stmt 1 view .LVU645
 708:drivers/oled/ssd1306_sh1106.c ****     } else if (!invert && oled_inverted) {
 2902               		.loc 1 708 23 is_stmt 0 view .LVU646
 2903 002c 81E0      		ldi r24,lo8(1)
 2904 002e 8093 0000 		sts oled_inverted,r24
 2905               	.LBE75:
 702:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_inverted[] = {I2C_CMD, INVERT_DISPLAY};
 2906               		.loc 1 702 35 view .LVU647
 2907 0032 00C0      		rjmp .L150
 2908               	.LVL189:
 2909               	.L149:
 709:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, NORMAL_DISPLAY};
 2910               		.loc 1 709 12 is_stmt 1 discriminator 1 view .LVU648
 709:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, NORMAL_DISPLAY};
 2911               		.loc 1 709 24 is_stmt 0 discriminator 1 view .LVU649
 2912 0034 8823      		tst r24
 2913 0036 01F0      		breq .L150
 2914               	.LBB76:
 710:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 2915               		.loc 1 710 9 is_stmt 1 view .LVU650
 711:drivers/oled/ssd1306_sh1106.c ****             print("oled_invert cmd failed\n");
 2916               		.loc 1 711 9 view .LVU651
 711:drivers/oled/ssd1306_sh1106.c ****             print("oled_invert cmd failed\n");
 2917               		.loc 1 711 13 is_stmt 0 view .LVU652
 2918 0038 62E0      		ldi r22,lo8(2)
 2919 003a 70E0      		ldi r23,0
 2920 003c 80E0      		ldi r24,lo8(display_normal.0)
 2921 003e 90E0      		ldi r25,hi8(display_normal.0)
 2922 0040 0E94 0000 		call i2c_transmit_P.constprop.0
 2923               	.LVL190:
 711:drivers/oled/ssd1306_sh1106.c ****             print("oled_invert cmd failed\n");
 2924               		.loc 1 711 12 view .LVU653
 2925 0044 892B      		or r24,r25
 2926 0046 01F4      		brne .L150
 715:drivers/oled/ssd1306_sh1106.c ****     }
 2927               		.loc 1 715 9 is_stmt 1 view .LVU654
 715:drivers/oled/ssd1306_sh1106.c ****     }
 2928               		.loc 1 715 23 is_stmt 0 view .LVU655
 2929 0048 1092 0000 		sts oled_inverted,__zero_reg__
 2930 004c 00C0      		rjmp .L150
 2931               	.LBE76:
 2932               		.cfi_endproc
 2933               	.LFE41:
 2935               		.section	.text.oled_max_chars,"ax",@progbits
 2936               	.global	oled_max_chars
 2938               	oled_max_chars:
 2939               	.LFB42:
 720:drivers/oled/ssd1306_sh1106.c **** 
 721:drivers/oled/ssd1306_sh1106.c **** uint8_t oled_max_chars(void) {
 2940               		.loc 1 721 30 is_stmt 1 view -0
 2941               		.cfi_startproc
 2942               	/* prologue: function */
 2943               	/* frame size = 0 */
 2944               	/* stack size = 0 */
 2945               	.L__stack_usage = 0
 722:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 2946               		.loc 1 722 5 view .LVU657
 2947               		.loc 1 722 8 is_stmt 0 view .LVU658
 2948 0000 8091 0000 		lds r24,oled_rotation
 2949 0004 80FD      		sbrc r24,0
 2950 0006 00C0      		rjmp .L161
 723:drivers/oled/ssd1306_sh1106.c ****         return OLED_DISPLAY_WIDTH / OLED_FONT_WIDTH;
 2951               		.loc 1 723 16 view .LVU659
 2952 0008 85E1      		ldi r24,lo8(21)
 2953 000a 0895      		ret
 2954               	.L161:
 724:drivers/oled/ssd1306_sh1106.c ****     }
 725:drivers/oled/ssd1306_sh1106.c ****     return OLED_DISPLAY_HEIGHT / OLED_FONT_WIDTH;
 2955               		.loc 1 725 12 view .LVU660
 2956 000c 85E0      		ldi r24,lo8(5)
 2957               	/* epilogue start */
 726:drivers/oled/ssd1306_sh1106.c **** }
 2958               		.loc 1 726 1 view .LVU661
 2959 000e 0895      		ret
 2960               		.cfi_endproc
 2961               	.LFE42:
 2963               		.section	.text.oled_max_lines,"ax",@progbits
 2964               	.global	oled_max_lines
 2966               	oled_max_lines:
 2967               	.LFB43:
 727:drivers/oled/ssd1306_sh1106.c **** 
 728:drivers/oled/ssd1306_sh1106.c **** uint8_t oled_max_lines(void) {
 2968               		.loc 1 728 30 is_stmt 1 view -0
 2969               		.cfi_startproc
 2970               	/* prologue: function */
 2971               	/* frame size = 0 */
 2972               	/* stack size = 0 */
 2973               	.L__stack_usage = 0
 729:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 2974               		.loc 1 729 5 view .LVU663
 2975               		.loc 1 729 8 is_stmt 0 view .LVU664
 2976 0000 8091 0000 		lds r24,oled_rotation
 2977 0004 80FD      		sbrc r24,0
 2978 0006 00C0      		rjmp .L164
 730:drivers/oled/ssd1306_sh1106.c ****         return OLED_DISPLAY_HEIGHT / OLED_FONT_HEIGHT;
 2979               		.loc 1 730 16 view .LVU665
 2980 0008 84E0      		ldi r24,lo8(4)
 2981 000a 0895      		ret
 2982               	.L164:
 731:drivers/oled/ssd1306_sh1106.c ****     }
 732:drivers/oled/ssd1306_sh1106.c ****     return OLED_DISPLAY_WIDTH / OLED_FONT_HEIGHT;
 2983               		.loc 1 732 12 view .LVU666
 2984 000c 80E1      		ldi r24,lo8(16)
 2985               	/* epilogue start */
 733:drivers/oled/ssd1306_sh1106.c **** }
 2986               		.loc 1 733 1 view .LVU667
 2987 000e 0895      		ret
 2988               		.cfi_endproc
 2989               	.LFE43:
 2991               		.section	.text.oled_task_user,"ax",@progbits
 2992               		.weak	oled_task_user
 2994               	oled_task_user:
 2995               	.LFB45:
 734:drivers/oled/ssd1306_sh1106.c **** 
 735:drivers/oled/ssd1306_sh1106.c **** void oled_task(void) {
 736:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 737:drivers/oled/ssd1306_sh1106.c ****         return;
 738:drivers/oled/ssd1306_sh1106.c ****     }
 739:drivers/oled/ssd1306_sh1106.c **** 
 740:drivers/oled/ssd1306_sh1106.c **** #if OLED_UPDATE_INTERVAL > 0
 741:drivers/oled/ssd1306_sh1106.c ****     if (timer_elapsed(oled_update_timeout) >= OLED_UPDATE_INTERVAL) {
 742:drivers/oled/ssd1306_sh1106.c ****         oled_update_timeout = timer_read();
 743:drivers/oled/ssd1306_sh1106.c ****         oled_set_cursor(0, 0);
 744:drivers/oled/ssd1306_sh1106.c ****         oled_task_user();
 745:drivers/oled/ssd1306_sh1106.c ****     }
 746:drivers/oled/ssd1306_sh1106.c **** #else
 747:drivers/oled/ssd1306_sh1106.c ****     oled_set_cursor(0, 0);
 748:drivers/oled/ssd1306_sh1106.c ****     oled_task_user();
 749:drivers/oled/ssd1306_sh1106.c **** #endif
 750:drivers/oled/ssd1306_sh1106.c **** 
 751:drivers/oled/ssd1306_sh1106.c **** #if OLED_SCROLL_TIMEOUT > 0
 752:drivers/oled/ssd1306_sh1106.c ****     if (oled_dirty && oled_scrolling) {
 753:drivers/oled/ssd1306_sh1106.c ****         oled_scroll_timeout = timer_read32() + OLED_SCROLL_TIMEOUT;
 754:drivers/oled/ssd1306_sh1106.c ****         oled_scroll_off();
 755:drivers/oled/ssd1306_sh1106.c ****     }
 756:drivers/oled/ssd1306_sh1106.c **** #endif
 757:drivers/oled/ssd1306_sh1106.c **** 
 758:drivers/oled/ssd1306_sh1106.c ****     // Smart render system, no need to check for dirty
 759:drivers/oled/ssd1306_sh1106.c ****     oled_render();
 760:drivers/oled/ssd1306_sh1106.c **** 
 761:drivers/oled/ssd1306_sh1106.c ****     // Display timeout check
 762:drivers/oled/ssd1306_sh1106.c **** #if OLED_TIMEOUT > 0
 763:drivers/oled/ssd1306_sh1106.c ****     if (oled_active && timer_expired32(timer_read32(), oled_timeout)) {
 764:drivers/oled/ssd1306_sh1106.c ****         oled_off();
 765:drivers/oled/ssd1306_sh1106.c ****     }
 766:drivers/oled/ssd1306_sh1106.c **** #endif
 767:drivers/oled/ssd1306_sh1106.c **** 
 768:drivers/oled/ssd1306_sh1106.c **** #if OLED_SCROLL_TIMEOUT > 0
 769:drivers/oled/ssd1306_sh1106.c ****     if (!oled_scrolling && timer_expired32(timer_read32(), oled_scroll_timeout)) {
 770:drivers/oled/ssd1306_sh1106.c **** #    ifdef OLED_SCROLL_TIMEOUT_RIGHT
 771:drivers/oled/ssd1306_sh1106.c ****         oled_scroll_right();
 772:drivers/oled/ssd1306_sh1106.c **** #    else
 773:drivers/oled/ssd1306_sh1106.c ****         oled_scroll_left();
 774:drivers/oled/ssd1306_sh1106.c **** #    endif
 775:drivers/oled/ssd1306_sh1106.c ****     }
 776:drivers/oled/ssd1306_sh1106.c **** #endif
 777:drivers/oled/ssd1306_sh1106.c **** }
 778:drivers/oled/ssd1306_sh1106.c **** 
 779:drivers/oled/ssd1306_sh1106.c **** __attribute__((weak)) void oled_task_user(void) {}
 2996               		.loc 1 779 49 is_stmt 1 view -0
 2997               		.cfi_startproc
 2998               	/* prologue: function */
 2999               	/* frame size = 0 */
 3000               	/* stack size = 0 */
 3001               	.L__stack_usage = 0
 3002               		.loc 1 779 50 view .LVU669
 3003               	/* epilogue start */
 3004 0000 0895      		ret
 3005               		.cfi_endproc
 3006               	.LFE45:
 3008               		.section	.text.oled_task,"ax",@progbits
 3009               	.global	oled_task
 3011               	oled_task:
 3012               	.LFB44:
 735:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 3013               		.loc 1 735 22 view -0
 3014               		.cfi_startproc
 3015 0000 CF93      		push r28
 3016               	.LCFI69:
 3017               		.cfi_def_cfa_offset 3
 3018               		.cfi_offset 28, -2
 3019 0002 DF93      		push r29
 3020               	.LCFI70:
 3021               		.cfi_def_cfa_offset 4
 3022               		.cfi_offset 29, -3
 3023 0004 00D0      		rcall .
 3024 0006 00D0      		rcall .
 3025               	.LCFI71:
 3026               		.cfi_def_cfa_offset 8
 3027 0008 CDB7      		in r28,__SP_L__
 3028 000a DEB7      		in r29,__SP_H__
 3029               	.LCFI72:
 3030               		.cfi_def_cfa_register 28
 3031               	/* prologue: function */
 3032               	/* frame size = 4 */
 3033               	/* stack size = 6 */
 3034               	.L__stack_usage = 6
 736:drivers/oled/ssd1306_sh1106.c ****         return;
 3035               		.loc 1 736 5 view .LVU671
 736:drivers/oled/ssd1306_sh1106.c ****         return;
 3036               		.loc 1 736 8 is_stmt 0 view .LVU672
 3037 000c 8091 0000 		lds r24,oled_initialized
 3038 0010 8823      		tst r24
 3039 0012 01F4      		brne .+2
 3040 0014 00C0      		rjmp .L166
 741:drivers/oled/ssd1306_sh1106.c ****         oled_update_timeout = timer_read();
 3041               		.loc 1 741 5 is_stmt 1 view .LVU673
 741:drivers/oled/ssd1306_sh1106.c ****         oled_update_timeout = timer_read();
 3042               		.loc 1 741 9 is_stmt 0 view .LVU674
 3043 0016 8091 0000 		lds r24,oled_update_timeout
 3044 001a 9091 0000 		lds r25,oled_update_timeout+1
 3045 001e 0E94 0000 		call timer_elapsed
 3046               	.LVL191:
 741:drivers/oled/ssd1306_sh1106.c ****         oled_update_timeout = timer_read();
 3047               		.loc 1 741 8 view .LVU675
 3048 0022 C297      		sbiw r24,50
 3049 0024 00F0      		brlo .L169
 742:drivers/oled/ssd1306_sh1106.c ****         oled_set_cursor(0, 0);
 3050               		.loc 1 742 9 is_stmt 1 view .LVU676
 742:drivers/oled/ssd1306_sh1106.c ****         oled_set_cursor(0, 0);
 3051               		.loc 1 742 31 is_stmt 0 view .LVU677
 3052 0026 0E94 0000 		call timer_read
 3053               	.LVL192:
 742:drivers/oled/ssd1306_sh1106.c ****         oled_set_cursor(0, 0);
 3054               		.loc 1 742 29 view .LVU678
 3055 002a 9093 0000 		sts oled_update_timeout+1,r25
 3056 002e 8093 0000 		sts oled_update_timeout,r24
 743:drivers/oled/ssd1306_sh1106.c ****         oled_task_user();
 3057               		.loc 1 743 9 is_stmt 1 view .LVU679
 3058 0032 60E0      		ldi r22,0
 3059 0034 80E0      		ldi r24,0
 3060 0036 0E94 0000 		call oled_set_cursor
 3061               	.LVL193:
 744:drivers/oled/ssd1306_sh1106.c ****     }
 3062               		.loc 1 744 9 view .LVU680
 3063 003a 0E94 0000 		call oled_task_user
 3064               	.LVL194:
 3065               	.L169:
 759:drivers/oled/ssd1306_sh1106.c **** 
 3066               		.loc 1 759 5 view .LVU681
 3067 003e 0E94 0000 		call oled_render
 3068               	.LVL195:
 763:drivers/oled/ssd1306_sh1106.c ****         oled_off();
 3069               		.loc 1 763 5 view .LVU682
 763:drivers/oled/ssd1306_sh1106.c ****         oled_off();
 3070               		.loc 1 763 8 is_stmt 0 view .LVU683
 3071 0042 8091 0000 		lds r24,oled_active
 3072 0046 8823      		tst r24
 3073 0048 01F0      		breq .L166
 763:drivers/oled/ssd1306_sh1106.c ****         oled_off();
 3074               		.loc 1 763 24 discriminator 1 view .LVU684
 3075 004a 0E94 0000 		call timer_read32
 3076               	.LVL196:
 3077 004e 6983      		std Y+1,r22
 3078 0050 7A83      		std Y+2,r23
 3079 0052 8B83      		std Y+3,r24
 3080 0054 9C83      		std Y+4,r25
 3081 0056 8091 0000 		lds r24,oled_timeout
 3082 005a 9091 0000 		lds r25,oled_timeout+1
 3083 005e A091 0000 		lds r26,oled_timeout+2
 3084 0062 B091 0000 		lds r27,oled_timeout+3
 3085 0066 2981      		ldd r18,Y+1
 3086 0068 3A81      		ldd r19,Y+2
 3087 006a 4B81      		ldd r20,Y+3
 3088 006c 5C81      		ldd r21,Y+4
 3089 006e 281B      		sub r18,r24
 3090 0070 390B      		sbc r19,r25
 3091 0072 4A0B      		sbc r20,r26
 3092 0074 5B0B      		sbc r21,r27
 3093 0076 DA01      		movw r26,r20
 3094 0078 C901      		movw r24,r18
 763:drivers/oled/ssd1306_sh1106.c ****         oled_off();
 3095               		.loc 1 763 21 discriminator 1 view .LVU685
 3096 007a 8F3F      		cpi r24,-1
 3097 007c 9F4F      		sbci r25,-1
 3098 007e AF4F      		sbci r26,-1
 3099 0080 BF47      		sbci r27,127
 3100 0082 00F4      		brsh .L166
 764:drivers/oled/ssd1306_sh1106.c ****     }
 3101               		.loc 1 764 9 is_stmt 1 view .LVU686
 3102               	/* epilogue start */
 777:drivers/oled/ssd1306_sh1106.c **** 
 3103               		.loc 1 777 1 is_stmt 0 view .LVU687
 3104 0084 0F90      		pop __tmp_reg__
 3105 0086 0F90      		pop __tmp_reg__
 3106 0088 0F90      		pop __tmp_reg__
 3107 008a 0F90      		pop __tmp_reg__
 3108 008c DF91      		pop r29
 3109 008e CF91      		pop r28
 764:drivers/oled/ssd1306_sh1106.c ****     }
 3110               		.loc 1 764 9 view .LVU688
 3111 0090 0C94 0000 		jmp oled_off
 3112               	.LVL197:
 3113               	.L166:
 3114               	/* epilogue start */
 777:drivers/oled/ssd1306_sh1106.c **** 
 3115               		.loc 1 777 1 view .LVU689
 3116 0094 0F90      		pop __tmp_reg__
 3117 0096 0F90      		pop __tmp_reg__
 3118 0098 0F90      		pop __tmp_reg__
 3119 009a 0F90      		pop __tmp_reg__
 3120 009c DF91      		pop r29
 3121 009e CF91      		pop r28
 3122 00a0 0895      		ret
 3123               		.cfi_endproc
 3124               	.LFE44:
 3126               		.section	.progmem.data.display_normal.0,"a"
 3129               	display_normal.0:
 3130 0000 00        		.string	""
 3131 0001 A6        		.ascii	"\246"
 3132               		.section	.progmem.data.display_inverted.1,"a"
 3135               	display_inverted.1:
 3136 0000 00        		.string	""
 3137 0001 A7        		.ascii	"\247"
 3138               		.section	.progmem.data.display_scroll_off.2,"a"
 3141               	display_scroll_off.2:
 3142 0000 00        		.string	""
 3143 0001 2E        		.ascii	"."
 3144               		.section	.rodata.scroll_remap.3,"a"
 3147               	scroll_remap.3:
 3148 0000 0704 0500 		.string	"\007\004\005"
 3149 0004 0601 0203 		.ascii	"\006\001\002\003"
 3150               		.section	.progmem.data.display_off.4,"a"
 3153               	display_off.4:
 3154 0000 00        		.string	""
 3155 0001 AE        		.ascii	"\256"
 3156               		.section	.progmem.data.display_on.5,"a"
 3159               	display_on.5:
 3160 0000 00        		.string	""
 3161 0001 AF        		.ascii	"\257"
 3162               		.section	.bss.oled_temp_buffer.6,"aw",@nobits
 3165               	oled_temp_buffer.6:
 3166 0000 0000 0000 		.zero	6
 3166      0000 
 3167               		.section	.rodata.source_map.7,"a"
 3170               	source_map.7:
 3171 0000 00        		.string	""
 3172 0001 0810 18   		.ascii	"\b\020\030"
 3173               		.section	.rodata.target_map.8,"a"
 3176               	target_map.8:
 3177 0000 1810 0800 		.string	"\030\020\b"
 3178               		.section	.bss.temp_buffer.9,"aw",@nobits
 3181               	temp_buffer.9:
 3182 0000 0000 0000 		.zero	32
 3182      0000 0000 
 3182      0000 0000 
 3182      0000 0000 
 3182      0000 0000 
 3183               		.section	.data.display_start.10,"aw"
 3186               	display_start.10:
 3187 0000 00        		.string	""
 3188 0001 2100      		.string	"!"
 3189 0003 7F22 00   		.string	"\177\""
 3190 0006 03        		.ascii	"\003"
 3191               		.section	.progmem.data.display_setup2.11,"a"
 3194               	display_setup2.11:
 3195 0000 00        		.string	""
 3196 0001 DA02 81FF 		.ascii	"\332\002\201\377\331\361\333 \244\246.\257"
 3196      D9F1 DB20 
 3196      A4A6 2EAF 
 3197               		.section	.progmem.data.display_flipped.12,"a"
 3200               	display_flipped.12:
 3201 0000 00        		.string	""
 3202 0001 A0C0      		.ascii	"\240\300"
 3203               		.section	.progmem.data.display_normal.13,"a"
 3206               	display_normal.13:
 3207 0000 00        		.string	""
 3208 0001 A1C8      		.ascii	"\241\310"
 3209               		.section	.progmem.data.display_setup1.14,"a"
 3212               	display_setup1.14:
 3213 0000 00        		.string	""
 3214 0001 AED5 80A8 		.string	"\256\325\200\250\037\323"
 3214      1FD3 00
 3215 0008 408D 1420 		.string	"@\215\024 "
 3215      00
 3216               		.comm	oled_update_timeout,2,1
 3217               		.comm	oled_timeout,4,1
 3218               	.global	oled_scroll_end
 3219               		.section	.data.oled_scroll_end,"aw"
 3222               	oled_scroll_end:
 3223 0000 07        		.byte	7
 3224               	.global	oled_scroll_start
 3225               		.section	.bss.oled_scroll_start,"aw",@nobits
 3228               	oled_scroll_start:
 3229 0000 00        		.zero	1
 3230               	.global	oled_scroll_speed
 3231               		.section	.bss.oled_scroll_speed,"aw",@nobits
 3234               	oled_scroll_speed:
 3235 0000 00        		.zero	1
 3236               	.global	oled_rotation_width
 3237               		.section	.bss.oled_rotation_width,"aw",@nobits
 3240               	oled_rotation_width:
 3241 0000 00        		.zero	1
 3242               	.global	oled_rotation
 3243               		.section	.bss.oled_rotation,"aw",@nobits
 3246               	oled_rotation:
 3247 0000 00        		.zero	1
 3248               	.global	oled_brightness
 3249               		.section	.data.oled_brightness,"aw"
 3252               	oled_brightness:
 3253 0000 FF        		.byte	-1
 3254               	.global	oled_inverted
 3255               		.section	.bss.oled_inverted,"aw",@nobits
 3258               	oled_inverted:
 3259 0000 00        		.zero	1
 3260               	.global	oled_scrolling
 3261               		.section	.bss.oled_scrolling,"aw",@nobits
 3264               	oled_scrolling:
 3265 0000 00        		.zero	1
 3266               	.global	oled_active
 3267               		.section	.bss.oled_active,"aw",@nobits
 3270               	oled_active:
 3271 0000 00        		.zero	1
 3272               	.global	oled_initialized
 3273               		.section	.bss.oled_initialized,"aw",@nobits
 3276               	oled_initialized:
 3277 0000 00        		.zero	1
 3278               	.global	oled_dirty
 3279               		.section	.bss.oled_dirty,"aw",@nobits
 3282               	oled_dirty:
 3283 0000 0000      		.zero	2
 3284               		.comm	oled_cursor,2,1
 3285               		.comm	oled_buffer,512,1
 3286               		.section	.progmem.data.font,"a"
 3289               	font:
 3290 0000 0708 7F08 		.string	"\007\b\177\b\007"
 3290      0700 
 3291 0006 3E5B 4F5B 		.string	">[O[>"
 3291      3E00 
 3292 000c 3E6B 4F6B 		.string	">kOk>"
 3292      3E00 
 3293 0012 1C3E 7C3E 		.string	"\034>|>\034"
 3293      1C00 
 3294 0018 183C 7E3C 		.string	"\030<~<\030"
 3294      1800 
 3295 001e 1C57 7D57 		.string	"\034W}W\034"
 3295      1C00 
 3296 0024 1C5E 7F5E 		.string	"\034^\177^\034"
 3296      1C00 
 3297 002a 00        		.string	""
 3298 002b 183C 1800 		.string	"\030<\030"
 3299 002f 00        		.string	""
 3300 0030 FFE7 C3E7 		.string	"\377\347\303\347\377"
 3300      FF00 
 3301 0036 00        		.string	""
 3302 0037 1824 1800 		.string	"\030$\030"
 3303 003b 00        		.string	""
 3304 003c FFE7 DBE7 		.string	"\377\347\333\347\377"
 3304      FF00 
 3305 0042 3048 3A06 		.string	"0H:\006\016"
 3305      0E00 
 3306 0048 2629 7929 		.string	"&)y)&"
 3306      2600 
 3307 004e 407F 0505 		.string	"@\177\005\005\007"
 3307      0700 
 3308 0054 407F 0525 		.string	"@\177\005%?"
 3308      3F00 
 3309 005a 5A3C E73C 		.string	"Z<\347<Z"
 3309      5A00 
 3310 0060 7F3E 1C1C 		.string	"\177>\034\034\b"
 3310      0800 
 3311 0066 081C 1C3E 		.string	"\b\034\034>\177"
 3311      7F00 
 3312 006c 1422 7F22 		.string	"\024\"\177\"\024"
 3312      1400 
 3313 0072 5F5F 00   		.string	"__"
 3314 0075 5F5F 00   		.string	"__"
 3315 0078 0609 7F01 		.string	"\006\t\177\001\177"
 3315      7F00 
 3316 007e 00        		.string	""
 3317 007f 6689 956A 		.string	"f\211\225j"
 3317      00
 3318 0084 6060 6060 		.string	"`````"
 3318      6000 
 3319 008a 94A2 FFA2 		.string	"\224\242\377\242\224"
 3319      9400 
 3320 0090 0804 7E04 		.string	"\b\004~\004\b"
 3320      0800 
 3321 0096 1020 7E20 		.string	"\020 ~ \020"
 3321      1000 
 3322 009c 0808 2A1C 		.string	"\b\b*\034\b"
 3322      0800 
 3323 00a2 081C 2A08 		.string	"\b\034*\b\b"
 3323      0800 
 3324 00a8 1E10 1010 		.string	"\036\020\020\020\020"
 3324      1000 
 3325 00ae 0C1E 0C1E 		.string	"\f\036\f\036\f"
 3325      0C00 
 3326 00b4 3038 3E38 		.string	"08>80"
 3326      3000 
 3327 00ba 060E 3E0E 		.string	"\006\016>\016\006"
 3327      0600 
 3328 00c0 00        		.string	""
 3329 00c1 00        		.string	""
 3330 00c2 00        		.string	""
 3331 00c3 00        		.string	""
 3332 00c4 00        		.string	""
 3333 00c5 00        		.string	""
 3334 00c6 00        		.string	""
 3335 00c7 00        		.string	""
 3336 00c8 5F00      		.string	"_"
 3337 00ca 00        		.string	""
 3338 00cb 00        		.string	""
 3339 00cc 00        		.string	""
 3340 00cd 0700      		.string	"\007"
 3341 00cf 0700      		.string	"\007"
 3342 00d1 00        		.string	""
 3343 00d2 147F 147F 		.string	"\024\177\024\177\024"
 3343      1400 
 3344 00d8 242A 7F2A 		.string	"$*\177*\022"
 3344      1200 
 3345 00de 2313 0864 		.string	"#\023\bdb"
 3345      6200 
 3346 00e4 3649 5620 		.string	"6IV P"
 3346      5000 
 3347 00ea 00        		.string	""
 3348 00eb 0807 0300 		.string	"\b\007\003"
 3349 00ef 00        		.string	""
 3350 00f0 00        		.string	""
 3351 00f1 1C22 4100 		.string	"\034\"A"
 3352 00f5 00        		.string	""
 3353 00f6 00        		.string	""
 3354 00f7 4122 1C00 		.string	"A\"\034"
 3355 00fb 00        		.string	""
 3356 00fc 2A1C 7F1C 		.string	"*\034\177\034*"
 3356      2A00 
 3357 0102 0808 3E08 		.string	"\b\b>\b\b"
 3357      0800 
 3358 0108 00        		.string	""
 3359 0109 8070 3000 		.string	"\200p0"
 3360 010d 00        		.string	""
 3361 010e 0808 0808 		.string	"\b\b\b\b\b"
 3361      0800 
 3362 0114 00        		.string	""
 3363 0115 00        		.string	""
 3364 0116 6060 00   		.string	"``"
 3365 0119 00        		.string	""
 3366 011a 2010 0804 		.string	" \020\b\004\002"
 3366      0200 
 3367 0120 3E51 4945 		.string	">QIE>"
 3367      3E00 
 3368 0126 00        		.string	""
 3369 0127 427F 4000 		.string	"B\177@"
 3370 012b 00        		.string	""
 3371 012c 7249 4949 		.string	"rIIIF"
 3371      4600 
 3372 0132 2141 494D 		.string	"!AIM3"
 3372      3300 
 3373 0138 1814 127F 		.string	"\030\024\022\177\020"
 3373      1000 
 3374 013e 2745 4545 		.string	"'EEE9"
 3374      3900 
 3375 0144 3C4A 4949 		.string	"<JII1"
 3375      3100 
 3376 014a 4121 1109 		.string	"A!\021\t\007"
 3376      0700 
 3377 0150 3649 4949 		.string	"6III6"
 3377      3600 
 3378 0156 4649 4929 		.string	"FII)\036"
 3378      1E00 
 3379 015c 00        		.string	""
 3380 015d 00        		.string	""
 3381 015e 1400      		.string	"\024"
 3382 0160 00        		.string	""
 3383 0161 00        		.string	""
 3384 0162 00        		.string	""
 3385 0163 4034 00   		.string	"@4"
 3386 0166 00        		.string	""
 3387 0167 00        		.string	""
 3388 0168 00        		.string	""
 3389 0169 0814 2241 		.string	"\b\024\"A"
 3389      00
 3390 016e 1414 1414 		.string	"\024\024\024\024\024"
 3390      1400 
 3391 0174 00        		.string	""
 3392 0175 4122 1408 		.string	"A\"\024\b"
 3392      00
 3393 017a 0201 5909 		.string	"\002\001Y\t\006"
 3393      0600 
 3394 0180 3E41 5D59 		.string	">A]YN"
 3394      4E00 
 3395 0186 7C12 1112 		.string	"|\022\021\022|"
 3395      7C00 
 3396 018c 7F49 4949 		.string	"\177III6"
 3396      3600 
 3397 0192 3E41 4141 		.string	">AAA\""
 3397      2200 
 3398 0198 7F41 4141 		.string	"\177AAA>"
 3398      3E00 
 3399 019e 7F49 4949 		.string	"\177IIIA"
 3399      4100 
 3400 01a4 7F09 0909 		.string	"\177\t\t\t\001"
 3400      0100 
 3401 01aa 3E41 4151 		.string	">AAQs"
 3401      7300 
 3402 01b0 7F08 0808 		.string	"\177\b\b\b\177"
 3402      7F00 
 3403 01b6 00        		.string	""
 3404 01b7 417F 4100 		.string	"A\177A"
 3405 01bb 00        		.string	""
 3406 01bc 2040 413F 		.string	" @A?\001"
 3406      0100 
 3407 01c2 7F08 1422 		.string	"\177\b\024\"A"
 3407      4100 
 3408 01c8 7F40 4040 		.string	"\177@@@@"
 3408      4000 
 3409 01ce 7F02 1C02 		.string	"\177\002\034\002\177"
 3409      7F00 
 3410 01d4 7F04 0810 		.string	"\177\004\b\020\177"
 3410      7F00 
 3411 01da 3E41 4141 		.string	">AAA>"
 3411      3E00 
 3412 01e0 7F09 0909 		.string	"\177\t\t\t\006"
 3412      0600 
 3413 01e6 3E41 5121 		.string	">AQ!^"
 3413      5E00 
 3414 01ec 7F09 1929 		.string	"\177\t\031)F"
 3414      4600 
 3415 01f2 2649 4949 		.string	"&III2"
 3415      3200 
 3416 01f8 0301 7F01 		.string	"\003\001\177\001\003"
 3416      0300 
 3417 01fe 3F40 4040 		.string	"?@@@?"
 3417      3F00 
 3418 0204 1F20 4020 		.string	"\037 @ \037"
 3418      1F00 
 3419 020a 3F40 3840 		.string	"?@8@?"
 3419      3F00 
 3420 0210 6314 0814 		.string	"c\024\b\024c"
 3420      6300 
 3421 0216 0304 7804 		.string	"\003\004x\004\003"
 3421      0300 
 3422 021c 6159 494D 		.string	"aYIMC"
 3422      4300 
 3423 0222 00        		.string	""
 3424 0223 7F41 4141 		.string	"\177AAA"
 3424      00
 3425 0228 0204 0810 		.string	"\002\004\b\020 "
 3425      2000 
 3426 022e 00        		.string	""
 3427 022f 4141 417F 		.string	"AAA\177"
 3427      00
 3428 0234 0402 0102 		.string	"\004\002\001\002\004"
 3428      0400 
 3429 023a 4040 4040 		.string	"@@@@@"
 3429      4000 
 3430 0240 00        		.string	""
 3431 0241 0307 0800 		.string	"\003\007\b"
 3432 0245 00        		.string	""
 3433 0246 2054 5478 		.string	" TTx@"
 3433      4000 
 3434 024c 7F28 4444 		.string	"\177(DD8"
 3434      3800 
 3435 0252 3844 4444 		.string	"8DDD("
 3435      2800 
 3436 0258 3844 4428 		.string	"8DD(\177"
 3436      7F00 
 3437 025e 3854 5454 		.string	"8TTT\030"
 3437      1800 
 3438 0264 00        		.string	""
 3439 0265 087E 0902 		.string	"\b~\t\002"
 3439      00
 3440 026a 18A4 A49C 		.string	"\030\244\244\234x"
 3440      7800 
 3441 0270 7F08 0404 		.string	"\177\b\004\004x"
 3441      7800 
 3442 0276 00        		.string	""
 3443 0277 447D 4000 		.string	"D}@"
 3444 027b 00        		.string	""
 3445 027c 2040 403D 		.string	" @@="
 3445      00
 3446 0281 00        		.string	""
 3447 0282 7F10 2844 		.string	"\177\020(D"
 3447      00
 3448 0287 00        		.string	""
 3449 0288 00        		.string	""
 3450 0289 417F 4000 		.string	"A\177@"
 3451 028d 00        		.string	""
 3452 028e 7C04 7804 		.string	"|\004x\004x"
 3452      7800 
 3453 0294 7C08 0404 		.string	"|\b\004\004x"
 3453      7800 
 3454 029a 3844 4444 		.string	"8DDD8"
 3454      3800 
 3455 02a0 FC18 2424 		.string	"\374\030$$\030"
 3455      1800 
 3456 02a6 1824 2418 		.string	"\030$$\030\374"
 3456      FC00 
 3457 02ac 7C08 0404 		.string	"|\b\004\004\b"
 3457      0800 
 3458 02b2 4854 5454 		.string	"HTTT$"
 3458      2400 
 3459 02b8 0404 3F44 		.string	"\004\004?D$"
 3459      2400 
 3460 02be 3C40 4020 		.string	"<@@ |"
 3460      7C00 
 3461 02c4 1C20 4020 		.string	"\034 @ \034"
 3461      1C00 
 3462 02ca 3C40 3040 		.string	"<@0@<"
 3462      3C00 
 3463 02d0 4428 1028 		.string	"D(\020(D"
 3463      4400 
 3464 02d6 4C90 9090 		.string	"L\220\220\220|"
 3464      7C00 
 3465 02dc 4464 544C 		.string	"DdTLD"
 3465      4400 
 3466 02e2 00        		.string	""
 3467 02e3 0836 4100 		.string	"\b6A"
 3468 02e7 00        		.string	""
 3469 02e8 00        		.string	""
 3470 02e9 00        		.string	""
 3471 02ea 7700      		.string	"w"
 3472 02ec 00        		.string	""
 3473 02ed 00        		.string	""
 3474 02ee 00        		.string	""
 3475 02ef 4136 0800 		.string	"A6\b"
 3476 02f3 00        		.string	""
 3477 02f4 0201 0204 		.string	"\002\001\002\004\002"
 3477      0200 
 3478 02fa 3C26 2326 		.string	"<&#&<"
 3478      3C00 
 3479 0300 00        		.string	""
 3480 0301 00        		.string	""
 3481 0302 00        		.string	""
 3482 0303 00        		.string	""
 3483 0304 00        		.string	""
 3484 0305 00        		.string	""
 3485 0306 4040 40F0 		.string	"@@@\360\370\370\3778\377\370\370?\370\370\3778\377\370\370\360@@@"
 3485      F8F8 FF38 
 3485      FFF8 F83F 
 3485      F8F8 FF38 
 3485      FFF8 F8F0 
 3486 031e 00        		.string	""
 3487 031f 00        		.string	""
 3488 0320 00        		.string	""
 3489 0321 00        		.string	""
 3490 0322 00        		.string	""
 3491 0323 80C0 C0C0 		.string	"\200\300\300\300\200"
 3491      8000 
 3492 0329 00        		.string	""
 3493 032a C0C0 8000 		.string	"\300\300\200"
 3494 032e 00        		.string	""
 3495 032f 00        		.string	""
 3496 0330 80C0 C000 		.string	"\200\300\300"
 3497 0334 C0C0 00   		.string	"\300\300"
 3498 0337 00        		.string	""
 3499 0338 80C0 C000 		.string	"\200\300\300"
 3500 033c 00        		.string	""
 3501 033d 00        		.string	""
 3502 033e 00        		.string	""
 3503 033f 00        		.string	""
 3504 0340 C0C0 C0C0 		.string	"\300\300\300\300\300"
 3504      C000 
 3505 0346 C0C0 00   		.string	"\300\300"
 3506 0349 00        		.string	""
 3507 034a 00        		.string	""
 3508 034b 00        		.string	""
 3509 034c 00        		.string	""
 3510 034d 00        		.string	""
 3511 034e 00        		.string	""
 3512 034f 00        		.string	""
 3513 0350 00        		.string	""
 3514 0351 00        		.string	""
 3515 0352 00        		.string	""
 3516 0353 00        		.string	""
 3517 0354 00        		.string	""
 3518 0355 00        		.string	""
 3519 0356 00        		.string	""
 3520 0357 00        		.string	""
 3521 0358 00        		.string	""
 3522 0359 00        		.string	""
 3523 035a 00        		.string	""
 3524 035b 00        		.string	""
 3525 035c 00        		.string	""
 3526 035d 00        		.string	""
 3527 035e 00        		.string	""
 3528 035f 00        		.string	""
 3529 0360 00        		.string	""
 3530 0361 00        		.string	""
 3531 0362 00        		.string	""
 3532 0363 00        		.string	""
 3533 0364 00        		.string	""
 3534 0365 00        		.string	""
 3535 0366 00        		.string	""
 3536 0367 00        		.string	""
 3537 0368 00        		.string	""
 3538 0369 00        		.string	""
 3539 036a 00        		.string	""
 3540 036b 00        		.string	""
 3541 036c 00        		.string	""
 3542 036d 00        		.string	""
 3543 036e 00        		.string	""
 3544 036f 00        		.string	""
 3545 0370 00        		.string	""
 3546 0371 00        		.string	""
 3547 0372 00        		.string	""
 3548 0373 00        		.string	""
 3549 0374 00        		.string	""
 3550 0375 00        		.string	""
 3551 0376 00        		.string	""
 3552 0377 00        		.string	""
 3553 0378 00        		.string	""
 3554 0379 00        		.string	""
 3555 037a 00        		.string	""
 3556 037b 00        		.string	""
 3557 037c 00        		.string	""
 3558 037d 00        		.string	""
 3559 037e 00        		.string	""
 3560 037f C0F0 F8FC 		.string	"\300\360\370\374>\036\006\001"
 3560      3E1E 0601 
 3560      00
 3561 0388 00        		.string	""
 3562 0389 00        		.string	""
 3563 038a 7F41 4141 		.string	"\177AAA\177"
 3563      7F00 
 3564 0390 7F41 4141 		.string	"\177AAA\177"
 3564      7F00 
 3565 0396 00        		.string	""
 3566 0397 80C0 E07E 		.string	"\200\300\340~[O[\376\300"
 3566      5B4F 5BFE 
 3566      C000 
 3567 03a1 00        		.string	""
 3568 03a2 C000      		.string	"\300"
 3569 03a4 DCD7 DEDE 		.string	"\334\327\336\336\336\327\334"
 3569      DED7 DC00 
 3570 03ac C000      		.string	"\300"
 3571 03ae 00        		.string	""
 3572 03af 00        		.string	""
 3573 03b0 00        		.string	""
 3574 03b1 00        		.string	""
 3575 03b2 00        		.string	""
 3576 03b3 00        		.string	""
 3577 03b4 00        		.string	""
 3578 03b5 00        		.string	""
 3579 03b6 00        		.string	""
 3580 03b7 00        		.string	""
 3581 03b8 00        		.string	""
 3582 03b9 00        		.string	""
 3583 03ba 00        		.string	""
 3584 03bb 00        		.string	""
 3585 03bc 00        		.string	""
 3586 03bd 00        		.string	""
 3587 03be 00        		.string	""
 3588 03bf 00        		.string	""
 3589 03c0 00        		.string	""
 3590 03c1 00        		.string	""
 3591 03c2 00        		.string	""
 3592 03c3 00        		.string	""
 3593 03c4 00        		.string	""
 3594 03c5 00        		.string	""
 3595 03c6 4949 49FF 		.string	"III\377\377\377\377\340\337\277\277"
 3595      FFFF FFE0 
 3595      DFBF BF00 
 3596 03d2 BFBF DFE0 		.string	"\277\277\337\340\377\377\377\377III"
 3596      FFFF FFFF 
 3596      4949 4900 
 3597 03de 00        		.string	""
 3598 03df 00        		.string	""
 3599 03e0 00        		.string	""
 3600 03e1 00        		.string	""
 3601 03e2 1F3F 6060 		.string	"\037?``\340\277\037"
 3601      E0BF 1F00 
 3602 03ea 7F7F 071E 		.string	"\177\177\007\0368\036\007\177\177"
 3602      381E 077F 
 3602      7F00 
 3603 03f4 7F7F 0E1F 		.string	"\177\177\016\037;q`"
 3603      3B71 6000 
 3604 03fc 00        		.string	""
 3605 03fd 00        		.string	""
 3606 03fe 00        		.string	""
 3607 03ff 00        		.string	""
 3608 0400 7F7F 0C0C 		.string	"\177\177\f\f\f"
 3608      0C00 
 3609 0406 7E7E 00   		.string	"~~"
 3610 0409 7F7E 0303 		.string	"\177~\003\003"
 3610      00
 3611 040e 7F7E 0303 		.string	"\177~\003\003~~\003\003\177~"
 3611      7E7E 0303 
 3611      7F7E 00
 3612 0419 0F3E 703C 		.string	"\017>p<\006<p>\017"
 3612      063C 703E 
 3612      0F00 
 3613 0423 327B 4949 		.string	"2{II?~"
 3613      3F7E 00
 3614 042a 7F7E 0303 		.string	"\177~\003\003"
 3614      00
 3615 042f 1E3F 6969 		.string	"\036?iio&"
 3615      6F26 00
 3616 0436 00        		.string	""
 3617 0437 00        		.string	""
 3618 0438 00        		.string	""
 3619 0439 00        		.string	""
 3620 043a 00        		.string	""
 3621 043b 00        		.string	""
 3622 043c 00        		.string	""
 3623 043d 00        		.string	""
 3624 043e 00        		.string	""
 3625 043f 030F 1F3F 		.string	"\003\017\037?<xp`"
 3625      3C78 7060 
 3625      00
 3626 0448 00        		.string	""
 3627 0449 00        		.string	""
 3628 044a 7F41 4141 		.string	"\177AAA\177"
 3628      7F00 
 3629 0450 7F41 4141 		.string	"\177AAA\177"
 3629      7F00 
 3630 0456 307B 7F78 		.string	"0{\177x0  0x\177;"
 3630      3020 2030 
 3630      787F 3B00 
 3631 0462 0300      		.string	"\003"
 3632 0464 0F7F 0F0F 		.string	"\017\177\017\017\017\177\017"
 3632      0F7F 0F00 
 3633 046c 0300      		.string	"\003"
 3634 046e 00        		.string	""
 3635 046f 00        		.string	""
 3636 0470 00        		.string	""
 3637 0471 00        		.string	""
 3638 0472 00        		.string	""
 3639 0473 00        		.string	""
 3640 0474 00        		.string	""
 3641 0475 00        		.string	""
 3642 0476 00        		.string	""
 3643 0477 00        		.string	""
 3644 0478 00        		.string	""
 3645 0479 00        		.string	""
 3646 047a 00        		.string	""
 3647 047b 00        		.string	""
 3648 047c 00        		.string	""
 3649 047d 00        		.string	""
 3650 047e 00        		.string	""
 3651 047f 00        		.string	""
 3652 0480 00        		.string	""
 3653 0481 00        		.string	""
 3654 0482 00        		.string	""
 3655 0483 00        		.string	""
 3656 0484 00        		.string	""
 3657 0485 00        		.string	""
 3658 0486 0101 0107 		.string	"\001\001\001\007\017\017\177\017\177\017\017~\017\017\177\017\177\017\017\007\001\001\001
 3658      0F0F 7F0F 
 3658      7F0F 0F7E 
 3658      0F0F 7F0F 
 3658      7F0F 0F07 
 3659 049e 00        		.string	""
 3660 049f 00        		.string	""
 3661 04a0 00        		.string	""
 3662 04a1 00        		.string	""
 3663 04a2 00        		.string	""
 3664 04a3 00        		.string	""
 3665 04a4 00        		.string	""
 3666 04a5 00        		.string	""
 3667 04a6 00        		.string	""
 3668 04a7 0101 00   		.string	"\001\001"
 3669 04aa 00        		.string	""
 3670 04ab 00        		.string	""
 3671 04ac 00        		.string	""
 3672 04ad 00        		.string	""
 3673 04ae 00        		.string	""
 3674 04af 00        		.string	""
 3675 04b0 00        		.string	""
 3676 04b1 00        		.string	""
 3677 04b2 00        		.string	""
 3678 04b3 00        		.string	""
 3679 04b4 00        		.string	""
 3680 04b5 00        		.string	""
 3681 04b6 00        		.string	""
 3682 04b7 00        		.string	""
 3683 04b8 00        		.string	""
 3684 04b9 00        		.string	""
 3685 04ba 00        		.string	""
 3686 04bb 00        		.string	""
 3687 04bc 00        		.string	""
 3688 04bd 00        		.string	""
 3689 04be 00        		.string	""
 3690 04bf 00        		.string	""
 3691 04c0 00        		.string	""
 3692 04c1 00        		.string	""
 3693 04c2 00        		.string	""
 3694 04c3 00        		.string	""
 3695 04c4 00        		.string	""
 3696 04c5 00        		.string	""
 3697 04c6 00        		.string	""
 3698 04c7 00        		.string	""
 3699 04c8 00        		.string	""
 3700 04c9 00        		.string	""
 3701 04ca 00        		.string	""
 3702 04cb 00        		.string	""
 3703 04cc 00        		.string	""
 3704 04cd 00        		.string	""
 3705 04ce 00        		.string	""
 3706 04cf 00        		.string	""
 3707 04d0 00        		.string	""
 3708 04d1 00        		.string	""
 3709 04d2 00        		.string	""
 3710 04d3 00        		.string	""
 3711 04d4 00        		.string	""
 3712 04d5 00        		.string	""
 3713 04d6 00        		.string	""
 3714 04d7 00        		.string	""
 3715 04d8 00        		.string	""
 3716 04d9 00        		.string	""
 3717 04da 00        		.string	""
 3718 04db 00        		.string	""
 3719 04dc 00        		.string	""
 3720 04dd 00        		.string	""
 3721 04de 00        		.string	""
 3722 04df 00        		.string	""
 3723 04e0 00        		.string	""
 3724 04e1 00        		.string	""
 3725 04e2 00        		.string	""
 3726 04e3 00        		.string	""
 3727 04e4 00        		.string	""
 3728 04e5 00        		.string	""
 3729 04e6 00        		.string	""
 3730 04e7 00        		.string	""
 3731 04e8 00        		.string	""
 3732 04e9 00        		.string	""
 3733 04ea 00        		.string	""
 3734 04eb 00        		.string	""
 3735 04ec 00        		.string	""
 3736 04ed 00        		.string	""
 3737 04ee 00        		.string	""
 3738 04ef 00        		.string	""
 3739 04f0 00        		.string	""
 3740 04f1 00        		.string	""
 3741 04f2 00        		.string	""
 3742 04f3 00        		.string	""
 3743 04f4 00        		.string	""
 3744 04f5 00        		.string	""
 3745 04f6 00        		.string	""
 3746 04f7 00        		.string	""
 3747 04f8 00        		.string	""
 3748 04f9 00        		.string	""
 3749 04fa 00        		.string	""
 3750 04fb 00        		.string	""
 3751 04fc 00        		.string	""
 3752 04fd 00        		.string	""
 3753 04fe 00        		.string	""
 3754 04ff 00        		.string	""
 3755 0500 00        		.string	""
 3756 0501 00        		.string	""
 3757 0502 00        		.string	""
 3758 0503 00        		.string	""
 3759 0504 00        		.string	""
 3760 0505 00        		.string	""
 3761 0506 00        		.string	""
 3762 0507 00        		.string	""
 3763 0508 00        		.string	""
 3764 0509 00        		.string	""
 3765 050a 00        		.string	""
 3766 050b 00        		.string	""
 3767 050c 00        		.string	""
 3768 050d 00        		.string	""
 3769 050e 00        		.string	""
 3770 050f 00        		.string	""
 3771 0510 00        		.string	""
 3772 0511 00        		.string	""
 3773 0512 00        		.string	""
 3774 0513 00        		.string	""
 3775 0514 00        		.string	""
 3776 0515 00        		.string	""
 3777 0516 00        		.string	""
 3778 0517 00        		.string	""
 3779 0518 00        		.string	""
 3780 0519 00        		.string	""
 3781 051a 00        		.string	""
 3782 051b 00        		.string	""
 3783 051c 00        		.string	""
 3784 051d 00        		.string	""
 3785 051e 00        		.string	""
 3786 051f 00        		.string	""
 3787 0520 00        		.string	""
 3788 0521 00        		.string	""
 3789 0522 00        		.string	""
 3790 0523 00        		.string	""
 3791 0524 00        		.string	""
 3792 0525 00        		.string	""
 3793 0526 00        		.string	""
 3794 0527 00        		.string	""
 3795 0528 00        		.string	""
 3796 0529 00        		.string	""
 3797 052a 00        		.string	""
 3798 052b 00        		.string	""
 3799 052c 00        		.string	""
 3800 052d 00        		.string	""
 3801 052e 00        		.string	""
 3802 052f 00        		.string	""
 3803 0530 00        		.string	""
 3804 0531 00        		.string	""
 3805 0532 00        		.string	""
 3806 0533 00        		.string	""
 3807 0534 00        		.string	""
 3808 0535 00        		.string	""
 3809 0536 00        		.string	""
 3810 0537 00        		.string	""
 3811 0538 00        		.string	""
 3812 0539 00        		.string	""
 3813 053a 00        		.string	""
 3814 053b 00        		.string	""
 3815 053c 00        		.string	""
 3816 053d 00        		.string	""
 3817 053e 00        		.string	""
 3818 053f 00        		.string	""
 3819               		.text
 3820               	.Letext0:
 3821               		.file 2 "/usr/avr/include/stdint.h"
 3822               		.file 3 "platforms/avr/drivers/i2c_master.h"
 3823               		.file 4 "drivers/oled/oled_driver.h"
 3824               		.file 5 "/usr/lib/gcc/avr/11.3.0/include/stddef.h"
 3825               		.file 6 "tmk_core/common/timer.h"
 3826               		.file 7 "/usr/avr/include/string.h"
 3827               		.file 8 "/usr/avr/include/avr/pgmspace.h"
 3828               		.file 9 "drivers/oled/glcdfont.c"
 3829               		.file 10 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ssd1306_sh1106.c
     /tmp/ccgxpJRm.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccgxpJRm.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccgxpJRm.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccgxpJRm.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccgxpJRm.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccgxpJRm.s:12     .text.i2c_transmit_P.constprop.0:0000000000000000 i2c_transmit_P.constprop.0
     /tmp/ccgxpJRm.s:149    .text.oled_init_user:0000000000000000 oled_init_user
     /tmp/ccgxpJRm.s:168    .text.oled_clear:0000000000000000 oled_clear
                            *COM*:0000000000000200 oled_buffer
                            *COM*:0000000000000002 oled_cursor
     /tmp/ccgxpJRm.s:3282   .bss.oled_dirty:0000000000000000 oled_dirty
     /tmp/ccgxpJRm.s:207    .text.oled_init:0000000000000000 oled_init
     /tmp/ccgxpJRm.s:3246   .bss.oled_rotation:0000000000000000 oled_rotation
     /tmp/ccgxpJRm.s:3240   .bss.oled_rotation_width:0000000000000000 oled_rotation_width
     /tmp/ccgxpJRm.s:3212   .progmem.data.display_setup1.14:0000000000000000 display_setup1.14
     /tmp/ccgxpJRm.s:3206   .progmem.data.display_normal.13:0000000000000000 display_normal.13
     /tmp/ccgxpJRm.s:3194   .progmem.data.display_setup2.11:0000000000000000 display_setup2.11
                            *COM*:0000000000000004 oled_timeout
     /tmp/ccgxpJRm.s:3276   .bss.oled_initialized:0000000000000000 oled_initialized
     /tmp/ccgxpJRm.s:3270   .bss.oled_active:0000000000000000 oled_active
     /tmp/ccgxpJRm.s:3264   .bss.oled_scrolling:0000000000000000 oled_scrolling
     /tmp/ccgxpJRm.s:3200   .progmem.data.display_flipped.12:0000000000000000 display_flipped.12
     /tmp/ccgxpJRm.s:362    .text.crot:0000000000000000 crot
     /tmp/ccgxpJRm.s:416    .text.oled_set_cursor:0000000000000000 oled_set_cursor
     /tmp/ccgxpJRm.s:467    .text.oled_advance_char:0000000000000000 oled_advance_char
     /tmp/ccgxpJRm.s:532    .text.oled_write_char:0000000000000000 oled_write_char
     /tmp/ccgxpJRm.s:762    .text.oled_advance_page:0000000000000000 oled_advance_page
     /tmp/ccgxpJRm.s:3165   .bss.oled_temp_buffer.6:0000000000000000 oled_temp_buffer.6
     /tmp/ccgxpJRm.s:3289   .progmem.data.font:0000000000000000 font
     /tmp/ccgxpJRm.s:868    .text.oled_write:0000000000000000 oled_write
     /tmp/ccgxpJRm.s:950    .text.oled_write_ln:0000000000000000 oled_write_ln
     /tmp/ccgxpJRm.s:972    .text.oled_pan:0000000000000000 oled_pan
     /tmp/ccgxpJRm.s:1070   .text.oled_read_raw:0000000000000000 oled_read_raw
     /tmp/ccgxpJRm.s:1148   .text.oled_write_raw_byte:0000000000000000 oled_write_raw_byte
     /tmp/ccgxpJRm.s:1218   .text.oled_write_raw:0000000000000000 oled_write_raw
     /tmp/ccgxpJRm.s:1350   .text.oled_write_pixel:0000000000000000 oled_write_pixel
     /tmp/ccgxpJRm.s:1464   .text.oled_write_P:0000000000000000 oled_write_P
     /tmp/ccgxpJRm.s:1544   .text.oled_write_ln_P:0000000000000000 oled_write_ln_P
     /tmp/ccgxpJRm.s:1566   .text.oled_write_raw_P:0000000000000000 oled_write_raw_P
     /tmp/ccgxpJRm.s:1724   .text.oled_on:0000000000000000 oled_on
     /tmp/ccgxpJRm.s:3159   .progmem.data.display_on.5:0000000000000000 display_on.5
     /tmp/ccgxpJRm.s:1811   .text.oled_render:0000000000000000 oled_render
     /tmp/ccgxpJRm.s:3186   .data.display_start.10:0000000000000000 display_start.10
     /tmp/ccgxpJRm.s:3181   .bss.temp_buffer.9:0000000000000000 temp_buffer.9
     /tmp/ccgxpJRm.s:3176   .rodata.target_map.8:0000000000000000 target_map.8
     /tmp/ccgxpJRm.s:3170   .rodata.source_map.7:0000000000000000 source_map.7
     /tmp/ccgxpJRm.s:2308   .text.oled_off:0000000000000000 oled_off
     /tmp/ccgxpJRm.s:3153   .progmem.data.display_off.4:0000000000000000 display_off.4
     /tmp/ccgxpJRm.s:2366   .text.is_oled_on:0000000000000000 is_oled_on
     /tmp/ccgxpJRm.s:2385   .text.oled_set_brightness:0000000000000000 oled_set_brightness
     /tmp/ccgxpJRm.s:3252   .data.oled_brightness:0000000000000000 oled_brightness
     /tmp/ccgxpJRm.s:2477   .text.oled_get_brightness:0000000000000000 oled_get_brightness
     /tmp/ccgxpJRm.s:2496   .text.oled_scroll_set_area:0000000000000000 oled_scroll_set_area
     /tmp/ccgxpJRm.s:3228   .bss.oled_scroll_start:0000000000000000 oled_scroll_start
     /tmp/ccgxpJRm.s:3222   .data.oled_scroll_end:0000000000000000 oled_scroll_end
     /tmp/ccgxpJRm.s:2520   .text.oled_scroll_set_speed:0000000000000000 oled_scroll_set_speed
     /tmp/ccgxpJRm.s:3147   .rodata.scroll_remap.3:0000000000000000 scroll_remap.3
     /tmp/ccgxpJRm.s:3234   .bss.oled_scroll_speed:0000000000000000 oled_scroll_speed
     /tmp/ccgxpJRm.s:2550   .text.oled_scroll_right:0000000000000000 oled_scroll_right
     /tmp/ccgxpJRm.s:2658   .text.oled_scroll_left:0000000000000000 oled_scroll_left
     /tmp/ccgxpJRm.s:2766   .text.oled_scroll_off:0000000000000000 oled_scroll_off
     /tmp/ccgxpJRm.s:3141   .progmem.data.display_scroll_off.2:0000000000000000 display_scroll_off.2
     /tmp/ccgxpJRm.s:2832   .text.is_oled_scrolling:0000000000000000 is_oled_scrolling
     /tmp/ccgxpJRm.s:2851   .text.oled_invert:0000000000000000 oled_invert
     /tmp/ccgxpJRm.s:3258   .bss.oled_inverted:0000000000000000 oled_inverted
     /tmp/ccgxpJRm.s:3135   .progmem.data.display_inverted.1:0000000000000000 display_inverted.1
     /tmp/ccgxpJRm.s:3129   .progmem.data.display_normal.0:0000000000000000 display_normal.0
     /tmp/ccgxpJRm.s:2938   .text.oled_max_chars:0000000000000000 oled_max_chars
     /tmp/ccgxpJRm.s:2966   .text.oled_max_lines:0000000000000000 oled_max_lines
     /tmp/ccgxpJRm.s:2994   .text.oled_task_user:0000000000000000 oled_task_user
     /tmp/ccgxpJRm.s:3011   .text.oled_task:0000000000000000 oled_task
                            *COM*:0000000000000002 oled_update_timeout

UNDEFINED SYMBOLS
i2c_start
i2c_write
i2c_stop
i2c_init
timer_read32
__udivmodhi4
memcmp
memcpy_P
__udivmodqi4
memmove
i2c_transmit
i2c_writeReg
timer_elapsed
timer_read
__do_copy_data
__do_clear_bss
