   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 2
  15              		.file	"send_string.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "quantum/send_string.c"
  20              		.section	.text.send_char,"ax",%progbits
  21              		.align	1
  22              		.global	send_char
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	send_char:
  28              	.LVL0:
  29              	.LFB300:
   1:quantum/send_string.c **** /* Copyright 2021
   2:quantum/send_string.c ****  *
   3:quantum/send_string.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/send_string.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/send_string.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/send_string.c ****  * (at your option) any later version.
   7:quantum/send_string.c ****  *
   8:quantum/send_string.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/send_string.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/send_string.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/send_string.c ****  * GNU General Public License for more details.
  12:quantum/send_string.c ****  *
  13:quantum/send_string.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/send_string.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/send_string.c ****  */
  16:quantum/send_string.c **** 
  17:quantum/send_string.c **** #include <ctype.h>
  18:quantum/send_string.c **** 
  19:quantum/send_string.c **** #include "quantum.h"
  20:quantum/send_string.c **** 
  21:quantum/send_string.c **** #include "send_string.h"
  22:quantum/send_string.c **** 
  23:quantum/send_string.c **** #if defined(AUDIO_ENABLE) && defined(SENDSTRING_BELL)
  24:quantum/send_string.c **** #    include "audio.h"
  25:quantum/send_string.c **** #    ifndef BELL_SOUND
  26:quantum/send_string.c **** #        define BELL_SOUND TERMINAL_SOUND
  27:quantum/send_string.c **** #    endif
  28:quantum/send_string.c **** float bell_song[][2] = SONG(BELL_SOUND);
  29:quantum/send_string.c **** #endif
  30:quantum/send_string.c **** 
  31:quantum/send_string.c **** // clang-format off
  32:quantum/send_string.c **** 
  33:quantum/send_string.c **** /* Bit-Packed look-up table to convert an ASCII character to whether
  34:quantum/send_string.c ****  * [Shift] needs to be sent with the keycode.
  35:quantum/send_string.c ****  */
  36:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_shift_lut[16] PROGMEM = {
  37:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  38:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  39:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  40:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  41:quantum/send_string.c **** 
  42:quantum/send_string.c ****     KCLUT_ENTRY(0, 1, 1, 1, 1, 1, 1, 0),
  43:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 0, 0, 0, 0),
  44:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  45:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 1, 0, 1, 0, 1, 1),
  46:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 1, 1, 1, 1),
  47:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 1, 1, 1, 1),
  48:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 1, 1, 1, 1),
  49:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 0, 0, 0, 1, 1),
  50:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  51:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  52:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  53:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 1, 1, 1, 1, 0)
  54:quantum/send_string.c **** };
  55:quantum/send_string.c **** 
  56:quantum/send_string.c **** /* Bit-Packed look-up table to convert an ASCII character to whether
  57:quantum/send_string.c ****  * [AltGr] needs to be sent with the keycode.
  58:quantum/send_string.c ****  */
  59:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_altgr_lut[16] PROGMEM = {
  60:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  61:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  62:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  63:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  64:quantum/send_string.c **** 
  65:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  66:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  67:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  68:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  69:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  70:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  71:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  72:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  73:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  74:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  75:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  76:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0)
  77:quantum/send_string.c **** };
  78:quantum/send_string.c **** 
  79:quantum/send_string.c **** /* Bit-Packed look-up table to convert an ASCII character to whether
  80:quantum/send_string.c ****  * [Space] needs to be sent after the keycode
  81:quantum/send_string.c ****  */
  82:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_dead_lut[16] PROGMEM = {
  83:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  84:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  85:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  86:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  87:quantum/send_string.c **** 
  88:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  89:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  90:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  91:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  92:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  93:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  94:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  95:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  96:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  97:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  98:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  99:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0)
 100:quantum/send_string.c **** };
 101:quantum/send_string.c **** 
 102:quantum/send_string.c **** /* Look-up table to convert an ASCII character to a keycode.
 103:quantum/send_string.c ****  */
 104:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_keycode_lut[128] PROGMEM = {
 105:quantum/send_string.c ****     // NUL   SOH      STX      ETX      EOT      ENQ      ACK      BEL
 106:quantum/send_string.c ****     XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 107:quantum/send_string.c ****     // BS    TAB      LF       VT       FF       CR       SO       SI
 108:quantum/send_string.c ****     KC_BSPC, KC_TAB,  KC_ENT,  XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 109:quantum/send_string.c ****     // DLE   DC1      DC2      DC3      DC4      NAK      SYN      ETB
 110:quantum/send_string.c ****     XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 111:quantum/send_string.c ****     // CAN   EM       SUB      ESC      FS       GS       RS       US
 112:quantum/send_string.c ****     XXXXXXX, XXXXXXX, XXXXXXX, KC_ESC,  XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 113:quantum/send_string.c **** 
 114:quantum/send_string.c ****     //       !        "        #        $        %        &        '
 115:quantum/send_string.c ****     KC_SPC,  KC_1,    KC_QUOT, KC_3,    KC_4,    KC_5,    KC_7,    KC_QUOT,
 116:quantum/send_string.c ****     // (     )        *        +        ,        -        .        /
 117:quantum/send_string.c ****     KC_9,    KC_0,    KC_8,    KC_EQL,  KC_COMM, KC_MINS, KC_DOT,  KC_SLSH,
 118:quantum/send_string.c ****     // 0     1        2        3        4        5        6        7
 119:quantum/send_string.c ****     KC_0,    KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,
 120:quantum/send_string.c ****     // 8     9        :        ;        <        =        >        ?
 121:quantum/send_string.c ****     KC_8,    KC_9,    KC_SCLN, KC_SCLN, KC_COMM, KC_EQL,  KC_DOT,  KC_SLSH,
 122:quantum/send_string.c ****     // @     A        B        C        D        E        F        G
 123:quantum/send_string.c ****     KC_2,    KC_A,    KC_B,    KC_C,    KC_D,    KC_E,    KC_F,    KC_G,
 124:quantum/send_string.c ****     // H     I        J        K        L        M        N        O
 125:quantum/send_string.c ****     KC_H,    KC_I,    KC_J,    KC_K,    KC_L,    KC_M,    KC_N,    KC_O,
 126:quantum/send_string.c ****     // P     Q        R        S        T        U        V        W
 127:quantum/send_string.c ****     KC_P,    KC_Q,    KC_R,    KC_S,    KC_T,    KC_U,    KC_V,    KC_W,
 128:quantum/send_string.c ****     // X     Y        Z        [        \        ]        ^        _
 129:quantum/send_string.c ****     KC_X,    KC_Y,    KC_Z,    KC_LBRC, KC_BSLS, KC_RBRC, KC_6,    KC_MINS,
 130:quantum/send_string.c ****     // `     a        b        c        d        e        f        g
 131:quantum/send_string.c ****     KC_GRV,  KC_A,    KC_B,    KC_C,    KC_D,    KC_E,    KC_F,    KC_G,
 132:quantum/send_string.c ****     // h     i        j        k        l        m        n        o
 133:quantum/send_string.c ****     KC_H,    KC_I,    KC_J,    KC_K,    KC_L,    KC_M,    KC_N,    KC_O,
 134:quantum/send_string.c ****     // p     q        r        s        t        u        v        w
 135:quantum/send_string.c ****     KC_P,    KC_Q,    KC_R,    KC_S,    KC_T,    KC_U,    KC_V,    KC_W,
 136:quantum/send_string.c ****     // x     y        z        {        |        }        ~        DEL
 137:quantum/send_string.c ****     KC_X,    KC_Y,    KC_Z,    KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV,  KC_DEL
 138:quantum/send_string.c **** };
 139:quantum/send_string.c **** 
 140:quantum/send_string.c **** // clang-format on
 141:quantum/send_string.c **** 
 142:quantum/send_string.c **** // Note: we bit-pack in "reverse" order to optimize loading
 143:quantum/send_string.c **** #define PGM_LOADBIT(mem, pos) ((pgm_read_byte(&((mem)[(pos) / 8])) >> ((pos) % 8)) & 0x01)
 144:quantum/send_string.c **** 
 145:quantum/send_string.c **** void send_string(const char *str) { send_string_with_delay(str, 0); }
 146:quantum/send_string.c **** 
 147:quantum/send_string.c **** void send_string_P(const char *str) { send_string_with_delay_P(str, 0); }
 148:quantum/send_string.c **** 
 149:quantum/send_string.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 150:quantum/send_string.c ****     while (1) {
 151:quantum/send_string.c ****         char ascii_code = *str;
 152:quantum/send_string.c ****         if (!ascii_code) break;
 153:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 154:quantum/send_string.c ****             ascii_code = *(++str);
 155:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 156:quantum/send_string.c ****                 // tap
 157:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 158:quantum/send_string.c ****                 tap_code(keycode);
 159:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 160:quantum/send_string.c ****                 // down
 161:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 162:quantum/send_string.c ****                 register_code(keycode);
 163:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 164:quantum/send_string.c ****                 // up
 165:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 166:quantum/send_string.c ****                 unregister_code(keycode);
 167:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 168:quantum/send_string.c ****                 // delay
 169:quantum/send_string.c ****                 int     ms      = 0;
 170:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 171:quantum/send_string.c ****                 while (isdigit(keycode)) {
 172:quantum/send_string.c ****                     ms *= 10;
 173:quantum/send_string.c ****                     ms += keycode - '0';
 174:quantum/send_string.c ****                     keycode = *(++str);
 175:quantum/send_string.c ****                 }
 176:quantum/send_string.c ****                 while (ms--) wait_ms(1);
 177:quantum/send_string.c ****             }
 178:quantum/send_string.c ****         } else {
 179:quantum/send_string.c ****             send_char(ascii_code);
 180:quantum/send_string.c ****         }
 181:quantum/send_string.c ****         ++str;
 182:quantum/send_string.c ****         // interval
 183:quantum/send_string.c ****         {
 184:quantum/send_string.c ****             uint8_t ms = interval;
 185:quantum/send_string.c ****             while (ms--) wait_ms(1);
 186:quantum/send_string.c ****         }
 187:quantum/send_string.c ****     }
 188:quantum/send_string.c **** }
 189:quantum/send_string.c **** 
 190:quantum/send_string.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 191:quantum/send_string.c ****     while (1) {
 192:quantum/send_string.c ****         char ascii_code = pgm_read_byte(str);
 193:quantum/send_string.c ****         if (!ascii_code) break;
 194:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 195:quantum/send_string.c ****             ascii_code = pgm_read_byte(++str);
 196:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 197:quantum/send_string.c ****                 // tap
 198:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 199:quantum/send_string.c ****                 tap_code(keycode);
 200:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 201:quantum/send_string.c ****                 // down
 202:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 203:quantum/send_string.c ****                 register_code(keycode);
 204:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 205:quantum/send_string.c ****                 // up
 206:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 207:quantum/send_string.c ****                 unregister_code(keycode);
 208:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 209:quantum/send_string.c ****                 // delay
 210:quantum/send_string.c ****                 int     ms      = 0;
 211:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 212:quantum/send_string.c ****                 while (isdigit(keycode)) {
 213:quantum/send_string.c ****                     ms *= 10;
 214:quantum/send_string.c ****                     ms += keycode - '0';
 215:quantum/send_string.c ****                     keycode = pgm_read_byte(++str);
 216:quantum/send_string.c ****                 }
 217:quantum/send_string.c ****                 while (ms--) wait_ms(1);
 218:quantum/send_string.c ****             }
 219:quantum/send_string.c ****         } else {
 220:quantum/send_string.c ****             send_char(ascii_code);
 221:quantum/send_string.c ****         }
 222:quantum/send_string.c ****         ++str;
 223:quantum/send_string.c ****         // interval
 224:quantum/send_string.c ****         {
 225:quantum/send_string.c ****             uint8_t ms = interval;
 226:quantum/send_string.c ****             while (ms--) wait_ms(1);
 227:quantum/send_string.c ****         }
 228:quantum/send_string.c ****     }
 229:quantum/send_string.c **** }
 230:quantum/send_string.c **** 
 231:quantum/send_string.c **** void send_char(char ascii_code) {
  30              		.loc 1 231 33 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 232:quantum/send_string.c **** #if defined(AUDIO_ENABLE) && defined(SENDSTRING_BELL)
 233:quantum/send_string.c ****     if (ascii_code == '\a') {  // BEL
 234:quantum/send_string.c ****         PLAY_SONG(bell_song);
 235:quantum/send_string.c ****         return;
 236:quantum/send_string.c ****     }
 237:quantum/send_string.c **** #endif
 238:quantum/send_string.c **** 
 239:quantum/send_string.c ****     uint8_t keycode    = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
  34              		.loc 1 239 5 view .LVU1
  35              		.loc 1 239 13 is_stmt 0 view .LVU2
  36 0000 1E4B     		ldr	r3, .L9
 240:quantum/send_string.c ****     bool    is_shifted = PGM_LOADBIT(ascii_to_shift_lut, (uint8_t)ascii_code);
 241:quantum/send_string.c ****     bool    is_altgred = PGM_LOADBIT(ascii_to_altgr_lut, (uint8_t)ascii_code);
  37              		.loc 1 241 26 view .LVU3
  38 0002 1F4A     		ldr	r2, .L9+4
 231:quantum/send_string.c **** #if defined(AUDIO_ENABLE) && defined(SENDSTRING_BELL)
  39              		.loc 1 231 33 view .LVU4
  40 0004 70B5     		push	{r4, r5, r6, lr}
  41              		.cfi_def_cfa_offset 16
  42              		.cfi_offset 4, -16
  43              		.cfi_offset 5, -12
  44              		.cfi_offset 6, -8
  45              		.cfi_offset 14, -4
 239:quantum/send_string.c ****     bool    is_shifted = PGM_LOADBIT(ascii_to_shift_lut, (uint8_t)ascii_code);
  46              		.loc 1 239 13 view .LVU5
  47 0006 1E5C     		ldrb	r6, [r3, r0]	@ zero_extendqisi2
  48              	.LVL1:
 240:quantum/send_string.c ****     bool    is_shifted = PGM_LOADBIT(ascii_to_shift_lut, (uint8_t)ascii_code);
  49              		.loc 1 240 5 is_stmt 1 view .LVU6
 240:quantum/send_string.c ****     bool    is_shifted = PGM_LOADBIT(ascii_to_shift_lut, (uint8_t)ascii_code);
  50              		.loc 1 240 26 is_stmt 0 view .LVU7
  51 0008 C308     		lsrs	r3, r0, #3
  52 000a 00F00700 		and	r0, r0, #7
  53              	.LVL2:
  54              		.loc 1 241 5 is_stmt 1 view .LVU8
  55              		.loc 1 241 26 is_stmt 0 view .LVU9
  56 000e D45C     		ldrb	r4, [r2, r3]	@ zero_extendqisi2
 242:quantum/send_string.c ****     bool    is_dead    = PGM_LOADBIT(ascii_to_dead_lut, (uint8_t)ascii_code);
  57              		.loc 1 242 26 view .LVU10
  58 0010 1C4A     		ldr	r2, .L9+8
  59 0012 D55C     		ldrb	r5, [r2, r3]	@ zero_extendqisi2
 240:quantum/send_string.c ****     bool    is_altgred = PGM_LOADBIT(ascii_to_altgr_lut, (uint8_t)ascii_code);
  60              		.loc 1 240 26 view .LVU11
  61 0014 1C4A     		ldr	r2, .L9+12
  62 0016 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
  63              	.LVL3:
 240:quantum/send_string.c ****     bool    is_altgred = PGM_LOADBIT(ascii_to_altgr_lut, (uint8_t)ascii_code);
  64              		.loc 1 240 26 view .LVU12
  65 0018 0341     		asrs	r3, r3, r0
  66              	.LVL4:
 241:quantum/send_string.c ****     bool    is_dead    = PGM_LOADBIT(ascii_to_dead_lut, (uint8_t)ascii_code);
  67              		.loc 1 241 26 view .LVU13
  68 001a 0441     		asrs	r4, r4, r0
  69              		.loc 1 242 26 view .LVU14
  70 001c 0541     		asrs	r5, r5, r0
 243:quantum/send_string.c **** 
 244:quantum/send_string.c ****     if (is_shifted) {
  71              		.loc 1 244 8 view .LVU15
  72 001e DB07     		lsls	r3, r3, #31
 241:quantum/send_string.c ****     bool    is_dead    = PGM_LOADBIT(ascii_to_dead_lut, (uint8_t)ascii_code);
  73              		.loc 1 241 26 view .LVU16
  74 0020 04F00104 		and	r4, r4, #1
  75              	.LVL5:
 242:quantum/send_string.c **** 
  76              		.loc 1 242 5 is_stmt 1 view .LVU17
 242:quantum/send_string.c **** 
  77              		.loc 1 242 26 is_stmt 0 view .LVU18
  78 0024 05F00105 		and	r5, r5, #1
  79              	.LVL6:
  80              		.loc 1 244 5 is_stmt 1 view .LVU19
  81              		.loc 1 244 8 is_stmt 0 view .LVU20
  82 0028 09D4     		bmi	.L2
 245:quantum/send_string.c ****         register_code(KC_LSFT);
 246:quantum/send_string.c ****     }
 247:quantum/send_string.c ****     if (is_altgred) {
  83              		.loc 1 247 5 is_stmt 1 view .LVU21
  84              		.loc 1 247 8 is_stmt 0 view .LVU22
  85 002a 8CB9     		cbnz	r4, .L3
 248:quantum/send_string.c ****         register_code(KC_RALT);
 249:quantum/send_string.c ****     }
 250:quantum/send_string.c ****     tap_code(keycode);
  86              		.loc 1 250 5 is_stmt 1 view .LVU23
  87 002c 3046     		mov	r0, r6
  88 002e FFF7FEFF 		bl	tap_code
  89              	.LVL7:
 251:quantum/send_string.c ****     if (is_altgred) {
  90              		.loc 1 251 5 view .LVU24
 252:quantum/send_string.c ****         unregister_code(KC_RALT);
 253:quantum/send_string.c ****     }
 254:quantum/send_string.c ****     if (is_shifted) {
  91              		.loc 1 254 5 view .LVU25
  92              	.L4:
 255:quantum/send_string.c ****         unregister_code(KC_LSFT);
 256:quantum/send_string.c ****     }
 257:quantum/send_string.c ****     if (is_dead) {
  93              		.loc 1 257 5 view .LVU26
  94              		.loc 1 257 8 is_stmt 0 view .LVU27
  95 0032 0DB3     		cbz	r5, .L1
 258:quantum/send_string.c ****         tap_code(KC_SPACE);
  96              		.loc 1 258 9 is_stmt 1 view .LVU28
 259:quantum/send_string.c ****     }
 260:quantum/send_string.c **** }
  97              		.loc 1 260 1 is_stmt 0 view .LVU29
  98 0034 BDE87040 		pop	{r4, r5, r6, lr}
  99              		.cfi_remember_state
 100              		.cfi_restore 14
 101              		.cfi_restore 6
 102              		.cfi_restore 5
 103              		.cfi_restore 4
 104              		.cfi_def_cfa_offset 0
 105              	.LVL8:
 258:quantum/send_string.c ****         tap_code(KC_SPACE);
 106              		.loc 1 258 9 view .LVU30
 107 0038 2C20     		movs	r0, #44
 108 003a FFF7FEBF 		b	tap_code
 109              	.LVL9:
 110              	.L2:
 111              		.cfi_restore_state
 245:quantum/send_string.c ****     }
 112              		.loc 1 245 9 is_stmt 1 view .LVU31
 113 003e E120     		movs	r0, #225
 114 0040 FFF7FEFF 		bl	register_code
 115              	.LVL10:
 247:quantum/send_string.c ****         register_code(KC_RALT);
 116              		.loc 1 247 5 view .LVU32
 247:quantum/send_string.c ****         register_code(KC_RALT);
 117              		.loc 1 247 8 is_stmt 0 view .LVU33
 118 0044 74B9     		cbnz	r4, .L5
 250:quantum/send_string.c ****     if (is_altgred) {
 119              		.loc 1 250 5 is_stmt 1 view .LVU34
 120 0046 3046     		mov	r0, r6
 121 0048 FFF7FEFF 		bl	tap_code
 122              	.LVL11:
 251:quantum/send_string.c ****         unregister_code(KC_RALT);
 123              		.loc 1 251 5 view .LVU35
 254:quantum/send_string.c ****         unregister_code(KC_LSFT);
 124              		.loc 1 254 5 view .LVU36
 125              	.L6:
 255:quantum/send_string.c ****     }
 126              		.loc 1 255 9 view .LVU37
 127 004c E120     		movs	r0, #225
 128 004e 06E0     		b	.L8
 129              	.L3:
 248:quantum/send_string.c ****     }
 130              		.loc 1 248 9 view .LVU38
 131 0050 E620     		movs	r0, #230
 132 0052 FFF7FEFF 		bl	register_code
 133              	.LVL12:
 250:quantum/send_string.c ****     if (is_altgred) {
 134              		.loc 1 250 5 view .LVU39
 135 0056 3046     		mov	r0, r6
 136 0058 FFF7FEFF 		bl	tap_code
 137              	.LVL13:
 251:quantum/send_string.c ****         unregister_code(KC_RALT);
 138              		.loc 1 251 5 view .LVU40
 252:quantum/send_string.c ****     }
 139              		.loc 1 252 9 view .LVU41
 140 005c E620     		movs	r0, #230
 141              	.L8:
 255:quantum/send_string.c ****     }
 142              		.loc 1 255 9 is_stmt 0 view .LVU42
 143 005e FFF7FEFF 		bl	unregister_code
 144              	.LVL14:
 145 0062 E6E7     		b	.L4
 146              	.L5:
 248:quantum/send_string.c ****     }
 147              		.loc 1 248 9 is_stmt 1 view .LVU43
 148 0064 E620     		movs	r0, #230
 149 0066 FFF7FEFF 		bl	register_code
 150              	.LVL15:
 250:quantum/send_string.c ****     if (is_altgred) {
 151              		.loc 1 250 5 view .LVU44
 152 006a 3046     		mov	r0, r6
 153 006c FFF7FEFF 		bl	tap_code
 154              	.LVL16:
 251:quantum/send_string.c ****         unregister_code(KC_RALT);
 155              		.loc 1 251 5 view .LVU45
 252:quantum/send_string.c ****     }
 156              		.loc 1 252 9 view .LVU46
 157 0070 E620     		movs	r0, #230
 158 0072 FFF7FEFF 		bl	unregister_code
 159              	.LVL17:
 254:quantum/send_string.c ****         unregister_code(KC_LSFT);
 160              		.loc 1 254 5 view .LVU47
 161 0076 E9E7     		b	.L6
 162              	.L1:
 163              		.loc 1 260 1 is_stmt 0 view .LVU48
 164 0078 70BD     		pop	{r4, r5, r6, pc}
 165              	.LVL18:
 166              	.L10:
 167              		.loc 1 260 1 view .LVU49
 168 007a 00BF     		.align	2
 169              	.L9:
 170 007c 00000000 		.word	ascii_to_keycode_lut
 171 0080 00000000 		.word	ascii_to_altgr_lut
 172 0084 00000000 		.word	ascii_to_dead_lut
 173 0088 00000000 		.word	ascii_to_shift_lut
 174              		.cfi_endproc
 175              	.LFE300:
 177              		.section	.text.send_string_with_delay,"ax",%progbits
 178              		.align	1
 179              		.global	send_string_with_delay
 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 184              	send_string_with_delay:
 185              	.LVL19:
 186              	.LFB298:
 149:quantum/send_string.c ****     while (1) {
 187              		.loc 1 149 64 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 149:quantum/send_string.c ****     while (1) {
 191              		.loc 1 149 64 is_stmt 0 view .LVU51
 192 0000 70B5     		push	{r4, r5, r6, lr}
 193              		.cfi_def_cfa_offset 16
 194              		.cfi_offset 4, -16
 195              		.cfi_offset 5, -12
 196              		.cfi_offset 6, -8
 197              		.cfi_offset 14, -4
 198 0002 0446     		mov	r4, r0
 199 0004 0E46     		mov	r6, r1
 200              	.LVL20:
 201              	.L25:
 150:quantum/send_string.c ****         char ascii_code = *str;
 202              		.loc 1 150 5 is_stmt 1 view .LVU52
 203              	.LBB2:
 151:quantum/send_string.c ****         if (!ascii_code) break;
 204              		.loc 1 151 9 view .LVU53
 151:quantum/send_string.c ****         if (!ascii_code) break;
 205              		.loc 1 151 14 is_stmt 0 view .LVU54
 206 0006 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 207              	.LVL21:
 152:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 208              		.loc 1 152 9 is_stmt 1 view .LVU55
 152:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 209              		.loc 1 152 12 is_stmt 0 view .LVU56
 210 0008 0028     		cmp	r0, #0
 211 000a 3DD0     		beq	.L11
 153:quantum/send_string.c ****             ascii_code = *(++str);
 212              		.loc 1 153 9 is_stmt 1 view .LVU57
 153:quantum/send_string.c ****             ascii_code = *(++str);
 213              		.loc 1 153 12 is_stmt 0 view .LVU58
 214 000c 0128     		cmp	r0, #1
 215 000e 38D1     		bne	.L13
 154:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 216              		.loc 1 154 13 is_stmt 1 view .LVU59
 217              	.LVL22:
 154:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 218              		.loc 1 154 24 is_stmt 0 view .LVU60
 219 0010 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 220              	.LVL23:
 155:quantum/send_string.c ****                 // tap
 221              		.loc 1 155 13 is_stmt 1 view .LVU61
 155:quantum/send_string.c ****                 // tap
 222              		.loc 1 155 16 is_stmt 0 view .LVU62
 223 0012 012B     		cmp	r3, #1
 224 0014 0ED1     		bne	.L14
 225              	.LBB3:
 157:quantum/send_string.c ****                 tap_code(keycode);
 226              		.loc 1 157 17 is_stmt 1 view .LVU63
 158:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 227              		.loc 1 158 17 is_stmt 0 view .LVU64
 228 0016 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 157:quantum/send_string.c ****                 tap_code(keycode);
 229              		.loc 1 157 25 view .LVU65
 230 0018 A51C     		adds	r5, r4, #2
 231              	.LVL24:
 158:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 232              		.loc 1 158 17 is_stmt 1 view .LVU66
 233 001a FFF7FEFF 		bl	tap_code
 234              	.LVL25:
 235              	.L26:
 158:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 236              		.loc 1 158 17 is_stmt 0 view .LVU67
 237              	.LBE3:
 238              	.LBB4:
 161:quantum/send_string.c ****                 register_code(keycode);
 239              		.loc 1 161 25 view .LVU68
 240 001e 2C46     		mov	r4, r5
 241              	.LVL26:
 242              	.L15:
 161:quantum/send_string.c ****                 register_code(keycode);
 243              		.loc 1 161 25 view .LVU69
 244              	.LBE4:
 181:quantum/send_string.c ****         // interval
 245              		.loc 1 181 9 is_stmt 1 view .LVU70
 246 0020 0134     		adds	r4, r4, #1
 247              	.LVL27:
 248              	.LBB5:
 184:quantum/send_string.c ****             while (ms--) wait_ms(1);
 249              		.loc 1 184 13 view .LVU71
 185:quantum/send_string.c ****         }
 250              		.loc 1 185 13 view .LVU72
 185:quantum/send_string.c ****         }
 251              		.loc 1 185 19 is_stmt 0 view .LVU73
 252 0022 3546     		mov	r5, r6
 253              	.L23:
 254              	.LVL28:
 185:quantum/send_string.c ****         }
 255              		.loc 1 185 26 is_stmt 1 discriminator 4 view .LVU74
 185:quantum/send_string.c ****         }
 256              		.loc 1 185 20 discriminator 4 view .LVU75
 185:quantum/send_string.c ****         }
 257              		.loc 1 185 20 is_stmt 0 discriminator 4 view .LVU76
 258 0024 002D     		cmp	r5, #0
 259 0026 EED0     		beq	.L25
 185:quantum/send_string.c ****         }
 260              		.loc 1 185 26 is_stmt 1 discriminator 1 view .LVU77
 185:quantum/send_string.c ****         }
 261              		.loc 1 185 26 discriminator 1 view .LVU78
 185:quantum/send_string.c ****         }
 262              		.loc 1 185 26 discriminator 1 view .LVU79
 263 0028 0A20     		movs	r0, #10
 264 002a 013D     		subs	r5, r5, #1
 265              	.LVL29:
 185:quantum/send_string.c ****         }
 266              		.loc 1 185 26 is_stmt 0 discriminator 1 view .LVU80
 267 002c FFF7FEFF 		bl	chThdSleep
 268              	.LVL30:
 269 0030 EDB2     		uxtb	r5, r5
 270 0032 F7E7     		b	.L23
 271              	.LVL31:
 272              	.L14:
 185:quantum/send_string.c ****         }
 273              		.loc 1 185 26 discriminator 1 view .LVU81
 274              	.LBE5:
 159:quantum/send_string.c ****                 // down
 275              		.loc 1 159 20 is_stmt 1 view .LVU82
 159:quantum/send_string.c ****                 // down
 276              		.loc 1 159 23 is_stmt 0 view .LVU83
 277 0034 022B     		cmp	r3, #2
 278 0036 04D1     		bne	.L16
 279              	.LBB6:
 161:quantum/send_string.c ****                 register_code(keycode);
 280              		.loc 1 161 17 is_stmt 1 view .LVU84
 162:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 281              		.loc 1 162 17 is_stmt 0 view .LVU85
 282 0038 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 161:quantum/send_string.c ****                 register_code(keycode);
 283              		.loc 1 161 25 view .LVU86
 284 003a A51C     		adds	r5, r4, #2
 285              	.LVL32:
 162:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 286              		.loc 1 162 17 is_stmt 1 view .LVU87
 287 003c FFF7FEFF 		bl	register_code
 288              	.LVL33:
 162:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 289              		.loc 1 162 17 is_stmt 0 view .LVU88
 290 0040 EDE7     		b	.L26
 291              	.LVL34:
 292              	.L16:
 162:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 293              		.loc 1 162 17 view .LVU89
 294              	.LBE6:
 163:quantum/send_string.c ****                 // up
 295              		.loc 1 163 20 is_stmt 1 view .LVU90
 163:quantum/send_string.c ****                 // up
 296              		.loc 1 163 23 is_stmt 0 view .LVU91
 297 0042 032B     		cmp	r3, #3
 298 0044 04D1     		bne	.L17
 299              	.LBB7:
 165:quantum/send_string.c ****                 unregister_code(keycode);
 300              		.loc 1 165 17 is_stmt 1 view .LVU92
 166:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 301              		.loc 1 166 17 is_stmt 0 view .LVU93
 302 0046 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 165:quantum/send_string.c ****                 unregister_code(keycode);
 303              		.loc 1 165 25 view .LVU94
 304 0048 A51C     		adds	r5, r4, #2
 305              	.LVL35:
 166:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 306              		.loc 1 166 17 is_stmt 1 view .LVU95
 307 004a FFF7FEFF 		bl	unregister_code
 308              	.LVL36:
 166:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 309              		.loc 1 166 17 is_stmt 0 view .LVU96
 310 004e E6E7     		b	.L26
 311              	.LVL37:
 312              	.L17:
 166:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 313              		.loc 1 166 17 view .LVU97
 314              	.LBE7:
 167:quantum/send_string.c ****                 // delay
 315              		.loc 1 167 20 is_stmt 1 view .LVU98
 167:quantum/send_string.c ****                 // delay
 316              		.loc 1 167 23 is_stmt 0 view .LVU99
 317 0050 042B     		cmp	r3, #4
 318 0052 01D0     		beq	.L18
 154:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 319              		.loc 1 154 24 view .LVU100
 320 0054 0134     		adds	r4, r4, #1
 321              	.LVL38:
 154:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 322              		.loc 1 154 24 view .LVU101
 323 0056 E3E7     		b	.L15
 324              	.LVL39:
 325              	.L18:
 326              	.LBB8:
 169:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 327              		.loc 1 169 17 is_stmt 1 view .LVU102
 170:quantum/send_string.c ****                 while (isdigit(keycode)) {
 328              		.loc 1 170 17 view .LVU103
 170:quantum/send_string.c ****                 while (isdigit(keycode)) {
 329              		.loc 1 170 25 is_stmt 0 view .LVU104
 330 0058 14F8023F 		ldrb	r3, [r4, #2]!	@ zero_extendqisi2
 331              	.LVL40:
 171:quantum/send_string.c ****                     ms *= 10;
 332              		.loc 1 171 17 is_stmt 1 view .LVU105
 171:quantum/send_string.c ****                     ms *= 10;
 333              		.loc 1 171 24 is_stmt 0 view .LVU106
 334 005c 0B49     		ldr	r1, .L27
 169:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 335              		.loc 1 169 25 view .LVU107
 336 005e 0025     		movs	r5, #0
 172:quantum/send_string.c ****                     ms += keycode - '0';
 337              		.loc 1 172 24 view .LVU108
 338 0060 0A20     		movs	r0, #10
 339              	.LVL41:
 340              	.L19:
 171:quantum/send_string.c ****                     ms *= 10;
 341              		.loc 1 171 24 is_stmt 1 view .LVU109
 342 0062 CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 343 0064 5207     		lsls	r2, r2, #29
 344 0066 06D4     		bmi	.L20
 345              	.LVL42:
 346              	.L21:
 176:quantum/send_string.c ****             }
 347              		.loc 1 176 30 discriminator 4 view .LVU110
 176:quantum/send_string.c ****             }
 348              		.loc 1 176 24 discriminator 4 view .LVU111
 176:quantum/send_string.c ****             }
 349              		.loc 1 176 24 is_stmt 0 discriminator 4 view .LVU112
 350 0068 002D     		cmp	r5, #0
 351 006a D9D0     		beq	.L15
 176:quantum/send_string.c ****             }
 352              		.loc 1 176 30 is_stmt 1 discriminator 1 view .LVU113
 176:quantum/send_string.c ****             }
 353              		.loc 1 176 30 discriminator 1 view .LVU114
 176:quantum/send_string.c ****             }
 354              		.loc 1 176 30 discriminator 1 view .LVU115
 355 006c 0A20     		movs	r0, #10
 356 006e FFF7FEFF 		bl	chThdSleep
 357              	.LVL43:
 358 0072 013D     		subs	r5, r5, #1
 359              	.LVL44:
 176:quantum/send_string.c ****             }
 360              		.loc 1 176 30 is_stmt 0 discriminator 1 view .LVU116
 361 0074 F8E7     		b	.L21
 362              	.LVL45:
 363              	.L20:
 172:quantum/send_string.c ****                     ms += keycode - '0';
 364              		.loc 1 172 21 is_stmt 1 view .LVU117
 173:quantum/send_string.c ****                     keycode = *(++str);
 365              		.loc 1 173 21 view .LVU118
 173:quantum/send_string.c ****                     keycode = *(++str);
 366              		.loc 1 173 35 is_stmt 0 view .LVU119
 367 0076 303B     		subs	r3, r3, #48
 368              	.LVL46:
 173:quantum/send_string.c ****                     keycode = *(++str);
 369              		.loc 1 173 24 view .LVU120
 370 0078 00FB0535 		mla	r5, r0, r5, r3
 371              	.LVL47:
 174:quantum/send_string.c ****                 }
 372              		.loc 1 174 21 is_stmt 1 view .LVU121
 174:quantum/send_string.c ****                 }
 373              		.loc 1 174 29 is_stmt 0 view .LVU122
 374 007c 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 375              	.LVL48:
 174:quantum/send_string.c ****                 }
 376              		.loc 1 174 29 view .LVU123
 377 0080 EFE7     		b	.L19
 378              	.LVL49:
 379              	.L13:
 174:quantum/send_string.c ****                 }
 380              		.loc 1 174 29 view .LVU124
 381              	.LBE8:
 179:quantum/send_string.c ****         }
 382              		.loc 1 179 13 is_stmt 1 view .LVU125
 383 0082 FFF7FEFF 		bl	send_char
 384              	.LVL50:
 179:quantum/send_string.c ****         }
 385              		.loc 1 179 13 is_stmt 0 view .LVU126
 386 0086 CBE7     		b	.L15
 387              	.LVL51:
 388              	.L11:
 179:quantum/send_string.c ****         }
 389              		.loc 1 179 13 view .LVU127
 390              	.LBE2:
 188:quantum/send_string.c **** 
 391              		.loc 1 188 1 view .LVU128
 392 0088 70BD     		pop	{r4, r5, r6, pc}
 393              	.LVL52:
 394              	.L28:
 188:quantum/send_string.c **** 
 395              		.loc 1 188 1 view .LVU129
 396 008a 00BF     		.align	2
 397              	.L27:
 398 008c 01000000 		.word	_ctype_+1
 399              		.cfi_endproc
 400              	.LFE298:
 402              		.section	.text.send_string,"ax",%progbits
 403              		.align	1
 404              		.global	send_string
 405              		.syntax unified
 406              		.thumb
 407              		.thumb_func
 409              	send_string:
 410              	.LVL53:
 411              	.LFB296:
 145:quantum/send_string.c **** 
 412              		.loc 1 145 35 is_stmt 1 view -0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416              		@ link register save eliminated.
 145:quantum/send_string.c **** 
 417              		.loc 1 145 37 view .LVU131
 418 0000 0021     		movs	r1, #0
 419 0002 FFF7FEBF 		b	send_string_with_delay
 420              	.LVL54:
 145:quantum/send_string.c **** 
 421              		.loc 1 145 37 is_stmt 0 view .LVU132
 422              		.cfi_endproc
 423              	.LFE296:
 425              		.section	.text.send_string_P,"ax",%progbits
 426              		.align	1
 427              		.global	send_string_P
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 432              	send_string_P:
 433              	.LFB308:
 434              		.cfi_startproc
 147:quantum/send_string.c **** 
 435              		.loc 1 147 6 is_stmt 1 view -0
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439 0000 FFF7FEBF 		b	send_string
 440              		.cfi_endproc
 441              	.LFE308:
 443              		.section	.text.send_string_with_delay_P,"ax",%progbits
 444              		.align	1
 445              		.global	send_string_with_delay_P
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 450              	send_string_with_delay_P:
 451              	.LFB310:
 452              		.cfi_startproc
 190:quantum/send_string.c ****     while (1) {
 453              		.loc 1 190 6 view -0
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 457 0000 FFF7FEBF 		b	send_string_with_delay
 458              		.cfi_endproc
 459              	.LFE310:
 461              		.section	.text.send_nibble,"ax",%progbits
 462              		.align	1
 463              		.global	send_nibble
 464              		.syntax unified
 465              		.thumb
 466              		.thumb_func
 468              	send_nibble:
 469              	.LVL55:
 470              	.LFB304:
 261:quantum/send_string.c **** 
 262:quantum/send_string.c **** void send_dword(uint32_t number) {
 263:quantum/send_string.c ****     send_word(number >> 16);
 264:quantum/send_string.c ****     send_word(number & 0xFFFFUL);
 265:quantum/send_string.c **** }
 266:quantum/send_string.c **** 
 267:quantum/send_string.c **** void send_word(uint16_t number) {
 268:quantum/send_string.c ****     send_byte(number >> 8);
 269:quantum/send_string.c ****     send_byte(number & 0xFF);
 270:quantum/send_string.c **** }
 271:quantum/send_string.c **** 
 272:quantum/send_string.c **** void send_byte(uint8_t number) {
 273:quantum/send_string.c ****     send_nibble(number >> 4);
 274:quantum/send_string.c ****     send_nibble(number & 0xF);
 275:quantum/send_string.c **** }
 276:quantum/send_string.c **** 
 277:quantum/send_string.c **** void send_nibble(uint8_t number) {
 471              		.loc 1 277 34 view -0
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 0
 474              		@ frame_needed = 0, uses_anonymous_args = 0
 475              		@ link register save eliminated.
 278:quantum/send_string.c ****     switch (number & 0xF) {
 476              		.loc 1 278 5 view .LVU136
 477 0000 00F00F03 		and	r3, r0, #15
 478 0004 0A3B     		subs	r3, r3, #10
 479 0006 052B     		cmp	r3, #5
 279:quantum/send_string.c ****         case 0 ... 9:
 280:quantum/send_string.c ****             send_char(number + '0');
 480              		.loc 1 280 13 view .LVU137
 481 0008 8CBF     		ite	hi
 482 000a 3030     		addhi	r0, r0, #48
 483              	.LVL56:
 484              	.LBB11:
 485              	.LBI11:
 277:quantum/send_string.c ****     switch (number & 0xF) {
 486              		.loc 1 277 6 view .LVU138
 487              	.LBB12:
 281:quantum/send_string.c ****             break;
 282:quantum/send_string.c ****         case 10 ... 15:
 283:quantum/send_string.c ****             send_char(number - 10 + 'a');
 488              		.loc 1 283 13 view .LVU139
 489 000c 5730     		addls	r0, r0, #87
 490              	.LVL57:
 491              		.loc 1 283 13 is_stmt 0 view .LVU140
 492 000e C0B2     		uxtb	r0, r0
 493 0010 FFF7FEBF 		b	send_char
 494              	.LVL58:
 495              		.loc 1 283 13 view .LVU141
 496              	.LBE12:
 497              	.LBE11:
 498              		.cfi_endproc
 499              	.LFE304:
 501              		.section	.text.send_byte,"ax",%progbits
 502              		.align	1
 503              		.global	send_byte
 504              		.syntax unified
 505              		.thumb
 506              		.thumb_func
 508              	send_byte:
 509              	.LVL59:
 510              	.LFB303:
 272:quantum/send_string.c ****     send_nibble(number >> 4);
 511              		.loc 1 272 32 is_stmt 1 view -0
 512              		.cfi_startproc
 513              		@ args = 0, pretend = 0, frame = 0
 514              		@ frame_needed = 0, uses_anonymous_args = 0
 273:quantum/send_string.c ****     send_nibble(number & 0xF);
 515              		.loc 1 273 5 view .LVU143
 272:quantum/send_string.c ****     send_nibble(number >> 4);
 516              		.loc 1 272 32 is_stmt 0 view .LVU144
 517 0000 10B5     		push	{r4, lr}
 518              		.cfi_def_cfa_offset 8
 519              		.cfi_offset 4, -8
 520              		.cfi_offset 14, -4
 272:quantum/send_string.c ****     send_nibble(number >> 4);
 521              		.loc 1 272 32 view .LVU145
 522 0002 0446     		mov	r4, r0
 273:quantum/send_string.c ****     send_nibble(number & 0xF);
 523              		.loc 1 273 5 view .LVU146
 524 0004 0009     		lsrs	r0, r0, #4
 525              	.LVL60:
 273:quantum/send_string.c ****     send_nibble(number & 0xF);
 526              		.loc 1 273 5 view .LVU147
 527 0006 FFF7FEFF 		bl	send_nibble
 528              	.LVL61:
 274:quantum/send_string.c **** }
 529              		.loc 1 274 5 is_stmt 1 view .LVU148
 530 000a 04F00F00 		and	r0, r4, #15
 275:quantum/send_string.c **** 
 531              		.loc 1 275 1 is_stmt 0 view .LVU149
 532 000e BDE81040 		pop	{r4, lr}
 533              		.cfi_restore 14
 534              		.cfi_restore 4
 535              		.cfi_def_cfa_offset 0
 274:quantum/send_string.c **** }
 536              		.loc 1 274 5 view .LVU150
 537 0012 FFF7FEBF 		b	send_nibble
 538              	.LVL62:
 539              		.cfi_endproc
 540              	.LFE303:
 542              		.section	.text.send_word,"ax",%progbits
 543              		.align	1
 544              		.global	send_word
 545              		.syntax unified
 546              		.thumb
 547              		.thumb_func
 549              	send_word:
 550              	.LVL63:
 551              	.LFB302:
 267:quantum/send_string.c ****     send_byte(number >> 8);
 552              		.loc 1 267 33 is_stmt 1 view -0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 0
 555              		@ frame_needed = 0, uses_anonymous_args = 0
 268:quantum/send_string.c ****     send_byte(number & 0xFF);
 556              		.loc 1 268 5 view .LVU152
 267:quantum/send_string.c ****     send_byte(number >> 8);
 557              		.loc 1 267 33 is_stmt 0 view .LVU153
 558 0000 10B5     		push	{r4, lr}
 559              		.cfi_def_cfa_offset 8
 560              		.cfi_offset 4, -8
 561              		.cfi_offset 14, -4
 267:quantum/send_string.c ****     send_byte(number >> 8);
 562              		.loc 1 267 33 view .LVU154
 563 0002 0446     		mov	r4, r0
 268:quantum/send_string.c ****     send_byte(number & 0xFF);
 564              		.loc 1 268 5 view .LVU155
 565 0004 000A     		lsrs	r0, r0, #8
 566              	.LVL64:
 268:quantum/send_string.c ****     send_byte(number & 0xFF);
 567              		.loc 1 268 5 view .LVU156
 568 0006 FFF7FEFF 		bl	send_byte
 569              	.LVL65:
 269:quantum/send_string.c **** }
 570              		.loc 1 269 5 is_stmt 1 view .LVU157
 571 000a E0B2     		uxtb	r0, r4
 270:quantum/send_string.c **** 
 572              		.loc 1 270 1 is_stmt 0 view .LVU158
 573 000c BDE81040 		pop	{r4, lr}
 574              		.cfi_restore 14
 575              		.cfi_restore 4
 576              		.cfi_def_cfa_offset 0
 269:quantum/send_string.c **** }
 577              		.loc 1 269 5 view .LVU159
 578 0010 FFF7FEBF 		b	send_byte
 579              	.LVL66:
 580              		.cfi_endproc
 581              	.LFE302:
 583              		.section	.text.send_dword,"ax",%progbits
 584              		.align	1
 585              		.global	send_dword
 586              		.syntax unified
 587              		.thumb
 588              		.thumb_func
 590              	send_dword:
 591              	.LVL67:
 592              	.LFB301:
 262:quantum/send_string.c ****     send_word(number >> 16);
 593              		.loc 1 262 34 is_stmt 1 view -0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 0
 596              		@ frame_needed = 0, uses_anonymous_args = 0
 263:quantum/send_string.c ****     send_word(number & 0xFFFFUL);
 597              		.loc 1 263 5 view .LVU161
 262:quantum/send_string.c ****     send_word(number >> 16);
 598              		.loc 1 262 34 is_stmt 0 view .LVU162
 599 0000 10B5     		push	{r4, lr}
 600              		.cfi_def_cfa_offset 8
 601              		.cfi_offset 4, -8
 602              		.cfi_offset 14, -4
 262:quantum/send_string.c ****     send_word(number >> 16);
 603              		.loc 1 262 34 view .LVU163
 604 0002 0446     		mov	r4, r0
 263:quantum/send_string.c ****     send_word(number & 0xFFFFUL);
 605              		.loc 1 263 5 view .LVU164
 606 0004 000C     		lsrs	r0, r0, #16
 607              	.LVL68:
 263:quantum/send_string.c ****     send_word(number & 0xFFFFUL);
 608              		.loc 1 263 5 view .LVU165
 609 0006 FFF7FEFF 		bl	send_word
 610              	.LVL69:
 264:quantum/send_string.c **** }
 611              		.loc 1 264 5 is_stmt 1 view .LVU166
 612 000a A0B2     		uxth	r0, r4
 265:quantum/send_string.c **** 
 613              		.loc 1 265 1 is_stmt 0 view .LVU167
 614 000c BDE81040 		pop	{r4, lr}
 615              		.cfi_restore 14
 616              		.cfi_restore 4
 617              		.cfi_def_cfa_offset 0
 618              	.LVL70:
 264:quantum/send_string.c **** }
 619              		.loc 1 264 5 view .LVU168
 620 0010 FFF7FEBF 		b	send_word
 621              	.LVL71:
 622              		.cfi_endproc
 623              	.LFE301:
 625              		.section	.text.tap_random_base64,"ax",%progbits
 626              		.align	1
 627              		.global	tap_random_base64
 628              		.syntax unified
 629              		.thumb
 630              		.thumb_func
 632              	tap_random_base64:
 633              	.LFB305:
 284:quantum/send_string.c ****             break;
 285:quantum/send_string.c ****     }
 286:quantum/send_string.c **** }
 287:quantum/send_string.c **** 
 288:quantum/send_string.c **** void tap_random_base64(void) {
 634              		.loc 1 288 30 is_stmt 1 view -0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 0
 637              		@ frame_needed = 0, uses_anonymous_args = 0
 289:quantum/send_string.c **** #if defined(__AVR_ATmega32U4__)
 290:quantum/send_string.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 291:quantum/send_string.c **** #else
 292:quantum/send_string.c ****     uint8_t key = rand() % 64;
 638              		.loc 1 292 5 view .LVU170
 288:quantum/send_string.c **** #if defined(__AVR_ATmega32U4__)
 639              		.loc 1 288 30 is_stmt 0 view .LVU171
 640 0000 08B5     		push	{r3, lr}
 641              		.cfi_def_cfa_offset 8
 642              		.cfi_offset 3, -8
 643              		.cfi_offset 14, -4
 644              		.loc 1 292 19 view .LVU172
 645 0002 FFF7FEFF 		bl	rand
 646              	.LVL72:
 647              		.loc 1 292 26 view .LVU173
 648 0006 4242     		rsbs	r2, r0, #0
 649 0008 02F03F02 		and	r2, r2, #63
 650 000c 00F03F03 		and	r3, r0, #63
 651 0010 58BF     		it	pl
 652 0012 5342     		rsbpl	r3, r2, #0
 293:quantum/send_string.c **** #endif
 294:quantum/send_string.c ****     switch (key) {
 653              		.loc 1 294 5 view .LVU174
 654 0014 13F0C00F 		tst	r3, #192
 292:quantum/send_string.c **** #endif
 655              		.loc 1 292 13 view .LVU175
 656 0018 D8B2     		uxtb	r0, r3
 657              	.LVL73:
 658              		.loc 1 294 5 is_stmt 1 view .LVU176
 659 001a 1FD1     		bne	.L38
 660 001c 3328     		cmp	r0, #51
 661 001e 07DC     		bgt	.L40
 662 0020 1928     		cmp	r0, #25
 663 0022 11DD     		ble	.L41
 295:quantum/send_string.c ****         case 0 ... 25:
 296:quantum/send_string.c ****             send_char(key + 'A');
 297:quantum/send_string.c ****             break;
 298:quantum/send_string.c ****         case 26 ... 51:
 299:quantum/send_string.c ****             send_char(key - 26 + 'a');
 664              		.loc 1 299 13 view .LVU177
 665 0024 4730     		adds	r0, r0, #71
 666              	.LVL74:
 667              	.L48:
 296:quantum/send_string.c ****             break;
 668              		.loc 1 296 13 is_stmt 0 view .LVU178
 669 0026 C0B2     		uxtb	r0, r0
 670              	.L47:
 300:quantum/send_string.c ****             break;
 301:quantum/send_string.c ****         case 52:
 302:quantum/send_string.c ****             send_char('0');
 303:quantum/send_string.c ****             break;
 304:quantum/send_string.c ****         case 53 ... 61:
 305:quantum/send_string.c ****             send_char(key - 53 + '1');
 306:quantum/send_string.c ****             break;
 307:quantum/send_string.c ****         case 62:
 308:quantum/send_string.c ****             send_char('+');
 309:quantum/send_string.c ****             break;
 310:quantum/send_string.c ****         case 63:
 311:quantum/send_string.c ****             send_char('/');
 312:quantum/send_string.c ****             break;
 313:quantum/send_string.c ****     }
 314:quantum/send_string.c **** }
 671              		.loc 1 314 1 view .LVU179
 672 0028 BDE80840 		pop	{r3, lr}
 673              		.cfi_remember_state
 674              		.cfi_restore 14
 675              		.cfi_restore 3
 676              		.cfi_def_cfa_offset 0
 311:quantum/send_string.c ****             break;
 677              		.loc 1 311 13 view .LVU180
 678 002c FFF7FEBF 		b	send_char
 679              	.LVL75:
 680              	.L40:
 681              		.cfi_restore_state
 294:quantum/send_string.c ****         case 0 ... 25:
 682              		.loc 1 294 5 view .LVU181
 683 0030 A0F13503 		sub	r3, r0, #53
 684 0034 0A2B     		cmp	r3, #10
 685 0036 09D8     		bhi	.L42
 686 0038 DFE803F0 		tbb	[pc, r3]
 687              	.L44:
 688 003c 0A       		.byte	(.L46-.L44)/2
 689 003d 0A       		.byte	(.L46-.L44)/2
 690 003e 0A       		.byte	(.L46-.L44)/2
 691 003f 0A       		.byte	(.L46-.L44)/2
 692 0040 0A       		.byte	(.L46-.L44)/2
 693 0041 0A       		.byte	(.L46-.L44)/2
 694 0042 0A       		.byte	(.L46-.L44)/2
 695 0043 0A       		.byte	(.L46-.L44)/2
 696 0044 0A       		.byte	(.L46-.L44)/2
 697 0045 0C       		.byte	(.L45-.L44)/2
 698 0046 0E       		.byte	(.L43-.L44)/2
 699 0047 00       		.p2align 1
 700              	.L41:
 296:quantum/send_string.c ****             break;
 701              		.loc 1 296 13 is_stmt 1 view .LVU182
 702 0048 4130     		adds	r0, r0, #65
 703              	.LVL76:
 296:quantum/send_string.c ****             break;
 704              		.loc 1 296 13 is_stmt 0 view .LVU183
 705 004a ECE7     		b	.L48
 706              	.LVL77:
 707              	.L42:
 302:quantum/send_string.c ****             break;
 708              		.loc 1 302 13 is_stmt 1 view .LVU184
 709 004c 3020     		movs	r0, #48
 710              	.LVL78:
 302:quantum/send_string.c ****             break;
 711              		.loc 1 302 13 is_stmt 0 view .LVU185
 712 004e EBE7     		b	.L47
 713              	.LVL79:
 714              	.L46:
 305:quantum/send_string.c ****             break;
 715              		.loc 1 305 13 is_stmt 1 view .LVU186
 716 0050 0438     		subs	r0, r0, #4
 717              	.LVL80:
 305:quantum/send_string.c ****             break;
 718              		.loc 1 305 13 is_stmt 0 view .LVU187
 719 0052 E8E7     		b	.L48
 720              	.LVL81:
 721              	.L45:
 308:quantum/send_string.c ****             break;
 722              		.loc 1 308 13 is_stmt 1 view .LVU188
 723 0054 2B20     		movs	r0, #43
 724              	.LVL82:
 308:quantum/send_string.c ****             break;
 725              		.loc 1 308 13 is_stmt 0 view .LVU189
 726 0056 E7E7     		b	.L47
 727              	.LVL83:
 728              	.L43:
 311:quantum/send_string.c ****             break;
 729              		.loc 1 311 13 is_stmt 1 view .LVU190
 730 0058 2F20     		movs	r0, #47
 731              	.LVL84:
 311:quantum/send_string.c ****             break;
 732              		.loc 1 311 13 is_stmt 0 view .LVU191
 733 005a E5E7     		b	.L47
 734              	.LVL85:
 735              	.L38:
 736              		.loc 1 314 1 view .LVU192
 737 005c 08BD     		pop	{r3, pc}
 738              		.cfi_endproc
 739              	.LFE305:
 741              		.weak	ascii_to_keycode_lut
 742              		.section	.rodata.ascii_to_keycode_lut,"a"
 745              	ascii_to_keycode_lut:
 746 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000*+(\000\000\000\000"
 746      00000000 
 746      2A2B2800 
 746      000000
 747 000f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000)\000"
 747      00000000 
 747      00000000 
 747      2900
 748 001d 0000002C 		.ascii	"\000\000\000,\0364 !\"$4&'%.6-78'\036\037 !\"#$%&33"
 748      1E342021 
 748      22243426 
 748      27252E36 
 748      2D373827 
 749 003c 362E3738 		.ascii	"6.78\037\004\005\006\007\010\011\012\013\014\015\016"
 749      1F040506 
 749      0708090A 
 749      0B0C0D0E 
 750 004c 0F101112 		.ascii	"\017\020\021\022\023\024\025\026\027\030\031\032\033"
 750      13141516 
 750      1718191A 
 750      1B
 751 0059 1C1D2F31 		.ascii	"\034\035/10#-5\004\005\006\007\010\011\012\013\014\015"
 751      30232D35 
 751      04050607 
 751      08090A0B 
 751      0C0D
 752 006b 0E0F1011 		.ascii	"\016\017\020\021\022\023\024\025\026\027\030\031\032"
 752      12131415 
 752      16171819 
 752      1A
 753 0078 1B1C1D2F 		.ascii	"\033\034\035/105L"
 753      3130354C 
 754              		.weak	ascii_to_dead_lut
 755              		.section	.rodata.ascii_to_dead_lut,"a"
 758              	ascii_to_dead_lut:
 759 0000 00000000 		.space	16
 759      00000000 
 759      00000000 
 759      00000000 
 760              		.weak	ascii_to_altgr_lut
 761              		.section	.rodata.ascii_to_altgr_lut,"a"
 764              	ascii_to_altgr_lut:
 765 0000 00000000 		.space	16
 765      00000000 
 765      00000000 
 765      00000000 
 766              		.weak	ascii_to_shift_lut
 767              		.section	.rodata.ascii_to_shift_lut,"a"
 770              	ascii_to_shift_lut:
 771 0000 00000000 		.ascii	"\000\000\000\000~\017\000\324\377\377\377\307\000\000"
 771      7E0F00D4 
 771      FFFFFFC7 
 771      0000
 772 000e 0078     		.ascii	"\000x"
 773              		.text
 774              	.Letext0:
 775              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 776              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 777              		.file 4 "./lib/chibios/os/rt/include/chtime.h"
 778              		.file 5 "/usr/arm-none-eabi/include/ctype.h"
 779              		.file 6 "quantum/send_string.h"
 780              		.file 7 "./lib/chibios/os/rt/include/chthreads.h"
 781              		.file 8 "quantum/action.h"
 782              		.file 9 "quantum/keycode.h"
 783              		.file 10 "quantum/sequencer/sequencer.h"
 784              		.file 11 "/usr/arm-none-eabi/include/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 send_string.c
     /tmp/ccNYTzc7.s:21     .text.send_char:0000000000000000 $t
     /tmp/ccNYTzc7.s:27     .text.send_char:0000000000000000 send_char
     /tmp/ccNYTzc7.s:170    .text.send_char:000000000000007c $d
     /tmp/ccNYTzc7.s:745    .rodata.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
     /tmp/ccNYTzc7.s:764    .rodata.ascii_to_altgr_lut:0000000000000000 ascii_to_altgr_lut
     /tmp/ccNYTzc7.s:758    .rodata.ascii_to_dead_lut:0000000000000000 ascii_to_dead_lut
     /tmp/ccNYTzc7.s:770    .rodata.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
     /tmp/ccNYTzc7.s:178    .text.send_string_with_delay:0000000000000000 $t
     /tmp/ccNYTzc7.s:184    .text.send_string_with_delay:0000000000000000 send_string_with_delay
     /tmp/ccNYTzc7.s:398    .text.send_string_with_delay:000000000000008c $d
     /tmp/ccNYTzc7.s:403    .text.send_string:0000000000000000 $t
     /tmp/ccNYTzc7.s:409    .text.send_string:0000000000000000 send_string
     /tmp/ccNYTzc7.s:426    .text.send_string_P:0000000000000000 $t
     /tmp/ccNYTzc7.s:432    .text.send_string_P:0000000000000000 send_string_P
     /tmp/ccNYTzc7.s:444    .text.send_string_with_delay_P:0000000000000000 $t
     /tmp/ccNYTzc7.s:450    .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
     /tmp/ccNYTzc7.s:462    .text.send_nibble:0000000000000000 $t
     /tmp/ccNYTzc7.s:468    .text.send_nibble:0000000000000000 send_nibble
     /tmp/ccNYTzc7.s:502    .text.send_byte:0000000000000000 $t
     /tmp/ccNYTzc7.s:508    .text.send_byte:0000000000000000 send_byte
     /tmp/ccNYTzc7.s:543    .text.send_word:0000000000000000 $t
     /tmp/ccNYTzc7.s:549    .text.send_word:0000000000000000 send_word
     /tmp/ccNYTzc7.s:584    .text.send_dword:0000000000000000 $t
     /tmp/ccNYTzc7.s:590    .text.send_dword:0000000000000000 send_dword
     /tmp/ccNYTzc7.s:626    .text.tap_random_base64:0000000000000000 $t
     /tmp/ccNYTzc7.s:632    .text.tap_random_base64:0000000000000000 tap_random_base64
     /tmp/ccNYTzc7.s:688    .text.tap_random_base64:000000000000003c $d
     /tmp/ccNYTzc7.s:759    .rodata.ascii_to_dead_lut:0000000000000000 $d
     /tmp/ccNYTzc7.s:765    .rodata.ascii_to_altgr_lut:0000000000000000 $d
     /tmp/ccNYTzc7.s:699    .text.tap_random_base64:0000000000000047 $d
     /tmp/ccNYTzc7.s:699    .text.tap_random_base64:0000000000000048 $t

UNDEFINED SYMBOLS
tap_code
register_code
unregister_code
chThdSleep
_ctype_
rand
