   1              	# 0 "lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S"
   2              	# 0 "<built-in>"
   3              	# 0 "<command-line>"
   4              	# 1 "././platforms/chibios/boards/GENERIC_STM32_F303XC/configs/bootloader_defs.h" 1
   1              	/* Address for jumping to bootloader on STM32 chips. */
   0              	
   1              	/*
   2              	Copyright 2012 Jun Wako <wakojun@gmail.com>
   3              	
   4              	This program is free software: you can redistribute it and/or modify
   5              	it under the terms of the GNU General Public License as published by
   6              	the Free Software Foundation, either version 2 of the License, or
   7              	(at your option) any later version.
   8              	
   9              	This program is distributed in the hope that it will be useful,
  10              	but WITHOUT ANY WARRANTY; without even the implied warranty of
  11              	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12              	GNU General Public License for more details.
  13              	
  14              	You should have received a copy of the GNU General Public License
  15              	along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16              	*/
  17              	
  18              	#ifndef CONFIG_H
  19              	#define CONFIG_H
  20              	
  21              	#include "config_common.h"
   1              	/* Copyright 2015-2018 Jack Humbert
   2              	 *
   3              	 * This program is free software: you can redistribute it and/or modify
   4              	 * it under the terms of the GNU General Public License as published by
   5              	 * the Free Software Foundation, either version 2 of the License, or
   6              	 * (at your option) any later version.
   7              	 *
   8              	 * This program is distributed in the hope that it will be useful,
   9              	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10              	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11              	 * GNU General Public License for more details.
  12              	 *
  13              	 * You should have received a copy of the GNU General Public License
  14              	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15              	 */
  16              	
  17              	#pragma once
  18              	
  19              	#ifndef __ASSEMBLER__
  20              	#    include "pin_defs.h"
  21              	#endif
  22              	
  23              	/* diode directions */
  24              	#define COL2ROW 0
  25              	#define ROW2COL 1
  26              	
  27              	// Deprecated alias - avoid using
  28              	//#define KEYMAP LAYOUT
  29              	
  30              	#include "song_list.h"
   1              	/* Any song or sound without a license explicitly stated is:
   2              	 *
   3              	 * Copyright 2016 Jack Humbert
   4              	 * Copyright 2017 Zach White
   5              	 *
   6              	 * This program is free software: you can redistribute it and/or modify
   7              	 * it under the terms of the GNU General Public License as published by
   8              	 * the Free Software Foundation, either version 2 of the License, or
   9              	 * (at your option) any later version.
  10              	 *
  11              	 * This program is distributed in the hope that it will be useful,
  12              	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	 * GNU General Public License for more details.
  15              	 *
  16              	 * You should have received a copy of the GNU General Public License
  17              	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	 */
  19              	#pragma once
  20              	
  21              	#include "musical_notes.h"
   1              	/* Copyright 2016 Jack Humbert
   2              	 * Copyright 2020 JohSchneider
   3              	 *
   4              	 * This program is free software: you can redistribute it and/or modify
   5              	 * it under the terms of the GNU General Public License as published by
   6              	 * the Free Software Foundation, either version 2 of the License, or
   7              	 * (at your option) any later version.
   8              	 *
   9              	 * This program is distributed in the hope that it will be useful,
  10              	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11              	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12              	 * GNU General Public License for more details.
  13              	 *
  14              	 * You should have received a copy of the GNU General Public License
  15              	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16              	 */
  17              	#pragma once
  18              	
  22              	
  31              	...
  22              	
   1              	/*
   2              	 * Copyright 2018 Jack Humbert <jack.humb@gmail.com>
   3              	 *
   4              	 * This program is free software: you can redistribute it and/or modify
   5              	 * it under the terms of the GNU General Public License as published by
   6              	 * the Free Software Foundation, either version 2 of the License, or
   7              	 * (at your option) any later version.
   8              	 *
   9              	 * This program is distributed in the hope that it will be useful,
  10              	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11              	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12              	 * GNU General Public License for more details.
  13              	 *
  14              	 * You should have received a copy of the GNU General Public License
  15              	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16              	 */
  17              	
  18              	#pragma once
  19              	
   1              	/* This file was generated by `qmk generate-config-h`. Do not edit or copy.
   2              	 */
   3              	
   4              	#pragma once
   5              	
   1              	/* This file was generated by `qmk generate-layouts`. Do not edit or copy.
   2              	 */
   3              	
   4              	#pragma once
   5              	
   1              	/* Copyright 2015-2021 Jack Humbert
   2              	 *
   3              	 * This program is free software: you can redistribute it and/or modify
   4              	 * it under the terms of the GNU General Public License as published by
   5              	 * the Free Software Foundation, either version 2 of the License, or
   6              	 * (at your option) any later version.
   7              	 *
   8              	 * This program is distributed in the hope that it will be useful,
   9              	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10              	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11              	 * GNU General Public License for more details.
  12              	 *
  13              	 * You should have received a copy of the GNU General Public License
  14              	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15              	 */
  16              	
  17              	#pragma once
  18              	
   1              	/* Copyright 2020 Nick Brassel (tzarc)
   2              	 *
   3              	 *  This program is free software: you can redistribute it and/or modify
   4              	 *  it under the terms of the GNU General Public License as published by
   5              	 *  the Free Software Foundation, either version 3 of the License, or
   6              	 *  (at your option) any later version.
   7              	 *
   8              	 *  This program is distributed in the hope that it will be useful,
   9              	 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  10              	 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11              	 *  GNU General Public License for more details.
  12              	 *
  13              	 *  You should have received a copy of the GNU General Public License
  14              	 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
  15              	 */
  16              	#pragma once
  17              	
   1              	/*
   2              	    ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3              	
   4              	    Licensed under the Apache License, Version 2.0 (the "License");
   5              	    you may not use this file except in compliance with the License.
   6              	    You may obtain a copy of the License at
   7              	
   8              	        http://www.apache.org/licenses/LICENSE-2.0
   9              	
  10              	    Unless required by applicable law or agreed to in writing, software
  11              	    distributed under the License is distributed on an "AS IS" BASIS,
  12              	    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13              	    See the License for the specific language governing permissions and
  14              	    limitations under the License.
  15              	*/
  16              	
  17              	/**
  18              	 * @file    crt0_v7m.S
  19              	 * @brief   Generic ARMv7-M (Cortex-M3/M4/M7) startup file for ChibiOS.
  20              	 *
  21              	 * @addtogroup ARMCMx_GCC_STARTUP_V7M
  22              	 * @{
  23              	 */
  24              	
  25              	/*===========================================================================*/
  26              	/* Module constants.                                                         */
  27              	/*===========================================================================*/
  28              	
  29              	#if !defined(FALSE) || defined(__DOXYGEN__)
  30              	#define FALSE                               0
  31              	#endif
  32              	
  33              	#if !defined(TRUE) || defined(__DOXYGEN__)
  34              	#define TRUE                                1
  35              	#endif
  36              	
  37              	#define CONTROL_MODE_PRIVILEGED             0
  38              	#define CONTROL_MODE_UNPRIVILEGED           1
  39              	#define CONTROL_USE_MSP                     0
  40              	#define CONTROL_USE_PSP                     2
  41              	#define CONTROL_FPCA                        4
  42              	
  43              	#define FPCCR_ASPEN                         (1 << 31)
  44              	#define FPCCR_LSPEN                         (1 << 30)
  45              	
  46              	#define SCB_VTOR                            0xE000ED08
  47              	#define SCB_CPACR                           0xE000ED88
  48              	#define SCB_FPCCR                           0xE000EF34
  49              	#define SCB_FPDSCR                          0xE000EF3C
  50              	
  51              	/*===========================================================================*/
  52              	/* Module pre-compile time settings.                                         */
  53              	/*===========================================================================*/
  54              	
  55              	/**
  56              	 * @brief   Enforces initialization of MSP.
  57              	 * @note    This is required if the boot process is not reliable for whatever
  58              	 *          reason (bad ROMs, bad bootloaders, bad debuggers=.
  59              	 */
  60              	#if !defined(CRT0_FORCE_MSP_INIT) || defined(__DOXYGEN__)
  61              	#define CRT0_FORCE_MSP_INIT                 TRUE
  62              	#endif
  63              	
  64              	/**
  65              	 * @brief   VTOR special register initialization.
  66              	 * @details VTOR is initialized to point to the vectors table.
  67              	 */
  68              	#if !defined(CRT0_VTOR_INIT) || defined(__DOXYGEN__)
  69              	#define CRT0_VTOR_INIT                      TRUE
  70              	#endif
  71              	
  72              	/**
  73              	 * @brief   FPU initialization switch.
  74              	 */
  75              	#if !defined(CRT0_INIT_FPU) || defined(__DOXYGEN__)
  76              	#if defined(CORTEX_USE_FPU) || defined(__DOXYGEN__)
  77              	#define CRT0_INIT_FPU                       CORTEX_USE_FPU
  78              	#else
  79              	#define CRT0_INIT_FPU                       FALSE
  80              	#endif
  81              	#endif
  82              	
  83              	/**
  84              	 * @brief   Control special register initialization value.
  85              	 * @details The system is setup to run in privileged mode using the PSP
  86              	 *          stack (dual stack mode).
  87              	 */
  88              	#if !defined(CRT0_CONTROL_INIT) || defined(__DOXYGEN__)
  89              	#define CRT0_CONTROL_INIT                   (CONTROL_USE_PSP |              \
  90              	                                             CONTROL_MODE_PRIVILEGED)
  91              	#endif
  92              	
  93              	/**
  94              	 * @brief   Core initialization switch.
  95              	 */
  96              	#if !defined(CRT0_INIT_CORE) || defined(__DOXYGEN__)
  97              	#define CRT0_INIT_CORE                      TRUE
  98              	#endif
  99              	
 100              	/**
 101              	 * @brief   Stack segments initialization switch.
 102              	 */
 103              	#if !defined(CRT0_STACKS_FILL_PATTERN) || defined(__DOXYGEN__)
 104              	#define CRT0_STACKS_FILL_PATTERN            0x55555555
 105              	#endif
 106              	
 107              	/**
 108              	 * @brief   Stack segments initialization switch.
 109              	 */
 110              	#if !defined(CRT0_INIT_STACKS) || defined(__DOXYGEN__)
 111              	#define CRT0_INIT_STACKS                    TRUE
 112              	#endif
 113              	
 114              	/**
 115              	 * @brief   DATA segment initialization switch.
 116              	 */
 117              	#if !defined(CRT0_INIT_DATA) || defined(__DOXYGEN__)
 118              	#define CRT0_INIT_DATA                      TRUE
 119              	#endif
 120              	
 121              	/**
 122              	 * @brief   BSS segment initialization switch.
 123              	 */
 124              	#if !defined(CRT0_INIT_BSS) || defined(__DOXYGEN__)
 125              	#define CRT0_INIT_BSS                       TRUE
 126              	#endif
 127              	
 128              	/**
 129              	 * @brief   RAM areas initialization switch.
 130              	 */
 131              	#if !defined(CRT0_INIT_RAM_AREAS) || defined(__DOXYGEN__)
 132              	#define CRT0_INIT_RAM_AREAS                 TRUE
 133              	#endif
 134              	
 135              	/**
 136              	 * @brief   Constructors invocation switch.
 137              	 */
 138              	#if !defined(CRT0_CALL_CONSTRUCTORS) || defined(__DOXYGEN__)
 139              	#define CRT0_CALL_CONSTRUCTORS              TRUE
 140              	#endif
 141              	
 142              	/**
 143              	 * @brief   Destructors invocation switch.
 144              	 */
 145              	#if !defined(CRT0_CALL_DESTRUCTORS) || defined(__DOXYGEN__)
 146              	#define CRT0_CALL_DESTRUCTORS               TRUE
 147              	#endif
 148              	
 149              	/**
 150              	 * @brief   FPU FPCCR register initialization value.
 151              	 * @note    Only used if @p CRT0_INIT_FPU is equal to @p TRUE.
 152              	 */
 153              	#if !defined(CRT0_FPCCR_INIT) || defined(__DOXYGEN__)
 154              	#define CRT0_FPCCR_INIT                     (FPCCR_ASPEN | FPCCR_LSPEN)
 155              	#endif
 156              	
 157              	/**
 158              	 * @brief   CPACR register initialization value.
 159              	 * @note    Only used if @p CRT0_INIT_FPU is equal to @p TRUE.
 160              	 */
 161              	#if !defined(CRT0_CPACR_INIT) || defined(__DOXYGEN__)
 162              	#define CRT0_CPACR_INIT                     0x00F00000
 163              	#endif
 164              	
 165              	/*===========================================================================*/
 166              	/* Code section.                                                             */
 167              	/*===========================================================================*/
 168              	
 169              	#if !defined(__DOXYGEN__)
 170              	
 171              	                .syntax unified
 172              	                .cpu    cortex-m3
 173              	#if CRT0_INIT_FPU == TRUE
 174              	                .fpu    fpv4-sp-d16
 175              	#else
 176              	                .fpu    softvfp
 177              	#endif
 178              	
 179              	                .thumb
 180              	                .text
 181              	
 182              	/*
 183              	 * CRT0 entry point.
 184              	 */
 185              	                .align  2
 186              	                .thumb_func
 187              	                .global _crt0_entry
 188              	_crt0_entry:
 189              	                /* Interrupts are globally masked initially.*/
 190:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 cpsid   i
 191              	
 192              	#if CRT0_FORCE_MSP_INIT == TRUE
 193              	                /* MSP stack pointers initialization.*/
 194:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r0, =__main_stack_end__
 195:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 msr     MSP, r0
 196              	#endif
 197              	
 198              	                /* PSP stack pointers initialization.*/
 199:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r0, =__process_stack_end__
 200:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 msr     PSP, r0
 201              	
 202              	#if CRT0_VTOR_INIT == TRUE
 203:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r0, =_vectors
 204:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movw    r1, #SCB_VTOR & 0xFFFF
 205:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movt    r1, #SCB_VTOR >> 16
 206:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 str     r0, [r1]
 207              	#endif
 208              	
 209              	#if CRT0_INIT_FPU == TRUE
 210              	                /* FPU FPCCR initialization.*/
 211:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 212:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movt    r0, #CRT0_FPCCR_INIT >> 16
 213:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movw    r1, #SCB_FPCCR & 0xFFFF
 214:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movt    r1, #SCB_FPCCR >> 16
 215:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 str     r0, [r1]
 216:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 dsb
 217:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 isb
 218              	
 219              	                /* CPACR initialization.*/
 220:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 221:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movt    r0, #CRT0_CPACR_INIT >> 16
 222:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movw    r1, #SCB_CPACR & 0xFFFF
 223:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movt    r1, #SCB_CPACR >> 16
 224:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 str     r0, [r1]
 225:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 dsb
 226:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 isb
 227              	
 228              	                /* FPU FPSCR initially cleared.*/
 229:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 mov     r0, #0
 230:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 vmsr    FPSCR, r0
 231              	
 232              	                /* FPU FPDSCR initially cleared.*/
 233:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movw    r1, #SCB_FPDSCR & 0xFFFF
 234:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movt    r1, #SCB_FPDSCR >> 16
 235:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 str     r0, [r1]
 236              	
 237              	                /* Enforcing FPCA bit in the CONTROL register.*/
 238:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 239              	
 240              	#else
 241              	                movs    r0, #CRT0_CONTROL_INIT
 242              	#endif
 243              	
 244              	                /* CONTROL register initialization as configured.*/
 245:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 msr     CONTROL, r0
 246:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 isb
 247              	
 248              	#if CRT0_INIT_CORE == TRUE
 249              	                /* Core initialization.*/
 250:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 bl      __core_init
 251              	#endif
 252              	
 253              	                /* Early initialization.*/
 254:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 bl      __early_init
 255              	
 256              	#if CRT0_INIT_STACKS == TRUE
 257:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r0, =CRT0_STACKS_FILL_PATTERN
 258              	                /* Main Stack initialization. Note, it assumes that the
 259              	                   stack size is a multiple of 4 so the linker file must
 260              	                   ensure this.*/
 261:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r1, =__main_stack_base__
 262:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r2, =__main_stack_end__
 263              	msloop:
 264:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 cmp     r1, r2
 265:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 itt     lo
 266:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 strlo   r0, [r1], #4
 267:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 blo     msloop
 268              	
 269              	                /* Process Stack initialization. Note, it assumes that the
 270              	                   stack size is a multiple of 4 so the linker file must
 271              	                   ensure this.*/
 272:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r1, =__process_stack_base__
 273:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r2, =__process_stack_end__
 274              	psloop:
 275:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 cmp     r1, r2
 276:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 itt     lo
 277:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 strlo   r0, [r1], #4
 278:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 blo     psloop
 279              	#endif
 280              	
 281              	#if CRT0_INIT_DATA == TRUE
 282              	                /* Data initialization. Note, it assumes that the DATA size
 283              	                  is a multiple of 4 so the linker file must ensure this.*/
 284:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r1, =__textdata_base__
 285:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r2, =__data_base__
 286:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r3, =__data_end__
 287              	dloop:
 288:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 cmp     r2, r3
 289:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ittt    lo
 290:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldrlo   r0, [r1], #4
 291:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 strlo   r0, [r2], #4
 292:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 blo     dloop
 293              	#endif
 294              	
 295              	#if CRT0_INIT_BSS == TRUE
 296              	                /* BSS initialization. Note, it assumes that the DATA size
 297              	                  is a multiple of 4 so the linker file must ensure this.*/
 298:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movs    r0, #0
 299:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r1, =__bss_base__
 300:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r2, =__bss_end__
 301              	bloop:
 302:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 cmp     r1, r2
 303:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 itt     lo
 304:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 strlo   r0, [r1], #4
 305:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 blo     bloop
 306              	#endif
 307              	
 308              	#if CRT0_INIT_RAM_AREAS == TRUE
 309              	                /* RAM areas initialization.*/
 310:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 bl      __init_ram_areas
 311              	#endif
 312              	
 313              	                /* Late initialization..*/
 314:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 bl      __late_init
 315              	
 316              	#if CRT0_CALL_CONSTRUCTORS == TRUE
 317              	                /* Constructors invocation.*/
 318:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r4, =__init_array_base__
 319:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r5, =__init_array_end__
 320              	initloop:
 321:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 cmp     r4, r5
 322:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 bge     endinitloop
 323:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r1, [r4], #4
 324:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 blx     r1
 325:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 b       initloop
 326              	endinitloop:
 327              	#endif
 328              	
 329              	                /* Main program invocation, r0 contains the returned value.*/
 330:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 bl      main
 331              	
 332              	#if CRT0_CALL_DESTRUCTORS == TRUE
 333              	                /* Destructors invocation.*/
 334:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r4, =__fini_array_base__
 335:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r5, =__fini_array_end__
 336              	finiloop:
 337:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 cmp     r4, r5
 338:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 bge     endfiniloop
 339:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r1, [r4], #4
 340:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 blx     r1
 341:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 b       finiloop
 342              	endfiniloop:
 343              	#endif
 344              	
 345              	                /* Branching to the defined exit handler.*/
 346:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 b       __default_exit
DEFINED SYMBOLS
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:185    .text:0000000000000000 $t
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:188    .text:0000000000000000 _crt0_entry
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:263    .text:000000000000007a msloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:274    .text:0000000000000088 psloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:287    .text:0000000000000098 dloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:301    .text:00000000000000ac bloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:320    .text:00000000000000c2 initloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:326    .text:00000000000000ce endinitloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:336    .text:00000000000000d6 finiloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:342    .text:00000000000000e2 endfiniloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:346    .text:00000000000000e6 $d
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:346    .text:00000000000000e8 $d

UNDEFINED SYMBOLS
__main_stack_end__
__process_stack_end__
_vectors
__core_init
__early_init
__main_stack_base__
__process_stack_base__
__textdata_base__
__data_base__
__data_end__
__bss_base__
__bss_end__
__init_ram_areas
__late_init
__init_array_base__
__init_array_end__
main
__fini_array_base__
__fini_array_end__
__default_exit
